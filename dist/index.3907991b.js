// modules are defined as an array
// [ module function, map of requires ]
//
// map of requires is short require name -> numeric require
//
// anything defined in a previous bundle is accessed via the
// orig method which is the require for previous bundles

(function (modules, entry, mainEntry, parcelRequireName, globalName) {
  /* eslint-disable no-undef */
  var globalObject =
    typeof globalThis !== 'undefined'
      ? globalThis
      : typeof self !== 'undefined'
      ? self
      : typeof window !== 'undefined'
      ? window
      : typeof global !== 'undefined'
      ? global
      : {};
  /* eslint-enable no-undef */

  // Save the require from previous bundle to this closure if any
  var previousRequire =
    typeof globalObject[parcelRequireName] === 'function' &&
    globalObject[parcelRequireName];

  var cache = previousRequire.cache || {};
  // Do not use `require` to prevent Webpack from trying to bundle this call
  var nodeRequire =
    typeof module !== 'undefined' &&
    typeof module.require === 'function' &&
    module.require.bind(module);

  function newRequire(name, jumped) {
    if (!cache[name]) {
      if (!modules[name]) {
        // if we cannot find the module within our internal map or
        // cache jump to the current global require ie. the last bundle
        // that was added to the page.
        var currentRequire =
          typeof globalObject[parcelRequireName] === 'function' &&
          globalObject[parcelRequireName];
        if (!jumped && currentRequire) {
          return currentRequire(name, true);
        }

        // If there are other bundles on this page the require from the
        // previous one is saved to 'previousRequire'. Repeat this as
        // many times as there are bundles until the module is found or
        // we exhaust the require chain.
        if (previousRequire) {
          return previousRequire(name, true);
        }

        // Try the node require function if it exists.
        if (nodeRequire && typeof name === 'string') {
          return nodeRequire(name);
        }

        var err = new Error("Cannot find module '" + name + "'");
        err.code = 'MODULE_NOT_FOUND';
        throw err;
      }

      localRequire.resolve = resolve;
      localRequire.cache = {};

      var module = (cache[name] = new newRequire.Module(name));

      modules[name][0].call(
        module.exports,
        localRequire,
        module,
        module.exports,
        this
      );
    }

    return cache[name].exports;

    function localRequire(x) {
      var res = localRequire.resolve(x);
      return res === false ? {} : newRequire(res);
    }

    function resolve(x) {
      var id = modules[name][1][x];
      return id != null ? id : x;
    }
  }

  function Module(moduleName) {
    this.id = moduleName;
    this.bundle = newRequire;
    this.exports = {};
  }

  newRequire.isParcelRequire = true;
  newRequire.Module = Module;
  newRequire.modules = modules;
  newRequire.cache = cache;
  newRequire.parent = previousRequire;
  newRequire.register = function (id, exports) {
    modules[id] = [
      function (require, module) {
        module.exports = exports;
      },
      {},
    ];
  };

  Object.defineProperty(newRequire, 'root', {
    get: function () {
      return globalObject[parcelRequireName];
    },
  });

  globalObject[parcelRequireName] = newRequire;

  for (var i = 0; i < entry.length; i++) {
    newRequire(entry[i]);
  }

  if (mainEntry) {
    // Expose entry point to Node, AMD or browser globals
    // Based on https://github.com/ForbesLindesay/umd/blob/master/template.js
    var mainExports = newRequire(mainEntry);

    // CommonJS
    if (typeof exports === 'object' && typeof module !== 'undefined') {
      module.exports = mainExports;

      // RequireJS
    } else if (typeof define === 'function' && define.amd) {
      define(function () {
        return mainExports;
      });

      // <script>
    } else if (globalName) {
      this[globalName] = mainExports;
    }
  }
})({"2PqY3":[function(require,module,exports) {
"use strict";
var global = arguments[3];
var HMR_HOST = null;
var HMR_PORT = null;
var HMR_SECURE = false;
var HMR_ENV_HASH = "42036d7a98ade5a7";
module.bundle.HMR_BUNDLE_ID = "5d57051a3907991b";
/* global HMR_HOST, HMR_PORT, HMR_ENV_HASH, HMR_SECURE, chrome, browser, globalThis, __parcel__import__, __parcel__importScripts__, ServiceWorkerGlobalScope */ /*::
import type {
  HMRAsset,
  HMRMessage,
} from '@parcel/reporter-dev-server/src/HMRServer.js';
interface ParcelRequire {
  (string): mixed;
  cache: {|[string]: ParcelModule|};
  hotData: mixed;
  Module: any;
  parent: ?ParcelRequire;
  isParcelRequire: true;
  modules: {|[string]: [Function, {|[string]: string|}]|};
  HMR_BUNDLE_ID: string;
  root: ParcelRequire;
}
interface ParcelModule {
  hot: {|
    data: mixed,
    accept(cb: (Function) => void): void,
    dispose(cb: (mixed) => void): void,
    // accept(deps: Array<string> | string, cb: (Function) => void): void,
    // decline(): void,
    _acceptCallbacks: Array<(Function) => void>,
    _disposeCallbacks: Array<(mixed) => void>,
  |};
}
interface ExtensionContext {
  runtime: {|
    reload(): void,
    getURL(url: string): string;
    getManifest(): {manifest_version: number, ...};
  |};
}
declare var module: {bundle: ParcelRequire, ...};
declare var HMR_HOST: string;
declare var HMR_PORT: string;
declare var HMR_ENV_HASH: string;
declare var HMR_SECURE: boolean;
declare var chrome: ExtensionContext;
declare var browser: ExtensionContext;
declare var __parcel__import__: (string) => Promise<void>;
declare var __parcel__importScripts__: (string) => Promise<void>;
declare var globalThis: typeof self;
declare var ServiceWorkerGlobalScope: Object;
*/ var OVERLAY_ID = "__parcel__error__overlay__";
var OldModule = module.bundle.Module;
function Module(moduleName) {
    OldModule.call(this, moduleName);
    this.hot = {
        data: module.bundle.hotData,
        _acceptCallbacks: [],
        _disposeCallbacks: [],
        accept: function(fn) {
            this._acceptCallbacks.push(fn || function() {});
        },
        dispose: function(fn) {
            this._disposeCallbacks.push(fn);
        }
    };
    module.bundle.hotData = undefined;
}
module.bundle.Module = Module;
var checkedAssets, acceptedAssets, assetsToAccept /*: Array<[ParcelRequire, string]> */ ;
function getHostname() {
    return HMR_HOST || (location.protocol.indexOf("http") === 0 ? location.hostname : "localhost");
}
function getPort() {
    return HMR_PORT || location.port;
} // eslint-disable-next-line no-redeclare
var parent = module.bundle.parent;
if ((!parent || !parent.isParcelRequire) && typeof WebSocket !== "undefined") {
    var hostname = getHostname();
    var port = getPort();
    var protocol = HMR_SECURE || location.protocol == "https:" && !/localhost|127.0.0.1|0.0.0.0/.test(hostname) ? "wss" : "ws";
    var ws = new WebSocket(protocol + "://" + hostname + (port ? ":" + port : "") + "/"); // Web extension context
    var extCtx = typeof chrome === "undefined" ? typeof browser === "undefined" ? null : browser : chrome; // Safari doesn't support sourceURL in error stacks.
    // eval may also be disabled via CSP, so do a quick check.
    var supportsSourceURL = false;
    try {
        (0, eval)('throw new Error("test"); //# sourceURL=test.js');
    } catch (err) {
        supportsSourceURL = err.stack.includes("test.js");
    } // $FlowFixMe
    ws.onmessage = async function(event) {
        checkedAssets = {} /*: {|[string]: boolean|} */ ;
        acceptedAssets = {} /*: {|[string]: boolean|} */ ;
        assetsToAccept = [];
        var data = JSON.parse(event.data);
        if (data.type === "update") {
            // Remove error overlay if there is one
            if (typeof document !== "undefined") removeErrorOverlay();
            let assets = data.assets.filter((asset)=>asset.envHash === HMR_ENV_HASH); // Handle HMR Update
            let handled = assets.every((asset)=>{
                return asset.type === "css" || asset.type === "js" && hmrAcceptCheck(module.bundle.root, asset.id, asset.depsByBundle);
            });
            if (handled) {
                console.clear(); // Dispatch custom event so other runtimes (e.g React Refresh) are aware.
                if (typeof window !== "undefined" && typeof CustomEvent !== "undefined") window.dispatchEvent(new CustomEvent("parcelhmraccept"));
                await hmrApplyUpdates(assets);
                for(var i = 0; i < assetsToAccept.length; i++){
                    var id = assetsToAccept[i][1];
                    if (!acceptedAssets[id]) hmrAcceptRun(assetsToAccept[i][0], id);
                }
            } else fullReload();
        }
        if (data.type === "error") {
            // Log parcel errors to console
            for (let ansiDiagnostic of data.diagnostics.ansi){
                let stack = ansiDiagnostic.codeframe ? ansiDiagnostic.codeframe : ansiDiagnostic.stack;
                console.error("\uD83D\uDEA8 [parcel]: " + ansiDiagnostic.message + "\n" + stack + "\n\n" + ansiDiagnostic.hints.join("\n"));
            }
            if (typeof document !== "undefined") {
                // Render the fancy html overlay
                removeErrorOverlay();
                var overlay = createErrorOverlay(data.diagnostics.html); // $FlowFixMe
                document.body.appendChild(overlay);
            }
        }
    };
    ws.onerror = function(e) {
        console.error(e.message);
    };
    ws.onclose = function() {
        console.warn("[parcel] \uD83D\uDEA8 Connection to the HMR server was lost");
    };
}
function removeErrorOverlay() {
    var overlay = document.getElementById(OVERLAY_ID);
    if (overlay) {
        overlay.remove();
        console.log("[parcel] \u2728 Error resolved");
    }
}
function createErrorOverlay(diagnostics) {
    var overlay = document.createElement("div");
    overlay.id = OVERLAY_ID;
    let errorHTML = '<div style="background: black; opacity: 0.85; font-size: 16px; color: white; position: fixed; height: 100%; width: 100%; top: 0px; left: 0px; padding: 30px; font-family: Menlo, Consolas, monospace; z-index: 9999;">';
    for (let diagnostic of diagnostics){
        let stack = diagnostic.frames.length ? diagnostic.frames.reduce((p, frame)=>{
            return `${p}
<a href="/__parcel_launch_editor?file=${encodeURIComponent(frame.location)}" style="text-decoration: underline; color: #888" onclick="fetch(this.href); return false">${frame.location}</a>
${frame.code}`;
        }, "") : diagnostic.stack;
        errorHTML += `
      <div>
        <div style="font-size: 18px; font-weight: bold; margin-top: 20px;">
          🚨 ${diagnostic.message}
        </div>
        <pre>${stack}</pre>
        <div>
          ${diagnostic.hints.map((hint)=>"<div>\uD83D\uDCA1 " + hint + "</div>").join("")}
        </div>
        ${diagnostic.documentation ? `<div>📝 <a style="color: violet" href="${diagnostic.documentation}" target="_blank">Learn more</a></div>` : ""}
      </div>
    `;
    }
    errorHTML += "</div>";
    overlay.innerHTML = errorHTML;
    return overlay;
}
function fullReload() {
    if ("reload" in location) location.reload();
    else if (extCtx && extCtx.runtime && extCtx.runtime.reload) extCtx.runtime.reload();
}
function getParents(bundle, id) /*: Array<[ParcelRequire, string]> */ {
    var modules = bundle.modules;
    if (!modules) return [];
    var parents = [];
    var k, d, dep;
    for(k in modules)for(d in modules[k][1]){
        dep = modules[k][1][d];
        if (dep === id || Array.isArray(dep) && dep[dep.length - 1] === id) parents.push([
            bundle,
            k
        ]);
    }
    if (bundle.parent) parents = parents.concat(getParents(bundle.parent, id));
    return parents;
}
function updateLink(link) {
    var newLink = link.cloneNode();
    newLink.onload = function() {
        if (link.parentNode !== null) // $FlowFixMe
        link.parentNode.removeChild(link);
    };
    newLink.setAttribute("href", link.getAttribute("href").split("?")[0] + "?" + Date.now()); // $FlowFixMe
    link.parentNode.insertBefore(newLink, link.nextSibling);
}
var cssTimeout = null;
function reloadCSS() {
    if (cssTimeout) return;
    cssTimeout = setTimeout(function() {
        var links = document.querySelectorAll('link[rel="stylesheet"]');
        for(var i = 0; i < links.length; i++){
            // $FlowFixMe[incompatible-type]
            var href = links[i].getAttribute("href");
            var hostname = getHostname();
            var servedFromHMRServer = hostname === "localhost" ? new RegExp("^(https?:\\/\\/(0.0.0.0|127.0.0.1)|localhost):" + getPort()).test(href) : href.indexOf(hostname + ":" + getPort());
            var absolute = /^https?:\/\//i.test(href) && href.indexOf(location.origin) !== 0 && !servedFromHMRServer;
            if (!absolute) updateLink(links[i]);
        }
        cssTimeout = null;
    }, 50);
}
function hmrDownload(asset) {
    if (asset.type === "js") {
        if (typeof document !== "undefined") {
            let script = document.createElement("script");
            script.src = asset.url + "?t=" + Date.now();
            if (asset.outputFormat === "esmodule") script.type = "module";
            return new Promise((resolve, reject)=>{
                var _document$head;
                script.onload = ()=>resolve(script);
                script.onerror = reject;
                (_document$head = document.head) === null || _document$head === void 0 || _document$head.appendChild(script);
            });
        } else if (typeof importScripts === "function") {
            // Worker scripts
            if (asset.outputFormat === "esmodule") return import(asset.url + "?t=" + Date.now());
            else return new Promise((resolve, reject)=>{
                try {
                    importScripts(asset.url + "?t=" + Date.now());
                    resolve();
                } catch (err) {
                    reject(err);
                }
            });
        }
    }
}
async function hmrApplyUpdates(assets) {
    global.parcelHotUpdate = Object.create(null);
    let scriptsToRemove;
    try {
        // If sourceURL comments aren't supported in eval, we need to load
        // the update from the dev server over HTTP so that stack traces
        // are correct in errors/logs. This is much slower than eval, so
        // we only do it if needed (currently just Safari).
        // https://bugs.webkit.org/show_bug.cgi?id=137297
        // This path is also taken if a CSP disallows eval.
        if (!supportsSourceURL) {
            let promises = assets.map((asset)=>{
                var _hmrDownload;
                return (_hmrDownload = hmrDownload(asset)) === null || _hmrDownload === void 0 ? void 0 : _hmrDownload.catch((err)=>{
                    // Web extension bugfix for Chromium
                    // https://bugs.chromium.org/p/chromium/issues/detail?id=1255412#c12
                    if (extCtx && extCtx.runtime && extCtx.runtime.getManifest().manifest_version == 3) {
                        if (typeof ServiceWorkerGlobalScope != "undefined" && global instanceof ServiceWorkerGlobalScope) {
                            extCtx.runtime.reload();
                            return;
                        }
                        asset.url = extCtx.runtime.getURL("/__parcel_hmr_proxy__?url=" + encodeURIComponent(asset.url + "?t=" + Date.now()));
                        return hmrDownload(asset);
                    }
                    throw err;
                });
            });
            scriptsToRemove = await Promise.all(promises);
        }
        assets.forEach(function(asset) {
            hmrApply(module.bundle.root, asset);
        });
    } finally{
        delete global.parcelHotUpdate;
        if (scriptsToRemove) scriptsToRemove.forEach((script)=>{
            if (script) {
                var _document$head2;
                (_document$head2 = document.head) === null || _document$head2 === void 0 || _document$head2.removeChild(script);
            }
        });
    }
}
function hmrApply(bundle, asset) {
    var modules = bundle.modules;
    if (!modules) return;
    if (asset.type === "css") reloadCSS();
    else if (asset.type === "js") {
        let deps = asset.depsByBundle[bundle.HMR_BUNDLE_ID];
        if (deps) {
            if (modules[asset.id]) {
                // Remove dependencies that are removed and will become orphaned.
                // This is necessary so that if the asset is added back again, the cache is gone, and we prevent a full page reload.
                let oldDeps = modules[asset.id][1];
                for(let dep in oldDeps)if (!deps[dep] || deps[dep] !== oldDeps[dep]) {
                    let id = oldDeps[dep];
                    let parents = getParents(module.bundle.root, id);
                    if (parents.length === 1) hmrDelete(module.bundle.root, id);
                }
            }
            if (supportsSourceURL) // Global eval. We would use `new Function` here but browser
            // support for source maps is better with eval.
            (0, eval)(asset.output);
             // $FlowFixMe
            let fn = global.parcelHotUpdate[asset.id];
            modules[asset.id] = [
                fn,
                deps
            ];
        } else if (bundle.parent) hmrApply(bundle.parent, asset);
    }
}
function hmrDelete(bundle, id1) {
    let modules = bundle.modules;
    if (!modules) return;
    if (modules[id1]) {
        // Collect dependencies that will become orphaned when this module is deleted.
        let deps = modules[id1][1];
        let orphans = [];
        for(let dep in deps){
            let parents = getParents(module.bundle.root, deps[dep]);
            if (parents.length === 1) orphans.push(deps[dep]);
        } // Delete the module. This must be done before deleting dependencies in case of circular dependencies.
        delete modules[id1];
        delete bundle.cache[id1]; // Now delete the orphans.
        orphans.forEach((id)=>{
            hmrDelete(module.bundle.root, id);
        });
    } else if (bundle.parent) hmrDelete(bundle.parent, id1);
}
function hmrAcceptCheck(bundle, id, depsByBundle) {
    if (hmrAcceptCheckOne(bundle, id, depsByBundle)) return true;
     // Traverse parents breadth first. All possible ancestries must accept the HMR update, or we'll reload.
    let parents = getParents(module.bundle.root, id);
    let accepted = false;
    while(parents.length > 0){
        let v = parents.shift();
        let a = hmrAcceptCheckOne(v[0], v[1], null);
        if (a) // If this parent accepts, stop traversing upward, but still consider siblings.
        accepted = true;
        else {
            // Otherwise, queue the parents in the next level upward.
            let p = getParents(module.bundle.root, v[1]);
            if (p.length === 0) {
                // If there are no parents, then we've reached an entry without accepting. Reload.
                accepted = false;
                break;
            }
            parents.push(...p);
        }
    }
    return accepted;
}
function hmrAcceptCheckOne(bundle, id, depsByBundle) {
    var modules = bundle.modules;
    if (!modules) return;
    if (depsByBundle && !depsByBundle[bundle.HMR_BUNDLE_ID]) {
        // If we reached the root bundle without finding where the asset should go,
        // there's nothing to do. Mark as "accepted" so we don't reload the page.
        if (!bundle.parent) return true;
        return hmrAcceptCheck(bundle.parent, id, depsByBundle);
    }
    if (checkedAssets[id]) return true;
    checkedAssets[id] = true;
    var cached = bundle.cache[id];
    assetsToAccept.push([
        bundle,
        id
    ]);
    if (!cached || cached.hot && cached.hot._acceptCallbacks.length) return true;
}
function hmrAcceptRun(bundle, id) {
    var cached = bundle.cache[id];
    bundle.hotData = {};
    if (cached && cached.hot) cached.hot.data = bundle.hotData;
    if (cached && cached.hot && cached.hot._disposeCallbacks.length) cached.hot._disposeCallbacks.forEach(function(cb) {
        cb(bundle.hotData);
    });
    delete bundle.cache[id];
    bundle(id);
    cached = bundle.cache[id];
    if (cached && cached.hot && cached.hot._acceptCallbacks.length) cached.hot._acceptCallbacks.forEach(function(cb) {
        var assetsToAlsoAccept = cb(function() {
            return getParents(module.bundle.root, id);
        });
        if (assetsToAlsoAccept && assetsToAccept.length) // $FlowFixMe[method-unbinding]
        assetsToAccept.push.apply(assetsToAccept, assetsToAlsoAccept);
    });
    acceptedAssets[id] = true;
}

},{}],"20BJq":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "events", ()=>events);
parcelHelpers.export(exports, "accounts", ()=>accounts);
parcelHelpers.export(exports, "status", ()=>status);
var _localforage = require("localforage");
var _localforageDefault = parcelHelpers.interopDefault(_localforage);
var _helperJs = require("./assets/js/helper.js");
var _getMoonPhaseJs = require("./assets/js/getMoonPhase.js");
var _eximportJs = require("./assets/js/eximport.js");
var _scanJs = require("./assets/js/scan.js");
var _mithril = require("mithril");
var _mithrilDefault = parcelHelpers.interopDefault(_mithril);
var _tsdavJs = require("./assets/js/tsdav.js");
var _uid = require("uid");
"use strict";
var moment = require("moment-timezone");
let events = [];
let accounts = [];
(0, _localforageDefault.default).setDriver((0, _localforageDefault.default).LOCALSTORAGE);
let callback_caldata_loaded = function() {};
let calendar_names = [
    {
        name: "local",
        id: "local-id",
        data: ""
    }
];
/*
let empty = [];
localforage
  .setItem("events", empty)
  .then(function (value) {})
  .catch(function (err) {
    console.log(err);
  });
*/ let style_calendar_cell = function() {
    document.querySelectorAll("div.calendar-cell").forEach(function(e) {
        let p = e.getAttribute("data-date");
        if (event_check(p).event == true) e.classList.add("event");
        if (rrule_check(p).rrule) e.classList.add("event");
    });
};
let load_caldav = function(action) {
    accounts.forEach(function(item) {
        const client = new (0, _tsdavJs.DAVClient)({
            serverUrl: item.server_url,
            credentials: {
                username: item.user,
                password: item.password
            },
            authMethod: "Basic",
            defaultAccountType: "caldav"
        });
        (async ()=>{
            try {
                await client.login();
            } catch (e) {
                //load cached data
                (0, _helperJs.toaster)("load cached data", 5000);
                (0, _localforageDefault.default).getItem(item.id).then(function(w) {
                    w.forEach((b)=>{
                        b.objects.forEach((m)=>{
                            (0, _eximportJs.parse_ics)(m.data, callback_caldata_loaded, false, false, b.etag, b.url, item.id);
                        });
                    });
                    (0, _helperJs.toaster)("load cached data", 5000);
                }).catch(function(err) {
                    console.log(err);
                });
                if (e.message == "Invalid credentials") (0, _helperJs.toaster)("there was a problem logging into your account " + item.name + " please check your account details", 5000);
            }
            try {
                document.getElementById("icon-loading").style.opacity = 100;
                const calendars = await client.fetchCalendars();
                let k = [];
                for(let i1 = 0; i1 < calendars.length; i1++){
                    const objects = await client.fetchCalendarObjects({
                        calendar: calendars[i1]
                    });
                    let data_to_store = {
                        "displayName": calendars[i1].displayName,
                        "syncToken": calendars[i1].syncToken,
                        "ctag": calendars[i1].ctag,
                        "url": calendars[i1].url,
                        "objects": objects
                    };
                    k.push(data_to_store); //add cal name to list
                    calendar_names.push({
                        name: calendars[i1].displayName,
                        id: item.id
                    }); //cache caldata
                    (0, _localforageDefault.default).setItem(item.id, k).then(function() {}).catch(function(err) {
                        console.log(err);
                    }); //parse data
                    objects.forEach(function(i) {
                        (0, _eximportJs.parse_ics)(i.data, callback_caldata_loaded, false, false, i.etag, i.url, item.id);
                    });
                    document.getElementById("icon-loading").style.opacity = 0;
                    style_calendar_cell();
                }
            } catch (e1) {
                console.log(e1);
            }
        })();
    });
};
let sync_caldav = function() {
    accounts.forEach(function(item) {
        const client = new (0, _tsdavJs.DAVClient)({
            serverUrl: item.server_url,
            credentials: {
                username: item.user,
                password: item.password
            },
            authMethod: "Basic",
            defaultAccountType: "caldav"
        });
        (async ()=>{
            try {
                await client.login();
            } catch (e) {
                if (e.message == "Invalid credentials") (0, _helperJs.toaster)("there was a problem logging into your account " + item.name + " please check your account details", 5000);
            }
            try {
                const value = await (0, _localforageDefault.default).getItem(item.id);
                for(let i = 0; i < value.length; i++){
                    let s = {
                        oldCalendars: [
                            value[i].objects
                        ],
                        detailedResult: true,
                        headers: client.authHeaders
                    };
                    try {
                        const ma = await client.syncCalendars(s);
                    } catch (e) {
                        console.log(e);
                    }
                }
            } catch (err) {
                console.log(err);
            }
        })();
    });
};
let create_caldav = function(event_data, calendar_id, calendar_name, event) {
    (0, _helperJs.popup)("Please wait...", "show");
    accounts.forEach(function(p) {
        if (p.id == calendar_id) {
            const client = new (0, _tsdavJs.DAVClient)({
                serverUrl: p.server_url,
                credentials: {
                    username: p.user,
                    password: p.password
                },
                authMethod: "Basic",
                defaultAccountType: "caldav"
            });
            (async ()=>{
                try {
                    let n = await client.login();
                } catch (e) {
                    if (e.message == "Invalid credentials") (0, _helperJs.toaster)("there was a problem logging into your account " + item.name + " please check your account details", 5000);
                }
                try {
                    const calendars = await client.fetchCalendars();
                    for(let i = 0; i < calendars.length; i++)if (calendars[i].displayName == calendar_name) {
                        i = calendars.length;
                        const result = await client.createCalendarObject({
                            //headers: client.authHeaders,
                            calendar: calendars[0],
                            filename: (0, _uid.uid)(16) + ".ics",
                            iCalString: event_data,
                            headers: {
                                "content-type": "text/calendar; charset=utf-8",
                                "authorization": client.authHeaders.authorization
                            }
                        });
                        if (result.ok) {
                            try {
                                const [res] = await client.propfind({
                                    url: result.url,
                                    props: {
                                        [`${(0, _tsdavJs.DAVNamespaceShort).DAV}:getetag`]: {}
                                    },
                                    depth: "0",
                                    headers: client.authHeaders
                                });
                                event.etag = res.props.getetag;
                            } catch (e) {
                                console.log(e);
                            }
                            events.push(event);
                            setTimeout(function() {
                                (0, _helperJs.popup)("", "close");
                                (0, _mithrilDefault.default).route.set("/page_calendar");
                            }, 5000);
                        } else {
                            (0, _helperJs.popup)("There was a problem saving, please try again later.", "show");
                            setTimeout(function() {
                                (0, _helperJs.popup)("", "close");
                            }, 5000);
                        }
                    }
                } catch (e2) {
                /*
          popup("There was a problem saving, please try again later.", "show");
          setTimeout(function () {
            popup("", "close");
          }, 5000);
          */ }
            })();
        }
    });
};
let delete_caldav = function(etag, url, account_id, uid) {
    (0, _helperJs.popup)("Please wait...", "show");
    accounts.forEach(function(p) {
        if (p.id == account_id) {
            const client = new (0, _tsdavJs.DAVClient)({
                serverUrl: p.server_url,
                credentials: {
                    username: p.user,
                    password: p.password
                },
                authMethod: "Basic",
                defaultAccountType: "caldav"
            });
            (async ()=>{
                try {
                    await client.login();
                } catch (e) {
                    if (e.message == "Invalid credentials") (0, _helperJs.toaster)("there was a problem logging into your account " + item.name + " please check your account details", 5000);
                }
                try {
                    const result = await client.deleteCalendarObject({
                        calendarObject: {
                            url: url,
                            etag: etag
                        },
                        headers: client.authHeaders
                    });
                    if (result.ok) setTimeout(function() {
                        (0, _helperJs.popup)("", "close");
                        let temp = events;
                        events = "";
                        events = temp.filter((person)=>person.UID != uid);
                        remove_alarm(uid);
                        clear_form();
                        (0, _mithrilDefault.default).route.set("/page_calendar");
                    }, 5000);
                    else {
                        (0, _helperJs.popup)("There was a problem saving, please try again later.", "show");
                        setTimeout(function() {
                            (0, _helperJs.popup)("", "close");
                        }, 5000);
                    }
                } catch (e3) {
                    (0, _helperJs.popup)("There was a problem deleting, please try again later.", "show");
                    setTimeout(function() {
                        (0, _helperJs.popup)("", "close");
                    }, 5000);
                }
            })();
        }
    });
};
let update_caldav = function(etag, url, data, account_id) {
    (0, _helperJs.popup)("Please wait...", "show");
    accounts.forEach(function(p) {
        if (p.id == account_id) {
            const client = new (0, _tsdavJs.DAVClient)({
                serverUrl: p.server_url,
                credentials: {
                    username: p.user,
                    password: p.password
                },
                authMethod: "Basic",
                defaultAccountType: "caldav"
            });
            (async ()=>{
                try {
                    await client.login();
                } catch (e) {
                    if (e.message == "Invalid credentials") (0, _helperJs.toaster)("there was a problem logging into your account " + item.name + " please check your account details", 5000);
                }
                try {
                    const result = await client.updateCalendarObject({
                        calendarObject: {
                            url: url,
                            data: data,
                            etag: etag
                        },
                        headers: client.authHeaders
                    });
                    if (result.ok) {
                        //get new ETAG
                        try {
                            const [res] = await client.propfind({
                                url: result.url,
                                props: {
                                    [`${(0, _tsdavJs.DAVNamespaceShort).DAV}:getetag`]: {}
                                },
                                depth: "0",
                                headers: client.authHeaders
                            });
                            events.map((item)=>{
                                if (item.etag === etag) {
                                    item.etag = res.props.getetag;
                                    return item.etag;
                                } else return item;
                            });
                        } catch (e) {
                            console.log(e);
                        }
                        setTimeout(function() {
                            (0, _helperJs.popup)("", "close");
                            (0, _mithrilDefault.default).route.set("/page_calendar");
                        }, 5000);
                    } else {
                        (0, _helperJs.popup)("There was a problem saving, please try again later.", "show");
                        setTimeout(function() {
                            (0, _helperJs.popup)("", "close");
                        }, 5000);
                    }
                } catch (e4) {
                    (0, _helperJs.popup)("There was a problem saving, please try again later.", "show");
                    setTimeout(function() {
                        (0, _helperJs.popup)("", "close");
                    }, 5000);
                }
            })();
        }
    });
};
let load_subscriptions = function() {
    if (subscriptions == null || subscriptions.lenght == -1 || subscriptions == "undefined") return false;
    for(let i = 0; i < subscriptions.length; i++)(0, _eximportJs.fetch_ics)(subscriptions[i].url, "", subscriptions[i].id);
    setTimeout(()=>{
        jump_to_today();
        (0, _helperJs.sort_array)(events, "dateStart", "date");
    }, 1000);
    event_slider(document.activeElement.getAttribute("data-date"));
    if (document.activeElement.hasAttribute("data-date")) status.selected_day = document.activeElement.getAttribute("data-date");
}; //load accounts data
(0, _localforageDefault.default).getItem("accounts").then(function(value) {
    if (value == null) {
        accounts = [];
        return false;
    }
    accounts = value;
    load_caldav(); //sync_caldav();
}).catch(function(err) {
    console.log(err);
}); //get event data
let get_event_date = function() {
    status.selected_day_id = document.activeElement.getAttribute("data-id");
    update_event_date = events.filter(function(arr) {
        return arr.UID == status.selected_day_id;
    })[0];
};
let months = [
    "Jan",
    "Feb",
    "Mar",
    "Apr",
    "May",
    "Jun",
    "Jul",
    "Aug",
    "Sep",
    "Oct",
    "Nov",
    "Dec"
];
let weekday = [
    "Sun",
    "Mon",
    "Tue",
    "Wed",
    "Thu",
    "Fri",
    "Sat"
];
let subscriptions = [];
let today = new Date();
let currentMonth = today.getMonth();
let currentYear = today.getFullYear();
let currentDay = today.getDate();
let update_event_date;
let status = {
    selected_day: "",
    visible: false,
    update_event_id: ""
};
let settings = {
    default_notification: "",
    ads: "",
    timezone: moment.tz.guess()
};
let blob = "";
let load_settings = function() {
    (0, _localforageDefault.default).getItem("settings").then(function(value) {
        if (value == null) return false;
        settings = value;
    }).catch(function(err) {
        console.log(err);
    });
};
load_settings(); //ads || ads free
//KaioOs ads
let getManifest = function(callback) {
    if (!navigator.mozApps) return false;
    let self1 = navigator.mozApps.getSelf();
    self1.onsuccess = function() {
        callback(self1.result);
    };
    self1.onerror = function() {};
};
let self; //KaiOs store true||false
function manifest(a) {
    self = a.origin;
    document.getElementById("version").innerText = "Version: " + a.manifest.version;
    if (a.installOrigin == "app://kaios-plus.kaiostech.com") settings.ads = true;
    else settings.ads = false;
}
getManifest(manifest); // ////////
// finde closest event to selected date in list view
// ////////
let find_closest_date = function(search_term) {
    let search = new Date(status.selected_day).getTime(); //equal
    for(let i = 0; i < events.length; i++){
        let item = new Date(events[i].dateStart).getTime();
        if (search == item) {
            t = events[i].dateStart;
            i = events.length;
        }
    } //between
    if (t == 0) {
        for(let i = 0; i < events.length - 1; i++)if (search > new Date(events[i].dateStart).getTime()) {
            t = events[i].dateStart;
            i = events.length;
        }
    } //default
    if (t == 0) {
        console.log("no match");
        t = events[0].dateStart;
    }
    document.querySelectorAll("article[data-date='" + t + "']")[0].focus();
    return t;
}; // check if has event
let event_check = function(date) {
    let feedback = {
        event: false
    };
    for(let t1 = 0; t1 < events.length; t1++)if (typeof events[t1] === "object") {
        feedback.event = false;
        feedback.subscription = false;
        feedback.multidayevent = false;
        feedback.rrule = false;
        let a = new Date(events[t1].dateStart).getTime();
        let b = new Date(events[t1].dateEnd).getTime();
        let c = new Date(date).getTime();
        let d1 = events[t1].rrule_;
        if (a === c) {
            feedback.event = true;
            t1 = events.length;
            return feedback;
        }
        if (d1 === "none" || d1 === "" || d1 === undefined || d1 === "DAILY") {
            if (a === c || a < c && b > c) {
                feedback.event = true;
                if (events[t1].allDay && events[t1].dateEnd == date) feedback.event = false;
                if (events[t1].time_end == "00:00:00" && events[t1].allDay) feedback.event = false;
                 // t = events.length;
                return feedback;
            }
        }
    }
    return feedback;
}; // check if has recur event
let rrule_check = function(date) {
    let feedback = {
        date: "",
        event: false,
        subscription: false,
        multidayevent: false,
        rrule: "none"
    };
    for(let t2 = 0; t2 < events.length; t2++)if (typeof events[t2] === "object") {
        feedback.event = false;
        feedback.subscription = false;
        feedback.multidayevent = false;
        feedback.rrule = false;
        feedback.date = date;
        let a = new Date(events[t2].dateStart).getTime();
        let b = new Date(events[t2].dateEnd).getTime();
        let c = new Date(date).getTime();
        let d2 = events[t2].rrule_;
        let e = events[t2].RRULE; //recurrences
        if (typeof e !== "undefined" && e !== undefined && e != null) {
            if (a === c || b === c || a < c && b > c) {
                if (d2 == "MONTHLY") {
                    if (new Date(events[t2].dateStart).getDate() === new Date(date).getDate()) {
                        feedback.event = true;
                        feedback.rrule = true;
                        t2 = events.length;
                        return false;
                    }
                }
                if (d2 == "DAILY") {
                    feedback.rrule = true;
                    feedback.event = true;
                    t2 = events.length;
                    return feedback;
                }
                if (d2 == "WEEKLY") {
                    if (new Date(events[t2].dateStart).getDay() === new Date(date).getDay()) {
                        feedback.rrule = true;
                        feedback.event = true;
                        t2 = events.length;
                        return feedback;
                    }
                }
                if (d2 == "YEARLY") {
                    let tt = new Date(events[t2].dateStart);
                    let pp = new Date(date);
                    if (tt.getDate() + "-" + tt.getMonth() === pp.getDate() + "-" + pp.getMonth()) {
                        feedback.rrule = true;
                        feedback.event = true;
                        t2 = events.length;
                        return feedback;
                    }
                }
            }
        }
    }
    return feedback;
}; //////////////////
//event slider
///////////
let slider = [];
let slider_index = 0;
let slider_navigation = function() {
    slider_index++;
    if (slider_index > document.querySelectorAll("div#event-slider article").length - 1) slider_index = 0;
    let p = document.querySelectorAll("div#event-slider-indicator div div");
    console.log(document.querySelectorAll("div#event-slider article").length - 1 + "/" + slider_index);
    document.querySelectorAll("div#event-slider article").forEach(function(item) {
        item.style.display = "none";
    });
    document.querySelectorAll("div#event-slider article")[slider_index].style.display = "block";
    p.forEach(function(item) {
        item.classList.remove("active");
    });
    p[slider_index].classList.add("active");
}; ////
let event_slider = function(date) {
    slider = [];
    let k = document.querySelector("div#event-slider-indicator div");
    k.innerHTML = "";
    document.querySelector("div#event-slider").innerHTML = "";
    for(let i = 0; i < events.length; i++){
        let a = new Date(events[i].dateStart).getTime();
        let b = new Date(events[i].dateEnd).getTime();
        let c = new Date(date).getTime();
        let d3 = events[i].rrule_;
        if (d3 === "none" || d3 === "" || d3 === undefined) {
            if (a === c || a < c && b > c) {
                events[i].time_end == "00:00:00" && events[i].dateEnd;
                slider.push(events[i]);
                k.insertAdjacentHTML("beforeend", "<div class='indicator'></div>");
            }
        } else if (a === c || b === c || a < c && b > c) {
            //recurrences
            //YEAR
            if (d3 == "YEARLY") {
                let tt = new Date(events[i].dateStart);
                let pp = new Date(date);
                if (tt.getDate() + "-" + tt.getMonth() === pp.getDate() + "-" + pp.getMonth()) {
                    slider.push(events[i]);
                    k.insertAdjacentHTML("beforeend", "<div class='indicator'></div>");
                }
            } //WEEK
            if (d3 == "WEEKLY") {
                if (new Date(events[i].dateStart).getDay() == new Date(date).getDay()) {
                    slider.push(events[i]);
                    k.insertAdjacentHTML("beforeend", "<div class='indicator'></div>");
                }
            } //MONTH
            if (d3 == "MONTHLY") {
                if (new Date(item[i].item.dateStart).getDate() == new Date(date).getDate()) {
                    slider.push(events[i]);
                    k.insertAdjacentHTML("beforeend", "<div class='indicator'></div>");
                }
            }
            if (d3 == "DAILY") {
                if (a === c || b === c || a < c && b > c) {
                    slider.push(events[i]);
                    k.insertAdjacentHTML("beforeend", "<div class='indicator'></div>");
                }
            }
        }
    }
    if (slider != "") {
        slider.forEach(function(item) {
            document.querySelector("div#event-slider").insertAdjacentHTML("beforeend", "<article>" + item.SUMMARY + "</article>");
        });
        if (slider >= 0) document.querySelector("div#event-slider article")[0].style.display = "block";
        if (slider >= 0) document.querySelectorAll("div#event-slider .indicator")[0].style.classList.add = "active";
    }
}; ////
// JUMP TO TODAY
////
let jump_to_today = function() {
    let currentMonth1 = today.getMonth();
    let currentYear1 = today.getFullYear();
    showCalendar(currentMonth1, currentYear1);
    event_slider(status.selected_day);
    status.selected_day = document.activeElement.getAttribute("data-date");
};
function next() {
    currentYear = currentMonth === 11 ? currentYear + 1 : currentYear;
    currentMonth = (currentMonth + 1) % 12;
    showCalendar(currentMonth, currentYear);
    event_slider(status.selected_day);
}
function previous() {
    currentYear = currentMonth === 0 ? currentYear - 1 : currentYear;
    currentMonth = currentMonth === 0 ? 11 : currentMonth - 1;
    showCalendar(currentMonth, currentYear);
    event_slider(status.selected_day);
} //////////////
//BUILD CALENDAR
//////////////
// get weeknumber
Date.prototype.getWeek = function() {
    var date = new Date(this.getTime());
    date.setHours(0, 0, 0, 0); // Thursday in current week decides the year.
    date.setDate(date.getDate() + 3 - (date.getDay() + 6) % 7); // January 4 is always in week 1.
    var week1 = new Date(date.getFullYear(), 0, 4); // Adjust to Thursday in week 1 and count number of weeks from date to week1.
    return 1 + Math.round(((date.getTime() - week1.getTime()) / 86400000 - 3 + (week1.getDay() + 6) % 7) / 7);
};
let showCalendar = function(month, year) {
    let firstDay = new Date(year, month).getDay();
    let daysInMonth = 32 - new Date(year, month, 32).getDate();
    let tbl = document.getElementById("calendar-body"); // clearing all previous cells
    tbl.innerHTML = ""; // filing data about month and in the page via DOM.
    document.getElementById("monthAndYear").innerHTML = months[month] + " " + year; // creating all cells
    let date = 1;
    for(let i = 0; i < 6; i++){
        // creates a table row
        let row = document.createElement("div");
        row.classList.add("flex");
        row.classList.add("row");
        row.classList.add("width-100"); // creating individual cells, filing them up with data.
        for(let j = 0; j < 7; j++){
            if (i === 0 && j < firstDay) {
                let cell = document.createElement("div");
                let cellText = document.createTextNode("");
                cell.appendChild(cellText);
                row.appendChild(cell);
            } else if (date > daysInMonth) break;
            else {
                let cell = document.createElement("div");
                let span = document.createElement("span");
                let moon = document.createElement("div");
                let cellText = document.createTextNode(date);
                cell.appendChild(cellText);
                cell.appendChild(span); // set tabindex
                cell.setAttribute("tabindex", date - 1);
                cell.classList.add("calendar-cell"); // store date with leading 0
                // because input type date
                // accept only day month with leading zero
                let mmonth = `0${month + 1}`.slice(-2);
                let day = `0${date}`.slice(-2);
                let p = year + "-" + mmonth + "-" + day;
                moon.classList.add("moon-phase-" + (0, _getMoonPhaseJs.getMoonPhase)(year, month, date));
                cell.appendChild(moon);
                cell.setAttribute("data-date", p);
                cell.setAttribute("data-index", new Date(p).toISOString()); // check if has event
                if (events.length > 0) {
                    if (event_check(p).event == true) cell.classList.add("event");
                    if (rrule_check(p).rrule) cell.classList.add("event");
                }
                cell.classList.add("item");
                row.appendChild(cell);
                date++;
            }
        } // add weeknumbers
        let week = document.createElement("span");
        week.classList.add("weeknumber");
        let weekText = document.createTextNode(new Date(year, month, date).getWeek());
        week.appendChild(weekText);
        row.appendChild(week); //add row
        tbl.appendChild(row);
    }
    document.querySelectorAll(".item")[0].focus();
    status.selected_day = document.activeElement.getAttribute("data-date"); // highlight current day
    if (today.getMonth() == month && today.getFullYear() == year) {
        document.querySelectorAll(".item")[currentDay - 1].focus();
        document.querySelectorAll(".item")[currentDay - 1].classList.add("today");
    }
};
let clear_form = function() {
    document.querySelectorAll("div#add-edit-event input").forEach(function(e) {
        e.value = ""; // document.getElementById("form-image").src = "";
        blob = "";
    });
};
/*
// /////////////////
// /VIEWS
// ///////////////
*/ var root = document.getElementById("app");
var page_calendar = {
    view: function() {
        return (0, _mithrilDefault.default)("div", {
            class: "width-100 height-100",
            id: "calendar"
        }, [
            (0, _mithrilDefault.default)("div", {
                class: "flex justify-content-spacebetween",
                id: ""
            }, [
                (0, _mithrilDefault.default)("h3", {
                    class: "card-header",
                    id: "monthAndYear"
                }),
                (0, _mithrilDefault.default)("div", {
                    id: "icon-loading"
                }, "loading"),
                (0, _mithrilDefault.default)("div", {
                    id: "time",
                    oncreate: function(e) {
                        setInterval(function() {
                            document.getElementById("time").innerText = (0, _helperJs.get_time)();
                        }, 3600);
                    }
                }, "")
            ]),
            (0, _mithrilDefault.default)("div", {
                class: "calendar-head flex width-100"
            }, [
                (0, _mithrilDefault.default)("div", "Sun"),
                (0, _mithrilDefault.default)("div", "Mon"),
                (0, _mithrilDefault.default)("div", "Tue"),
                (0, _mithrilDefault.default)("div", "Wed"),
                (0, _mithrilDefault.default)("div", "Thu"),
                (0, _mithrilDefault.default)("div", "Fri"),
                (0, _mithrilDefault.default)("div", "Sat")
            ]),
            (0, _mithrilDefault.default)("div", {
                id: "calendar-body"
            }),
            (0, _mithrilDefault.default)("div", {
                id: "event-slider",
                class: "flex"
            }, [
                (0, _mithrilDefault.default)("div", {
                    id: "slider-inner",
                    class: "flex"
                })
            ]),
            (0, _mithrilDefault.default)("div", {
                id: "event-slider-indicator",
                class: "flex width-100 justify-content-spacearound"
            }, [
                (0, _mithrilDefault.default)("div", {
                    class: "flex justify-content-spacearound"
                })
            ])
        ]);
    },
    oncreate: ({ dom  })=>setTimeout(function() {
            dom.focus();
            if (document.activeElement.hasAttribute("data-date")) status.selected_day = document.activeElement.getAttribute("data-date");
            (0, _helperJs.bottom_bar)("add", "events", "options");
            if (status.selected_day != "") {
                let t3 = new Date(status.selected_day);
                currentMonth = t3.getMonth();
                currentYear = t3.getFullYear();
            }
            let k = status.selected_day;
            document.querySelectorAll("div#calendar-body div.item").forEach(function(item) {
                if (item.getAttribute("data-date") == k) {
                    item.focus();
                    event_slider(k);
                }
            });
            showCalendar(currentMonth, currentYear);
            if (document.activeElement.hasAttribute("data-date")) status.selected_day = document.activeElement.getAttribute("data-date");
            (0, _helperJs.bottom_bar)("add", "events", "options");
            let t4 = new Date(status.selected_day);
            currentMonth = t4.getMonth();
            currentYear = t4.getFullYear();
            showCalendar(currentMonth, currentYear);
            document.querySelectorAll("div#calendar-body div.item").forEach(function(item) {
                if (item.getAttribute("data-date") == k) {
                    item.focus();
                    event_slider(k);
                }
            });
            clear_form();
        }, 500)
};
var page_events = {
    view: function(vnode) {
        return (0, _mithrilDefault.default)("div", {
            id: "events-wrapper",
            oncreate: ()=>setTimeout(function() {
                    find_closest_date();
                    (0, _helperJs.bottom_bar)("edit", "calendar", "");
                }, 1500)
        }, [
            events.map(function(item, index) {
                (0, _helperJs.bottom_bar)("edit", "calendar", "");
                return (0, _mithrilDefault.default)("article", {
                    class: "item events " + item.isSubscription,
                    tabindex: index,
                    "data-id": item.UID,
                    "data-date": item.dateStart,
                    "data-time-start": item.time_start,
                    "data-time-end": item.time_end,
                    "data-date-end": item.dateEnd,
                    "data-rrule": item.rrule_,
                    "data-multidayevent": item.multidayevent,
                    "data-alarm": item.alarm
                }, [
                    (0, _mithrilDefault.default)("div", {
                        class: "icons-bar"
                    }, [
                        (0, _mithrilDefault.default)("img", {
                            class: "bell",
                            src: "assets/image/bell.svg"
                        }),
                        (0, _mithrilDefault.default)("div", {
                            class: "date"
                        }, item.dateStart),
                        (0, _mithrilDefault.default)("div", {
                            class: "time"
                        }, item.time_start),
                        (0, _mithrilDefault.default)("h2", {
                            class: "time"
                        }, item.SUMMARY),
                        (0, _mithrilDefault.default)("div", item.LOCATION),
                        (0, _mithrilDefault.default)("div", {
                            class: "description"
                        }, item.DESCRIPTION)
                    ])
                ]);
            })
        ]);
    }
};
var page_options = {
    view: function() {
        return (0, _mithrilDefault.default)("div", {
            id: "options"
        }, [
            (0, _mithrilDefault.default)("h2", "Key assignment"),
            (0, _mithrilDefault.default)("ul", {
                id: "keys",
                class: "item",
                tabindex: "0",
                oncreate: function({ dom  }) {
                    dom.focus();
                }
            }, [
                (0, _mithrilDefault.default)("li", [
                    (0, _mithrilDefault.default)("span", "1 & 3")
                ], "Months"),
                (0, _mithrilDefault.default)("li", [
                    (0, _mithrilDefault.default)("span", "2")
                ], "Event slider"),
                (0, _mithrilDefault.default)("li", [
                    (0, _mithrilDefault.default)("span", "Enter")
                ], "Events/Month"),
                (0, _mithrilDefault.default)("li", [
                    (0, _mithrilDefault.default)("span", "#")
                ], "Moon"),
                (0, _mithrilDefault.default)("li", [
                    (0, _mithrilDefault.default)("span", "*")
                ], "Jump to today"),
                (0, _mithrilDefault.default)("li", [
                    (0, _mithrilDefault.default)("span", {
                        class: "keys-current-day"
                    }, "")
                ], "current day"),
                (0, _mithrilDefault.default)("li", [
                    (0, _mithrilDefault.default)("span", {
                        class: "keys-day-event"
                    }, "")
                ], "day with event")
            ]),
            (0, _mithrilDefault.default)("h2", "settings"),
            (0, _mithrilDefault.default)("div", {
                class: "item input-parent",
                id: "event-notification-time-wrapper",
                tabindex: "1"
            }, [
                (0, _mithrilDefault.default)("label", {
                    for: "default-notification"
                }, "default Notification"),
                (0, _mithrilDefault.default)("select", {
                    id: "default-notification-time",
                    onchange: function() {
                        store_settings();
                    },
                    oncreate: function() {
                        load_settings();
                        setTimeout(function() {
                            document.querySelector("#default-notification-time").value = settings.default_notification;
                        }, 1000);
                    }
                }, [
                    (0, _mithrilDefault.default)("option", {
                        value: "none"
                    }, "none"),
                    (0, _mithrilDefault.default)("option", {
                        value: "5"
                    }, "5 minutes"),
                    (0, _mithrilDefault.default)("option", {
                        value: "10"
                    }, "10 minutes"),
                    (0, _mithrilDefault.default)("option", {
                        value: "30"
                    }, "30 minutes"),
                    (0, _mithrilDefault.default)("option", {
                        value: "1440"
                    }, "1 Day")
                ])
            ]),
            (0, _mithrilDefault.default)("button", {
                class: "item",
                tabindex: "2",
                onclick: function() {
                    backup_events();
                }
            }, "Backup events"),
            (0, _mithrilDefault.default)("h2", "Subscriptions"),
            (0, _mithrilDefault.default)("button", {
                class: "item",
                tabindex: "3",
                onclick: function() {
                    (0, _mithrilDefault.default).route.set("/page_subscriptions");
                }
            }, "add subscription"),
            (0, _mithrilDefault.default)("div", {
                id: "subscription-text"
            }, "Your subscriptions"),
            subscriptions.map(function(item, index) {
                return (0, _mithrilDefault.default)("button", {
                    class: "item subscriptions-item",
                    "data-id": item.id,
                    "data-action": "delete-subscription",
                    tabindex: index + 4,
                    onblur: function() {
                        (0, _helperJs.bottom_bar)("", "", "");
                    },
                    onfocus: function() {
                        (0, _helperJs.bottom_bar)("delete", "", "");
                    }
                }, item.name);
            }),
            (0, _mithrilDefault.default)("h2", "Accounts"),
            (0, _mithrilDefault.default)("button", {
                class: "item",
                tabindex: subscriptions.length + 4,
                onclick: function() {
                    (0, _mithrilDefault.default).route.set("/page_accounts");
                }
            }, "add account"),
            (0, _mithrilDefault.default)("div", {
                id: "subscription-text"
            }, "Your accounts"),
            accounts.map(function(item, index) {
                return (0, _mithrilDefault.default)("button", {
                    class: "item subscriptions-item",
                    "data-id": item.id,
                    "data-action": "delete-account",
                    tabindex: index + subscriptions.length + 5,
                    onblur: function() {
                        (0, _helperJs.bottom_bar)("", "", "");
                    },
                    onfocus: function() {
                        (0, _helperJs.bottom_bar)("delete", "", "");
                    }
                }, item.name);
            }),
            (0, _mithrilDefault.default)("div", {
                id: "KaiOsAds-Wrapper",
                tabindex: subscriptions.length + accounts.length + 4,
                class: "item",
                onfocus: function() {
                    (0, _helperJs.bottom_bar)("", "open", "");
                    document.getElementById("KaiOsAd").style.border = "2px solid red";
                },
                onblur: function() {
                    (0, _helperJs.bottom_bar)("delete", "", "");
                },
                onclick: function() {
                    (0, _helperJs.bottom_bar)("", "open", "");
                }
            }, [
                (0, _mithrilDefault.default)("iframe", {
                    oncreate: function() {
                        if (settings.ads == true) document.querySelector("#KaiOsAds-Wrapper iframe").src = "./ads.html";
                        else document.querySelector("#KaiOsAds-Wrapper").remove();
                    }
                })
            ])
        ]);
    },
    oncreate: function() {
        (0, _helperJs.bottom_bar)("", "", "");
    }
};
var page_subscriptions = {
    view: function() {
        return (0, _mithrilDefault.default)("div", {
            id: "subscription-form"
        }, [
            (0, _mithrilDefault.default)("div", {
                class: "item input-parent",
                tabindex: "0",
                oncreate: function({ dom  }) {
                    dom.focus();
                }
            }, [
                (0, _mithrilDefault.default)("label", {
                    for: "description"
                }, "subscription name"),
                (0, _mithrilDefault.default)("input", {
                    placeholder: "Name",
                    type: "text",
                    id: "cal-subs-name"
                })
            ]),
            (0, _mithrilDefault.default)("div", {
                class: "item input-parent",
                tabindex: "1",
                onblur: function() {
                    (0, _helperJs.bottom_bar)("", "", "");
                }
            }, [
                (0, _mithrilDefault.default)("label", {
                    for: "description"
                }, "subscription url"),
                (0, _mithrilDefault.default)("input", {
                    placeholder: "URL",
                    type: "text",
                    id: "cal-subs-url",
                    "data-scan-action": "true",
                    onfocus: function() {
                        (0, _helperJs.bottom_bar)("qr-scan", "", "");
                    },
                    onblur: function() {
                        (0, _helperJs.bottom_bar)("", "", "");
                    }
                })
            ]),
            (0, _mithrilDefault.default)("button", {
                class: "item",
                tabindex: "2",
                onclick: function() {
                    store_subscription();
                }
            }, "save")
        ]);
    }
};
var page_accounts = {
    view: function() {
        return (0, _mithrilDefault.default)("div", {
            id: "account-form"
        }, [
            (0, _mithrilDefault.default)("div", {
                class: "item input-parent",
                tabindex: "0",
                oncreate: function({ dom  }) {
                    dom.focus();
                }
            }, [
                (0, _mithrilDefault.default)("label", {
                    for: "description"
                }, "account name"),
                (0, _mithrilDefault.default)("input", {
                    placeholder: "Name",
                    type: "text",
                    id: "account-name"
                })
            ]),
            (0, _mithrilDefault.default)("div", {
                class: "item input-parent",
                tabindex: "1",
                onblur: function() {
                    (0, _helperJs.bottom_bar)("", "", "");
                }
            }, [
                (0, _mithrilDefault.default)("label", {
                    for: "description"
                }, "server"),
                (0, _mithrilDefault.default)("input", {
                    placeholder: "URL",
                    type: "text",
                    id: "account-url",
                    "data-scan-action": "true",
                    onfocus: function() {
                        (0, _helperJs.bottom_bar)("qr-scan", "", "");
                    },
                    onblur: function() {
                        (0, _helperJs.bottom_bar)("", "", "");
                    }
                })
            ]),
            (0, _mithrilDefault.default)("div", {
                class: "item input-parent",
                tabindex: "2",
                onblur: function() {
                    (0, _helperJs.bottom_bar)("", "", "");
                }
            }, [
                (0, _mithrilDefault.default)("label", {
                    for: "description"
                }, "username"),
                (0, _mithrilDefault.default)("input", {
                    placeholder: "username",
                    type: "url",
                    id: "account-username",
                    "data-scan-action": "true",
                    onfocus: function() {
                        (0, _helperJs.bottom_bar)("qr-scan", "", "");
                    },
                    onblur: function() {
                        (0, _helperJs.bottom_bar)("", "", "");
                    }
                })
            ]),
            (0, _mithrilDefault.default)("div", {
                class: "item input-parent",
                tabindex: "3",
                onblur: function() {
                    (0, _helperJs.bottom_bar)("", "", "");
                }
            }, [
                (0, _mithrilDefault.default)("label", {
                    for: "description"
                }, "password"),
                (0, _mithrilDefault.default)("input", {
                    placeholder: "password",
                    type: "password",
                    id: "account-password",
                    "data-scan-action": "true",
                    onfocus: function() {
                        (0, _helperJs.bottom_bar)("qr-scan", "", "");
                    },
                    onblur: function() {
                        (0, _helperJs.bottom_bar)("", "", "");
                    }
                })
            ]),
            (0, _mithrilDefault.default)("button", {
                class: "item",
                tabindex: "4",
                onclick: function() {
                    store_account();
                }
            }, "save")
        ]);
    }
};
var page_add_event = {
    view: function() {
        return (0, _mithrilDefault.default)("div", {
            id: "add-edit-event",
            tabindex: "0"
        }, [
            (0, _mithrilDefault.default)("div", {
                class: "item input-parent",
                tabindex: 0,
                oncreate: ({ dom  })=>setTimeout(function() {
                        dom.focus();
                        console.log("tz" + moment.tz.guess());
                        settings.timezone = moment.tz.guess();
                    }, 500)
            }, [
                (0, _mithrilDefault.default)("label", {
                    for: "event-title"
                }, "title"),
                (0, _mithrilDefault.default)("input", {
                    placeholder: "",
                    type: "text",
                    id: "event-title",
                    oncreate: function() {
                        load_settings();
                    }
                })
            ]),
            (0, _mithrilDefault.default)("div", {
                class: "item input-parent",
                tabindex: "1"
            }, [
                (0, _mithrilDefault.default)("label", {
                    for: "event-location"
                }, "Location"),
                (0, _mithrilDefault.default)("input", {
                    placeholder: "",
                    type: "text",
                    id: "event-location"
                })
            ]),
            (0, _mithrilDefault.default)("div", {
                class: "item input-parent",
                tabindex: "2"
            }, [
                (0, _mithrilDefault.default)("label", {
                    for: "event-date"
                }, "Start Date"),
                (0, _mithrilDefault.default)("input", {
                    placeholder: "YYYY-MM-DD",
                    type: "date",
                    id: "event-date",
                    value: status.selected_day
                })
            ]),
            (0, _mithrilDefault.default)("div", {
                class: "item input-parent",
                tabindex: "3"
            }, [
                (0, _mithrilDefault.default)("label", {
                    for: "event-date-end"
                }, "End Date"),
                (0, _mithrilDefault.default)("input", {
                    placeholder: "YYYY-MM-DD",
                    type: "date",
                    id: "event-date-end"
                })
            ]),
            (0, _mithrilDefault.default)("div", {
                class: "item input-parent",
                tabindex: "4"
            }, [
                (0, _mithrilDefault.default)("label", {
                    for: "event-time-start"
                }, "Start Time"),
                (0, _mithrilDefault.default)("input", {
                    placeholder: "hh:mm:ss",
                    type: "time",
                    id: "event-time-start",
                    value: new Date().getHours() + ":" + new Date().getMinutes() + ":" + new Date().getSeconds()
                })
            ]),
            (0, _mithrilDefault.default)("div", {
                class: "item input-parent",
                tabindex: "5"
            }, [
                (0, _mithrilDefault.default)("label", {
                    for: "event-time-end"
                }, "End Time"),
                (0, _mithrilDefault.default)("input", {
                    placeholder: "hh:mm:ss",
                    type: "time",
                    id: "event-time-end"
                })
            ]),
            (0, _mithrilDefault.default)("div", {
                class: "item input-parent",
                tabindex: "6"
            }, [
                (0, _mithrilDefault.default)("label", {
                    for: "event-description"
                }, "Description"),
                (0, _mithrilDefault.default)("input", {
                    placeholder: "",
                    type: "text",
                    id: "event-description"
                })
            ]),
            (0, _mithrilDefault.default)("div", {
                class: "item input-parent",
                id: "event-notification-time-wrapper",
                tabindex: "7"
            }, [
                (0, _mithrilDefault.default)("label", {
                    for: "notification"
                }, "Notification"),
                (0, _mithrilDefault.default)("select", {
                    id: "event-notification-time",
                    oncreate: function() {
                        setTimeout(function() {
                            document.querySelector("#event-notification-time").value = settings.default_notification;
                        }, 2000);
                    }
                }, [
                    (0, _mithrilDefault.default)("option", {
                        value: "none"
                    }, "none"),
                    (0, _mithrilDefault.default)("option", {
                        value: "5"
                    }, "5 minutes"),
                    (0, _mithrilDefault.default)("option", {
                        value: "10"
                    }, "10 minutes"),
                    (0, _mithrilDefault.default)("option", {
                        value: "30"
                    }, "30 minutes"),
                    (0, _mithrilDefault.default)("option", {
                        value: "1440"
                    }, "1 Day")
                ])
            ]),
            (0, _mithrilDefault.default)("div", {
                class: "item input-parent",
                id: "event-recur-wrapper",
                tabindex: "8"
            }, [
                (0, _mithrilDefault.default)("label", {
                    for: "notification"
                }, "Recur"),
                (0, _mithrilDefault.default)("select", {
                    id: "event-recur"
                }, [
                    (0, _mithrilDefault.default)("option", {
                        value: "none"
                    }, "none"),
                    (0, _mithrilDefault.default)("option", {
                        value: "DAILY"
                    }, "Daily"),
                    (0, _mithrilDefault.default)("option", {
                        value: "WEEKLY"
                    }, "Weekly"),
                    (0, _mithrilDefault.default)("option", {
                        value: "MONTHLY"
                    }, "Monthly"),
                    (0, _mithrilDefault.default)("option", {
                        value: "YEARLY"
                    }, "Yearly")
                ])
            ]),
            /*
    m(
      "button",
      { class: "item", tabindex: "", id: "select-image", tabindex: "9" },
      "add image"
    ),
    m("div", { id: "form-image-wrapper" }, [
      m("img", { id: "form-image", "data-blob": "" }),
    ]),
    */ (0, _mithrilDefault.default)("div", {
                class: "item input-parent",
                id: "event-calendar-wrapper",
                tabindex: "9"
            }, [
                (0, _mithrilDefault.default)("label", {
                    for: "notification"
                }, "Calendars"),
                (0, _mithrilDefault.default)("select", {
                    id: "event-calendar"
                }, [
                    calendar_names.map(function(item, index) {
                        return (0, _mithrilDefault.default)("option", {
                            value: item.id,
                            "data-calendar-data": item.data
                        }, item.name);
                    })
                ])
            ]),
            (0, _mithrilDefault.default)("button", {
                tabindex: "10",
                id: "save-event",
                class: "item",
                onclick: function() {
                    let n = document.getElementById("event-calendar");
                    store_event(n.options[n.selectedIndex].value, n.options[n.selectedIndex].text);
                }
            }, "save")
        ]);
    },
    oncreate: function() {
        (0, _helperJs.bottom_bar)("", "", "");
    }
};
var page_edit_event = {
    view: function() {
        return (0, _mithrilDefault.default)("div", {
            id: "add-edit-event"
        }, [
            (0, _mithrilDefault.default)("div", {
                class: "item input-parent",
                tabindex: 0,
                oncreate: ({ dom  })=>setTimeout(function() {
                        dom.focus();
                    }, 500)
            }, [
                (0, _mithrilDefault.default)("label", {
                    for: "event-title"
                }, "title"),
                (0, _mithrilDefault.default)("input", {
                    placeholder: "",
                    type: "text",
                    id: "event-title",
                    value: update_event_date.SUMMARY
                })
            ]),
            (0, _mithrilDefault.default)("div", {
                class: "item input-parent",
                tabindex: "1"
            }, [
                (0, _mithrilDefault.default)("label", {
                    for: "event-location"
                }, "Location"),
                (0, _mithrilDefault.default)("input", {
                    placeholder: "",
                    type: "text",
                    id: "event-location",
                    value: update_event_date.LOCATION
                })
            ]),
            (0, _mithrilDefault.default)("div", {
                class: "item input-parent",
                tabindex: "2"
            }, [
                (0, _mithrilDefault.default)("label", {
                    for: "event-date"
                }, "Start Date"),
                (0, _mithrilDefault.default)("input", {
                    placeholder: "YYYY-MM-DD",
                    type: "date",
                    id: "event-date",
                    value: update_event_date.dateStart
                })
            ]),
            (0, _mithrilDefault.default)("div", {
                class: "item input-parent",
                tabindex: "3"
            }, [
                (0, _mithrilDefault.default)("label", {
                    for: "event-date-end"
                }, "End Date"),
                (0, _mithrilDefault.default)("input", {
                    placeholder: "YYYY-MM-DD",
                    type: "date",
                    id: "event-date-end",
                    value: update_event_date.dateEnd
                })
            ]),
            (0, _mithrilDefault.default)("div", {
                class: "item input-parent",
                tabindex: "4"
            }, [
                (0, _mithrilDefault.default)("label", {
                    for: "event-time-start"
                }, "Start Time"),
                (0, _mithrilDefault.default)("input", {
                    placeholder: "hh:mm:ss",
                    type: "time",
                    id: "event-time-start",
                    value: update_event_date.time_start
                })
            ]),
            (0, _mithrilDefault.default)("div", {
                class: "item input-parent",
                tabindex: "5"
            }, [
                (0, _mithrilDefault.default)("label", {
                    for: "event-time-end"
                }, "End Time"),
                (0, _mithrilDefault.default)("input", {
                    placeholder: "hh:mm:ss",
                    type: "time",
                    id: "event-time-end",
                    value: update_event_date.time_end
                })
            ]),
            (0, _mithrilDefault.default)("div", {
                class: "item input-parent",
                tabindex: "6"
            }, [
                (0, _mithrilDefault.default)("label", {
                    for: "event-description"
                }, "Description"),
                (0, _mithrilDefault.default)("input", {
                    placeholder: "",
                    type: "text",
                    id: "event-description",
                    value: update_event_date.DESCRIPTION
                })
            ]),
            (0, _mithrilDefault.default)("div", {
                class: "item input-parent",
                id: "event-notification-time-wrapper",
                tabindex: "7"
            }, [
                (0, _mithrilDefault.default)("label", {
                    for: "notification"
                }, "Notification"),
                (0, _mithrilDefault.default)("select", {
                    id: "event-notification-time"
                }, [
                    (0, _mithrilDefault.default)("option", {
                        value: "none"
                    }, "none"),
                    (0, _mithrilDefault.default)("option", {
                        value: "5"
                    }, "5 minutes"),
                    (0, _mithrilDefault.default)("option", {
                        value: "10"
                    }, "10 minutes"),
                    (0, _mithrilDefault.default)("option", {
                        value: "30"
                    }, "30 minutes"),
                    (0, _mithrilDefault.default)("option", {
                        value: "1440"
                    }, "1 Day")
                ])
            ]),
            (0, _mithrilDefault.default)("div", {
                class: "item input-parent",
                id: "event-recur-wrapper",
                tabindex: "8",
                oncreate: function() {
                    document.querySelector("#event-notification-time").value = update_event_date.alarm;
                }
            }, [
                (0, _mithrilDefault.default)("label", {
                    for: "notification"
                }, "Recur"),
                (0, _mithrilDefault.default)("select", {
                    id: "event-recur",
                    value: update_event_date.rrule_
                }, [
                    (0, _mithrilDefault.default)("option", {
                        value: "none"
                    }, "none"),
                    (0, _mithrilDefault.default)("option", {
                        value: "DAILY"
                    }, "Daily"),
                    (0, _mithrilDefault.default)("option", {
                        value: "WEEKLY"
                    }, "Weekly"),
                    (0, _mithrilDefault.default)("option", {
                        value: "MONTHLY"
                    }, "Monthly"),
                    (0, _mithrilDefault.default)("option", {
                        value: "YEARLY"
                    }, "Yearly")
                ])
            ]),
            /*
    m(
      "button",
      { class: "item", tabindex: "", id: "select-image", tabindex: "9" },
      "add image"
    ),
    m("div", { id: "form-image-wrapper" }, [
      m("img", {
        id: "form-image",
        "src": update_event_date.ATTACH,
      }),
    ]),*/ (0, _mithrilDefault.default)("button", {
                tabindex: "9",
                id: "delete-event",
                class: "item",
                onclick: function() {
                    console.log(update_event_date);
                    delete_event(update_event_date.etag, update_event_date.url, update_event_date.id, update_event_date.UID);
                }
            }, "delete"),
            (0, _mithrilDefault.default)("button", {
                tabindex: "10",
                id: "save-event",
                class: "item",
                onclick: function() {
                    update_event(update_event_date.id);
                }
            }, "update")
        ]);
    }
};
(0, _mithrilDefault.default).route(root, "/page_calendar", {
    "/page_calendar": page_calendar,
    "/page_events": page_events,
    "/page_options": page_options,
    "/page_add_event": page_add_event,
    "/page_edit_event": page_edit_event,
    "/page_subscriptions": page_subscriptions,
    "/page_accounts": page_accounts
});
(0, _mithrilDefault.default).route.prefix = "#";
let store_settings = function() {
    settings.default_notification = document.getElementById("default-notification-time").value;
    (0, _localforageDefault.default).setItem("settings", settings).then(function(value) {
        (0, _helperJs.side_toaster)("settings saved", 2000);
    }).catch(function(err) {
        console.log(err);
    });
};
let callback_scan = function(url) {
    document.activeElement.value = url;
};
let store_subscription = function() {
    if ((0, _helperJs.validate)(document.getElementById("cal-subs-url").value) && document.getElementById("cal-subs-name").value != "") {
        let id = (0, _uid.uid)(32);
        subscriptions.push({
            url: document.getElementById("cal-subs-url").value,
            name: document.getElementById("cal-subs-name").value,
            id: id
        });
        document.querySelector("input#cal-subs-name").val = "";
        document.querySelector("input#cal-subs-url").val = "";
        (0, _localforageDefault.default).setItem("subscriptions", subscriptions).then(function(value) {
            (0, _helperJs.side_toaster)("<img src='assets/image/E25C.svg'", 2000);
            (0, _mithrilDefault.default).route.set("/page_options");
        }); //creat db to store data
        (0, _localforageDefault.default).setItem(id, "").then(function(value) {
            (0, _helperJs.toaster)("done", 2000);
        }).catch(function(err) {
            // This code runs if there were any errors
            console.log(err);
        });
        load_subscriptions();
        list_subscriptions();
    } else (0, _helperJs.toaster)("Please enter a name and a valid url", 2000);
};
let store_account = function() {
    if ((0, _helperJs.validate)(document.getElementById("account-url").value) && document.getElementById("account-name").value != "" && document.getElementById("account-username").value != "" && document.getElementById("account-password").value != "") {
        accounts.push({
            server_url: document.getElementById("account-url").value,
            user: document.getElementById("account-username").value,
            password: document.getElementById("account-password").value,
            name: document.getElementById("account-name").value,
            id: (0, _uid.uid)(32)
        });
        (0, _localforageDefault.default).setItem("accounts", accounts).then(function(value) {
            (0, _helperJs.side_toaster)("<img src='assets/image/E25C.svg'", 2000);
            (0, _mithrilDefault.default).route.set("/page_options");
        }).catch(function(err) {
            // This code runs if there were any errors
            console.log(err);
        });
    } else (0, _helperJs.toaster)("Please enter a name and a valid url", 2000);
};
let delete_subscription = function() {
    let updated_subscriptions = subscriptions.filter((e)=>e.id != document.activeElement.getAttribute("data-id"));
    (0, _localforageDefault.default).removeItem(document.activeElement.getAttribute("data-id")).then(function() {
        (0, _helperJs.toaster)("subscription removed", 4000);
    }).catch(function(err) {
        console.log(err);
    });
    (0, _localforageDefault.default).setItem("subscriptions", updated_subscriptions).then(function(value) {
        //Do other things once the value has been saved.
        (0, _helperJs.side_toaster)("subscription deleted", 2000);
    }).catch(function(err) {
        // This code runs if there were any errors
        (0, _helperJs.toaster)(err, 2000);
    });
    document.activeElement.remove();
};
let delete_account = function() {
    let updated_subscriptions = accounts.filter((e)=>e.id != document.activeElement.getAttribute("data-id"));
    (0, _localforageDefault.default).setItem("accounts", updated_subscriptions).then(function(value) {
        //Do other things once the value has been saved.
        (0, _helperJs.side_toaster)("subscription deleted", 2000);
        document.activeElement.remove();
    }).catch(function(err) {
        // This code runs if there were any errors
        (0, _helperJs.toaster)(err, 2000);
    });
    (0, _localforageDefault.default).removeItem(document.activeElement.getAttribute("data-id")).then(function() {
        (0, _helperJs.toaster)("subscription removed", 4000);
    }).catch(function(err) {
        console.log(err);
    });
    document.activeElement.remove();
}; //load indexedDB
(0, _localforageDefault.default).getItem("events").then(function(value) {
    if (value != null) events = value;
    (0, _helperJs.sort_array)(events, "dateStart", "date");
}).catch(function(err) {});
(0, _localforageDefault.default).getItem("subscriptions").then(function(value) {
    subscriptions = value;
    if (subscriptions == null) {
        subscriptions = [];
        return false;
    }
    load_subscriptions();
}).catch(function(err) {
    // This code runs if there were any errors
    console.log(err);
});
function handleVisibilityChange() {
    if (document.visibilityState === "hidden") status.visible = false;
    else setTimeout(function() {
        status.visible = true;
    }, 1000);
}
handleVisibilityChange(); /////////////////
///NAVIGATION
/////////////////
let nav = function(move) {
    if (document.activeElement.nodeName == "SELECT" || document.activeElement.type == "date" || document.activeElement.type == "time") return false;
    const currentIndex = document.activeElement.tabIndex;
    let next1 = currentIndex + move;
    let items = 0;
    if ((0, _mithrilDefault.default).route.get() == "/page_calendar" || (0, _mithrilDefault.default).route.get() == "/page_options" || (0, _mithrilDefault.default).route.get() == "/page_events") {
        let b = document.activeElement.parentNode.parentNode;
        items = b.querySelectorAll(".item");
    }
    if ((0, _mithrilDefault.default).route.get() == "/page_subscriptions" || (0, _mithrilDefault.default).route.get() == "/page_accounts") {
        let b = document.activeElement.parentNode.parentNode;
        items = b.querySelectorAll(".item");
    }
    if ((0, _mithrilDefault.default).route.get() == "/page_add_event" || (0, _mithrilDefault.default).route.get() == "/page_edit_event") {
        let b = document.activeElement.parentNode;
        items = b.querySelectorAll(".item");
        if (document.activeElement.parentNode.classList.contains("input-parent")) {
            document.activeElement.parentNode.focus();
            return true;
        } else document.getElementById("add-edit-event").firstElementChild.focus();
    }
    let targetElement = 0;
    if (next1 <= items.length) {
        targetElement = items[next1];
        targetElement.focus();
    }
    if (next1 == items.length) {
        targetElement = items[0];
        targetElement.focus();
    }
    const rect = document.activeElement.getBoundingClientRect();
    const elY = rect.top - document.body.getBoundingClientRect().top + rect.height / 2;
    document.activeElement.parentNode.scrollBy({
        left: 0,
        top: elY - window.innerHeight / 2,
        behavior: "smooth"
    });
    if ((0, _mithrilDefault.default).route.get() == "/page_calendar" || (0, _mithrilDefault.default).route.get() == "/page_events") {
        if (targetElement.hasAttribute("data-date")) {
            status.selected_day = targetElement.getAttribute("data-date");
            status.selected_day_id = targetElement.getAttribute("data-id");
            event_slider(status.selected_day);
        }
    }
}; // may better to compare all alarms
// with all events
// to clean
let add_alarm = function(date, message_text, id) {
    // KaiOs  2.xx
    if (navigator.mozAlarms) {
        // This is arbitrary data pass to the alarm
        var data = {
            foo: message_text,
            event_id: id
        }; // The "honorTimezone" string is what make the alarm honoring it
        var request = navigator.mozAlarms.add(date, "honorTimezone", data);
        request.onsuccess = function() {};
        request.onerror = function() {
            console.log("An error occurred: " + this.error.name);
        };
    }
};
let remove_alarm = function(id) {
    // KaiOs  2.xx
    if (navigator.mozAlarms) {
        let request = navigator.mozAlarms.getAll();
        request.onsuccess = function() {
            this.result.forEach(function(alarm) {
                if (alarm.data.event_id == id) {
                    let req = navigator.mozAlarms.remove(alarm.id);
                    req.onsuccess = function() {
                        console.log("removed");
                    };
                    req.onerror = function() {
                        console.log("An error occurred: " + this.error.name);
                    };
                } else console.log("no alarm founded");
            });
        };
        request.onerror = function() {
            console.log("An error occurred:", this.error.name);
        };
    }
}; // //////////////////
// //BUILD EVENT-LIST
// /////////////////
// /////////////
// /////////////
// STORE EVENTS//
// /////////////
// /////////////
let convert_ics_date = function(t5) {
    let nn = t5.replace(/-/g, "");
    nn = nn.replace(/:/g, "");
    nn = nn.replace(" ", "T");
    nn;
    return nn;
};
let export_data = [];
let store_event = function(db_id, cal_name) {
    let validation = true;
    if (document.getElementById("event-title").value == "") {
        (0, _helperJs.toaster)("Title can't be empty", 2000);
        validation = false;
    }
    if (document.getElementById("event-recur").value != "none") {
        if (document.getElementById("event-date-end").value == "") {
            (0, _helperJs.toaster)("An end date is required for a recurrence", 2000);
            validation = false;
        }
    }
    let start_time = "00:00:00";
    if (document.getElementById("event-time-start").value != "") start_time = document.getElementById("event-time-start").value;
    let end_time = "00:00:00";
    if (document.getElementById("event-time-end").value != "") end_time = document.getElementById("event-time-end").value;
    let convert_dt_start = document.getElementById("event-date").value + " " + start_time;
    if (document.getElementById("event-date-end").value == "") document.getElementById("event-date-end").value = document.getElementById("event-date").value;
    let convert_dt_end = document.getElementById("event-date-end").value + " " + end_time; // notification before event
    let notification_time = document.getElementById("event-notification-time").value;
    let calc_notification;
    if (notification_time != "none") {
        calc_notification = new Date(convert_dt_start);
        calc_notification.setMinutes(calc_notification.getMinutes() - notification_time);
        notification_time = convert_ics_date(calc_notification.toISOString());
    }
    let multidayevent = false;
    let a = new Date(document.getElementById("event-date").value).getTime();
    let b = new Date(document.getElementById("event-date-end").value).getTime();
    if (a != b) multidayevent = true;
    let rrule_convert = function() {
        let p = document.getElementById("event-recur").value;
        let r;
        if (p == "none") return "";
        if (p != "none") r = "FREQ=" + document.getElementById("event-recur").value + ";UNTIL=" + convert_ics_date(convert_dt_end);
        return r;
    };
    if (validation == false) return false;
    let event = {
        UID: (0, _uid.uid)(32),
        SUMMARY: document.getElementById("event-title").value,
        LOCATION: document.getElementById("event-location").value,
        DESCRIPTION: document.getElementById("event-description").value,
        CLASS: "PRIVATE",
        DTSTAMP: convert_ics_date(convert_dt_start),
        DTSTART: convert_ics_date(convert_dt_start),
        DTEND: convert_ics_date(convert_dt_end),
        RRULE: rrule_convert(),
        rrule_: document.getElementById("event-recur").value,
        dateStart: document.getElementById("event-date").value,
        dateEnd: document.getElementById("event-date-end").value,
        time_start: document.getElementById("event-time-start").value,
        time_end: document.getElementById("event-time-end").value,
        alarm: document.getElementById("event-notification-time").value,
        alarmTrigger: notification_time,
        isSubscription: false,
        multidayevent: multidayevent,
        ATTACH: blob,
        id: db_id
    };
    if (event.alarm != "none") {
        event.BEGIN = "VALARM";
        event["TRIGGER;VALUE=DATE-TIME"] = notification_time;
        event.ACTION = "AUDIO";
        event.END = "VALARM";
        add_alarm(calc_notification, event.SUMMARY, event.UID);
    }
    if (db_id == "local-id") {
        console.log("local");
        events.push(event);
        console.log(JSON.stringify(events));
        let without_subscription = events.filter((events1)=>events1.id == "local-id");
        console.log(JSON.stringify(without_subscription));
        (0, _localforageDefault.default).setItem("events", without_subscription).then(function(value) {
            clear_form();
            (0, _eximportJs.export_ical)("greg.ics", without_subscription);
            (0, _helperJs.side_toaster)("<img src='assets/image/E25C.svg'", 2000);
            setTimeout(function() {
                (0, _mithrilDefault.default).route.set("/page_calendar");
                (0, _helperJs.sort_array)(events, "dateStart", "date");
            }, 200);
        }).catch(function(err) {
            console.log(err);
        });
    } else {
        console.log("online");
        create_caldav("BEGIN:VCALENDAR\nVERSION:2.0\nPRODID:-//ZContent.net//Greg Calendar 1.0//EN\nCALSCALE:GREGORIAN\nBEGIN:VEVENT\nSUMMARY:" + event.SUMMARY + "\nUID:" + event.UID + "\nSEQUENCE:0\nRRULE:" + event.RRULE + "\nDTSTART;TZID=" + settings.timezone + ":" + event.DTSTART + "\nDTEND;TZID=" + settings.timezone + ":" + event.DTEND + "\nDTSTAMP;TZID=" + settings.timezone + ":" + event.DTSTAMP + "\nLOCATION:" + event.LOCATION + "\nDESCRIPTION:" + event.DESCRIPTION + "\nEND:VEVENT\nEND:VCALENDAR", db_id, cal_name, event);
    }
    style_calendar_cell();
}; // ////////////
// UPDATE EVENT
// /////////
let update_event = function(account_id) {
    let validation = true;
    if (document.getElementById("event-title").value == "") {
        (0, _helperJs.toaster)("Title can't be empty", 2000);
        validation = false;
    }
    if (document.getElementById("event-recur").value != "none") {
        if (document.getElementById("event-date-end").value == "") {
            (0, _helperJs.toaster)("An end date is required for a recurrence", 2000);
            validation = false;
        }
    }
    events.forEach(function(index) {
        let a = new Date(document.getElementById("event-date").value).getTime();
        let b = new Date(document.getElementById("event-date-end").value).getTime();
        let multidayevent = false;
        if (a != b) multidayevent = true;
        if (index.UID == status.selected_day_id) {
            let start_time = "00:00:00";
            if (document.getElementById("event-time-start").value != "") start_time = document.getElementById("event-time-start").value;
            let end_time = "00:00:00";
            if (document.getElementById("event-time-end").value != "") end_time = document.getElementById("event-time-end").value;
            let convert_dt_start = document.getElementById("event-date").value + " " + start_time;
            let convert_dt_end = document.getElementById("event-date").value + " " + end_time; // notification before event
            let notification_time = document.getElementById("event-notification-time").value;
            let calc_notification = "";
            if (notification_time != "none") {
                calc_notification = new Date(convert_dt_start);
                calc_notification.setMinutes(calc_notification.getMinutes() - notification_time);
                notification_time = convert_ics_date(calc_notification.toISOString());
            }
            let rrule_convert = function() {
                let p = document.getElementById("event-recur").value;
                let r;
                if (p != "" || p != "none") r = "FREQ=" + document.getElementById("event-recur").value + ";UNTIL=" + convert_ics_date(convert_dt_end);
                return r;
            };
            if (validation == false) return false;
            index.SUMMARY = document.getElementById("event-title").value;
            index.LOCATION = document.getElementById("event-location").value;
            index.DESCRIPTION = document.getElementById("event-description").value;
            index.CLASS = "PRIVATE";
            index.DTSTAMP = convert_ics_date(convert_dt_start);
            index.DTSTART = convert_ics_date(convert_dt_start);
            index.DTEND = convert_ics_date(convert_dt_end);
            index.RRULE = rrule_convert();
            index.dateEnd = document.getElementById("event-date-end").value;
            index.dateStart = document.getElementById("event-date").value;
            index.time_start = document.getElementById("event-time-start").value;
            index.time_end = document.getElementById("event-time-end").value;
            index.rrule_ = document.getElementById("event-recur").value;
            index.isSubscription = false;
            index.multidayevent = multidayevent;
            index.alarm = document.getElementById("event-notification-time").value;
            index.alarmTrigger = notification_time;
            if (blob != "") index.ATTACH = blob;
            if (index.alarm != "none") {
                remove_alarm(index.UID);
                index.BEGIN = "VALARM";
                index["TRIGGER;VALUE=DATE-TIME:"] = notification_time;
                index.ACTION = "AUDIO";
                index.END = "VALARM";
                add_alarm(calc_notification, index.SUMMARY, index.UID);
            }
            if (account_id == "local-id") {
                let without_subscription = events.filter((events2)=>events2.isSubscription === false);
                (0, _localforageDefault.default).setItem("events", without_subscription).then(function(value) {
                    // clean form
                    (0, _helperJs.side_toaster)("<img src='assets/image/E25C.svg'", 2000);
                    (0, _mithrilDefault.default).route.set("/page_calendar");
                    (0, _eximportJs.export_ical)("greg.ics", value);
                    clear_form();
                }).catch(function(err) {});
            } else update_caldav(index.etag, index.url, "BEGIN:VCALENDAR\nVERSION:2.0\nPRODID:-//ZContent.net//Greg Calendar 1.0//EN\nCALSCALE:GREGORIAN\nBEGIN:VEVENT\nSUMMARY:" + index.SUMMARY + "\nUID:" + index.UID + "\nSEQUENCE:0\nRRULE:" + index.RRULE + "\nDTSTART;TZID=" + settings.timezone + ":" + index.DTSTART + "\nDTEND;TZID=" + settings.timezone + ":" + index.DTEND + "\nDTSTAMP;TZID=" + settings.timezone + ":" + index.DTSTAMP + "\nLOCATION:" + index.LOCATION + "\nDESCRIPTION:" + index.DESCRIPTION + "\nEND:VEVENT\nEND:VCALENDAR", index.id);
        }
    });
}; //////////////
//DELETE EVENT
///////////
let delete_event = function(etag, url, account_id, uid) {
    if (etag) delete_caldav(etag, url, account_id, status.selected_day_id);
    else {
        console.log("local"); //remove event
        events = events.filter((person)=>person.UID != uid);
        remove_alarm(uid); //store only local events
        let without_subscription = events.filter((event)=>event.id === "local-id");
        clear_form();
        (0, _localforageDefault.default).setItem("events", without_subscription).then(function(value) {
            (0, _eximportJs.export_ical)("greg.ics", value);
            (0, _helperJs.side_toaster)("event deleted", 2000);
            (0, _mithrilDefault.default).route.set("/page_calendar");
        }).catch(function(err) {
            // This code runs if there were any errors
            console.log(err);
        });
    }
}; // event slider
let t = new Date();
let mm = `0${t.getMonth() + 1}`.slice(-2);
let d = `0${t.getDate()}`.slice(-2);
let y = t.getFullYear(); // callback import event
let import_event_callback = function(id, date) {
    (0, _helperJs.toaster)("done", 2000);
    (0, _helperJs.bottom_bar)("edit", "", "");
    let without_subscription = events.filter((events3)=>events3.isSubscription === false);
    (0, _localforageDefault.default).setItem("events", without_subscription).then(function(value) {
        (0, _eximportJs.export_ical)("greg.ics", without_subscription);
    }).catch(function(err) {});
};
let set_datetime_form = function() {
    let d4 = new Date();
    let d_h = `0${d4.getHours()}`.slice(-2);
    let d_m = `0${d4.getMinutes()}`.slice(-2);
    let p = d_h + ":" + d_m;
    let d_h_ = `0${d4.getHours() + 1}`.slice(-2);
    let d_m_ = `0${d4.getMinutes()}`.slice(-2);
    if (d_h_ > 23) d_h_ = "23";
    let pp = d_h_ + ":" + d_m_;
    document.getElementById("event-time-start").value = p;
    document.getElementById("event-time-end").value = pp;
};
let pick_image_callback = function(resultBlob) {
    let t6 = document.getElementById("form-image");
    t6.src = URL.createObjectURL(resultBlob);
    document.getElementById("form-image-wrapper").classList.add("item");
    document.querySelectorAll("div#add-edit-event .item").forEach(function(i, p) {
        i.setAttribute("tabindex", p);
    });
    let fr = new FileReader();
    fr.onload = function() {
        blob = fr.result;
    };
    fr.readAsDataURL(resultBlob);
}; // ////////////////////////////
// //KEYPAD HANDLER////////////
// ////////////////////////////
let longpress = false;
const longpress_timespan = 1000;
let timeout;
function repeat_action(param) {
    param.key;
} // ////////////
// //LONGPRESS
// ///////////
function longpress_action(param) {
    switch(param.key){
        case "0":
            break;
        case "Backspace":
            window.close();
            break;
        case "ArrowLeft":
            break;
    }
}
let backup_events = function() {
    (0, _localforageDefault.default).getItem("events").then(function(value) {
        (0, _eximportJs.export_ical)("greg.ics", value);
    }).catch(function(err) {
        console.log(err);
    });
};
let import_event = function() {
    (0, _eximportJs.loadICS)(document.activeElement.getAttribute("data-filename"), import_event_callback);
};
let stop_scan_callback = function() {
    // m.route.set("/page_subscriptions");
    document.getElementById("qr-screen").style.display = "none";
}; // /////////////
// //SHORTPRESS
// ////////////
function shortpress_action(param) {
    switch(param.key){
        case "*":
            jump_to_today();
            break;
        case "ArrowUp":
            if ((0, _mithrilDefault.default).route.get() == "/page_calendar") nav(-7);
            if ((0, _mithrilDefault.default).route.get() == "/page_events" || (0, _mithrilDefault.default).route.get() == "/page_options" || (0, _mithrilDefault.default).route.get() == "/page_subscriptions" || (0, _mithrilDefault.default).route.get() == "/page_accounts" || (0, _mithrilDefault.default).route.get() == "/page_add_event" || (0, _mithrilDefault.default).route.get() == "/page_edit_event") nav(-1);
            break;
        case "ArrowDown":
            if ((0, _mithrilDefault.default).route.get() == "/page_calendar") nav(7);
            if ((0, _mithrilDefault.default).route.get() == "/page_events" || (0, _mithrilDefault.default).route.get() == "/page_options" || (0, _mithrilDefault.default).route.get() == "/page_subscriptions" || (0, _mithrilDefault.default).route.get() == "/page_accounts" || (0, _mithrilDefault.default).route.get() == "/page_add_event" || (0, _mithrilDefault.default).route.get() == "/page_edit_event") nav(1);
            break;
        case "ArrowRight":
            if ((0, _mithrilDefault.default).route.get() != "/page_calendar") return true;
            nav(1);
            break;
        case "ArrowLeft":
            if ((0, _mithrilDefault.default).route.get() != "/page_calendar") return true;
            nav(-1);
            break;
        case "1":
            previous();
            break;
        case "3":
            next();
            break;
        case "2":
            slider_navigation();
            break;
        case "#":
            document.querySelectorAll("div#calendar div#calendar-body div div [class^='moon-phase-']").forEach(function(e) {
                e.classList.toggle("active");
            });
            break;
        case "SoftRight":
        case "Alt":
            if ((0, _mithrilDefault.default).route.get() == "/page_calendar") {
                (0, _mithrilDefault.default).route.set("/page_options");
                return true;
            }
            break;
        case "SoftLeft":
        case "Control":
            if ((0, _mithrilDefault.default).route.get() == "/page_events") {
                if (document.activeElement.classList.contains("subscription")) {
                    (0, _helperJs.toaster)("a subscription cannot be edited", 2000);
                    return false;
                }
                get_event_date();
                setTimeout(function() {
                    (0, _mithrilDefault.default).route.set("/page_edit_event");
                }, 1000);
                return true;
            }
            if ((0, _mithrilDefault.default).route.get() == "/page_subscriptions" || (0, _mithrilDefault.default).route.get() == "/page_accounts") {
                if (document.activeElement.getAttribute("data-scan-action") == "true") (0, _scanJs.start_scan)(callback_scan);
                return true;
            }
            if ((0, _mithrilDefault.default).route.get() == "/page_options") {
                if (document.activeElement.getAttribute("data-action") == "delete-subscription") delete_subscription();
                if (document.activeElement.getAttribute("data-action") == "delete-account") delete_account();
            }
            if ((0, _mithrilDefault.default).route.get() == "/page_calendar") {
                (0, _mithrilDefault.default).route.set("/page_add_event"); // when new event
                // set time
                // set_datetime_form();
                return true;
            }
            break;
        case "Enter":
            if (!status.visible) return false;
            if (document.activeElement.classList.contains("input-parent")) {
                document.activeElement.children[1].focus();
                return true;
            }
            if (document.activeElement.id == "export-event") {
                events.forEach(function(index) {
                    if (index.UID == status.selected_day_id) export_data.push(index);
                });
                (0, _eximportJs.export_ical)(export_data[0].UID + ".ics", export_data);
                (0, _helperJs.toaster)("event exported", 2000);
                return true;
            }
            if (document.activeElement.id == "select-image") {
                (0, _helperJs.pick_image)(pick_image_callback);
                return true;
            }
            if (document.activeElement.id == "form-image-wrapper") {
                document.getElementById("form-image").src = "";
                blob = "";
                return true;
            } //toggle month/events
            if ((0, _mithrilDefault.default).route.get() == "/page_calendar" || (0, _mithrilDefault.default).route.get() == "/page_events") (0, _mithrilDefault.default).route.get() == "/page_calendar" ? (0, _mithrilDefault.default).route.set("/page_events") : (0, _mithrilDefault.default).route.set("/page_calendar");
            break;
        case "Backspace":
            if ((0, _mithrilDefault.default).route.get() == "/page_add_event" && document.activeElement.tagName != "INPUT") (0, _mithrilDefault.default).route.set("/page_calendar");
            if ((0, _mithrilDefault.default).route.get() == "/page_edit_event" && document.activeElement.tagName != "INPUT") (0, _mithrilDefault.default).route.set("/page_calendar");
            if ((0, _mithrilDefault.default).route.get() == "/page_options") (0, _mithrilDefault.default).route.set("/page_calendar");
            if ((0, _mithrilDefault.default).route.get() == "/page_subscriptions" || (0, _mithrilDefault.default).route.get() == "/page_accounts") {
                (0, _mithrilDefault.default).route.set("/page_options");
                if (document.getElementById("qr-screen").style == "block") document.getElementById("qr-screen").style = "none";
                (0, _scanJs.stop_scan)(stop_scan_callback);
            }
            break;
    }
} // ///////////////////////////////
// //shortpress / longpress logic
// //////////////////////////////
function handleKeyDown(evt) {
    //option_button_bar();
    if (evt.key === "Backspace") evt.preventDefault();
    if (evt.key === "EndCall") {
        evt.preventDefault();
        window.close();
    }
    if (!evt.repeat) {
        longpress = false;
        timeout = setTimeout(()=>{
            longpress = true;
            longpress_action(evt);
        }, longpress_timespan);
    }
    if (evt.repeat) {
        if (evt.key == "Backspace") longpress = false;
        repeat_action(evt);
    }
}
function handleKeyUp(evt) {
    if (status.visible === false) return false;
    evt.key == "Backspace" && document.activeElement.tagName;
    clearTimeout(timeout);
    if (!longpress) shortpress_action(evt);
}
document.addEventListener("keydown", handleKeyDown);
document.addEventListener("keyup", handleKeyUp);
document.addEventListener("visibilitychange", handleVisibilityChange, false);

},{"localforage":"8ZRFG","./assets/js/helper.js":"db1Xp","./assets/js/getMoonPhase.js":"kaybj","./assets/js/eximport.js":"4kH1V","./assets/js/scan.js":"6auJa","mithril":"05eVJ","./assets/js/tsdav.js":"14ZM6","uid":"lE7Rf","moment-timezone":"77kdC","@parcel/transformer-js/src/esmodule-helpers.js":"j7FRh"}],"8ZRFG":[function(require,module,exports) {
var global = arguments[3];
/*!
    localForage -- Offline Storage, Improved
    Version 1.10.0
    https://localforage.github.io/localForage
    (c) 2013-2017 Mozilla, Apache License 2.0
*/ (function(f) {
    var g;
    module.exports = f();
})(function() {
    var define, module1, exports;
    return (function e1(t, n1, r) {
        function s(o, u) {
            if (!n1[o]) {
                if (!t[o]) {
                    var a = undefined;
                    if (!u && a) return a(o, !0);
                    if (i) return i(o, !0);
                    var f = new Error("Cannot find module '" + o + "'");
                    throw f.code = "MODULE_NOT_FOUND", f;
                }
                var l = n1[o] = {
                    exports: {}
                };
                t[o][0].call(l.exports, function(e) {
                    var n = t[o][1][e];
                    return s(n ? n : e);
                }, l, l.exports, e1, t, n1, r);
            }
            return n1[o].exports;
        }
        var i = undefined;
        for(var o1 = 0; o1 < r.length; o1++)s(r[o1]);
        return s;
    })({
        1: [
            function(_dereq_, module, exports) {
                (function(global1) {
                    "use strict";
                    var Mutation = global1.MutationObserver || global1.WebKitMutationObserver;
                    var scheduleDrain;
                    if (Mutation) {
                        var called = 0;
                        var observer = new Mutation(nextTick);
                        var element = global1.document.createTextNode("");
                        observer.observe(element, {
                            characterData: true
                        });
                        scheduleDrain = function() {
                            element.data = called = ++called % 2;
                        };
                    } else if (!global1.setImmediate && typeof global1.MessageChannel !== "undefined") {
                        var channel = new global1.MessageChannel();
                        channel.port1.onmessage = nextTick;
                        scheduleDrain = function() {
                            channel.port2.postMessage(0);
                        };
                    } else if ("document" in global1 && "onreadystatechange" in global1.document.createElement("script")) scheduleDrain = function() {
                        // Create a <script> element; its readystatechange event will be fired asynchronously once it is inserted
                        // into the document. Do so, thus queuing up the task. Remember to clean up once it's been called.
                        var scriptEl = global1.document.createElement("script");
                        scriptEl.onreadystatechange = function() {
                            nextTick();
                            scriptEl.onreadystatechange = null;
                            scriptEl.parentNode.removeChild(scriptEl);
                            scriptEl = null;
                        };
                        global1.document.documentElement.appendChild(scriptEl);
                    };
                    else scheduleDrain = function() {
                        setTimeout(nextTick, 0);
                    };
                    var draining;
                    var queue = [];
                    //named nextTick for less confusing stack traces
                    function nextTick() {
                        draining = true;
                        var i, oldQueue;
                        var len = queue.length;
                        while(len){
                            oldQueue = queue;
                            queue = [];
                            i = -1;
                            while(++i < len)oldQueue[i]();
                            len = queue.length;
                        }
                        draining = false;
                    }
                    module.exports = immediate;
                    function immediate(task) {
                        if (queue.push(task) === 1 && !draining) scheduleDrain();
                    }
                }).call(this, typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {});
            },
            {}
        ],
        2: [
            function(_dereq_, module, exports) {
                "use strict";
                var immediate = _dereq_(1);
                /* istanbul ignore next */ function INTERNAL() {}
                var handlers = {};
                var REJECTED = [
                    "REJECTED"
                ];
                var FULFILLED = [
                    "FULFILLED"
                ];
                var PENDING = [
                    "PENDING"
                ];
                module.exports = Promise;
                function Promise(resolver) {
                    if (typeof resolver !== "function") throw new TypeError("resolver must be a function");
                    this.state = PENDING;
                    this.queue = [];
                    this.outcome = void 0;
                    if (resolver !== INTERNAL) safelyResolveThenable(this, resolver);
                }
                Promise.prototype["catch"] = function(onRejected) {
                    return this.then(null, onRejected);
                };
                Promise.prototype.then = function(onFulfilled, onRejected) {
                    if (typeof onFulfilled !== "function" && this.state === FULFILLED || typeof onRejected !== "function" && this.state === REJECTED) return this;
                    var promise = new this.constructor(INTERNAL);
                    if (this.state !== PENDING) {
                        var resolver = this.state === FULFILLED ? onFulfilled : onRejected;
                        unwrap(promise, resolver, this.outcome);
                    } else this.queue.push(new QueueItem(promise, onFulfilled, onRejected));
                    return promise;
                };
                function QueueItem(promise, onFulfilled, onRejected) {
                    this.promise = promise;
                    if (typeof onFulfilled === "function") {
                        this.onFulfilled = onFulfilled;
                        this.callFulfilled = this.otherCallFulfilled;
                    }
                    if (typeof onRejected === "function") {
                        this.onRejected = onRejected;
                        this.callRejected = this.otherCallRejected;
                    }
                }
                QueueItem.prototype.callFulfilled = function(value) {
                    handlers.resolve(this.promise, value);
                };
                QueueItem.prototype.otherCallFulfilled = function(value) {
                    unwrap(this.promise, this.onFulfilled, value);
                };
                QueueItem.prototype.callRejected = function(value) {
                    handlers.reject(this.promise, value);
                };
                QueueItem.prototype.otherCallRejected = function(value) {
                    unwrap(this.promise, this.onRejected, value);
                };
                function unwrap(promise, func, value) {
                    immediate(function() {
                        var returnValue;
                        try {
                            returnValue = func(value);
                        } catch (e) {
                            return handlers.reject(promise, e);
                        }
                        if (returnValue === promise) handlers.reject(promise, new TypeError("Cannot resolve promise with itself"));
                        else handlers.resolve(promise, returnValue);
                    });
                }
                handlers.resolve = function(self, value) {
                    var result = tryCatch(getThen, value);
                    if (result.status === "error") return handlers.reject(self, result.value);
                    var thenable = result.value;
                    if (thenable) safelyResolveThenable(self, thenable);
                    else {
                        self.state = FULFILLED;
                        self.outcome = value;
                        var i = -1;
                        var len = self.queue.length;
                        while(++i < len)self.queue[i].callFulfilled(value);
                    }
                    return self;
                };
                handlers.reject = function(self, error) {
                    self.state = REJECTED;
                    self.outcome = error;
                    var i = -1;
                    var len = self.queue.length;
                    while(++i < len)self.queue[i].callRejected(error);
                    return self;
                };
                function getThen(obj) {
                    // Make sure we only access the accessor once as required by the spec
                    var then = obj && obj.then;
                    if (obj && (typeof obj === "object" || typeof obj === "function") && typeof then === "function") return function appyThen() {
                        then.apply(obj, arguments);
                    };
                }
                function safelyResolveThenable(self, thenable) {
                    // Either fulfill, reject or reject with error
                    var called = false;
                    function onError(value) {
                        if (called) return;
                        called = true;
                        handlers.reject(self, value);
                    }
                    function onSuccess(value) {
                        if (called) return;
                        called = true;
                        handlers.resolve(self, value);
                    }
                    function tryToUnwrap() {
                        thenable(onSuccess, onError);
                    }
                    var result = tryCatch(tryToUnwrap);
                    if (result.status === "error") onError(result.value);
                }
                function tryCatch(func, value) {
                    var out = {};
                    try {
                        out.value = func(value);
                        out.status = "success";
                    } catch (e) {
                        out.status = "error";
                        out.value = e;
                    }
                    return out;
                }
                Promise.resolve = resolve;
                function resolve(value) {
                    if (value instanceof this) return value;
                    return handlers.resolve(new this(INTERNAL), value);
                }
                Promise.reject = reject;
                function reject(reason) {
                    var promise = new this(INTERNAL);
                    return handlers.reject(promise, reason);
                }
                Promise.all = all;
                function all(iterable) {
                    var self = this;
                    if (Object.prototype.toString.call(iterable) !== "[object Array]") return this.reject(new TypeError("must be an array"));
                    var len = iterable.length;
                    var called = false;
                    if (!len) return this.resolve([]);
                    var values = new Array(len);
                    var resolved = 0;
                    var i1 = -1;
                    var promise = new this(INTERNAL);
                    while(++i1 < len)allResolver(iterable[i1], i1);
                    return promise;
                    function allResolver(value, i) {
                        self.resolve(value).then(resolveFromAll, function(error) {
                            if (!called) {
                                called = true;
                                handlers.reject(promise, error);
                            }
                        });
                        function resolveFromAll(outValue) {
                            values[i] = outValue;
                            if (++resolved === len && !called) {
                                called = true;
                                handlers.resolve(promise, values);
                            }
                        }
                    }
                }
                Promise.race = race;
                function race(iterable) {
                    var self = this;
                    if (Object.prototype.toString.call(iterable) !== "[object Array]") return this.reject(new TypeError("must be an array"));
                    var len = iterable.length;
                    var called = false;
                    if (!len) return this.resolve([]);
                    var i = -1;
                    var promise = new this(INTERNAL);
                    while(++i < len)resolver(iterable[i]);
                    return promise;
                    function resolver(value) {
                        self.resolve(value).then(function(response) {
                            if (!called) {
                                called = true;
                                handlers.resolve(promise, response);
                            }
                        }, function(error) {
                            if (!called) {
                                called = true;
                                handlers.reject(promise, error);
                            }
                        });
                    }
                }
            },
            {
                "1": 1
            }
        ],
        3: [
            function(_dereq_, module, exports) {
                (function(global2) {
                    "use strict";
                    if (typeof global2.Promise !== "function") global2.Promise = _dereq_(2);
                }).call(this, typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {});
            },
            {
                "2": 2
            }
        ],
        4: [
            function(_dereq_, module, exports) {
                "use strict";
                var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function(obj) {
                    return typeof obj;
                } : function(obj) {
                    return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
                };
                function _classCallCheck(instance, Constructor) {
                    if (!(instance instanceof Constructor)) throw new TypeError("Cannot call a class as a function");
                }
                function getIDB() {
                    /* global indexedDB,webkitIndexedDB,mozIndexedDB,OIndexedDB,msIndexedDB */ try {
                        if (typeof indexedDB !== "undefined") return indexedDB;
                        if (typeof webkitIndexedDB !== "undefined") return webkitIndexedDB;
                        if (typeof mozIndexedDB !== "undefined") return mozIndexedDB;
                        if (typeof OIndexedDB !== "undefined") return OIndexedDB;
                        if (typeof msIndexedDB !== "undefined") return msIndexedDB;
                    } catch (e) {
                        return;
                    }
                }
                var idb1 = getIDB();
                function isIndexedDBValid() {
                    try {
                        // Initialize IndexedDB; fall back to vendor-prefixed versions
                        // if needed.
                        if (!idb1 || !idb1.open) return false;
                        // We mimic PouchDB here;
                        //
                        // We test for openDatabase because IE Mobile identifies itself
                        // as Safari. Oh the lulz...
                        var isSafari = typeof openDatabase !== "undefined" && /(Safari|iPhone|iPad|iPod)/.test(navigator.userAgent) && !/Chrome/.test(navigator.userAgent) && !/BlackBerry/.test(navigator.platform);
                        var hasFetch = typeof fetch === "function" && fetch.toString().indexOf("[native code") !== -1;
                        // Safari <10.1 does not meet our requirements for IDB support
                        // (see: https://github.com/pouchdb/pouchdb/issues/5572).
                        // Safari 10.1 shipped with fetch, we can use that to detect it.
                        // Note: this creates issues with `window.fetch` polyfills and
                        // overrides; see:
                        // https://github.com/localForage/localForage/issues/856
                        return (!isSafari || hasFetch) && typeof indexedDB !== "undefined" && // some outdated implementations of IDB that appear on Samsung
                        // and HTC Android devices <4.4 are missing IDBKeyRange
                        // See: https://github.com/mozilla/localForage/issues/128
                        // See: https://github.com/mozilla/localForage/issues/272
                        typeof IDBKeyRange !== "undefined";
                    } catch (e) {
                        return false;
                    }
                }
                // Abstracts constructing a Blob object, so it also works in older
                // browsers that don't support the native Blob constructor. (i.e.
                // old QtWebKit versions, at least).
                // Abstracts constructing a Blob object, so it also works in older
                // browsers that don't support the native Blob constructor. (i.e.
                // old QtWebKit versions, at least).
                function createBlob(parts, properties) {
                    /* global BlobBuilder,MSBlobBuilder,MozBlobBuilder,WebKitBlobBuilder */ parts = parts || [];
                    properties = properties || {};
                    try {
                        return new Blob(parts, properties);
                    } catch (e) {
                        if (e.name !== "TypeError") throw e;
                        var Builder = typeof BlobBuilder !== "undefined" ? BlobBuilder : typeof MSBlobBuilder !== "undefined" ? MSBlobBuilder : typeof MozBlobBuilder !== "undefined" ? MozBlobBuilder : WebKitBlobBuilder;
                        var builder = new Builder();
                        for(var i = 0; i < parts.length; i += 1)builder.append(parts[i]);
                        return builder.getBlob(properties.type);
                    }
                }
                // This is CommonJS because lie is an external dependency, so Rollup
                // can just ignore it.
                if (typeof Promise === "undefined") // In the "nopromises" build this will just throw if you don't have
                // a global promise object, but it would throw anyway later.
                _dereq_(3);
                var Promise$1 = Promise;
                function executeCallback(promise, callback) {
                    if (callback) promise.then(function(result) {
                        callback(null, result);
                    }, function(error) {
                        callback(error);
                    });
                }
                function executeTwoCallbacks(promise, callback, errorCallback) {
                    if (typeof callback === "function") promise.then(callback);
                    if (typeof errorCallback === "function") promise["catch"](errorCallback);
                }
                function normalizeKey(key) {
                    // Cast the key to a string, as that's all we can set as a key.
                    if (typeof key !== "string") {
                        console.warn(key + " used as a key, but it is not a string.");
                        key = String(key);
                    }
                    return key;
                }
                function getCallback() {
                    if (arguments.length && typeof arguments[arguments.length - 1] === "function") return arguments[arguments.length - 1];
                }
                // Some code originally from async_storage.js in
                // [Gaia](https://github.com/mozilla-b2g/gaia).
                var DETECT_BLOB_SUPPORT_STORE = "local-forage-detect-blob-support";
                var supportsBlobs = void 0;
                var dbContexts = {};
                var toString = Object.prototype.toString;
                // Transaction Modes
                var READ_ONLY = "readonly";
                var READ_WRITE = "readwrite";
                // Transform a binary string to an array buffer, because otherwise
                // weird stuff happens when you try to work with the binary string directly.
                // It is known.
                // From http://stackoverflow.com/questions/14967647/ (continues on next line)
                // encode-decode-image-with-base64-breaks-image (2013-04-21)
                function _binStringToArrayBuffer(bin) {
                    var length = bin.length;
                    var buf = new ArrayBuffer(length);
                    var arr = new Uint8Array(buf);
                    for(var i = 0; i < length; i++)arr[i] = bin.charCodeAt(i);
                    return buf;
                }
                //
                // Blobs are not supported in all versions of IndexedDB, notably
                // Chrome <37 and Android <5. In those versions, storing a blob will throw.
                //
                // Various other blob bugs exist in Chrome v37-42 (inclusive).
                // Detecting them is expensive and confusing to users, and Chrome 37-42
                // is at very low usage worldwide, so we do a hacky userAgent check instead.
                //
                // content-type bug: https://code.google.com/p/chromium/issues/detail?id=408120
                // 404 bug: https://code.google.com/p/chromium/issues/detail?id=447916
                // FileReader bug: https://code.google.com/p/chromium/issues/detail?id=447836
                //
                // Code borrowed from PouchDB. See:
                // https://github.com/pouchdb/pouchdb/blob/master/packages/node_modules/pouchdb-adapter-idb/src/blobSupport.js
                //
                function _checkBlobSupportWithoutCaching(idb) {
                    return new Promise$1(function(resolve) {
                        var txn = idb.transaction(DETECT_BLOB_SUPPORT_STORE, READ_WRITE);
                        var blob = createBlob([
                            ""
                        ]);
                        txn.objectStore(DETECT_BLOB_SUPPORT_STORE).put(blob, "key");
                        txn.onabort = function(e) {
                            // If the transaction aborts now its due to not being able to
                            // write to the database, likely due to the disk being full
                            e.preventDefault();
                            e.stopPropagation();
                            resolve(false);
                        };
                        txn.oncomplete = function() {
                            var matchedChrome = navigator.userAgent.match(/Chrome\/(\d+)/);
                            var matchedEdge = navigator.userAgent.match(/Edge\//);
                            // MS Edge pretends to be Chrome 42:
                            // https://msdn.microsoft.com/en-us/library/hh869301%28v=vs.85%29.aspx
                            resolve(matchedEdge || !matchedChrome || parseInt(matchedChrome[1], 10) >= 43);
                        };
                    })["catch"](function() {
                        return false; // error, so assume unsupported
                    });
                }
                function _checkBlobSupport(idb) {
                    if (typeof supportsBlobs === "boolean") return Promise$1.resolve(supportsBlobs);
                    return _checkBlobSupportWithoutCaching(idb).then(function(value) {
                        supportsBlobs = value;
                        return supportsBlobs;
                    });
                }
                function _deferReadiness(dbInfo) {
                    var dbContext = dbContexts[dbInfo.name];
                    // Create a deferred object representing the current database operation.
                    var deferredOperation = {};
                    deferredOperation.promise = new Promise$1(function(resolve, reject) {
                        deferredOperation.resolve = resolve;
                        deferredOperation.reject = reject;
                    });
                    // Enqueue the deferred operation.
                    dbContext.deferredOperations.push(deferredOperation);
                    // Chain its promise to the database readiness.
                    if (!dbContext.dbReady) dbContext.dbReady = deferredOperation.promise;
                    else dbContext.dbReady = dbContext.dbReady.then(function() {
                        return deferredOperation.promise;
                    });
                }
                function _advanceReadiness(dbInfo) {
                    var dbContext = dbContexts[dbInfo.name];
                    // Dequeue a deferred operation.
                    var deferredOperation = dbContext.deferredOperations.pop();
                    // Resolve its promise (which is part of the database readiness
                    // chain of promises).
                    if (deferredOperation) {
                        deferredOperation.resolve();
                        return deferredOperation.promise;
                    }
                }
                function _rejectReadiness(dbInfo, err) {
                    var dbContext = dbContexts[dbInfo.name];
                    // Dequeue a deferred operation.
                    var deferredOperation = dbContext.deferredOperations.pop();
                    // Reject its promise (which is part of the database readiness
                    // chain of promises).
                    if (deferredOperation) {
                        deferredOperation.reject(err);
                        return deferredOperation.promise;
                    }
                }
                function _getConnection(dbInfo, upgradeNeeded) {
                    return new Promise$1(function(resolve, reject) {
                        dbContexts[dbInfo.name] = dbContexts[dbInfo.name] || createDbContext();
                        if (dbInfo.db) {
                            if (upgradeNeeded) {
                                _deferReadiness(dbInfo);
                                dbInfo.db.close();
                            } else return resolve(dbInfo.db);
                        }
                        var dbArgs = [
                            dbInfo.name
                        ];
                        if (upgradeNeeded) dbArgs.push(dbInfo.version);
                        var openreq = idb1.open.apply(idb1, dbArgs);
                        if (upgradeNeeded) openreq.onupgradeneeded = function(e) {
                            var db = openreq.result;
                            try {
                                db.createObjectStore(dbInfo.storeName);
                                if (e.oldVersion <= 1) // Added when support for blob shims was added
                                db.createObjectStore(DETECT_BLOB_SUPPORT_STORE);
                            } catch (ex) {
                                if (ex.name === "ConstraintError") console.warn('The database "' + dbInfo.name + '"' + " has been upgraded from version " + e.oldVersion + " to version " + e.newVersion + ', but the storage "' + dbInfo.storeName + '" already exists.');
                                else throw ex;
                            }
                        };
                        openreq.onerror = function(e) {
                            e.preventDefault();
                            reject(openreq.error);
                        };
                        openreq.onsuccess = function() {
                            var db = openreq.result;
                            db.onversionchange = function(e) {
                                // Triggered when the database is modified (e.g. adding an objectStore) or
                                // deleted (even when initiated by other sessions in different tabs).
                                // Closing the connection here prevents those operations from being blocked.
                                // If the database is accessed again later by this instance, the connection
                                // will be reopened or the database recreated as needed.
                                e.target.close();
                            };
                            resolve(db);
                            _advanceReadiness(dbInfo);
                        };
                    });
                }
                function _getOriginalConnection(dbInfo) {
                    return _getConnection(dbInfo, false);
                }
                function _getUpgradedConnection(dbInfo) {
                    return _getConnection(dbInfo, true);
                }
                function _isUpgradeNeeded(dbInfo, defaultVersion) {
                    if (!dbInfo.db) return true;
                    var isNewStore = !dbInfo.db.objectStoreNames.contains(dbInfo.storeName);
                    var isDowngrade = dbInfo.version < dbInfo.db.version;
                    var isUpgrade = dbInfo.version > dbInfo.db.version;
                    if (isDowngrade) {
                        // If the version is not the default one
                        // then warn for impossible downgrade.
                        if (dbInfo.version !== defaultVersion) console.warn('The database "' + dbInfo.name + '"' + " can't be downgraded from version " + dbInfo.db.version + " to version " + dbInfo.version + ".");
                        // Align the versions to prevent errors.
                        dbInfo.version = dbInfo.db.version;
                    }
                    if (isUpgrade || isNewStore) {
                        // If the store is new then increment the version (if needed).
                        // This will trigger an "upgradeneeded" event which is required
                        // for creating a store.
                        if (isNewStore) {
                            var incVersion = dbInfo.db.version + 1;
                            if (incVersion > dbInfo.version) dbInfo.version = incVersion;
                        }
                        return true;
                    }
                    return false;
                }
                // encode a blob for indexeddb engines that don't support blobs
                function _encodeBlob(blob) {
                    return new Promise$1(function(resolve, reject) {
                        var reader = new FileReader();
                        reader.onerror = reject;
                        reader.onloadend = function(e) {
                            var base64 = btoa(e.target.result || "");
                            resolve({
                                __local_forage_encoded_blob: true,
                                data: base64,
                                type: blob.type
                            });
                        };
                        reader.readAsBinaryString(blob);
                    });
                }
                // decode an encoded blob
                function _decodeBlob(encodedBlob) {
                    var arrayBuff = _binStringToArrayBuffer(atob(encodedBlob.data));
                    return createBlob([
                        arrayBuff
                    ], {
                        type: encodedBlob.type
                    });
                }
                // is this one of our fancy encoded blobs?
                function _isEncodedBlob(value) {
                    return value && value.__local_forage_encoded_blob;
                }
                // Specialize the default `ready()` function by making it dependent
                // on the current database operations. Thus, the driver will be actually
                // ready when it's been initialized (default) *and* there are no pending
                // operations on the database (initiated by some other instances).
                function _fullyReady(callback) {
                    var self = this;
                    var promise = self._initReady().then(function() {
                        var dbContext = dbContexts[self._dbInfo.name];
                        if (dbContext && dbContext.dbReady) return dbContext.dbReady;
                    });
                    executeTwoCallbacks(promise, callback, callback);
                    return promise;
                }
                // Try to establish a new db connection to replace the
                // current one which is broken (i.e. experiencing
                // InvalidStateError while creating a transaction).
                function _tryReconnect(dbInfo) {
                    _deferReadiness(dbInfo);
                    var dbContext = dbContexts[dbInfo.name];
                    var forages = dbContext.forages;
                    for(var i2 = 0; i2 < forages.length; i2++){
                        var forage = forages[i2];
                        if (forage._dbInfo.db) {
                            forage._dbInfo.db.close();
                            forage._dbInfo.db = null;
                        }
                    }
                    dbInfo.db = null;
                    return _getOriginalConnection(dbInfo).then(function(db) {
                        dbInfo.db = db;
                        if (_isUpgradeNeeded(dbInfo)) // Reopen the database for upgrading.
                        return _getUpgradedConnection(dbInfo);
                        return db;
                    }).then(function(db) {
                        // store the latest db reference
                        // in case the db was upgraded
                        dbInfo.db = dbContext.db = db;
                        for(var i = 0; i < forages.length; i++)forages[i]._dbInfo.db = db;
                    })["catch"](function(err) {
                        _rejectReadiness(dbInfo, err);
                        throw err;
                    });
                }
                // FF doesn't like Promises (micro-tasks) and IDDB store operations,
                // so we have to do it with callbacks
                function createTransaction(dbInfo, mode, callback, retries) {
                    if (retries === undefined) retries = 1;
                    try {
                        var tx = dbInfo.db.transaction(dbInfo.storeName, mode);
                        callback(null, tx);
                    } catch (err) {
                        if (retries > 0 && (!dbInfo.db || err.name === "InvalidStateError" || err.name === "NotFoundError")) return Promise$1.resolve().then(function() {
                            if (!dbInfo.db || err.name === "NotFoundError" && !dbInfo.db.objectStoreNames.contains(dbInfo.storeName) && dbInfo.version <= dbInfo.db.version) {
                                // increase the db version, to create the new ObjectStore
                                if (dbInfo.db) dbInfo.version = dbInfo.db.version + 1;
                                // Reopen the database for upgrading.
                                return _getUpgradedConnection(dbInfo);
                            }
                        }).then(function() {
                            return _tryReconnect(dbInfo).then(function() {
                                createTransaction(dbInfo, mode, callback, retries - 1);
                            });
                        })["catch"](callback);
                        callback(err);
                    }
                }
                function createDbContext() {
                    return {
                        // Running localForages sharing a database.
                        forages: [],
                        // Shared database.
                        db: null,
                        // Database readiness (promise).
                        dbReady: null,
                        // Deferred operations on the database.
                        deferredOperations: []
                    };
                }
                // Open the IndexedDB database (automatically creates one if one didn't
                // previously exist), using any options set in the config.
                function _initStorage(options) {
                    var self = this;
                    var dbInfo = {
                        db: null
                    };
                    if (options) for(var i in options)dbInfo[i] = options[i];
                    // Get the current context of the database;
                    var dbContext = dbContexts[dbInfo.name];
                    // ...or create a new context.
                    if (!dbContext) {
                        dbContext = createDbContext();
                        // Register the new context in the global container.
                        dbContexts[dbInfo.name] = dbContext;
                    }
                    // Register itself as a running localForage in the current context.
                    dbContext.forages.push(self);
                    // Replace the default `ready()` function with the specialized one.
                    if (!self._initReady) {
                        self._initReady = self.ready;
                        self.ready = _fullyReady;
                    }
                    // Create an array of initialization states of the related localForages.
                    var initPromises = [];
                    function ignoreErrors() {
                        // Don't handle errors here,
                        // just makes sure related localForages aren't pending.
                        return Promise$1.resolve();
                    }
                    for(var j = 0; j < dbContext.forages.length; j++){
                        var forage = dbContext.forages[j];
                        if (forage !== self) // Don't wait for itself...
                        initPromises.push(forage._initReady()["catch"](ignoreErrors));
                    }
                    // Take a snapshot of the related localForages.
                    var forages = dbContext.forages.slice(0);
                    // Initialize the connection process only when
                    // all the related localForages aren't pending.
                    return Promise$1.all(initPromises).then(function() {
                        dbInfo.db = dbContext.db;
                        // Get the connection or open a new one without upgrade.
                        return _getOriginalConnection(dbInfo);
                    }).then(function(db) {
                        dbInfo.db = db;
                        if (_isUpgradeNeeded(dbInfo, self._defaultConfig.version)) // Reopen the database for upgrading.
                        return _getUpgradedConnection(dbInfo);
                        return db;
                    }).then(function(db) {
                        dbInfo.db = dbContext.db = db;
                        self._dbInfo = dbInfo;
                        // Share the final connection amongst related localForages.
                        for(var k = 0; k < forages.length; k++){
                            var forage = forages[k];
                            if (forage !== self) {
                                // Self is already up-to-date.
                                forage._dbInfo.db = dbInfo.db;
                                forage._dbInfo.version = dbInfo.version;
                            }
                        }
                    });
                }
                function getItem(key, callback) {
                    var self = this;
                    key = normalizeKey(key);
                    var promise = new Promise$1(function(resolve, reject) {
                        self.ready().then(function() {
                            createTransaction(self._dbInfo, READ_ONLY, function(err, transaction) {
                                if (err) return reject(err);
                                try {
                                    var store = transaction.objectStore(self._dbInfo.storeName);
                                    var req = store.get(key);
                                    req.onsuccess = function() {
                                        var value = req.result;
                                        if (value === undefined) value = null;
                                        if (_isEncodedBlob(value)) value = _decodeBlob(value);
                                        resolve(value);
                                    };
                                    req.onerror = function() {
                                        reject(req.error);
                                    };
                                } catch (e) {
                                    reject(e);
                                }
                            });
                        })["catch"](reject);
                    });
                    executeCallback(promise, callback);
                    return promise;
                }
                // Iterate over all items stored in database.
                function iterate(iterator, callback) {
                    var self = this;
                    var promise = new Promise$1(function(resolve, reject) {
                        self.ready().then(function() {
                            createTransaction(self._dbInfo, READ_ONLY, function(err, transaction) {
                                if (err) return reject(err);
                                try {
                                    var store = transaction.objectStore(self._dbInfo.storeName);
                                    var req = store.openCursor();
                                    var iterationNumber = 1;
                                    req.onsuccess = function() {
                                        var cursor = req.result;
                                        if (cursor) {
                                            var value = cursor.value;
                                            if (_isEncodedBlob(value)) value = _decodeBlob(value);
                                            var result = iterator(value, cursor.key, iterationNumber++);
                                            // when the iterator callback returns any
                                            // (non-`undefined`) value, then we stop
                                            // the iteration immediately
                                            if (result !== void 0) resolve(result);
                                            else cursor["continue"]();
                                        } else resolve();
                                    };
                                    req.onerror = function() {
                                        reject(req.error);
                                    };
                                } catch (e) {
                                    reject(e);
                                }
                            });
                        })["catch"](reject);
                    });
                    executeCallback(promise, callback);
                    return promise;
                }
                function setItem(key, value1, callback) {
                    var self = this;
                    key = normalizeKey(key);
                    var promise = new Promise$1(function(resolve, reject) {
                        var dbInfo;
                        self.ready().then(function() {
                            dbInfo = self._dbInfo;
                            if (toString.call(value1) === "[object Blob]") return _checkBlobSupport(dbInfo.db).then(function(blobSupport) {
                                if (blobSupport) return value1;
                                return _encodeBlob(value1);
                            });
                            return value1;
                        }).then(function(value) {
                            createTransaction(self._dbInfo, READ_WRITE, function(err1, transaction) {
                                if (err1) return reject(err1);
                                try {
                                    var store = transaction.objectStore(self._dbInfo.storeName);
                                    // The reason we don't _save_ null is because IE 10 does
                                    // not support saving the `null` type in IndexedDB. How
                                    // ironic, given the bug below!
                                    // See: https://github.com/mozilla/localForage/issues/161
                                    if (value === null) value = undefined;
                                    var req = store.put(value, key);
                                    transaction.oncomplete = function() {
                                        // Cast to undefined so the value passed to
                                        // callback/promise is the same as what one would get out
                                        // of `getItem()` later. This leads to some weirdness
                                        // (setItem('foo', undefined) will return `null`), but
                                        // it's not my fault localStorage is our baseline and that
                                        // it's weird.
                                        if (value === undefined) value = null;
                                        resolve(value);
                                    };
                                    transaction.onabort = transaction.onerror = function() {
                                        var err = req.error ? req.error : req.transaction.error;
                                        reject(err);
                                    };
                                } catch (e) {
                                    reject(e);
                                }
                            });
                        })["catch"](reject);
                    });
                    executeCallback(promise, callback);
                    return promise;
                }
                function removeItem(key, callback) {
                    var self = this;
                    key = normalizeKey(key);
                    var promise = new Promise$1(function(resolve, reject) {
                        self.ready().then(function() {
                            createTransaction(self._dbInfo, READ_WRITE, function(err2, transaction) {
                                if (err2) return reject(err2);
                                try {
                                    var store = transaction.objectStore(self._dbInfo.storeName);
                                    // We use a Grunt task to make this safe for IE and some
                                    // versions of Android (including those used by Cordova).
                                    // Normally IE won't like `.delete()` and will insist on
                                    // using `['delete']()`, but we have a build step that
                                    // fixes this for us now.
                                    var req = store["delete"](key);
                                    transaction.oncomplete = function() {
                                        resolve();
                                    };
                                    transaction.onerror = function() {
                                        reject(req.error);
                                    };
                                    // The request will be also be aborted if we've exceeded our storage
                                    // space.
                                    transaction.onabort = function() {
                                        var err = req.error ? req.error : req.transaction.error;
                                        reject(err);
                                    };
                                } catch (e) {
                                    reject(e);
                                }
                            });
                        })["catch"](reject);
                    });
                    executeCallback(promise, callback);
                    return promise;
                }
                function clear(callback) {
                    var self = this;
                    var promise = new Promise$1(function(resolve, reject) {
                        self.ready().then(function() {
                            createTransaction(self._dbInfo, READ_WRITE, function(err3, transaction) {
                                if (err3) return reject(err3);
                                try {
                                    var store = transaction.objectStore(self._dbInfo.storeName);
                                    var req = store.clear();
                                    transaction.oncomplete = function() {
                                        resolve();
                                    };
                                    transaction.onabort = transaction.onerror = function() {
                                        var err = req.error ? req.error : req.transaction.error;
                                        reject(err);
                                    };
                                } catch (e) {
                                    reject(e);
                                }
                            });
                        })["catch"](reject);
                    });
                    executeCallback(promise, callback);
                    return promise;
                }
                function length1(callback) {
                    var self = this;
                    var promise = new Promise$1(function(resolve, reject) {
                        self.ready().then(function() {
                            createTransaction(self._dbInfo, READ_ONLY, function(err, transaction) {
                                if (err) return reject(err);
                                try {
                                    var store = transaction.objectStore(self._dbInfo.storeName);
                                    var req = store.count();
                                    req.onsuccess = function() {
                                        resolve(req.result);
                                    };
                                    req.onerror = function() {
                                        reject(req.error);
                                    };
                                } catch (e) {
                                    reject(e);
                                }
                            });
                        })["catch"](reject);
                    });
                    executeCallback(promise, callback);
                    return promise;
                }
                function key1(n, callback) {
                    var self = this;
                    var promise = new Promise$1(function(resolve, reject) {
                        if (n < 0) {
                            resolve(null);
                            return;
                        }
                        self.ready().then(function() {
                            createTransaction(self._dbInfo, READ_ONLY, function(err, transaction) {
                                if (err) return reject(err);
                                try {
                                    var store = transaction.objectStore(self._dbInfo.storeName);
                                    var advanced = false;
                                    var req = store.openKeyCursor();
                                    req.onsuccess = function() {
                                        var cursor = req.result;
                                        if (!cursor) {
                                            // this means there weren't enough keys
                                            resolve(null);
                                            return;
                                        }
                                        if (n === 0) // We have the first key, return it if that's what they
                                        // wanted.
                                        resolve(cursor.key);
                                        else if (!advanced) {
                                            // Otherwise, ask the cursor to skip ahead n
                                            // records.
                                            advanced = true;
                                            cursor.advance(n);
                                        } else // When we get here, we've got the nth key.
                                        resolve(cursor.key);
                                    };
                                    req.onerror = function() {
                                        reject(req.error);
                                    };
                                } catch (e) {
                                    reject(e);
                                }
                            });
                        })["catch"](reject);
                    });
                    executeCallback(promise, callback);
                    return promise;
                }
                function keys1(callback) {
                    var self = this;
                    var promise = new Promise$1(function(resolve, reject) {
                        self.ready().then(function() {
                            createTransaction(self._dbInfo, READ_ONLY, function(err, transaction) {
                                if (err) return reject(err);
                                try {
                                    var store = transaction.objectStore(self._dbInfo.storeName);
                                    var req = store.openKeyCursor();
                                    var keys = [];
                                    req.onsuccess = function() {
                                        var cursor = req.result;
                                        if (!cursor) {
                                            resolve(keys);
                                            return;
                                        }
                                        keys.push(cursor.key);
                                        cursor["continue"]();
                                    };
                                    req.onerror = function() {
                                        reject(req.error);
                                    };
                                } catch (e) {
                                    reject(e);
                                }
                            });
                        })["catch"](reject);
                    });
                    executeCallback(promise, callback);
                    return promise;
                }
                function dropInstance(options, callback) {
                    callback = getCallback.apply(this, arguments);
                    var currentConfig = this.config();
                    options = typeof options !== "function" && options || {};
                    if (!options.name) {
                        options.name = options.name || currentConfig.name;
                        options.storeName = options.storeName || currentConfig.storeName;
                    }
                    var self = this;
                    var promise;
                    if (!options.name) promise = Promise$1.reject("Invalid arguments");
                    else {
                        var isCurrentDb = options.name === currentConfig.name && self._dbInfo.db;
                        var dbPromise = isCurrentDb ? Promise$1.resolve(self._dbInfo.db) : _getOriginalConnection(options).then(function(db) {
                            var dbContext = dbContexts[options.name];
                            var forages = dbContext.forages;
                            dbContext.db = db;
                            for(var i = 0; i < forages.length; i++)forages[i]._dbInfo.db = db;
                            return db;
                        });
                        if (!options.storeName) promise = dbPromise.then(function(db1) {
                            _deferReadiness(options);
                            var dbContext = dbContexts[options.name];
                            var forages = dbContext.forages;
                            db1.close();
                            for(var i3 = 0; i3 < forages.length; i3++){
                                var forage = forages[i3];
                                forage._dbInfo.db = null;
                            }
                            var dropDBPromise = new Promise$1(function(resolve, reject) {
                                var req = idb1.deleteDatabase(options.name);
                                req.onerror = function() {
                                    var db = req.result;
                                    if (db) db.close();
                                    reject(req.error);
                                };
                                req.onblocked = function() {
                                    // Closing all open connections in onversionchange handler should prevent this situation, but if
                                    // we do get here, it just means the request remains pending - eventually it will succeed or error
                                    console.warn('dropInstance blocked for database "' + options.name + '" until all open connections are closed');
                                };
                                req.onsuccess = function() {
                                    var db = req.result;
                                    if (db) db.close();
                                    resolve(db);
                                };
                            });
                            return dropDBPromise.then(function(db) {
                                dbContext.db = db;
                                for(var i = 0; i < forages.length; i++){
                                    var _forage = forages[i];
                                    _advanceReadiness(_forage._dbInfo);
                                }
                            })["catch"](function(err) {
                                (_rejectReadiness(options, err) || Promise$1.resolve())["catch"](function() {});
                                throw err;
                            });
                        });
                        else promise = dbPromise.then(function(db2) {
                            if (!db2.objectStoreNames.contains(options.storeName)) return;
                            var newVersion = db2.version + 1;
                            _deferReadiness(options);
                            var dbContext = dbContexts[options.name];
                            var forages = dbContext.forages;
                            db2.close();
                            for(var i = 0; i < forages.length; i++){
                                var forage = forages[i];
                                forage._dbInfo.db = null;
                                forage._dbInfo.version = newVersion;
                            }
                            var dropObjectPromise = new Promise$1(function(resolve, reject) {
                                var req = idb1.open(options.name, newVersion);
                                req.onerror = function(err) {
                                    var db = req.result;
                                    db.close();
                                    reject(err);
                                };
                                req.onupgradeneeded = function() {
                                    var db = req.result;
                                    db.deleteObjectStore(options.storeName);
                                };
                                req.onsuccess = function() {
                                    var db = req.result;
                                    db.close();
                                    resolve(db);
                                };
                            });
                            return dropObjectPromise.then(function(db) {
                                dbContext.db = db;
                                for(var j = 0; j < forages.length; j++){
                                    var _forage2 = forages[j];
                                    _forage2._dbInfo.db = db;
                                    _advanceReadiness(_forage2._dbInfo);
                                }
                            })["catch"](function(err) {
                                (_rejectReadiness(options, err) || Promise$1.resolve())["catch"](function() {});
                                throw err;
                            });
                        });
                    }
                    executeCallback(promise, callback);
                    return promise;
                }
                var asyncStorage = {
                    _driver: "asyncStorage",
                    _initStorage: _initStorage,
                    _support: isIndexedDBValid(),
                    iterate: iterate,
                    getItem: getItem,
                    setItem: setItem,
                    removeItem: removeItem,
                    clear: clear,
                    length: length1,
                    key: key1,
                    keys: keys1,
                    dropInstance: dropInstance
                };
                function isWebSQLValid() {
                    return typeof openDatabase === "function";
                }
                // Sadly, the best way to save binary data in WebSQL/localStorage is serializing
                // it to Base64, so this is how we store it to prevent very strange errors with less
                // verbose ways of binary <-> string data storage.
                var BASE_CHARS = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/";
                var BLOB_TYPE_PREFIX = "~~local_forage_type~";
                var BLOB_TYPE_PREFIX_REGEX = /^~~local_forage_type~([^~]+)~/;
                var SERIALIZED_MARKER = "__lfsc__:";
                var SERIALIZED_MARKER_LENGTH = SERIALIZED_MARKER.length;
                // OMG the serializations!
                var TYPE_ARRAYBUFFER = "arbf";
                var TYPE_BLOB = "blob";
                var TYPE_INT8ARRAY = "si08";
                var TYPE_UINT8ARRAY = "ui08";
                var TYPE_UINT8CLAMPEDARRAY = "uic8";
                var TYPE_INT16ARRAY = "si16";
                var TYPE_INT32ARRAY = "si32";
                var TYPE_UINT16ARRAY = "ur16";
                var TYPE_UINT32ARRAY = "ui32";
                var TYPE_FLOAT32ARRAY = "fl32";
                var TYPE_FLOAT64ARRAY = "fl64";
                var TYPE_SERIALIZED_MARKER_LENGTH = SERIALIZED_MARKER_LENGTH + TYPE_ARRAYBUFFER.length;
                var toString$1 = Object.prototype.toString;
                function stringToBuffer(serializedString) {
                    // Fill the string into a ArrayBuffer.
                    var bufferLength = serializedString.length * 0.75;
                    var len = serializedString.length;
                    var i;
                    var p = 0;
                    var encoded1, encoded2, encoded3, encoded4;
                    if (serializedString[serializedString.length - 1] === "=") {
                        bufferLength--;
                        if (serializedString[serializedString.length - 2] === "=") bufferLength--;
                    }
                    var buffer = new ArrayBuffer(bufferLength);
                    var bytes = new Uint8Array(buffer);
                    for(i = 0; i < len; i += 4){
                        encoded1 = BASE_CHARS.indexOf(serializedString[i]);
                        encoded2 = BASE_CHARS.indexOf(serializedString[i + 1]);
                        encoded3 = BASE_CHARS.indexOf(serializedString[i + 2]);
                        encoded4 = BASE_CHARS.indexOf(serializedString[i + 3]);
                        /*jslint bitwise: true */ bytes[p++] = encoded1 << 2 | encoded2 >> 4;
                        bytes[p++] = (encoded2 & 15) << 4 | encoded3 >> 2;
                        bytes[p++] = (encoded3 & 3) << 6 | encoded4 & 63;
                    }
                    return buffer;
                }
                // Converts a buffer to a string to store, serialized, in the backend
                // storage library.
                function bufferToString(buffer) {
                    // base64-arraybuffer
                    var bytes = new Uint8Array(buffer);
                    var base64String = "";
                    var i;
                    for(i = 0; i < bytes.length; i += 3){
                        /*jslint bitwise: true */ base64String += BASE_CHARS[bytes[i] >> 2];
                        base64String += BASE_CHARS[(bytes[i] & 3) << 4 | bytes[i + 1] >> 4];
                        base64String += BASE_CHARS[(bytes[i + 1] & 15) << 2 | bytes[i + 2] >> 6];
                        base64String += BASE_CHARS[bytes[i + 2] & 63];
                    }
                    if (bytes.length % 3 === 2) base64String = base64String.substring(0, base64String.length - 1) + "=";
                    else if (bytes.length % 3 === 1) base64String = base64String.substring(0, base64String.length - 2) + "==";
                    return base64String;
                }
                // Serialize a value, afterwards executing a callback (which usually
                // instructs the `setItem()` callback/promise to be executed). This is how
                // we store binary data with localStorage.
                function serialize(value, callback) {
                    var valueType = "";
                    if (value) valueType = toString$1.call(value);
                    // Cannot use `value instanceof ArrayBuffer` or such here, as these
                    // checks fail when running the tests using casper.js...
                    //
                    // TODO: See why those tests fail and use a better solution.
                    if (value && (valueType === "[object ArrayBuffer]" || value.buffer && toString$1.call(value.buffer) === "[object ArrayBuffer]")) {
                        // Convert binary arrays to a string and prefix the string with
                        // a special marker.
                        var buffer;
                        var marker = SERIALIZED_MARKER;
                        if (value instanceof ArrayBuffer) {
                            buffer = value;
                            marker += TYPE_ARRAYBUFFER;
                        } else {
                            buffer = value.buffer;
                            if (valueType === "[object Int8Array]") marker += TYPE_INT8ARRAY;
                            else if (valueType === "[object Uint8Array]") marker += TYPE_UINT8ARRAY;
                            else if (valueType === "[object Uint8ClampedArray]") marker += TYPE_UINT8CLAMPEDARRAY;
                            else if (valueType === "[object Int16Array]") marker += TYPE_INT16ARRAY;
                            else if (valueType === "[object Uint16Array]") marker += TYPE_UINT16ARRAY;
                            else if (valueType === "[object Int32Array]") marker += TYPE_INT32ARRAY;
                            else if (valueType === "[object Uint32Array]") marker += TYPE_UINT32ARRAY;
                            else if (valueType === "[object Float32Array]") marker += TYPE_FLOAT32ARRAY;
                            else if (valueType === "[object Float64Array]") marker += TYPE_FLOAT64ARRAY;
                            else callback(new Error("Failed to get type for BinaryArray"));
                        }
                        callback(marker + bufferToString(buffer));
                    } else if (valueType === "[object Blob]") {
                        // Conver the blob to a binaryArray and then to a string.
                        var fileReader = new FileReader();
                        fileReader.onload = function() {
                            // Backwards-compatible prefix for the blob type.
                            var str = BLOB_TYPE_PREFIX + value.type + "~" + bufferToString(this.result);
                            callback(SERIALIZED_MARKER + TYPE_BLOB + str);
                        };
                        fileReader.readAsArrayBuffer(value);
                    } else try {
                        callback(JSON.stringify(value));
                    } catch (e) {
                        console.error("Couldn't convert value into a JSON string: ", value);
                        callback(null, e);
                    }
                }
                // Deserialize data we've inserted into a value column/field. We place
                // special markers into our strings to mark them as encoded; this isn't
                // as nice as a meta field, but it's the only sane thing we can do whilst
                // keeping localStorage support intact.
                //
                // Oftentimes this will just deserialize JSON content, but if we have a
                // special marker (SERIALIZED_MARKER, defined above), we will extract
                // some kind of arraybuffer/binary data/typed array out of the string.
                function deserialize(value) {
                    // If we haven't marked this string as being specially serialized (i.e.
                    // something other than serialized JSON), we can just return it and be
                    // done with it.
                    if (value.substring(0, SERIALIZED_MARKER_LENGTH) !== SERIALIZED_MARKER) return JSON.parse(value);
                    // The following code deals with deserializing some kind of Blob or
                    // TypedArray. First we separate out the type of data we're dealing
                    // with from the data itself.
                    var serializedString = value.substring(TYPE_SERIALIZED_MARKER_LENGTH);
                    var type = value.substring(SERIALIZED_MARKER_LENGTH, TYPE_SERIALIZED_MARKER_LENGTH);
                    var blobType;
                    // Backwards-compatible blob type serialization strategy.
                    // DBs created with older versions of localForage will simply not have the blob type.
                    if (type === TYPE_BLOB && BLOB_TYPE_PREFIX_REGEX.test(serializedString)) {
                        var matcher = serializedString.match(BLOB_TYPE_PREFIX_REGEX);
                        blobType = matcher[1];
                        serializedString = serializedString.substring(matcher[0].length);
                    }
                    var buffer = stringToBuffer(serializedString);
                    // Return the right type based on the code/type set during
                    // serialization.
                    switch(type){
                        case TYPE_ARRAYBUFFER:
                            return buffer;
                        case TYPE_BLOB:
                            return createBlob([
                                buffer
                            ], {
                                type: blobType
                            });
                        case TYPE_INT8ARRAY:
                            return new Int8Array(buffer);
                        case TYPE_UINT8ARRAY:
                            return new Uint8Array(buffer);
                        case TYPE_UINT8CLAMPEDARRAY:
                            return new Uint8ClampedArray(buffer);
                        case TYPE_INT16ARRAY:
                            return new Int16Array(buffer);
                        case TYPE_UINT16ARRAY:
                            return new Uint16Array(buffer);
                        case TYPE_INT32ARRAY:
                            return new Int32Array(buffer);
                        case TYPE_UINT32ARRAY:
                            return new Uint32Array(buffer);
                        case TYPE_FLOAT32ARRAY:
                            return new Float32Array(buffer);
                        case TYPE_FLOAT64ARRAY:
                            return new Float64Array(buffer);
                        default:
                            throw new Error("Unkown type: " + type);
                    }
                }
                var localforageSerializer = {
                    serialize: serialize,
                    deserialize: deserialize,
                    stringToBuffer: stringToBuffer,
                    bufferToString: bufferToString
                };
                /*
 * Includes code from:
 *
 * base64-arraybuffer
 * https://github.com/niklasvh/base64-arraybuffer
 *
 * Copyright (c) 2012 Niklas von Hertzen
 * Licensed under the MIT license.
 */ function createDbTable(t, dbInfo, callback, errorCallback) {
                    t.executeSql("CREATE TABLE IF NOT EXISTS " + dbInfo.storeName + " " + "(id INTEGER PRIMARY KEY, key unique, value)", [], callback, errorCallback);
                }
                // Open the WebSQL database (automatically creates one if one didn't
                // previously exist), using any options set in the config.
                function _initStorage$1(options) {
                    var self = this;
                    var dbInfo = {
                        db: null
                    };
                    if (options) for(var i in options)dbInfo[i] = typeof options[i] !== "string" ? options[i].toString() : options[i];
                    var dbInfoPromise = new Promise$1(function(resolve, reject) {
                        // Open the database; the openDatabase API will automatically
                        // create it for us if it doesn't exist.
                        try {
                            dbInfo.db = openDatabase(dbInfo.name, String(dbInfo.version), dbInfo.description, dbInfo.size);
                        } catch (e) {
                            return reject(e);
                        }
                        // Create our key/value table if it doesn't exist.
                        dbInfo.db.transaction(function(t) {
                            createDbTable(t, dbInfo, function() {
                                self._dbInfo = dbInfo;
                                resolve();
                            }, function(t, error) {
                                reject(error);
                            });
                        }, reject);
                    });
                    dbInfo.serializer = localforageSerializer;
                    return dbInfoPromise;
                }
                function tryExecuteSql(t1, dbInfo, sqlStatement, args, callback, errorCallback) {
                    t1.executeSql(sqlStatement, args, callback, function(t2, error) {
                        if (error.code === error.SYNTAX_ERR) t2.executeSql("SELECT name FROM sqlite_master WHERE type='table' AND name = ?", [
                            dbInfo.storeName
                        ], function(t, results) {
                            if (!results.rows.length) // if the table is missing (was deleted)
                            // re-create it table and retry
                            createDbTable(t, dbInfo, function() {
                                t.executeSql(sqlStatement, args, callback, errorCallback);
                            }, errorCallback);
                            else errorCallback(t, error);
                        }, errorCallback);
                        else errorCallback(t2, error);
                    }, errorCallback);
                }
                function getItem$1(key, callback) {
                    var self = this;
                    key = normalizeKey(key);
                    var promise = new Promise$1(function(resolve, reject) {
                        self.ready().then(function() {
                            var dbInfo = self._dbInfo;
                            dbInfo.db.transaction(function(t) {
                                tryExecuteSql(t, dbInfo, "SELECT * FROM " + dbInfo.storeName + " WHERE key = ? LIMIT 1", [
                                    key
                                ], function(t, results) {
                                    var result = results.rows.length ? results.rows.item(0).value : null;
                                    // Check to see if this is serialized content we need to
                                    // unpack.
                                    if (result) result = dbInfo.serializer.deserialize(result);
                                    resolve(result);
                                }, function(t, error) {
                                    reject(error);
                                });
                            });
                        })["catch"](reject);
                    });
                    executeCallback(promise, callback);
                    return promise;
                }
                function iterate$1(iterator, callback) {
                    var self = this;
                    var promise = new Promise$1(function(resolve, reject) {
                        self.ready().then(function() {
                            var dbInfo = self._dbInfo;
                            dbInfo.db.transaction(function(t) {
                                tryExecuteSql(t, dbInfo, "SELECT * FROM " + dbInfo.storeName, [], function(t, results) {
                                    var rows = results.rows;
                                    var length = rows.length;
                                    for(var i = 0; i < length; i++){
                                        var item = rows.item(i);
                                        var result = item.value;
                                        // Check to see if this is serialized content
                                        // we need to unpack.
                                        if (result) result = dbInfo.serializer.deserialize(result);
                                        result = iterator(result, item.key, i + 1);
                                        // void(0) prevents problems with redefinition
                                        // of `undefined`.
                                        if (result !== void 0) {
                                            resolve(result);
                                            return;
                                        }
                                    }
                                    resolve();
                                }, function(t, error) {
                                    reject(error);
                                });
                            });
                        })["catch"](reject);
                    });
                    executeCallback(promise, callback);
                    return promise;
                }
                function _setItem(key, value2, callback, retriesLeft) {
                    var self = this;
                    key = normalizeKey(key);
                    var promise = new Promise$1(function(resolve, reject) {
                        self.ready().then(function() {
                            // The localStorage API doesn't return undefined values in an
                            // "expected" way, so undefined is always cast to null in all
                            // drivers. See: https://github.com/mozilla/localForage/pull/42
                            if (value2 === undefined) value2 = null;
                            // Save the original value to pass to the callback.
                            var originalValue = value2;
                            var dbInfo = self._dbInfo;
                            dbInfo.serializer.serialize(value2, function(value, error1) {
                                if (error1) reject(error1);
                                else dbInfo.db.transaction(function(t) {
                                    tryExecuteSql(t, dbInfo, "INSERT OR REPLACE INTO " + dbInfo.storeName + " " + "(key, value) VALUES (?, ?)", [
                                        key,
                                        value
                                    ], function() {
                                        resolve(originalValue);
                                    }, function(t, error) {
                                        reject(error);
                                    });
                                }, function(sqlError) {
                                    // The transaction failed; check
                                    // to see if it's a quota error.
                                    if (sqlError.code === sqlError.QUOTA_ERR) {
                                        // We reject the callback outright for now, but
                                        // it's worth trying to re-run the transaction.
                                        // Even if the user accepts the prompt to use
                                        // more storage on Safari, this error will
                                        // be called.
                                        //
                                        // Try to re-run the transaction.
                                        if (retriesLeft > 0) {
                                            resolve(_setItem.apply(self, [
                                                key,
                                                originalValue,
                                                callback,
                                                retriesLeft - 1
                                            ]));
                                            return;
                                        }
                                        reject(sqlError);
                                    }
                                });
                            });
                        })["catch"](reject);
                    });
                    executeCallback(promise, callback);
                    return promise;
                }
                function setItem$1(key, value, callback) {
                    return _setItem.apply(this, [
                        key,
                        value,
                        callback,
                        1
                    ]);
                }
                function removeItem$1(key, callback) {
                    var self = this;
                    key = normalizeKey(key);
                    var promise = new Promise$1(function(resolve, reject) {
                        self.ready().then(function() {
                            var dbInfo = self._dbInfo;
                            dbInfo.db.transaction(function(t) {
                                tryExecuteSql(t, dbInfo, "DELETE FROM " + dbInfo.storeName + " WHERE key = ?", [
                                    key
                                ], function() {
                                    resolve();
                                }, function(t, error) {
                                    reject(error);
                                });
                            });
                        })["catch"](reject);
                    });
                    executeCallback(promise, callback);
                    return promise;
                }
                // Deletes every item in the table.
                // TODO: Find out if this resets the AUTO_INCREMENT number.
                function clear$1(callback) {
                    var self = this;
                    var promise = new Promise$1(function(resolve, reject) {
                        self.ready().then(function() {
                            var dbInfo = self._dbInfo;
                            dbInfo.db.transaction(function(t) {
                                tryExecuteSql(t, dbInfo, "DELETE FROM " + dbInfo.storeName, [], function() {
                                    resolve();
                                }, function(t, error) {
                                    reject(error);
                                });
                            });
                        })["catch"](reject);
                    });
                    executeCallback(promise, callback);
                    return promise;
                }
                // Does a simple `COUNT(key)` to get the number of items stored in
                // localForage.
                function length$1(callback) {
                    var self = this;
                    var promise = new Promise$1(function(resolve, reject) {
                        self.ready().then(function() {
                            var dbInfo = self._dbInfo;
                            dbInfo.db.transaction(function(t) {
                                // Ahhh, SQL makes this one soooooo easy.
                                tryExecuteSql(t, dbInfo, "SELECT COUNT(key) as c FROM " + dbInfo.storeName, [], function(t, results) {
                                    var result = results.rows.item(0).c;
                                    resolve(result);
                                }, function(t, error) {
                                    reject(error);
                                });
                            });
                        })["catch"](reject);
                    });
                    executeCallback(promise, callback);
                    return promise;
                }
                // Return the key located at key index X; essentially gets the key from a
                // `WHERE id = ?`. This is the most efficient way I can think to implement
                // this rarely-used (in my experience) part of the API, but it can seem
                // inconsistent, because we do `INSERT OR REPLACE INTO` on `setItem()`, so
                // the ID of each key will change every time it's updated. Perhaps a stored
                // procedure for the `setItem()` SQL would solve this problem?
                // TODO: Don't change ID on `setItem()`.
                function key$1(n, callback) {
                    var self = this;
                    var promise = new Promise$1(function(resolve, reject) {
                        self.ready().then(function() {
                            var dbInfo = self._dbInfo;
                            dbInfo.db.transaction(function(t) {
                                tryExecuteSql(t, dbInfo, "SELECT key FROM " + dbInfo.storeName + " WHERE id = ? LIMIT 1", [
                                    n + 1
                                ], function(t, results) {
                                    var result = results.rows.length ? results.rows.item(0).key : null;
                                    resolve(result);
                                }, function(t, error) {
                                    reject(error);
                                });
                            });
                        })["catch"](reject);
                    });
                    executeCallback(promise, callback);
                    return promise;
                }
                function keys$1(callback) {
                    var self = this;
                    var promise = new Promise$1(function(resolve, reject) {
                        self.ready().then(function() {
                            var dbInfo = self._dbInfo;
                            dbInfo.db.transaction(function(t) {
                                tryExecuteSql(t, dbInfo, "SELECT key FROM " + dbInfo.storeName, [], function(t, results) {
                                    var keys = [];
                                    for(var i = 0; i < results.rows.length; i++)keys.push(results.rows.item(i).key);
                                    resolve(keys);
                                }, function(t, error) {
                                    reject(error);
                                });
                            });
                        })["catch"](reject);
                    });
                    executeCallback(promise, callback);
                    return promise;
                }
                // https://www.w3.org/TR/webdatabase/#databases
                // > There is no way to enumerate or delete the databases available for an origin from this API.
                function getAllStoreNames(db) {
                    return new Promise$1(function(resolve, reject) {
                        db.transaction(function(t) {
                            t.executeSql("SELECT name FROM sqlite_master WHERE type='table' AND name <> '__WebKitDatabaseInfoTable__'", [], function(t, results) {
                                var storeNames = [];
                                for(var i = 0; i < results.rows.length; i++)storeNames.push(results.rows.item(i).name);
                                resolve({
                                    db: db,
                                    storeNames: storeNames
                                });
                            }, function(t, error) {
                                reject(error);
                            });
                        }, function(sqlError) {
                            reject(sqlError);
                        });
                    });
                }
                function dropInstance$1(options, callback) {
                    callback = getCallback.apply(this, arguments);
                    var currentConfig = this.config();
                    options = typeof options !== "function" && options || {};
                    if (!options.name) {
                        options.name = options.name || currentConfig.name;
                        options.storeName = options.storeName || currentConfig.storeName;
                    }
                    var self = this;
                    var promise;
                    if (!options.name) promise = Promise$1.reject("Invalid arguments");
                    else promise = new Promise$1(function(resolve) {
                        var db;
                        if (options.name === currentConfig.name) // use the db reference of the current instance
                        db = self._dbInfo.db;
                        else db = openDatabase(options.name, "", "", 0);
                        if (!options.storeName) // drop all database tables
                        resolve(getAllStoreNames(db));
                        else resolve({
                            db: db,
                            storeNames: [
                                options.storeName
                            ]
                        });
                    }).then(function(operationInfo) {
                        return new Promise$1(function(resolve1, reject1) {
                            operationInfo.db.transaction(function(t) {
                                function dropTable(storeName) {
                                    return new Promise$1(function(resolve, reject) {
                                        t.executeSql("DROP TABLE IF EXISTS " + storeName, [], function() {
                                            resolve();
                                        }, function(t, error) {
                                            reject(error);
                                        });
                                    });
                                }
                                var operations = [];
                                for(var i = 0, len = operationInfo.storeNames.length; i < len; i++)operations.push(dropTable(operationInfo.storeNames[i]));
                                Promise$1.all(operations).then(function() {
                                    resolve1();
                                })["catch"](function(e) {
                                    reject1(e);
                                });
                            }, function(sqlError) {
                                reject1(sqlError);
                            });
                        });
                    });
                    executeCallback(promise, callback);
                    return promise;
                }
                var webSQLStorage = {
                    _driver: "webSQLStorage",
                    _initStorage: _initStorage$1,
                    _support: isWebSQLValid(),
                    iterate: iterate$1,
                    getItem: getItem$1,
                    setItem: setItem$1,
                    removeItem: removeItem$1,
                    clear: clear$1,
                    length: length$1,
                    key: key$1,
                    keys: keys$1,
                    dropInstance: dropInstance$1
                };
                function isLocalStorageValid() {
                    try {
                        return typeof localStorage !== "undefined" && "setItem" in localStorage && // in IE8 typeof localStorage.setItem === 'object'
                        !!localStorage.setItem;
                    } catch (e) {
                        return false;
                    }
                }
                function _getKeyPrefix(options, defaultConfig) {
                    var keyPrefix = options.name + "/";
                    if (options.storeName !== defaultConfig.storeName) keyPrefix += options.storeName + "/";
                    return keyPrefix;
                }
                // Check if localStorage throws when saving an item
                function checkIfLocalStorageThrows() {
                    var localStorageTestKey = "_localforage_support_test";
                    try {
                        localStorage.setItem(localStorageTestKey, true);
                        localStorage.removeItem(localStorageTestKey);
                        return false;
                    } catch (e) {
                        return true;
                    }
                }
                // Check if localStorage is usable and allows to save an item
                // This method checks if localStorage is usable in Safari Private Browsing
                // mode, or in any other case where the available quota for localStorage
                // is 0 and there wasn't any saved items yet.
                function _isLocalStorageUsable() {
                    return !checkIfLocalStorageThrows() || localStorage.length > 0;
                }
                // Config the localStorage backend, using options set in the config.
                function _initStorage$2(options) {
                    var self = this;
                    var dbInfo = {};
                    if (options) for(var i in options)dbInfo[i] = options[i];
                    dbInfo.keyPrefix = _getKeyPrefix(options, self._defaultConfig);
                    if (!_isLocalStorageUsable()) return Promise$1.reject();
                    self._dbInfo = dbInfo;
                    dbInfo.serializer = localforageSerializer;
                    return Promise$1.resolve();
                }
                // Remove all keys from the datastore, effectively destroying all data in
                // the app's key/value store!
                function clear$2(callback) {
                    var self = this;
                    var promise = self.ready().then(function() {
                        var keyPrefix = self._dbInfo.keyPrefix;
                        for(var i = localStorage.length - 1; i >= 0; i--){
                            var key = localStorage.key(i);
                            if (key.indexOf(keyPrefix) === 0) localStorage.removeItem(key);
                        }
                    });
                    executeCallback(promise, callback);
                    return promise;
                }
                // Retrieve an item from the store. Unlike the original async_storage
                // library in Gaia, we don't modify return values at all. If a key's value
                // is `undefined`, we pass that value to the callback function.
                function getItem$2(key, callback) {
                    var self = this;
                    key = normalizeKey(key);
                    var promise = self.ready().then(function() {
                        var dbInfo = self._dbInfo;
                        var result = localStorage.getItem(dbInfo.keyPrefix + key);
                        // If a result was found, parse it from the serialized
                        // string into a JS object. If result isn't truthy, the key
                        // is likely undefined and we'll pass it straight to the
                        // callback.
                        if (result) result = dbInfo.serializer.deserialize(result);
                        return result;
                    });
                    executeCallback(promise, callback);
                    return promise;
                }
                // Iterate over all items in the store.
                function iterate$2(iterator, callback) {
                    var self = this;
                    var promise = self.ready().then(function() {
                        var dbInfo = self._dbInfo;
                        var keyPrefix = dbInfo.keyPrefix;
                        var keyPrefixLength = keyPrefix.length;
                        var length = localStorage.length;
                        // We use a dedicated iterator instead of the `i` variable below
                        // so other keys we fetch in localStorage aren't counted in
                        // the `iterationNumber` argument passed to the `iterate()`
                        // callback.
                        //
                        // See: github.com/mozilla/localForage/pull/435#discussion_r38061530
                        var iterationNumber = 1;
                        for(var i = 0; i < length; i++){
                            var key = localStorage.key(i);
                            if (key.indexOf(keyPrefix) !== 0) continue;
                            var value = localStorage.getItem(key);
                            // If a result was found, parse it from the serialized
                            // string into a JS object. If result isn't truthy, the
                            // key is likely undefined and we'll pass it straight
                            // to the iterator.
                            if (value) value = dbInfo.serializer.deserialize(value);
                            value = iterator(value, key.substring(keyPrefixLength), iterationNumber++);
                            if (value !== void 0) return value;
                        }
                    });
                    executeCallback(promise, callback);
                    return promise;
                }
                // Same as localStorage's key() method, except takes a callback.
                function key$2(n, callback) {
                    var self = this;
                    var promise = self.ready().then(function() {
                        var dbInfo = self._dbInfo;
                        var result;
                        try {
                            result = localStorage.key(n);
                        } catch (error) {
                            result = null;
                        }
                        // Remove the prefix from the key, if a key is found.
                        if (result) result = result.substring(dbInfo.keyPrefix.length);
                        return result;
                    });
                    executeCallback(promise, callback);
                    return promise;
                }
                function keys$2(callback) {
                    var self = this;
                    var promise = self.ready().then(function() {
                        var dbInfo = self._dbInfo;
                        var length = localStorage.length;
                        var keys = [];
                        for(var i = 0; i < length; i++){
                            var itemKey = localStorage.key(i);
                            if (itemKey.indexOf(dbInfo.keyPrefix) === 0) keys.push(itemKey.substring(dbInfo.keyPrefix.length));
                        }
                        return keys;
                    });
                    executeCallback(promise, callback);
                    return promise;
                }
                // Supply the number of keys in the datastore to the callback function.
                function length$2(callback) {
                    var self = this;
                    var promise = self.keys().then(function(keys) {
                        return keys.length;
                    });
                    executeCallback(promise, callback);
                    return promise;
                }
                // Remove an item from the store, nice and simple.
                function removeItem$2(key, callback) {
                    var self = this;
                    key = normalizeKey(key);
                    var promise = self.ready().then(function() {
                        var dbInfo = self._dbInfo;
                        localStorage.removeItem(dbInfo.keyPrefix + key);
                    });
                    executeCallback(promise, callback);
                    return promise;
                }
                // Set a key's value and run an optional callback once the value is set.
                // Unlike Gaia's implementation, the callback function is passed the value,
                // in case you want to operate on that value only after you're sure it
                // saved, or something like that.
                function setItem$2(key, value3, callback) {
                    var self = this;
                    key = normalizeKey(key);
                    var promise = self.ready().then(function() {
                        // Convert undefined values to null.
                        // https://github.com/mozilla/localForage/pull/42
                        if (value3 === undefined) value3 = null;
                        // Save the original value to pass to the callback.
                        var originalValue = value3;
                        return new Promise$1(function(resolve, reject) {
                            var dbInfo = self._dbInfo;
                            dbInfo.serializer.serialize(value3, function(value, error) {
                                if (error) reject(error);
                                else try {
                                    localStorage.setItem(dbInfo.keyPrefix + key, value);
                                    resolve(originalValue);
                                } catch (e) {
                                    // localStorage capacity exceeded.
                                    // TODO: Make this a specific error/event.
                                    if (e.name === "QuotaExceededError" || e.name === "NS_ERROR_DOM_QUOTA_REACHED") reject(e);
                                    reject(e);
                                }
                            });
                        });
                    });
                    executeCallback(promise, callback);
                    return promise;
                }
                function dropInstance$2(options, callback) {
                    callback = getCallback.apply(this, arguments);
                    options = typeof options !== "function" && options || {};
                    if (!options.name) {
                        var currentConfig = this.config();
                        options.name = options.name || currentConfig.name;
                        options.storeName = options.storeName || currentConfig.storeName;
                    }
                    var self = this;
                    var promise;
                    if (!options.name) promise = Promise$1.reject("Invalid arguments");
                    else promise = new Promise$1(function(resolve) {
                        if (!options.storeName) resolve(options.name + "/");
                        else resolve(_getKeyPrefix(options, self._defaultConfig));
                    }).then(function(keyPrefix) {
                        for(var i = localStorage.length - 1; i >= 0; i--){
                            var key = localStorage.key(i);
                            if (key.indexOf(keyPrefix) === 0) localStorage.removeItem(key);
                        }
                    });
                    executeCallback(promise, callback);
                    return promise;
                }
                var localStorageWrapper = {
                    _driver: "localStorageWrapper",
                    _initStorage: _initStorage$2,
                    _support: isLocalStorageValid(),
                    iterate: iterate$2,
                    getItem: getItem$2,
                    setItem: setItem$2,
                    removeItem: removeItem$2,
                    clear: clear$2,
                    length: length$2,
                    key: key$2,
                    keys: keys$2,
                    dropInstance: dropInstance$2
                };
                var sameValue = function sameValue(x, y) {
                    return x === y || typeof x === "number" && typeof y === "number" && isNaN(x) && isNaN(y);
                };
                var includes = function includes(array, searchElement) {
                    var len = array.length;
                    var i = 0;
                    while(i < len){
                        if (sameValue(array[i], searchElement)) return true;
                        i++;
                    }
                    return false;
                };
                var isArray = Array.isArray || function(arg) {
                    return Object.prototype.toString.call(arg) === "[object Array]";
                };
                // Drivers are stored here when `defineDriver()` is called.
                // They are shared across all instances of localForage.
                var DefinedDrivers = {};
                var DriverSupport = {};
                var DefaultDrivers = {
                    INDEXEDDB: asyncStorage,
                    WEBSQL: webSQLStorage,
                    LOCALSTORAGE: localStorageWrapper
                };
                var DefaultDriverOrder = [
                    DefaultDrivers.INDEXEDDB._driver,
                    DefaultDrivers.WEBSQL._driver,
                    DefaultDrivers.LOCALSTORAGE._driver
                ];
                var OptionalDriverMethods = [
                    "dropInstance"
                ];
                var LibraryMethods = [
                    "clear",
                    "getItem",
                    "iterate",
                    "key",
                    "keys",
                    "length",
                    "removeItem",
                    "setItem"
                ].concat(OptionalDriverMethods);
                var DefaultConfig = {
                    description: "",
                    driver: DefaultDriverOrder.slice(),
                    name: "localforage",
                    // Default DB size is _JUST UNDER_ 5MB, as it's the highest size
                    // we can use without a prompt.
                    size: 4980736,
                    storeName: "keyvaluepairs",
                    version: 1.0
                };
                function callWhenReady(localForageInstance, libraryMethod) {
                    localForageInstance[libraryMethod] = function() {
                        var _args = arguments;
                        return localForageInstance.ready().then(function() {
                            return localForageInstance[libraryMethod].apply(localForageInstance, _args);
                        });
                    };
                }
                function extend() {
                    for(var i = 1; i < arguments.length; i++){
                        var arg = arguments[i];
                        if (arg) {
                            for(var _key in arg)if (arg.hasOwnProperty(_key)) {
                                if (isArray(arg[_key])) arguments[0][_key] = arg[_key].slice();
                                else arguments[0][_key] = arg[_key];
                            }
                        }
                    }
                    return arguments[0];
                }
                var LocalForage1 = function() {
                    function LocalForage(options) {
                        _classCallCheck(this, LocalForage);
                        for(var driverTypeKey in DefaultDrivers)if (DefaultDrivers.hasOwnProperty(driverTypeKey)) {
                            var driver = DefaultDrivers[driverTypeKey];
                            var driverName = driver._driver;
                            this[driverTypeKey] = driverName;
                            if (!DefinedDrivers[driverName]) // we don't need to wait for the promise,
                            // since the default drivers can be defined
                            // in a blocking manner
                            this.defineDriver(driver);
                        }
                        this._defaultConfig = extend({}, DefaultConfig);
                        this._config = extend({}, this._defaultConfig, options);
                        this._driverSet = null;
                        this._initDriver = null;
                        this._ready = false;
                        this._dbInfo = null;
                        this._wrapLibraryMethodsWithReady();
                        this.setDriver(this._config.driver)["catch"](function() {});
                    }
                    // Set any config values for localForage; can be called anytime before
                    // the first API call (e.g. `getItem`, `setItem`).
                    // We loop through options so we don't overwrite existing config
                    // values.
                    LocalForage.prototype.config = function config(options) {
                        // If the options argument is an object, we use it to set values.
                        // Otherwise, we return either a specified config value or all
                        // config values.
                        if ((typeof options === "undefined" ? "undefined" : _typeof(options)) === "object") {
                            // If localforage is ready and fully initialized, we can't set
                            // any new configuration values. Instead, we return an error.
                            if (this._ready) return new Error("Can't call config() after localforage has been used.");
                            for(var i in options){
                                if (i === "storeName") options[i] = options[i].replace(/\W/g, "_");
                                if (i === "version" && typeof options[i] !== "number") return new Error("Database version must be a number.");
                                this._config[i] = options[i];
                            }
                            // after all config options are set and
                            // the driver option is used, try setting it
                            if ("driver" in options && options.driver) return this.setDriver(this._config.driver);
                            return true;
                        } else if (typeof options === "string") return this._config[options];
                        else return this._config;
                    };
                    // Used to define a custom driver, shared across all instances of
                    // localForage.
                    LocalForage.prototype.defineDriver = function defineDriver(driverObject, callback, errorCallback) {
                        var promise1 = new Promise$1(function(resolve, reject) {
                            try {
                                var driverName = driverObject._driver;
                                var complianceError = new Error("Custom driver not compliant; see https://mozilla.github.io/localForage/#definedriver");
                                // A driver name should be defined and not overlap with the
                                // library-defined, default drivers.
                                if (!driverObject._driver) {
                                    reject(complianceError);
                                    return;
                                }
                                var driverMethods = LibraryMethods.concat("_initStorage");
                                for(var i = 0, len = driverMethods.length; i < len; i++){
                                    var driverMethodName = driverMethods[i];
                                    // when the property is there,
                                    // it should be a method even when optional
                                    var isRequired = !includes(OptionalDriverMethods, driverMethodName);
                                    if ((isRequired || driverObject[driverMethodName]) && typeof driverObject[driverMethodName] !== "function") {
                                        reject(complianceError);
                                        return;
                                    }
                                }
                                var configureMissingMethods = function configureMissingMethods() {
                                    var methodNotImplementedFactory = function methodNotImplementedFactory(methodName) {
                                        return function() {
                                            var error = new Error("Method " + methodName + " is not implemented by the current driver");
                                            var promise = Promise$1.reject(error);
                                            executeCallback(promise, arguments[arguments.length - 1]);
                                            return promise;
                                        };
                                    };
                                    for(var _i = 0, _len = OptionalDriverMethods.length; _i < _len; _i++){
                                        var optionalDriverMethod = OptionalDriverMethods[_i];
                                        if (!driverObject[optionalDriverMethod]) driverObject[optionalDriverMethod] = methodNotImplementedFactory(optionalDriverMethod);
                                    }
                                };
                                configureMissingMethods();
                                var setDriverSupport = function setDriverSupport(support) {
                                    if (DefinedDrivers[driverName]) console.info("Redefining LocalForage driver: " + driverName);
                                    DefinedDrivers[driverName] = driverObject;
                                    DriverSupport[driverName] = support;
                                    // don't use a then, so that we can define
                                    // drivers that have simple _support methods
                                    // in a blocking manner
                                    resolve();
                                };
                                if ("_support" in driverObject) {
                                    if (driverObject._support && typeof driverObject._support === "function") driverObject._support().then(setDriverSupport, reject);
                                    else setDriverSupport(!!driverObject._support);
                                } else setDriverSupport(true);
                            } catch (e) {
                                reject(e);
                            }
                        });
                        executeTwoCallbacks(promise1, callback, errorCallback);
                        return promise1;
                    };
                    LocalForage.prototype.driver = function driver() {
                        return this._driver || null;
                    };
                    LocalForage.prototype.getDriver = function getDriver(driverName, callback, errorCallback) {
                        var getDriverPromise = DefinedDrivers[driverName] ? Promise$1.resolve(DefinedDrivers[driverName]) : Promise$1.reject(new Error("Driver not found."));
                        executeTwoCallbacks(getDriverPromise, callback, errorCallback);
                        return getDriverPromise;
                    };
                    LocalForage.prototype.getSerializer = function getSerializer(callback) {
                        var serializerPromise = Promise$1.resolve(localforageSerializer);
                        executeTwoCallbacks(serializerPromise, callback);
                        return serializerPromise;
                    };
                    LocalForage.prototype.ready = function ready(callback) {
                        var self = this;
                        var promise = self._driverSet.then(function() {
                            if (self._ready === null) self._ready = self._initDriver();
                            return self._ready;
                        });
                        executeTwoCallbacks(promise, callback, callback);
                        return promise;
                    };
                    LocalForage.prototype.setDriver = function setDriver(drivers, callback, errorCallback) {
                        var self = this;
                        if (!isArray(drivers)) drivers = [
                            drivers
                        ];
                        var supportedDrivers1 = this._getSupportedDrivers(drivers);
                        function setDriverToConfig() {
                            self._config.driver = self.driver();
                        }
                        function extendSelfWithDriver(driver) {
                            self._extend(driver);
                            setDriverToConfig();
                            self._ready = self._initStorage(self._config);
                            return self._ready;
                        }
                        function initDriver(supportedDrivers) {
                            return function() {
                                var currentDriverIndex = 0;
                                function driverPromiseLoop() {
                                    while(currentDriverIndex < supportedDrivers.length){
                                        var driverName = supportedDrivers[currentDriverIndex];
                                        currentDriverIndex++;
                                        self._dbInfo = null;
                                        self._ready = null;
                                        return self.getDriver(driverName).then(extendSelfWithDriver)["catch"](driverPromiseLoop);
                                    }
                                    setDriverToConfig();
                                    var error = new Error("No available storage method found.");
                                    self._driverSet = Promise$1.reject(error);
                                    return self._driverSet;
                                }
                                return driverPromiseLoop();
                            };
                        }
                        // There might be a driver initialization in progress
                        // so wait for it to finish in order to avoid a possible
                        // race condition to set _dbInfo
                        var oldDriverSetDone = this._driverSet !== null ? this._driverSet["catch"](function() {
                            return Promise$1.resolve();
                        }) : Promise$1.resolve();
                        this._driverSet = oldDriverSetDone.then(function() {
                            var driverName = supportedDrivers1[0];
                            self._dbInfo = null;
                            self._ready = null;
                            return self.getDriver(driverName).then(function(driver) {
                                self._driver = driver._driver;
                                setDriverToConfig();
                                self._wrapLibraryMethodsWithReady();
                                self._initDriver = initDriver(supportedDrivers1);
                            });
                        })["catch"](function() {
                            setDriverToConfig();
                            var error = new Error("No available storage method found.");
                            self._driverSet = Promise$1.reject(error);
                            return self._driverSet;
                        });
                        executeTwoCallbacks(this._driverSet, callback, errorCallback);
                        return this._driverSet;
                    };
                    LocalForage.prototype.supports = function supports(driverName) {
                        return !!DriverSupport[driverName];
                    };
                    LocalForage.prototype._extend = function _extend(libraryMethodsAndProperties) {
                        extend(this, libraryMethodsAndProperties);
                    };
                    LocalForage.prototype._getSupportedDrivers = function _getSupportedDrivers(drivers) {
                        var supportedDrivers = [];
                        for(var i = 0, len = drivers.length; i < len; i++){
                            var driverName = drivers[i];
                            if (this.supports(driverName)) supportedDrivers.push(driverName);
                        }
                        return supportedDrivers;
                    };
                    LocalForage.prototype._wrapLibraryMethodsWithReady = function _wrapLibraryMethodsWithReady() {
                        // Add a stub for each driver API method that delays the call to the
                        // corresponding driver method until localForage is ready. These stubs
                        // will be replaced by the driver methods as soon as the driver is
                        // loaded, so there is no performance impact.
                        for(var i = 0, len = LibraryMethods.length; i < len; i++)callWhenReady(this, LibraryMethods[i]);
                    };
                    LocalForage.prototype.createInstance = function createInstance(options) {
                        return new LocalForage(options);
                    };
                    return LocalForage;
                }();
                // The actual localForage object that we expose as a module or via a
                // global. It's extended by pulling in one of our other libraries.
                var localforage_js = new LocalForage1();
                module.exports = localforage_js;
            },
            {
                "3": 3
            }
        ]
    }, {}, [
        4
    ])(4);
});

},{}],"db1Xp":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "get_time", ()=>get_time);
parcelHelpers.export(exports, "sort_array", ()=>sort_array);
parcelHelpers.export(exports, "uid", ()=>uid);
parcelHelpers.export(exports, "notification", ()=>notification);
parcelHelpers.export(exports, "pushLocalNotification", ()=>pushLocalNotification);
parcelHelpers.export(exports, "validate", ()=>validate);
parcelHelpers.export(exports, "getManifest", ()=>getManifest);
parcelHelpers.export(exports, "popup", ()=>popup);
parcelHelpers.export(exports, "toaster", ()=>toaster);
parcelHelpers.export(exports, "side_toaster", ()=>side_toaster);
parcelHelpers.export(exports, "bottom_bar", ()=>bottom_bar);
parcelHelpers.export(exports, "top_bar", ()=>top_bar);
parcelHelpers.export(exports, "screenlock", ()=>screenlock);
parcelHelpers.export(exports, "goodbye", ()=>goodbye);
parcelHelpers.export(exports, "pick_image", ()=>pick_image);
parcelHelpers.export(exports, "deleteFile", ()=>deleteFile);
parcelHelpers.export(exports, "list_files", ()=>list_files);
"use strict";
const get_time = function() {
    let a = new Date();
    time = `0${a.getHours()}`.slice(-2) + ":" + `0${a.getMinutes()}`.slice(-2);
    return time;
};
let sort_array = function(arr, item_key, type) {
    if (type == "date") arr.sort((a, b)=>{
        let da = new Date(a[item_key]), db = new Date(b[item_key]);
        return db - da;
    });
     //sort by number
    if (type == "number") arr.sort((a, b)=>{
        return b[item_key] - a[item_key];
    });
     //sort by string
    if (type == "string") arr.sort((a, b)=>{
        let fa = a[item_key].toLowerCase(), fb = b[item_key].toLowerCase();
        if (fa < fb) return -1;
        if (fa > fb) return 1;
        return 0;
    });
};
let uid = function() {
    function _p8(s) {
        var p = (Math.random().toString(16) + "000000000").substr(2, 8);
        return s ? "-" + p.substr(0, 4) + "-" + p.substr(4, 4) : p;
    }
    return "greg@" + _p8() + _p8(true) + _p8(true) + _p8();
};
let notification = "";
let notify = function(param_title, param_text, param_silent) {
    var options = {
        body: param_text,
        silent: param_silent,
        requireInteraction: false //actions: [{ action: "test", title: "test" }],
    }; // Let's check whether notification permissions have already been granted
    if (Notification.permission === "granted") // If it's okay let's create a notification
    notification = new Notification(param_title, options);
     // Otherwise, we need to ask the user for permission
    if (Notification.permission !== "denied") Notification.requestPermission().then(function(permission) {
        // If the user accepts, let's create a notification
        if (permission === "granted") notification = new Notification(param_title, options);
    });
}; //https://notifications.spec.whatwg.org/#dictdef-notificationaction
let pushLocalNotification = function(title, body) {
    window.Notification.requestPermission().then((result)=>{
        var notification1 = new window.Notification(title, {
            body: body //requireInteraction: true,
        });
        notification1.onerror = function(err) {
            console.log(err);
        };
        notification1.onclick = function(event) {
            if (window.navigator.mozApps) {
                var request = window.navigator.mozApps.getSelf();
                request.onsuccess = function() {
                    if (request.result) {
                        notification1.close();
                        request.result.launch();
                    }
                };
            } else window.open(document.location.origin, "_blank");
        };
        notification1.onshow = function() {};
    });
};
if (navigator.mozSetMessageHandler) navigator.mozSetMessageHandler("alarm", function(message) {
    console.log(JSON.stringify(message));
    pushLocalNotification("Greg", message.data.foo);
});
let validate = function(url) {
    var pattern = /(ftp|http|https):\/\/(\w+:{0,1}\w*@)?(\S+)(:[0-9]+)?(\/|\/([\w#!:.?+=&%@!\-\/]))?/;
    if (pattern.test(url)) return true;
    return false;
};
let getManifest = function(callback) {
    if (!navigator.mozApps) //let t = document.getElementById("kaisos-ads");
    //t.remove();
    return false;
    let self = navigator.mozApps.getSelf();
    self.onsuccess = function() {
        callback(self.result);
    };
    self.onerror = function() {};
}; //popup
let popup = function(text, action) {
    let m = document.querySelector("div#popup");
    let mm = document.querySelector("div#popup div div");
    if (action == "show") {
        m.style.display = "block";
        mm.innerText = text;
    }
    if (action == "close") {
        m.style.display = "none";
        mm.innerText = "";
    }
}; //top toaster
let queue = [];
let timeout;
let toaster = function(text, time) {
    queue.push({
        text: text,
        time: time
    });
    if (queue.length === 1) toast_q(text, time);
};
let toast_q = function(text, time) {
    var x = document.querySelector("div#toast");
    x.innerHTML = queue[0].text;
    x.style.transform = "translate(0px, 0px)";
    timeout = setTimeout(function() {
        timeout = null;
        x.style.transform = "translate(0px, -100px)";
        queue = queue.slice(1);
        if (queue.length > 0) setTimeout(()=>{
            toast_q(text, time);
        }, 1000);
    }, time);
}; //side toaster
let queue_st = [];
let ttimeout;
let side_toaster = function(text, time) {
    queue_st.push({
        text: text,
        time: time
    });
    if (queue_st.length === 1) toast_qq(text, time);
};
let toast_qq = function(text, time) {
    var x = document.querySelector("div#side-toast");
    x.innerHTML = queue_st[0].text;
    x.style.transform = "translate(0vh, 0px)";
    timeout = setTimeout(function() {
        ttimeout = null;
        x.style.transform = "translate(-100vh,0px)";
        queue_st = queue.slice(1);
        if (queue_st.length > 0) setTimeout(()=>{
            toast_qq(text, time);
        }, 1000);
    }, time);
}; //bottom bar
let bottom_bar = function(left, center, right) {
    document.querySelector("div#bottom-bar div#button-left").textContent = left;
    document.querySelector("div#bottom-bar div#button-center").textContent = center;
    document.querySelector("div#bottom-bar div#button-right").textContent = right;
    if (left == "" && center == "" && right == "") document.querySelector("div#bottom-bar").style.display = "none";
    else document.querySelector("div#bottom-bar").style.display = "block";
}; //top bar
let top_bar = function(left, center, right) {
    document.querySelector("div#top-bar div.button-left").innerHTML = left;
    document.querySelector("div#top-bar div.button-center").textContent = center;
    document.querySelector("div#top-bar div.button-right").textContent = right;
    if (left == "" && center == "" && right == "") document.querySelector("div#top-bar").style.display = "none";
    else document.querySelector("div#top-bar").style.display = "block";
};
let add_script = function(script) {
    document.body.appendChild(document.createElement("script")).src = script;
};
let lock;
let screenlock = function(stat) {
    if (typeof window.navigator.requestWakeLock === "undefined") return false;
    if (stat == "lock") {
        lock = window.navigator.requestWakeLock("screen");
        lock.onsuccess = function() {};
        lock.onerror = function() {
            alert("An error occurred: " + this.error.name);
        };
    }
    if (stat == "unlock") {
        if (lock.topic == "screen") lock.unlock();
    }
}; //goodbye
let goodbye = function() {
    document.getElementById("goodbye").style.display = "block";
    bottom_bar("", "", "");
    if (localStorage.clickcount) localStorage.clickcount = Number(localStorage.clickcount) + 1;
    else localStorage.clickcount = 1;
    if (localStorage.clickcount == 300000) message();
    else {
        document.getElementById("ciao").style.display = "block";
        setTimeout(function() {
            window.close();
        }, 2000);
    }
    function message() {
        document.getElementById("donation").style.display = "block";
        setTimeout(function() {
            localStorage.clickcount = 1;
            window.close();
        }, 3000);
    }
}; //pick image
let pick_image = function(cb) {
    var activity = new MozActivity({
        name: "pick",
        data: {
            type: [
                "image/png",
                "image/jpg",
                "image/jpeg"
            ]
        }
    });
    activity.onsuccess = function() {
        console.log("Activity successfuly handled");
        let p = this.result.blob;
        cb(p);
    };
    activity.onerror = function() {
        console.log("The activity encouter en error: " + this.error);
    };
}; //delete file
let deleteFile = function(storage, path, notification2) {
    let sdcard = navigator.getDeviceStorages("sdcard");
    let requestDel = sdcard[storage].delete(path);
    requestDel.onsuccess = function() {
        if (notification2 == "notification") toaster('File "' + name + '" successfully deleted frome the sdcard storage area');
    };
    requestDel.onerror = function() {
        toaster("Unable to delete the file: " + this.error);
    };
};
let list_files = function(filetype, callback) {
    if (!navigator.getDeviceStorage) return false;
    var d = navigator.getDeviceStorage("sdcard");
    var cursor = d.enumerate();
    cursor.onsuccess = function() {
        if (!this.result) console.log("finished");
        if (cursor.result.name !== null) {
            var file = cursor.result;
            let n = file.name.split(".");
            let file_type = n[n.length - 1];
            if (file_type == filetype) callback(file.name);
            this.continue();
        }
    };
    cursor.onerror = function() {
        console.warn("No file found: " + this.error);
    };
}; //polyfill
if (window.NodeList && !NodeList.prototype.forEach) NodeList.prototype.forEach = Array.prototype.forEach;
function hashCode(str) {
    var hash = 0;
    for(var i = 0; i < str.length; i++)hash = ~~((hash << 5) - hash + str.charCodeAt(i));
    return hash;
}
function intToRGB(i) {
    var c = (i & 0x00ffffff).toString(16).toUpperCase();
    return "00000".substring(0, 6 - c.length) + c;
}
function getRandomInteger(min, max) {
    min = Math.ceil(min);
    max = Math.floor(max);
    return Math.floor(Math.random() * (max - min)) + min;
}
function share(url) {
    var activity = new MozActivity({
        name: "share",
        data: {
            type: "url",
            url: url
        }
    });
    activity.onsuccess = function() {};
    activity.onerror = function() {
        console.log("The activity encounter en error: " + this.error);
    };
} //check if internet connection
function check_iconnection() {
    function updateOfflineStatus() {
        toaster("Your Browser is offline", 15000);
        return false;
    }
    window.addEventListener("offline", updateOfflineStatus);
}
function delete_file(filename) {
    var sdcard = navigator.getDeviceStorages("sdcard");
    var request = sdcard[1].delete(filename);
    request.onsuccess = function() {};
    request.onerror = function() {};
}
function get_file(filename) {
    var sdcard = navigator.getDeviceStorages("sdcard");
    var request = sdcard[1].get(filename);
    request.onsuccess = function() {
        var file = this.result; //alert("Get the file: " + file.name);
    };
    request.onerror = function() {};
}
function write_file(data, filename) {
    var sdcard = navigator.getDeviceStorages("sdcard");
    var file = new Blob([
        data
    ], {
        type: "text/plain"
    });
    var request = sdcard[1].addNamed(file, filename);
    request.onsuccess = function() {
        var name = this.result; //toaster('File "' + name + '" successfully wrote on the sdcard storage area', 2000);
    }; // An error typically occur if a file with the same name already exist
    request.onerror = function() {
        toaster("Unable to write the file: " + this.error, 2000);
    };
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"j7FRh"}],"j7FRh":[function(require,module,exports) {
exports.interopDefault = function(a) {
    return a && a.__esModule ? a : {
        default: a
    };
};
exports.defineInteropFlag = function(a) {
    Object.defineProperty(a, "__esModule", {
        value: true
    });
};
exports.exportAll = function(source, dest) {
    Object.keys(source).forEach(function(key) {
        if (key === "default" || key === "__esModule" || dest.hasOwnProperty(key)) return;
        Object.defineProperty(dest, key, {
            enumerable: true,
            get: function() {
                return source[key];
            }
        });
    });
    return dest;
};
exports.export = function(dest, destName, get) {
    Object.defineProperty(dest, destName, {
        enumerable: true,
        get: get
    });
};

},{}],"kaybj":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/*
 * modified from http://www.voidware.com/moon_phase.htm
 */ parcelHelpers.export(exports, "getMoonPhase", ()=>getMoonPhase);
function getMoonPhase(year, month, day) {
    let b;
    let jd;
    let e;
    let c = e = jd = b = 0;
    if (month < 3) {
        year--;
        month += 12;
    }
    ++month;
    c = 365.25 * year;
    e = 30.6 * month;
    jd = c + e + day - 694039.09; //jd is total days elapsed
    jd /= 29.5305882; //divide by the moon cycle
    b = parseInt(jd); //int(jd) -> b, take integer part of jd
    jd -= b; //subtract integer part to leave fractional part of original jd
    b = Math.round(jd * 8); //scale fraction from 0-8 and round
    if (b >= 8) b = 0; //0 and 8 are the same so turn 8 into 0
     // 0 => New Moon
    // 1 => Waxing Crescent Moon
    // 2 => First Quarter Moon
    // 3 => Waxing Gibbous Moon
    // 4 => Full Moon
    // 5 => Waning Gibbous Moon
    // 6 => Last Quarter Moon
    // 7 => Waning Crescent Moon
    return b;
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"j7FRh"}],"4kH1V":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "export_ical", ()=>export_ical);
parcelHelpers.export(exports, "list_ics", ()=>list_ics);
parcelHelpers.export(exports, "parse_ics", ()=>parse_ics);
parcelHelpers.export(exports, "fetch_ics", ()=>fetch_ics);
// ///Load ICS///////////
// /////////////////////
parcelHelpers.export(exports, "loadICS", ()=>loadICS);
var _helperJs = require("./helper.js");
var _localforage = require("localforage");
var _localforageDefault = parcelHelpers.interopDefault(_localforage);
var _appJs = require("../../app.js");
var _icalJs = require("ical.js");
var _icalJsDefault = parcelHelpers.interopDefault(_icalJs);
let export_ical = function(filename, event_data) {
    if (!navigator.getDeviceStorage) return false;
    var sdcard = navigator.getDeviceStorage("sdcard");
    var request_del = sdcard.delete(filename);
    request_del.onsuccess = function() {};
    setTimeout(function() {
        // convert
        let data = event_data;
        let result = "";
        result += "BEGIN:VCALENDAR\r\n";
        result += "VERSION:2.0\r\n";
        result += "PRODID:GREG\r\n";
        result += "METHOD:PUBLISHED\r\n";
        data.forEach((e)=>{
            let index = -1;
            for(let key in e){
                index++;
                if (index == 0) result += "BEGIN:VEVENT\r\n";
                if (key != "BEGIN" && key != "END" && key != "date" && key != "time_start" && key != "time_end" && key != "dateStart" && key != "dateEnd" && key != "notification" && key != "alarm" && key != "isSubscription" && key != "multidayevent" && key != "alarmTrigger" && key != "rrule_") result += `${key}:${e[key]}` + "\r\n";
                if (index == Object.keys(e).length - 1) result += "END:VEVENT\r\n";
            }
        });
        result += "END:VCALENDAR\r\n";
        var file = new Blob([
            result
        ], {
            type: "text/calendar"
        });
        var request = sdcard.addNamed(file, filename);
        request.onsuccess = function() {
            (0, _helperJs.side_toaster)("<img src='assets/image/E25C.svg'>", 2500);
        };
        request.onerror = function() {
            (0, _helperJs.toaster)("Unable to write the file", 2000);
        };
    }, 2000);
}; // //////////
let list_ics = function() {
    let file_list = [];
    let cb = function(result) {
        file_list.push(result);
        let fn = result.split("/");
        fn = fn[fn.length - 1];
        if (fn == "greg.ics") return false;
        document.querySelector("div#options div#import-text").style.display = "block";
        document.querySelector("div#options div#import-text").insertAdjacentHTML("afterend", '<button class="item dynamic" data-function="import" data-filename="' + result + '">' + fn + "</button>");
    };
    (0, _helperJs.list_files)("ics", cb);
}; // /////////////
let parse_ics = function(data, callback, saveOnDevice, subscription, etag, url, account_id) {
    let temp = [];
    if (subscription) subscription = "subscription";
    var jcalData = (0, _icalJsDefault.default).parse(data);
    var comp = new (0, _icalJsDefault.default).Component(jcalData);
    var vevent = comp.getAllSubcomponents("vevent");
    vevent.forEach(function(ite) {
        //if (ite.getFirstPropertyValue("rrule"))
        // console.log(ite.getFirstPropertyValue("rrule").freq);
        let n = ite.getFirstPropertyValue("rrule");
        let dateStart, timeStart;
        if (ite.getFirstPropertyValue("dtstart")) {
            let ds = new Date(ite.getFirstPropertyValue("dtstart"));
            dateStart = ds.getFullYear() + "-" + `0${ds.getMonth() + 1}`.slice(-2) + "-" + `0${ds.getDate()}`.slice(-2);
            timeStart = `0${ds.getHours()}`.slice(-2) + ":" + `0${ds.getMinutes()}`.slice(-2) + ":" + `0${ds.getSeconds()}`.slice(-2);
        } //date end
        let dateEnd, timeEnd;
        if (ite.getFirstPropertyValue("dtend")) {
            let DTstart = new Date(ite.getFirstPropertyValue("dtend"));
            dateEnd = DTstart.getFullYear() + "-" + `0${DTstart.getMonth() + 1}`.slice(-2) + "-" + `0${DTstart.getDate()}`.slice(-2);
            timeEnd = `0${DTstart.getHours()}`.slice(-2) + ":" + `0${DTstart.getMinutes()}`.slice(-2) + ":" + `0${DTstart.getSeconds()}`.slice(-2);
        } //multiday event
        let allDay = false;
        if (ite.getFirstPropertyValue("dtend") && ite.getFirstPropertyValue("dtstart")) {
            if (new Date(ite.getFirstPropertyValue("dtend")) > new Date(ite.getFirstPropertyValue("dtstart"))) allDay = true;
             //all day events have the time 00:00:00 but the start end date consecutive
            if (new Date(ite.getFirstPropertyValue("dtend")) > new Date(ite.getFirstPropertyValue("dtstart")) && timeStart == "00:00:00" && timeEnd == "00:00:00") allDay = false;
        }
        let imp = {
            BEGIN: "VEVENT",
            UID: ite.getFirstPropertyValue("uid"),
            SUMMARY: ite.getFirstPropertyValue("summary"),
            LOCATION: ite.getFirstPropertyValue("location"),
            DESCRIPTION: ite.getFirstPropertyValue("description"),
            ATTACH: ite.getFirstPropertyValue("attach"),
            RRULE: ite.getFirstPropertyValue("rrule"),
            "LAST-MODIFIED": ite.getFirstPropertyValue("last-modified"),
            CLASS: ite.getFirstPropertyValue("class"),
            DTSTAMP: ite.getFirstPropertyValue("dtstamp"),
            DTSTART: ite.getFirstPropertyValue("dtstart"),
            DTEND: ite.getFirstPropertyValue("dtend"),
            END: "VEVENT",
            isSubscription: subscription,
            allDay: ite.getFirstPropertyValue("dtstart").isDate,
            dateStart: dateStart,
            time_start: timeStart,
            dateEnd: dateEnd,
            time_end: timeEnd,
            notification: " ",
            alarm: "none",
            rrule_: n ? n.freq : "",
            etag: etag,
            url: url,
            id: account_id
        };
        (0, _appJs.events).push(imp);
    });
    if (saveOnDevice == true) {
        let without_subscription = (0, _appJs.events).filter((events)=>events.isSubscription === false);
        (0, _localforageDefault.default).setItem("events", without_subscription).then(function(value) {
            // events = value;
            (0, _helperJs.side_toaster)("<img src='assets/image/E25C.svg'>", 2500);
        }).catch(function(err) {
            console.log(err);
        });
    }
}; /////////////
let fetch_ics = function(url, cb, db_name) {
    let xhttp = new XMLHttpRequest({
        mozSystem: true
    });
    xhttp.open("GET", url + "?time=" + new Date().getTime(), true);
    xhttp.timeout = 2000;
    xhttp.onprogress = function() {};
    xhttp.onload = function() {
        if (xhttp.readyState === xhttp.DONE && xhttp.status === 200) {
            let data = xhttp.response;
            parse_ics(data, cb, false, true);
            (0, _localforageDefault.default).setItem(db_name, data).then(function() {}).catch(function(err) {
                console.log(err);
            });
            (0, _helperJs.side_toaster)("subscriptions loaded", 2000);
        }
    };
    xhttp.onerror = function() {
        (0, _helperJs.side_toaster)("subscription could not be loaded", 2000);
        (0, _localforageDefault.default).getItem(db_name).then(function(value) {
            (0, _helperJs.toaster)("load cached data", 2000);
            parse_ics(value, cb);
        }).catch(function(err) {
            console.log(err);
        });
    };
    xhttp.send(null);
};
function share(url, name) {
    var activity = new MozActivity({
        name: "share",
        data: {
            type: "text/calendar",
            number: 1,
            blobs: [
                url
            ],
            filenames: [
                name
            ]
        }
    });
    activity.onsuccess = function() {};
    activity.onerror = function() {};
} // ///////////////////////
function loadICS(filename, callback) {
    var sdcard = navigator.getDeviceStorage("sdcard");
    var request = sdcard.get(filename);
    request.onsuccess = function() {
        var file = this.result;
        let reader = new FileReader();
        reader.onerror = function(event) {
            (0, _helperJs.toaster)("can't read file", 3000);
            reader.abort();
        };
        reader.onloadend = function(event) {
            parse_ics(event.target.result, callback, true, false);
            document.getElementById("import-text").style.display = "block";
        };
        reader.readAsText(file);
    };
    request.onerror = function() {
        console.warn("Unable to get the file: " + this.error);
    };
}

},{"./helper.js":"db1Xp","localforage":"8ZRFG","../../app.js":"20BJq","ical.js":"b17JL","@parcel/transformer-js/src/esmodule-helpers.js":"j7FRh"}],"b17JL":[function(require,module,exports) {
/* This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/.
 * Portions Copyright (C) Philipp Kewisch, 2021 */ /* jshint ignore:start */ var ICAL;
(function() {
    // CommonJS, where exports may be different each time.
    ICAL = module.exports;
})();
/* jshint ignore:end */ /* This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/.
 * Portions Copyright (C) Philipp Kewisch, 2011-2015 */ /**
 * The number of characters before iCalendar line folding should occur
 * @type {Number}
 * @default 75
 */ ICAL.foldLength = 75;
/**
 * The character(s) to be used for a newline. The default value is provided by
 * rfc5545.
 * @type {String}
 * @default "\r\n"
 */ ICAL.newLineChar = "\r\n";
/**
 * Helper functions used in various places within ical.js
 * @namespace
 */ ICAL.helpers = {
    /**
   * Compiles a list of all referenced TZIDs in all subcomponents and
   * removes any extra VTIMEZONE subcomponents. In addition, if any TZIDs
   * are referenced by a component, but a VTIMEZONE does not exist,
   * an attempt will be made to generate a VTIMEZONE using ICAL.TimezoneService.
   *
   * @param {ICAL.Component} vcal     The top-level VCALENDAR component.
   * @return {ICAL.Component}         The ICAL.Component that was passed in.
   */ updateTimezones: function(vcal) {
        var allsubs, properties, vtimezones, reqTzid, i, tzid;
        if (!vcal || vcal.name !== "vcalendar") //not a top-level vcalendar component
        return vcal;
        //Store vtimezone subcomponents in an object reference by tzid.
        //Store properties from everything else in another array
        allsubs = vcal.getAllSubcomponents();
        properties = [];
        vtimezones = {};
        for(i = 0; i < allsubs.length; i++)if (allsubs[i].name === "vtimezone") {
            tzid = allsubs[i].getFirstProperty("tzid").getFirstValue();
            vtimezones[tzid] = allsubs[i];
        } else properties = properties.concat(allsubs[i].getAllProperties());
        //create an object with one entry for each required tz
        reqTzid = {};
        for(i = 0; i < properties.length; i++)if (tzid = properties[i].getParameter("tzid")) reqTzid[tzid] = true;
        //delete any vtimezones that are not on the reqTzid list.
        for(i in vtimezones)if (vtimezones.hasOwnProperty(i) && !reqTzid[i]) vcal.removeSubcomponent(vtimezones[i]);
        //create any missing, but registered timezones
        for(i in reqTzid)if (reqTzid.hasOwnProperty(i) && !vtimezones[i] && ICAL.TimezoneService.has(i)) vcal.addSubcomponent(ICAL.TimezoneService.get(i).component);
        return vcal;
    },
    /**
   * Checks if the given type is of the number type and also NaN.
   *
   * @param {Number} number     The number to check
   * @return {Boolean}          True, if the number is strictly NaN
   */ isStrictlyNaN: function(number) {
        return typeof number === "number" && isNaN(number);
    },
    /**
   * Parses a string value that is expected to be an integer, when the valid is
   * not an integer throws a decoration error.
   *
   * @param {String} string     Raw string input
   * @return {Number}           Parsed integer
   */ strictParseInt: function(string) {
        var result = parseInt(string, 10);
        if (ICAL.helpers.isStrictlyNaN(result)) throw new Error('Could not extract integer from "' + string + '"');
        return result;
    },
    /**
   * Creates or returns a class instance of a given type with the initialization
   * data if the data is not already an instance of the given type.
   *
   * @example
   * var time = new ICAL.Time(...);
   * var result = ICAL.helpers.formatClassType(time, ICAL.Time);
   *
   * (result instanceof ICAL.Time)
   * // => true
   *
   * result = ICAL.helpers.formatClassType({}, ICAL.Time);
   * (result isntanceof ICAL.Time)
   * // => true
   *
   *
   * @param {Object} data       object initialization data
   * @param {Object} type       object type (like ICAL.Time)
   * @return {?}                An instance of the found type.
   */ formatClassType: function formatClassType(data, type) {
        if (typeof data === "undefined") return undefined;
        if (data instanceof type) return data;
        return new type(data);
    },
    /**
   * Identical to indexOf but will only match values when they are not preceded
   * by a backslash character.
   *
   * @param {String} buffer         String to search
   * @param {String} search         Value to look for
   * @param {Number} pos            Start position
   * @return {Number}               The position, or -1 if not found
   */ unescapedIndexOf: function(buffer, search, pos) {
        while((pos = buffer.indexOf(search, pos)) !== -1){
            if (pos > 0 && buffer[pos - 1] === "\\") pos += 1;
            else return pos;
        }
        return -1;
    },
    /**
   * Find the index for insertion using binary search.
   *
   * @param {Array} list            The list to search
   * @param {?} seekVal             The value to insert
   * @param {function(?,?)} cmpfunc The comparison func, that can
   *                                  compare two seekVals
   * @return {Number}               The insert position
   */ binsearchInsert: function(list, seekVal, cmpfunc) {
        if (!list.length) return 0;
        var low = 0, high = list.length - 1, mid, cmpval;
        while(low <= high){
            mid = low + Math.floor((high - low) / 2);
            cmpval = cmpfunc(seekVal, list[mid]);
            if (cmpval < 0) high = mid - 1;
            else if (cmpval > 0) low = mid + 1;
            else break;
        }
        if (cmpval < 0) return mid; // insertion is displacing, so use mid outright.
        else if (cmpval > 0) return mid + 1;
        else return mid;
    },
    /**
   * Convenience function for debug output
   * @private
   */ dumpn: /* istanbul ignore next */ function() {
        if (!ICAL.debug) return;
        if (typeof console !== "undefined" && "log" in console) ICAL.helpers.dumpn = function consoleDumpn(input) {
            console.log(input);
        };
        else ICAL.helpers.dumpn = function geckoDumpn(input) {
            dump(input + "\n");
        };
        ICAL.helpers.dumpn(arguments[0]);
    },
    /**
   * Clone the passed object or primitive. By default a shallow clone will be
   * executed.
   *
   * @param {*} aSrc            The thing to clone
   * @param {Boolean=} aDeep    If true, a deep clone will be performed
   * @return {*}                The copy of the thing
   */ clone: function(aSrc, aDeep) {
        if (!aSrc || typeof aSrc != "object") return aSrc;
        else if (aSrc instanceof Date) return new Date(aSrc.getTime());
        else if ("clone" in aSrc) return aSrc.clone();
        else if (Array.isArray(aSrc)) {
            var arr = [];
            for(var i = 0; i < aSrc.length; i++)arr.push(aDeep ? ICAL.helpers.clone(aSrc[i], true) : aSrc[i]);
            return arr;
        } else {
            var obj = {};
            for(var name in aSrc)// uses prototype method to allow use of Object.create(null);
            /* istanbul ignore else */ if (Object.prototype.hasOwnProperty.call(aSrc, name)) {
                if (aDeep) obj[name] = ICAL.helpers.clone(aSrc[name], true);
                else obj[name] = aSrc[name];
            }
            return obj;
        }
    },
    /**
   * Performs iCalendar line folding. A line ending character is inserted and
   * the next line begins with a whitespace.
   *
   * @example
   * SUMMARY:This line will be fold
   *  ed right in the middle of a word.
   *
   * @param {String} aLine      The line to fold
   * @return {String}           The folded line
   */ foldline: function foldline(aLine) {
        var result = "";
        var line = aLine || "", pos = 0, line_length = 0;
        //pos counts position in line for the UTF-16 presentation
        //line_length counts the bytes for the UTF-8 presentation
        while(line.length){
            var cp = line.codePointAt(pos);
            if (cp < 128) ++line_length;
            else if (cp < 2048) line_length += 2; //needs 2 UTF-8 bytes
            else if (cp < 65536) line_length += 3;
            else line_length += 4; //cp is less than 1114112
            if (line_length < ICAL.foldLength + 1) pos += cp > 65535 ? 2 : 1;
            else {
                result += ICAL.newLineChar + " " + line.substring(0, pos);
                line = line.substring(pos);
                pos = line_length = 0;
            }
        }
        return result.substr(ICAL.newLineChar.length + 1);
    },
    /**
   * Pads the given string or number with zeros so it will have at least two
   * characters.
   *
   * @param {String|Number} data    The string or number to pad
   * @return {String}               The number padded as a string
   */ pad2: function pad(data) {
        if (typeof data !== "string") {
            // handle fractions.
            if (typeof data === "number") data = parseInt(data);
            data = String(data);
        }
        var len = data.length;
        switch(len){
            case 0:
                return "00";
            case 1:
                return "0" + data;
            default:
                return data;
        }
    },
    /**
   * Truncates the given number, correctly handling negative numbers.
   *
   * @param {Number} number     The number to truncate
   * @return {Number}           The truncated number
   */ trunc: function trunc(number) {
        return number < 0 ? Math.ceil(number) : Math.floor(number);
    },
    /**
   * Poor-man's cross-browser inheritance for JavaScript. Doesn't support all
   * the features, but enough for our usage.
   *
   * @param {Function} base     The base class constructor function.
   * @param {Function} child    The child class constructor function.
   * @param {Object} extra      Extends the prototype with extra properties
   *                              and methods
   */ inherits: function(base, child, extra) {
        function F() {}
        F.prototype = base.prototype;
        child.prototype = new F();
        if (extra) ICAL.helpers.extend(extra, child.prototype);
    },
    /**
   * Poor-man's cross-browser object extension. Doesn't support all the
   * features, but enough for our usage. Note that the target's properties are
   * not overwritten with the source properties.
   *
   * @example
   * var child = ICAL.helpers.extend(parent, {
   *   "bar": 123
   * });
   *
   * @param {Object} source     The object to extend
   * @param {Object} target     The object to extend with
   * @return {Object}           Returns the target.
   */ extend: function(source, target) {
        for(var key in source){
            var descr = Object.getOwnPropertyDescriptor(source, key);
            if (descr && !Object.getOwnPropertyDescriptor(target, key)) Object.defineProperty(target, key, descr);
        }
        return target;
    }
};
/* This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/.
 * Portions Copyright (C) Philipp Kewisch, 2011-2015 */ /** @namespace ICAL */ /**
 * This symbol is further described later on
 * @ignore
 */ ICAL.design = function() {
    "use strict";
    var FROM_ICAL_NEWLINE = /\\\\|\\;|\\,|\\[Nn]/g;
    var TO_ICAL_NEWLINE = /\\|;|,|\n/g;
    var FROM_VCARD_NEWLINE = /\\\\|\\,|\\[Nn]/g;
    var TO_VCARD_NEWLINE = /\\|,|\n/g;
    function createTextType(fromNewline, toNewline) {
        var result = {
            matches: /.*/,
            fromICAL: function(aValue, structuredEscape) {
                return replaceNewline(aValue, fromNewline, structuredEscape);
            },
            toICAL: function(aValue, structuredEscape) {
                var regEx = toNewline;
                if (structuredEscape) regEx = new RegExp(regEx.source + "|" + structuredEscape);
                return aValue.replace(regEx, function(str) {
                    switch(str){
                        case "\\":
                            return "\\\\";
                        case ";":
                            return "\\;";
                        case ",":
                            return "\\,";
                        case "\n":
                            return "\\n";
                        /* istanbul ignore next */ default:
                            return str;
                    }
                });
            }
        };
        return result;
    }
    // default types used multiple times
    var DEFAULT_TYPE_TEXT = {
        defaultType: "text"
    };
    var DEFAULT_TYPE_TEXT_MULTI = {
        defaultType: "text",
        multiValue: ","
    };
    var DEFAULT_TYPE_TEXT_STRUCTURED = {
        defaultType: "text",
        structuredValue: ";"
    };
    var DEFAULT_TYPE_INTEGER = {
        defaultType: "integer"
    };
    var DEFAULT_TYPE_DATETIME_DATE = {
        defaultType: "date-time",
        allowedTypes: [
            "date-time",
            "date"
        ]
    };
    var DEFAULT_TYPE_DATETIME = {
        defaultType: "date-time"
    };
    var DEFAULT_TYPE_URI = {
        defaultType: "uri"
    };
    var DEFAULT_TYPE_UTCOFFSET = {
        defaultType: "utc-offset"
    };
    var DEFAULT_TYPE_RECUR = {
        defaultType: "recur"
    };
    var DEFAULT_TYPE_DATE_ANDOR_TIME = {
        defaultType: "date-and-or-time",
        allowedTypes: [
            "date-time",
            "date",
            "text"
        ]
    };
    function replaceNewlineReplace(string) {
        switch(string){
            case "\\\\":
                return "\\";
            case "\\;":
                return ";";
            case "\\,":
                return ",";
            case "\\n":
            case "\\N":
                return "\n";
            /* istanbul ignore next */ default:
                return string;
        }
    }
    function replaceNewline(value, newline, structuredEscape) {
        // avoid regex when possible.
        if (value.indexOf("\\") === -1) return value;
        if (structuredEscape) newline = new RegExp(newline.source + "|\\\\" + structuredEscape);
        return value.replace(newline, replaceNewlineReplace);
    }
    var commonProperties = {
        "categories": DEFAULT_TYPE_TEXT_MULTI,
        "url": DEFAULT_TYPE_URI,
        "version": DEFAULT_TYPE_TEXT,
        "uid": DEFAULT_TYPE_TEXT
    };
    var commonValues = {
        "boolean": {
            values: [
                "TRUE",
                "FALSE"
            ],
            fromICAL: function(aValue) {
                switch(aValue){
                    case "TRUE":
                        return true;
                    case "FALSE":
                        return false;
                    default:
                        //TODO: parser warning
                        return false;
                }
            },
            toICAL: function(aValue) {
                if (aValue) return "TRUE";
                return "FALSE";
            }
        },
        float: {
            matches: /^[+-]?\d+\.\d+$/,
            fromICAL: function(aValue) {
                var parsed = parseFloat(aValue);
                if (ICAL.helpers.isStrictlyNaN(parsed)) // TODO: parser warning
                return 0.0;
                return parsed;
            },
            toICAL: function(aValue) {
                return String(aValue);
            }
        },
        integer: {
            fromICAL: function(aValue) {
                var parsed = parseInt(aValue);
                if (ICAL.helpers.isStrictlyNaN(parsed)) return 0;
                return parsed;
            },
            toICAL: function(aValue) {
                return String(aValue);
            }
        },
        "utc-offset": {
            toICAL: function(aValue) {
                if (aValue.length < 7) // no seconds
                // -0500
                return aValue.substr(0, 3) + aValue.substr(4, 2);
                else // seconds
                // -050000
                return aValue.substr(0, 3) + aValue.substr(4, 2) + aValue.substr(7, 2);
            },
            fromICAL: function(aValue) {
                if (aValue.length < 6) // no seconds
                // -05:00
                return aValue.substr(0, 3) + ":" + aValue.substr(3, 2);
                else // seconds
                // -05:00:00
                return aValue.substr(0, 3) + ":" + aValue.substr(3, 2) + ":" + aValue.substr(5, 2);
            },
            decorate: function(aValue) {
                return ICAL.UtcOffset.fromString(aValue);
            },
            undecorate: function(aValue) {
                return aValue.toString();
            }
        }
    };
    var icalParams = {
        // Although the syntax is DQUOTE uri DQUOTE, I don't think we should
        // enfoce anything aside from it being a valid content line.
        //
        // At least some params require - if multi values are used - DQUOTEs
        // for each of its values - e.g. delegated-from="uri1","uri2"
        // To indicate this, I introduced the new k/v pair
        // multiValueSeparateDQuote: true
        //
        // "ALTREP": { ... },
        // CN just wants a param-value
        // "CN": { ... }
        "cutype": {
            values: [
                "INDIVIDUAL",
                "GROUP",
                "RESOURCE",
                "ROOM",
                "UNKNOWN"
            ],
            allowXName: true,
            allowIanaToken: true
        },
        "delegated-from": {
            valueType: "cal-address",
            multiValue: ",",
            multiValueSeparateDQuote: true
        },
        "delegated-to": {
            valueType: "cal-address",
            multiValue: ",",
            multiValueSeparateDQuote: true
        },
        // "DIR": { ... }, // See ALTREP
        "encoding": {
            values: [
                "8BIT",
                "BASE64"
            ]
        },
        // "FMTTYPE": { ... }, // See ALTREP
        "fbtype": {
            values: [
                "FREE",
                "BUSY",
                "BUSY-UNAVAILABLE",
                "BUSY-TENTATIVE"
            ],
            allowXName: true,
            allowIanaToken: true
        },
        // "LANGUAGE": { ... }, // See ALTREP
        "member": {
            valueType: "cal-address",
            multiValue: ",",
            multiValueSeparateDQuote: true
        },
        "partstat": {
            // TODO These values are actually different per-component
            values: [
                "NEEDS-ACTION",
                "ACCEPTED",
                "DECLINED",
                "TENTATIVE",
                "DELEGATED",
                "COMPLETED",
                "IN-PROCESS"
            ],
            allowXName: true,
            allowIanaToken: true
        },
        "range": {
            values: [
                "THISANDFUTURE"
            ]
        },
        "related": {
            values: [
                "START",
                "END"
            ]
        },
        "reltype": {
            values: [
                "PARENT",
                "CHILD",
                "SIBLING"
            ],
            allowXName: true,
            allowIanaToken: true
        },
        "role": {
            values: [
                "REQ-PARTICIPANT",
                "CHAIR",
                "OPT-PARTICIPANT",
                "NON-PARTICIPANT"
            ],
            allowXName: true,
            allowIanaToken: true
        },
        "rsvp": {
            values: [
                "TRUE",
                "FALSE"
            ]
        },
        "sent-by": {
            valueType: "cal-address"
        },
        "tzid": {
            matches: /^\//
        },
        "value": {
            // since the value here is a 'type' lowercase is used.
            values: [
                "binary",
                "boolean",
                "cal-address",
                "date",
                "date-time",
                "duration",
                "float",
                "integer",
                "period",
                "recur",
                "text",
                "time",
                "uri",
                "utc-offset"
            ],
            allowXName: true,
            allowIanaToken: true
        }
    };
    // When adding a value here, be sure to add it to the parameter types!
    var icalValues = ICAL.helpers.extend(commonValues, {
        text: createTextType(FROM_ICAL_NEWLINE, TO_ICAL_NEWLINE),
        uri: {
        },
        "binary": {
            decorate: function(aString) {
                return ICAL.Binary.fromString(aString);
            },
            undecorate: function(aBinary) {
                return aBinary.toString();
            }
        },
        "cal-address": {
        },
        "date": {
            decorate: function(aValue, aProp) {
                if (design.strict) return ICAL.Time.fromDateString(aValue, aProp);
                else return ICAL.Time.fromString(aValue, aProp);
            },
            /**
       * undecorates a time object.
       */ undecorate: function(aValue) {
                return aValue.toString();
            },
            fromICAL: function(aValue) {
                // from: 20120901
                // to: 2012-09-01
                if (!design.strict && aValue.length >= 15) // This is probably a date-time, e.g. 20120901T130000Z
                return icalValues["date-time"].fromICAL(aValue);
                else return aValue.substr(0, 4) + "-" + aValue.substr(4, 2) + "-" + aValue.substr(6, 2);
            },
            toICAL: function(aValue) {
                // from: 2012-09-01
                // to: 20120901
                var len = aValue.length;
                if (len == 10) return aValue.substr(0, 4) + aValue.substr(5, 2) + aValue.substr(8, 2);
                else if (len >= 19) return icalValues["date-time"].toICAL(aValue);
                else //TODO: serialize warning?
                return aValue;
            }
        },
        "date-time": {
            fromICAL: function(aValue) {
                // from: 20120901T130000
                // to: 2012-09-01T13:00:00
                if (!design.strict && aValue.length == 8) // This is probably a date, e.g. 20120901
                return icalValues.date.fromICAL(aValue);
                else {
                    var result = aValue.substr(0, 4) + "-" + aValue.substr(4, 2) + "-" + aValue.substr(6, 2) + "T" + aValue.substr(9, 2) + ":" + aValue.substr(11, 2) + ":" + aValue.substr(13, 2);
                    if (aValue[15] && aValue[15] === "Z") result += "Z";
                    return result;
                }
            },
            toICAL: function(aValue) {
                // from: 2012-09-01T13:00:00
                // to: 20120901T130000
                var len = aValue.length;
                if (len == 10 && !design.strict) return icalValues.date.toICAL(aValue);
                else if (len >= 19) {
                    var result = aValue.substr(0, 4) + aValue.substr(5, 2) + // grab the (DDTHH) segment
                    aValue.substr(8, 5) + // MM
                    aValue.substr(14, 2) + // SS
                    aValue.substr(17, 2);
                    if (aValue[19] && aValue[19] === "Z") result += "Z";
                    return result;
                } else // TODO: error
                return aValue;
            },
            decorate: function(aValue, aProp) {
                if (design.strict) return ICAL.Time.fromDateTimeString(aValue, aProp);
                else return ICAL.Time.fromString(aValue, aProp);
            },
            undecorate: function(aValue) {
                return aValue.toString();
            }
        },
        duration: {
            decorate: function(aValue) {
                return ICAL.Duration.fromString(aValue);
            },
            undecorate: function(aValue) {
                return aValue.toString();
            }
        },
        period: {
            fromICAL: function(string) {
                var parts = string.split("/");
                parts[0] = icalValues["date-time"].fromICAL(parts[0]);
                if (!ICAL.Duration.isValueString(parts[1])) parts[1] = icalValues["date-time"].fromICAL(parts[1]);
                return parts;
            },
            toICAL: function(parts) {
                if (!design.strict && parts[0].length == 10) parts[0] = icalValues.date.toICAL(parts[0]);
                else parts[0] = icalValues["date-time"].toICAL(parts[0]);
                if (!ICAL.Duration.isValueString(parts[1])) {
                    if (!design.strict && parts[1].length == 10) parts[1] = icalValues.date.toICAL(parts[1]);
                    else parts[1] = icalValues["date-time"].toICAL(parts[1]);
                }
                return parts.join("/");
            },
            decorate: function(aValue, aProp) {
                return ICAL.Period.fromJSON(aValue, aProp, !design.strict);
            },
            undecorate: function(aValue) {
                return aValue.toJSON();
            }
        },
        recur: {
            fromICAL: function(string) {
                return ICAL.Recur._stringToData(string, true);
            },
            toICAL: function(data) {
                var str = "";
                for(var k in data){
                    /* istanbul ignore if */ if (!Object.prototype.hasOwnProperty.call(data, k)) continue;
                    var val = data[k];
                    if (k == "until") {
                        if (val.length > 10) val = icalValues["date-time"].toICAL(val);
                        else val = icalValues.date.toICAL(val);
                    } else if (k == "wkst") {
                        if (typeof val === "number") val = ICAL.Recur.numericDayToIcalDay(val);
                    } else if (Array.isArray(val)) val = val.join(",");
                    str += k.toUpperCase() + "=" + val + ";";
                }
                return str.substr(0, str.length - 1);
            },
            decorate: function decorate(aValue) {
                return ICAL.Recur.fromData(aValue);
            },
            undecorate: function(aRecur) {
                return aRecur.toJSON();
            }
        },
        time: {
            fromICAL: function(aValue) {
                // from: MMHHSS(Z)?
                // to: HH:MM:SS(Z)?
                if (aValue.length < 6) // TODO: parser exception?
                return aValue;
                // HH::MM::SSZ?
                var result = aValue.substr(0, 2) + ":" + aValue.substr(2, 2) + ":" + aValue.substr(4, 2);
                if (aValue[6] === "Z") result += "Z";
                return result;
            },
            toICAL: function(aValue) {
                // from: HH:MM:SS(Z)?
                // to: MMHHSS(Z)?
                if (aValue.length < 8) //TODO: error
                return aValue;
                var result = aValue.substr(0, 2) + aValue.substr(3, 2) + aValue.substr(6, 2);
                if (aValue[8] === "Z") result += "Z";
                return result;
            }
        }
    });
    var icalProperties = ICAL.helpers.extend(commonProperties, {
        "action": DEFAULT_TYPE_TEXT,
        "attach": {
            defaultType: "uri"
        },
        "attendee": {
            defaultType: "cal-address"
        },
        "calscale": DEFAULT_TYPE_TEXT,
        "class": DEFAULT_TYPE_TEXT,
        "comment": DEFAULT_TYPE_TEXT,
        "completed": DEFAULT_TYPE_DATETIME,
        "contact": DEFAULT_TYPE_TEXT,
        "created": DEFAULT_TYPE_DATETIME,
        "description": DEFAULT_TYPE_TEXT,
        "dtend": DEFAULT_TYPE_DATETIME_DATE,
        "dtstamp": DEFAULT_TYPE_DATETIME,
        "dtstart": DEFAULT_TYPE_DATETIME_DATE,
        "due": DEFAULT_TYPE_DATETIME_DATE,
        "duration": {
            defaultType: "duration"
        },
        "exdate": {
            defaultType: "date-time",
            allowedTypes: [
                "date-time",
                "date"
            ],
            multiValue: ","
        },
        "exrule": DEFAULT_TYPE_RECUR,
        "freebusy": {
            defaultType: "period",
            multiValue: ","
        },
        "geo": {
            defaultType: "float",
            structuredValue: ";"
        },
        "last-modified": DEFAULT_TYPE_DATETIME,
        "location": DEFAULT_TYPE_TEXT,
        "method": DEFAULT_TYPE_TEXT,
        "organizer": {
            defaultType: "cal-address"
        },
        "percent-complete": DEFAULT_TYPE_INTEGER,
        "priority": DEFAULT_TYPE_INTEGER,
        "prodid": DEFAULT_TYPE_TEXT,
        "related-to": DEFAULT_TYPE_TEXT,
        "repeat": DEFAULT_TYPE_INTEGER,
        "rdate": {
            defaultType: "date-time",
            allowedTypes: [
                "date-time",
                "date",
                "period"
            ],
            multiValue: ",",
            detectType: function(string) {
                if (string.indexOf("/") !== -1) return "period";
                return string.indexOf("T") === -1 ? "date" : "date-time";
            }
        },
        "recurrence-id": DEFAULT_TYPE_DATETIME_DATE,
        "resources": DEFAULT_TYPE_TEXT_MULTI,
        "request-status": DEFAULT_TYPE_TEXT_STRUCTURED,
        "rrule": DEFAULT_TYPE_RECUR,
        "sequence": DEFAULT_TYPE_INTEGER,
        "status": DEFAULT_TYPE_TEXT,
        "summary": DEFAULT_TYPE_TEXT,
        "transp": DEFAULT_TYPE_TEXT,
        "trigger": {
            defaultType: "duration",
            allowedTypes: [
                "duration",
                "date-time"
            ]
        },
        "tzoffsetfrom": DEFAULT_TYPE_UTCOFFSET,
        "tzoffsetto": DEFAULT_TYPE_UTCOFFSET,
        "tzurl": DEFAULT_TYPE_URI,
        "tzid": DEFAULT_TYPE_TEXT,
        "tzname": DEFAULT_TYPE_TEXT
    });
    // When adding a value here, be sure to add it to the parameter types!
    var vcardValues = ICAL.helpers.extend(commonValues, {
        text: createTextType(FROM_VCARD_NEWLINE, TO_VCARD_NEWLINE),
        uri: createTextType(FROM_VCARD_NEWLINE, TO_VCARD_NEWLINE),
        date: {
            decorate: function(aValue) {
                return ICAL.VCardTime.fromDateAndOrTimeString(aValue, "date");
            },
            undecorate: function(aValue) {
                return aValue.toString();
            },
            fromICAL: function(aValue) {
                if (aValue.length == 8) return icalValues.date.fromICAL(aValue);
                else if (aValue[0] == "-" && aValue.length == 6) return aValue.substr(0, 4) + "-" + aValue.substr(4);
                else return aValue;
            },
            toICAL: function(aValue) {
                if (aValue.length == 10) return icalValues.date.toICAL(aValue);
                else if (aValue[0] == "-" && aValue.length == 7) return aValue.substr(0, 4) + aValue.substr(5);
                else return aValue;
            }
        },
        time: {
            decorate: function(aValue) {
                return ICAL.VCardTime.fromDateAndOrTimeString("T" + aValue, "time");
            },
            undecorate: function(aValue) {
                return aValue.toString();
            },
            fromICAL: function(aValue) {
                var splitzone = vcardValues.time._splitZone(aValue, true);
                var zone = splitzone[0], value = splitzone[1];
                //console.log("SPLIT: ",splitzone);
                if (value.length == 6) value = value.substr(0, 2) + ":" + value.substr(2, 2) + ":" + value.substr(4, 2);
                else if (value.length == 4 && value[0] != "-") value = value.substr(0, 2) + ":" + value.substr(2, 2);
                else if (value.length == 5) value = value.substr(0, 3) + ":" + value.substr(3, 2);
                if (zone.length == 5 && (zone[0] == "-" || zone[0] == "+")) zone = zone.substr(0, 3) + ":" + zone.substr(3);
                return value + zone;
            },
            toICAL: function(aValue) {
                var splitzone = vcardValues.time._splitZone(aValue);
                var zone = splitzone[0], value = splitzone[1];
                if (value.length == 8) value = value.substr(0, 2) + value.substr(3, 2) + value.substr(6, 2);
                else if (value.length == 5 && value[0] != "-") value = value.substr(0, 2) + value.substr(3, 2);
                else if (value.length == 6) value = value.substr(0, 3) + value.substr(4, 2);
                if (zone.length == 6 && (zone[0] == "-" || zone[0] == "+")) zone = zone.substr(0, 3) + zone.substr(4);
                return value + zone;
            },
            _splitZone: function(aValue, isFromIcal) {
                var lastChar = aValue.length - 1;
                var signChar = aValue.length - (isFromIcal ? 5 : 6);
                var sign = aValue[signChar];
                var zone, value;
                if (aValue[lastChar] == "Z") {
                    zone = aValue[lastChar];
                    value = aValue.substr(0, lastChar);
                } else if (aValue.length > 6 && (sign == "-" || sign == "+")) {
                    zone = aValue.substr(signChar);
                    value = aValue.substr(0, signChar);
                } else {
                    zone = "";
                    value = aValue;
                }
                return [
                    zone,
                    value
                ];
            }
        },
        "date-time": {
            decorate: function(aValue) {
                return ICAL.VCardTime.fromDateAndOrTimeString(aValue, "date-time");
            },
            undecorate: function(aValue) {
                return aValue.toString();
            },
            fromICAL: function(aValue) {
                return vcardValues["date-and-or-time"].fromICAL(aValue);
            },
            toICAL: function(aValue) {
                return vcardValues["date-and-or-time"].toICAL(aValue);
            }
        },
        "date-and-or-time": {
            decorate: function(aValue) {
                return ICAL.VCardTime.fromDateAndOrTimeString(aValue, "date-and-or-time");
            },
            undecorate: function(aValue) {
                return aValue.toString();
            },
            fromICAL: function(aValue) {
                var parts = aValue.split("T");
                return (parts[0] ? vcardValues.date.fromICAL(parts[0]) : "") + (parts[1] ? "T" + vcardValues.time.fromICAL(parts[1]) : "");
            },
            toICAL: function(aValue) {
                var parts = aValue.split("T");
                return vcardValues.date.toICAL(parts[0]) + (parts[1] ? "T" + vcardValues.time.toICAL(parts[1]) : "");
            }
        },
        timestamp: icalValues["date-time"],
        "language-tag": {
            matches: /^[a-zA-Z0-9-]+$/ // Could go with a more strict regex here
        }
    });
    var vcardParams = {
        "type": {
            valueType: "text",
            multiValue: ","
        },
        "value": {
            // since the value here is a 'type' lowercase is used.
            values: [
                "text",
                "uri",
                "date",
                "time",
                "date-time",
                "date-and-or-time",
                "timestamp",
                "boolean",
                "integer",
                "float",
                "utc-offset",
                "language-tag"
            ],
            allowXName: true,
            allowIanaToken: true
        }
    };
    var vcardProperties = ICAL.helpers.extend(commonProperties, {
        "adr": {
            defaultType: "text",
            structuredValue: ";",
            multiValue: ","
        },
        "anniversary": DEFAULT_TYPE_DATE_ANDOR_TIME,
        "bday": DEFAULT_TYPE_DATE_ANDOR_TIME,
        "caladruri": DEFAULT_TYPE_URI,
        "caluri": DEFAULT_TYPE_URI,
        "clientpidmap": DEFAULT_TYPE_TEXT_STRUCTURED,
        "email": DEFAULT_TYPE_TEXT,
        "fburl": DEFAULT_TYPE_URI,
        "fn": DEFAULT_TYPE_TEXT,
        "gender": DEFAULT_TYPE_TEXT_STRUCTURED,
        "geo": DEFAULT_TYPE_URI,
        "impp": DEFAULT_TYPE_URI,
        "key": DEFAULT_TYPE_URI,
        "kind": DEFAULT_TYPE_TEXT,
        "lang": {
            defaultType: "language-tag"
        },
        "logo": DEFAULT_TYPE_URI,
        "member": DEFAULT_TYPE_URI,
        "n": {
            defaultType: "text",
            structuredValue: ";",
            multiValue: ","
        },
        "nickname": DEFAULT_TYPE_TEXT_MULTI,
        "note": DEFAULT_TYPE_TEXT,
        "org": {
            defaultType: "text",
            structuredValue: ";"
        },
        "photo": DEFAULT_TYPE_URI,
        "related": DEFAULT_TYPE_URI,
        "rev": {
            defaultType: "timestamp"
        },
        "role": DEFAULT_TYPE_TEXT,
        "sound": DEFAULT_TYPE_URI,
        "source": DEFAULT_TYPE_URI,
        "tel": {
            defaultType: "uri",
            allowedTypes: [
                "uri",
                "text"
            ]
        },
        "title": DEFAULT_TYPE_TEXT,
        "tz": {
            defaultType: "text",
            allowedTypes: [
                "text",
                "utc-offset",
                "uri"
            ]
        },
        "xml": DEFAULT_TYPE_TEXT
    });
    var vcard3Values = ICAL.helpers.extend(commonValues, {
        binary: icalValues.binary,
        date: vcardValues.date,
        "date-time": vcardValues["date-time"],
        "phone-number": {
        },
        uri: icalValues.uri,
        text: icalValues.text,
        time: icalValues.time,
        vcard: icalValues.text,
        "utc-offset": {
            toICAL: function(aValue) {
                return aValue.substr(0, 7);
            },
            fromICAL: function(aValue) {
                return aValue.substr(0, 7);
            },
            decorate: function(aValue) {
                return ICAL.UtcOffset.fromString(aValue);
            },
            undecorate: function(aValue) {
                return aValue.toString();
            }
        }
    });
    var vcard3Params = {
        "type": {
            valueType: "text",
            multiValue: ","
        },
        "value": {
            // since the value here is a 'type' lowercase is used.
            values: [
                "text",
                "uri",
                "date",
                "date-time",
                "phone-number",
                "time",
                "boolean",
                "integer",
                "float",
                "utc-offset",
                "vcard",
                "binary"
            ],
            allowXName: true,
            allowIanaToken: true
        }
    };
    var vcard3Properties = ICAL.helpers.extend(commonProperties, {
        fn: DEFAULT_TYPE_TEXT,
        n: {
            defaultType: "text",
            structuredValue: ";",
            multiValue: ","
        },
        nickname: DEFAULT_TYPE_TEXT_MULTI,
        photo: {
            defaultType: "binary",
            allowedTypes: [
                "binary",
                "uri"
            ]
        },
        bday: {
            defaultType: "date-time",
            allowedTypes: [
                "date-time",
                "date"
            ],
            detectType: function(string) {
                return string.indexOf("T") === -1 ? "date" : "date-time";
            }
        },
        adr: {
            defaultType: "text",
            structuredValue: ";",
            multiValue: ","
        },
        label: DEFAULT_TYPE_TEXT,
        tel: {
            defaultType: "phone-number"
        },
        email: DEFAULT_TYPE_TEXT,
        mailer: DEFAULT_TYPE_TEXT,
        tz: {
            defaultType: "utc-offset",
            allowedTypes: [
                "utc-offset",
                "text"
            ]
        },
        geo: {
            defaultType: "float",
            structuredValue: ";"
        },
        title: DEFAULT_TYPE_TEXT,
        role: DEFAULT_TYPE_TEXT,
        logo: {
            defaultType: "binary",
            allowedTypes: [
                "binary",
                "uri"
            ]
        },
        agent: {
            defaultType: "vcard",
            allowedTypes: [
                "vcard",
                "text",
                "uri"
            ]
        },
        org: DEFAULT_TYPE_TEXT_STRUCTURED,
        note: DEFAULT_TYPE_TEXT_MULTI,
        prodid: DEFAULT_TYPE_TEXT,
        rev: {
            defaultType: "date-time",
            allowedTypes: [
                "date-time",
                "date"
            ],
            detectType: function(string) {
                return string.indexOf("T") === -1 ? "date" : "date-time";
            }
        },
        "sort-string": DEFAULT_TYPE_TEXT,
        sound: {
            defaultType: "binary",
            allowedTypes: [
                "binary",
                "uri"
            ]
        },
        class: DEFAULT_TYPE_TEXT,
        key: {
            defaultType: "binary",
            allowedTypes: [
                "binary",
                "text"
            ]
        }
    });
    /**
   * iCalendar design set
   * @type {ICAL.design.designSet}
   */ var icalSet = {
        value: icalValues,
        param: icalParams,
        property: icalProperties
    };
    /**
   * vCard 4.0 design set
   * @type {ICAL.design.designSet}
   */ var vcardSet = {
        value: vcardValues,
        param: vcardParams,
        property: vcardProperties
    };
    /**
   * vCard 3.0 design set
   * @type {ICAL.design.designSet}
   */ var vcard3Set = {
        value: vcard3Values,
        param: vcard3Params,
        property: vcard3Properties
    };
    /**
   * The design data, used by the parser to determine types for properties and
   * other metadata needed to produce correct jCard/jCal data.
   *
   * @alias ICAL.design
   * @namespace
   */ var design = {
        /**
     * A designSet describes value, parameter and property data. It is used by
     * ther parser and stringifier in components and properties to determine they
     * should be represented.
     *
     * @typedef {Object} designSet
     * @memberOf ICAL.design
     * @property {Object} value       Definitions for value types, keys are type names
     * @property {Object} param       Definitions for params, keys are param names
     * @property {Object} property    Defintions for properties, keys are property names
     */ /**
     * Can be set to false to make the parser more lenient.
     */ strict: true,
        /**
     * The default set for new properties and components if none is specified.
     * @type {ICAL.design.designSet}
     */ defaultSet: icalSet,
        /**
     * The default type for unknown properties
     * @type {String}
     */ defaultType: "unknown",
        /**
     * Holds the design set for known top-level components
     *
     * @type {Object}
     * @property {ICAL.design.designSet} vcard       vCard VCARD
     * @property {ICAL.design.designSet} vevent      iCalendar VEVENT
     * @property {ICAL.design.designSet} vtodo       iCalendar VTODO
     * @property {ICAL.design.designSet} vjournal    iCalendar VJOURNAL
     * @property {ICAL.design.designSet} valarm      iCalendar VALARM
     * @property {ICAL.design.designSet} vtimezone   iCalendar VTIMEZONE
     * @property {ICAL.design.designSet} daylight    iCalendar DAYLIGHT
     * @property {ICAL.design.designSet} standard    iCalendar STANDARD
     *
     * @example
     * var propertyName = 'fn';
     * var componentDesign = ICAL.design.components.vcard;
     * var propertyDetails = componentDesign.property[propertyName];
     * if (propertyDetails.defaultType == 'text') {
     *   // Yep, sure is...
     * }
     */ components: {
            vcard: vcardSet,
            vcard3: vcard3Set,
            vevent: icalSet,
            vtodo: icalSet,
            vjournal: icalSet,
            valarm: icalSet,
            vtimezone: icalSet,
            daylight: icalSet,
            standard: icalSet
        },
        /**
     * The design set for iCalendar (rfc5545/rfc7265) components.
     * @type {ICAL.design.designSet}
     */ icalendar: icalSet,
        /**
     * The design set for vCard (rfc6350/rfc7095) components.
     * @type {ICAL.design.designSet}
     */ vcard: vcardSet,
        /**
     * The design set for vCard (rfc2425/rfc2426/rfc7095) components.
     * @type {ICAL.design.designSet}
     */ vcard3: vcard3Set,
        /**
     * Gets the design set for the given component name.
     *
     * @param {String} componentName        The name of the component
     * @return {ICAL.design.designSet}      The design set for the component
     */ getDesignSet: function(componentName) {
            var isInDesign = componentName && componentName in design.components;
            return isInDesign ? design.components[componentName] : design.defaultSet;
        }
    };
    return design;
}();
/* This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/.
 * Portions Copyright (C) Philipp Kewisch, 2011-2015 */ /**
 * Contains various functions to convert jCal and jCard data back into
 * iCalendar and vCard.
 * @namespace
 */ ICAL.stringify = function() {
    "use strict";
    var LINE_ENDING = "\r\n";
    var DEFAULT_VALUE_TYPE = "unknown";
    var design = ICAL.design;
    var helpers = ICAL.helpers;
    /**
   * Convert a full jCal/jCard array into a iCalendar/vCard string.
   *
   * @function ICAL.stringify
   * @variation function
   * @param {Array} jCal    The jCal/jCard document
   * @return {String}       The stringified iCalendar/vCard document
   */ function stringify(jCal) {
        if (typeof jCal[0] == "string") // This is a single component
        jCal = [
            jCal
        ];
        var i = 0;
        var len = jCal.length;
        var result = "";
        for(; i < len; i++)result += stringify.component(jCal[i]) + LINE_ENDING;
        return result;
    }
    /**
   * Converts an jCal component array into a ICAL string.
   * Recursive will resolve sub-components.
   *
   * Exact component/property order is not saved all
   * properties will come before subcomponents.
   *
   * @function ICAL.stringify.component
   * @param {Array} component
   *        jCal/jCard fragment of a component
   * @param {ICAL.design.designSet} designSet
   *        The design data to use for this component
   * @return {String}       The iCalendar/vCard string
   */ stringify.component = function(component, designSet) {
        var name = component[0].toUpperCase();
        var result = "BEGIN:" + name + LINE_ENDING;
        var props = component[1];
        var propIdx = 0;
        var propLen = props.length;
        var designSetName = component[0];
        // rfc6350 requires that in vCard 4.0 the first component is the VERSION
        // component with as value 4.0, note that 3.0 does not have this requirement.
        if (designSetName === "vcard" && component[1].length > 0 && !(component[1][0][0] === "version" && component[1][0][3] === "4.0")) designSetName = "vcard3";
        designSet = designSet || design.getDesignSet(designSetName);
        for(; propIdx < propLen; propIdx++)result += stringify.property(props[propIdx], designSet) + LINE_ENDING;
        // Ignore subcomponents if none exist, e.g. in vCard.
        var comps = component[2] || [];
        var compIdx = 0;
        var compLen = comps.length;
        for(; compIdx < compLen; compIdx++)result += stringify.component(comps[compIdx], designSet) + LINE_ENDING;
        result += "END:" + name;
        return result;
    };
    /**
   * Converts a single jCal/jCard property to a iCalendar/vCard string.
   *
   * @function ICAL.stringify.property
   * @param {Array} property
   *        jCal/jCard property array
   * @param {ICAL.design.designSet} designSet
   *        The design data to use for this property
   * @param {Boolean} noFold
   *        If true, the line is not folded
   * @return {String}       The iCalendar/vCard string
   */ stringify.property = function(property, designSet, noFold) {
        var name = property[0].toUpperCase();
        var jsName = property[0];
        var params = property[1];
        var line = name;
        var paramName;
        for(paramName in params){
            var value = params[paramName];
            /* istanbul ignore else */ if (params.hasOwnProperty(paramName)) {
                var multiValue = paramName in designSet.param && designSet.param[paramName].multiValue;
                if (multiValue && Array.isArray(value)) {
                    if (designSet.param[paramName].multiValueSeparateDQuote) multiValue = '"' + multiValue + '"';
                    value = value.map(stringify._rfc6868Unescape);
                    value = stringify.multiValue(value, multiValue, "unknown", null, designSet);
                } else value = stringify._rfc6868Unescape(value);
                line += ";" + paramName.toUpperCase();
                line += "=" + stringify.propertyValue(value);
            }
        }
        if (property.length === 3) // If there are no values, we must assume a blank value
        return line + ":";
        var valueType = property[2];
        if (!designSet) designSet = design.defaultSet;
        var propDetails;
        var multiValue = false;
        var structuredValue = false;
        var isDefault = false;
        if (jsName in designSet.property) {
            propDetails = designSet.property[jsName];
            if ("multiValue" in propDetails) multiValue = propDetails.multiValue;
            if ("structuredValue" in propDetails && Array.isArray(property[3])) structuredValue = propDetails.structuredValue;
            if ("defaultType" in propDetails) {
                if (valueType === propDetails.defaultType) isDefault = true;
            } else if (valueType === DEFAULT_VALUE_TYPE) isDefault = true;
        } else if (valueType === DEFAULT_VALUE_TYPE) isDefault = true;
        // push the VALUE property if type is not the default
        // for the current property.
        if (!isDefault) // value will never contain ;/:/, so we don't escape it here.
        line += ";VALUE=" + valueType.toUpperCase();
        line += ":";
        if (multiValue && structuredValue) line += stringify.multiValue(property[3], structuredValue, valueType, multiValue, designSet, structuredValue);
        else if (multiValue) line += stringify.multiValue(property.slice(3), multiValue, valueType, null, designSet, false);
        else if (structuredValue) line += stringify.multiValue(property[3], structuredValue, valueType, null, designSet, structuredValue);
        else line += stringify.value(property[3], valueType, designSet, false);
        return noFold ? line : ICAL.helpers.foldline(line);
    };
    /**
   * Handles escaping of property values that may contain:
   *
   *    COLON (:), SEMICOLON (;), or COMMA (,)
   *
   * If any of the above are present the result is wrapped
   * in double quotes.
   *
   * @function ICAL.stringify.propertyValue
   * @param {String} value      Raw property value
   * @return {String}           Given or escaped value when needed
   */ stringify.propertyValue = function(value) {
        if (helpers.unescapedIndexOf(value, ",") === -1 && helpers.unescapedIndexOf(value, ":") === -1 && helpers.unescapedIndexOf(value, ";") === -1) return value;
        return '"' + value + '"';
    };
    /**
   * Converts an array of ical values into a single
   * string based on a type and a delimiter value (like ",").
   *
   * @function ICAL.stringify.multiValue
   * @param {Array} values      List of values to convert
   * @param {String} delim      Used to join the values (",", ";", ":")
   * @param {String} type       Lowecase ical value type
   *        (like boolean, date-time, etc..)
   * @param {?String} innerMulti If set, each value will again be processed
   *        Used for structured values
   * @param {ICAL.design.designSet} designSet
   *        The design data to use for this property
   *
   * @return {String}           iCalendar/vCard string for value
   */ stringify.multiValue = function(values, delim, type, innerMulti, designSet, structuredValue) {
        var result = "";
        var len = values.length;
        var i = 0;
        for(; i < len; i++){
            if (innerMulti && Array.isArray(values[i])) result += stringify.multiValue(values[i], innerMulti, type, null, designSet, structuredValue);
            else result += stringify.value(values[i], type, designSet, structuredValue);
            if (i !== len - 1) result += delim;
        }
        return result;
    };
    /**
   * Processes a single ical value runs the associated "toICAL" method from the
   * design value type if available to convert the value.
   *
   * @function ICAL.stringify.value
   * @param {String|Number} value       A formatted value
   * @param {String} type               Lowercase iCalendar/vCard value type
   *  (like boolean, date-time, etc..)
   * @return {String}                   iCalendar/vCard value for single value
   */ stringify.value = function(value, type, designSet, structuredValue) {
        if (type in designSet.value && "toICAL" in designSet.value[type]) return designSet.value[type].toICAL(value, structuredValue);
        return value;
    };
    /**
   * Internal helper for rfc6868. Exposing this on ICAL.stringify so that
   * hackers can disable the rfc6868 parsing if the really need to.
   *
   * @param {String} val        The value to unescape
   * @return {String}           The escaped value
   */ stringify._rfc6868Unescape = function(val) {
        return val.replace(/[\n^"]/g, function(x) {
            return RFC6868_REPLACE_MAP[x];
        });
    };
    var RFC6868_REPLACE_MAP = {
        '"': "^'",
        "\n": "^n",
        "^": "^^"
    };
    return stringify;
}();
/* This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/.
 * Portions Copyright (C) Philipp Kewisch, 2011-2015 */ /**
 * Contains various functions to parse iCalendar and vCard data.
 * @namespace
 */ ICAL.parse = function() {
    "use strict";
    var CHAR = /[^ \t]/;
    var MULTIVALUE_DELIMITER = ",";
    var VALUE_DELIMITER = ":";
    var PARAM_DELIMITER = ";";
    var PARAM_NAME_DELIMITER = "=";
    var DEFAULT_VALUE_TYPE = "unknown";
    var DEFAULT_PARAM_TYPE = "text";
    var design = ICAL.design;
    var helpers = ICAL.helpers;
    /**
   * An error that occurred during parsing.
   *
   * @param {String} message        The error message
   * @memberof ICAL.parse
   * @extends {Error}
   * @class
   */ function ParserError(message) {
        this.message = message;
        this.name = "ParserError";
        try {
            throw new Error();
        } catch (e) {
            if (e.stack) {
                var split = e.stack.split("\n");
                split.shift();
                this.stack = split.join("\n");
            }
        }
    }
    ParserError.prototype = Error.prototype;
    /**
   * Parses iCalendar or vCard data into a raw jCal object. Consult
   * documentation on the {@tutorial layers|layers of parsing} for more
   * details.
   *
   * @function ICAL.parse
   * @variation function
   * @todo Fix the API to be more clear on the return type
   * @param {String} input      The string data to parse
   * @return {Object|Object[]}  A single jCal object, or an array thereof
   */ function parser(input) {
        var state = {};
        var root = state.component = [];
        state.stack = [
            root
        ];
        parser._eachLine(input, function(err, line) {
            parser._handleContentLine(line, state);
        });
        // when there are still items on the stack
        // throw a fatal error, a component was not closed
        // correctly in that case.
        if (state.stack.length > 1) throw new ParserError("invalid ical body. component began but did not end");
        state = null;
        return root.length == 1 ? root[0] : root;
    }
    /**
   * Parse an iCalendar property value into the jCal for a single property
   *
   * @function ICAL.parse.property
   * @param {String} str
   *   The iCalendar property string to parse
   * @param {ICAL.design.designSet=} designSet
   *   The design data to use for this property
   * @return {Object}
   *   The jCal Object containing the property
   */ parser.property = function(str, designSet) {
        var state = {
            component: [
                [],
                []
            ],
            designSet: designSet || design.defaultSet
        };
        parser._handleContentLine(str, state);
        return state.component[1][0];
    };
    /**
   * Convenience method to parse a component. You can use ICAL.parse() directly
   * instead.
   *
   * @function ICAL.parse.component
   * @see ICAL.parse(function)
   * @param {String} str    The iCalendar component string to parse
   * @return {Object}       The jCal Object containing the component
   */ parser.component = function(str) {
        return parser(str);
    };
    // classes & constants
    parser.ParserError = ParserError;
    /**
   * The state for parsing content lines from an iCalendar/vCard string.
   *
   * @private
   * @memberof ICAL.parse
   * @typedef {Object} parserState
   * @property {ICAL.design.designSet} designSet    The design set to use for parsing
   * @property {ICAL.Component[]} stack             The stack of components being processed
   * @property {ICAL.Component} component           The currently active component
   */ /**
   * Handles a single line of iCalendar/vCard, updating the state.
   *
   * @private
   * @function ICAL.parse._handleContentLine
   * @param {String} line               The content line to process
   * @param {ICAL.parse.parserState}    The current state of the line parsing
   */ parser._handleContentLine = function(line, state) {
        // break up the parts of the line
        var valuePos = line.indexOf(VALUE_DELIMITER);
        var paramPos = line.indexOf(PARAM_DELIMITER);
        var lastParamIndex;
        var lastValuePos;
        // name of property or begin/end
        var name;
        var value;
        // params is only overridden if paramPos !== -1.
        // we can't do params = params || {} later on
        // because it sacrifices ops.
        var params = {};
        /**
     * Different property cases
     *
     *
     * 1. RRULE:FREQ=foo
     *    // FREQ= is not a param but the value
     *
     * 2. ATTENDEE;ROLE=REQ-PARTICIPANT;
     *    // ROLE= is a param because : has not happened yet
     */ // when the parameter delimiter is after the
        // value delimiter then it is not a parameter.
        if (paramPos !== -1 && valuePos !== -1) // when the parameter delimiter is after the
        // value delimiter then it is not a parameter.
        {
            if (paramPos > valuePos) paramPos = -1;
        }
        var parsedParams;
        if (paramPos !== -1) {
            name = line.substring(0, paramPos).toLowerCase();
            parsedParams = parser._parseParameters(line.substring(paramPos), 0, state.designSet);
            if (parsedParams[2] == -1) throw new ParserError("Invalid parameters in '" + line + "'");
            params = parsedParams[0];
            lastParamIndex = parsedParams[1].length + parsedParams[2] + paramPos;
            if ((lastValuePos = line.substring(lastParamIndex).indexOf(VALUE_DELIMITER)) !== -1) value = line.substring(lastParamIndex + lastValuePos + 1);
            else throw new ParserError("Missing parameter value in '" + line + "'");
        } else if (valuePos !== -1) {
            // without parmeters (BEGIN:VCAENDAR, CLASS:PUBLIC)
            name = line.substring(0, valuePos).toLowerCase();
            value = line.substring(valuePos + 1);
            if (name === "begin") {
                var newComponent = [
                    value.toLowerCase(),
                    [],
                    []
                ];
                if (state.stack.length === 1) state.component.push(newComponent);
                else state.component[2].push(newComponent);
                state.stack.push(state.component);
                state.component = newComponent;
                if (!state.designSet) state.designSet = design.getDesignSet(state.component[0]);
                return;
            } else if (name === "end") {
                state.component = state.stack.pop();
                return;
            }
        // If it is not begin/end, then this is a property with an empty value,
        // which should be considered valid.
        } else /**
       * Invalid line.
       * The rational to throw an error is we will
       * never be certain that the rest of the file
       * is sane and it is unlikely that we can serialize
       * the result correctly either.
       */ throw new ParserError('invalid line (no token ";" or ":") "' + line + '"');
        var valueType;
        var multiValue = false;
        var structuredValue = false;
        var propertyDetails;
        if (name in state.designSet.property) {
            propertyDetails = state.designSet.property[name];
            if ("multiValue" in propertyDetails) multiValue = propertyDetails.multiValue;
            if ("structuredValue" in propertyDetails) structuredValue = propertyDetails.structuredValue;
            if (value && "detectType" in propertyDetails) valueType = propertyDetails.detectType(value);
        }
        // attempt to determine value
        if (!valueType) {
            if (!("value" in params)) {
                if (propertyDetails) valueType = propertyDetails.defaultType;
                else valueType = DEFAULT_VALUE_TYPE;
            } else // possible to avoid this?
            valueType = params.value.toLowerCase();
        }
        delete params.value;
        /**
     * Note on `var result` juggling:
     *
     * I observed that building the array in pieces has adverse
     * effects on performance, so where possible we inline the creation.
     * It is a little ugly but resulted in ~2000 additional ops/sec.
     */ var result;
        if (multiValue && structuredValue) {
            value = parser._parseMultiValue(value, structuredValue, valueType, [], multiValue, state.designSet, structuredValue);
            result = [
                name,
                params,
                valueType,
                value
            ];
        } else if (multiValue) {
            result = [
                name,
                params,
                valueType
            ];
            parser._parseMultiValue(value, multiValue, valueType, result, null, state.designSet, false);
        } else if (structuredValue) {
            value = parser._parseMultiValue(value, structuredValue, valueType, [], null, state.designSet, structuredValue);
            result = [
                name,
                params,
                valueType,
                value
            ];
        } else {
            value = parser._parseValue(value, valueType, state.designSet, false);
            result = [
                name,
                params,
                valueType,
                value
            ];
        }
        // rfc6350 requires that in vCard 4.0 the first component is the VERSION
        // component with as value 4.0, note that 3.0 does not have this requirement.
        if (state.component[0] === "vcard" && state.component[1].length === 0 && !(name === "version" && value === "4.0")) state.designSet = design.getDesignSet("vcard3");
        state.component[1].push(result);
    };
    /**
   * Parse a value from the raw value into the jCard/jCal value.
   *
   * @private
   * @function ICAL.parse._parseValue
   * @param {String} value          Original value
   * @param {String} type           Type of value
   * @param {Object} designSet      The design data to use for this value
   * @return {Object} varies on type
   */ parser._parseValue = function(value, type, designSet, structuredValue) {
        if (type in designSet.value && "fromICAL" in designSet.value[type]) return designSet.value[type].fromICAL(value, structuredValue);
        return value;
    };
    /**
   * Parse parameters from a string to object.
   *
   * @function ICAL.parse._parseParameters
   * @private
   * @param {String} line           A single unfolded line
   * @param {Numeric} start         Position to start looking for properties
   * @param {Object} designSet      The design data to use for this property
   * @return {Object} key/value pairs
   */ parser._parseParameters = function(line, start, designSet) {
        var lastParam = start;
        var pos = 0;
        var delim = PARAM_NAME_DELIMITER;
        var result = {};
        var name, lcname;
        var value, valuePos = -1;
        var type, multiValue, mvdelim;
        // find the next '=' sign
        // use lastParam and pos to find name
        // check if " is used if so get value from "->"
        // then increment pos to find next ;
        while(pos !== false && (pos = helpers.unescapedIndexOf(line, delim, pos + 1)) !== -1){
            name = line.substr(lastParam + 1, pos - lastParam - 1);
            if (name.length == 0) throw new ParserError("Empty parameter name in '" + line + "'");
            lcname = name.toLowerCase();
            mvdelim = false;
            multiValue = false;
            if (lcname in designSet.param && designSet.param[lcname].valueType) type = designSet.param[lcname].valueType;
            else type = DEFAULT_PARAM_TYPE;
            if (lcname in designSet.param) {
                multiValue = designSet.param[lcname].multiValue;
                if (designSet.param[lcname].multiValueSeparateDQuote) mvdelim = parser._rfc6868Escape('"' + multiValue + '"');
            }
            var nextChar = line[pos + 1];
            if (nextChar === '"') {
                valuePos = pos + 2;
                pos = helpers.unescapedIndexOf(line, '"', valuePos);
                if (multiValue && pos != -1) {
                    var extendedValue = true;
                    while(extendedValue)if (line[pos + 1] == multiValue && line[pos + 2] == '"') pos = helpers.unescapedIndexOf(line, '"', pos + 3);
                    else extendedValue = false;
                }
                if (pos === -1) throw new ParserError('invalid line (no matching double quote) "' + line + '"');
                value = line.substr(valuePos, pos - valuePos);
                lastParam = helpers.unescapedIndexOf(line, PARAM_DELIMITER, pos);
                if (lastParam === -1) pos = false;
            } else {
                valuePos = pos + 1;
                // move to next ";"
                var nextPos = helpers.unescapedIndexOf(line, PARAM_DELIMITER, valuePos);
                var propValuePos = helpers.unescapedIndexOf(line, VALUE_DELIMITER, valuePos);
                if (propValuePos !== -1 && nextPos > propValuePos) {
                    // this is a delimiter in the property value, let's stop here
                    nextPos = propValuePos;
                    pos = false;
                } else if (nextPos === -1) {
                    // no ";"
                    if (propValuePos === -1) nextPos = line.length;
                    else nextPos = propValuePos;
                    pos = false;
                } else {
                    lastParam = nextPos;
                    pos = nextPos;
                }
                value = line.substr(valuePos, nextPos - valuePos);
            }
            value = parser._rfc6868Escape(value);
            if (multiValue) {
                var delimiter = mvdelim || multiValue;
                value = parser._parseMultiValue(value, delimiter, type, [], null, designSet);
            } else value = parser._parseValue(value, type, designSet);
            if (multiValue && lcname in result) {
                if (Array.isArray(result[lcname])) result[lcname].push(value);
                else result[lcname] = [
                    result[lcname],
                    value
                ];
            } else result[lcname] = value;
        }
        return [
            result,
            value,
            valuePos
        ];
    };
    /**
   * Internal helper for rfc6868. Exposing this on ICAL.parse so that
   * hackers can disable the rfc6868 parsing if the really need to.
   *
   * @function ICAL.parse._rfc6868Escape
   * @param {String} val        The value to escape
   * @return {String}           The escaped value
   */ parser._rfc6868Escape = function(val) {
        return val.replace(/\^['n^]/g, function(x) {
            return RFC6868_REPLACE_MAP[x];
        });
    };
    var RFC6868_REPLACE_MAP = {
        "^'": '"',
        "^n": "\n",
        "^^": "^"
    };
    /**
   * Parse a multi value string. This function is used either for parsing
   * actual multi-value property's values, or for handling parameter values. It
   * can be used for both multi-value properties and structured value properties.
   *
   * @private
   * @function ICAL.parse._parseMultiValue
   * @param {String} buffer     The buffer containing the full value
   * @param {String} delim      The multi-value delimiter
   * @param {String} type       The value type to be parsed
   * @param {Array.<?>} result        The array to append results to, varies on value type
   * @param {String} innerMulti The inner delimiter to split each value with
   * @param {ICAL.design.designSet} designSet   The design data for this value
   * @return {?|Array.<?>}            Either an array of results, or the first result
   */ parser._parseMultiValue = function(buffer, delim, type, result, innerMulti, designSet, structuredValue) {
        var pos = 0;
        var lastPos = 0;
        var value;
        if (delim.length === 0) return buffer;
        // split each piece
        while((pos = helpers.unescapedIndexOf(buffer, delim, lastPos)) !== -1){
            value = buffer.substr(lastPos, pos - lastPos);
            if (innerMulti) value = parser._parseMultiValue(value, innerMulti, type, [], null, designSet, structuredValue);
            else value = parser._parseValue(value, type, designSet, structuredValue);
            result.push(value);
            lastPos = pos + delim.length;
        }
        // on the last piece take the rest of string
        value = buffer.substr(lastPos);
        if (innerMulti) value = parser._parseMultiValue(value, innerMulti, type, [], null, designSet, structuredValue);
        else value = parser._parseValue(value, type, designSet, structuredValue);
        result.push(value);
        return result.length == 1 ? result[0] : result;
    };
    /**
   * Process a complete buffer of iCalendar/vCard data line by line, correctly
   * unfolding content. Each line will be processed with the given callback
   *
   * @private
   * @function ICAL.parse._eachLine
   * @param {String} buffer                         The buffer to process
   * @param {function(?String, String)} callback    The callback for each line
   */ parser._eachLine = function(buffer, callback) {
        var len = buffer.length;
        var lastPos = buffer.search(CHAR);
        var pos = lastPos;
        var line;
        var firstChar;
        var newlineOffset;
        do {
            pos = buffer.indexOf("\n", lastPos) + 1;
            if (pos > 1 && buffer[pos - 2] === "\r") newlineOffset = 2;
            else newlineOffset = 1;
            if (pos === 0) {
                pos = len;
                newlineOffset = 0;
            }
            firstChar = buffer[lastPos];
            if (firstChar === " " || firstChar === "	") // add to line
            line += buffer.substr(lastPos + 1, pos - lastPos - (newlineOffset + 1));
            else {
                if (line) callback(null, line);
                // push line
                line = buffer.substr(lastPos, pos - lastPos - newlineOffset);
            }
            lastPos = pos;
        }while (pos !== len);
        // extra ending line
        line = line.trim();
        if (line.length) callback(null, line);
    };
    return parser;
}();
/* This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/.
 * Portions Copyright (C) Philipp Kewisch, 2011-2015 */ /**
 * This symbol is further described later on
 * @ignore
 */ ICAL.Component = function() {
    "use strict";
    var PROPERTY_INDEX = 1;
    var COMPONENT_INDEX = 2;
    var NAME_INDEX = 0;
    /**
   * @classdesc
   * Wraps a jCal component, adding convenience methods to add, remove and
   * update subcomponents and properties.
   *
   * @class
   * @alias ICAL.Component
   * @param {Array|String} jCal         Raw jCal component data OR name of new
   *                                      component
   * @param {ICAL.Component} parent     Parent component to associate
   */ function Component(jCal, parent) {
        if (typeof jCal === "string") // jCal spec (name, properties, components)
        jCal = [
            jCal,
            [],
            []
        ];
        // mostly for legacy reasons.
        this.jCal = jCal;
        this.parent = parent || null;
    }
    Component.prototype = {
        /**
     * Hydrated properties are inserted into the _properties array at the same
     * position as in the jCal array, so it is possible that the array contains
     * undefined values for unhydrdated properties. To avoid iterating the
     * array when checking if all properties have been hydrated, we save the
     * count here.
     *
     * @type {Number}
     * @private
     */ _hydratedPropertyCount: 0,
        /**
     * The same count as for _hydratedPropertyCount, but for subcomponents
     *
     * @type {Number}
     * @private
     */ _hydratedComponentCount: 0,
        /**
     * The name of this component
     * @readonly
     */ get name () {
            return this.jCal[NAME_INDEX];
        },
        /**
     * The design set for this component, e.g. icalendar vs vcard
     *
     * @type {ICAL.design.designSet}
     * @private
     */ get _designSet () {
            var parentDesign = this.parent && this.parent._designSet;
            return parentDesign || ICAL.design.getDesignSet(this.name);
        },
        _hydrateComponent: function(index) {
            if (!this._components) {
                this._components = [];
                this._hydratedComponentCount = 0;
            }
            if (this._components[index]) return this._components[index];
            var comp = new Component(this.jCal[COMPONENT_INDEX][index], this);
            this._hydratedComponentCount++;
            return this._components[index] = comp;
        },
        _hydrateProperty: function(index) {
            if (!this._properties) {
                this._properties = [];
                this._hydratedPropertyCount = 0;
            }
            if (this._properties[index]) return this._properties[index];
            var prop = new ICAL.Property(this.jCal[PROPERTY_INDEX][index], this);
            this._hydratedPropertyCount++;
            return this._properties[index] = prop;
        },
        /**
     * Finds first sub component, optionally filtered by name.
     *
     * @param {String=} name        Optional name to filter by
     * @return {?ICAL.Component}     The found subcomponent
     */ getFirstSubcomponent: function(name) {
            if (name) {
                var i = 0;
                var comps = this.jCal[COMPONENT_INDEX];
                var len = comps.length;
                for(; i < len; i++)if (comps[i][NAME_INDEX] === name) {
                    var result = this._hydrateComponent(i);
                    return result;
                }
            } else {
                if (this.jCal[COMPONENT_INDEX].length) return this._hydrateComponent(0);
            }
            // ensure we return a value (strict mode)
            return null;
        },
        /**
     * Finds all sub components, optionally filtering by name.
     *
     * @param {String=} name            Optional name to filter by
     * @return {ICAL.Component[]}       The found sub components
     */ getAllSubcomponents: function(name) {
            var jCalLen = this.jCal[COMPONENT_INDEX].length;
            var i = 0;
            if (name) {
                var comps = this.jCal[COMPONENT_INDEX];
                var result = [];
                for(; i < jCalLen; i++)if (name === comps[i][NAME_INDEX]) result.push(this._hydrateComponent(i));
                return result;
            } else {
                if (!this._components || this._hydratedComponentCount !== jCalLen) for(; i < jCalLen; i++)this._hydrateComponent(i);
                return this._components || [];
            }
        },
        /**
     * Returns true when a named property exists.
     *
     * @param {String} name     The property name
     * @return {Boolean}        True, when property is found
     */ hasProperty: function(name) {
            var props = this.jCal[PROPERTY_INDEX];
            var len = props.length;
            var i = 0;
            for(; i < len; i++){
                // 0 is property name
                if (props[i][NAME_INDEX] === name) return true;
            }
            return false;
        },
        /**
     * Finds the first property, optionally with the given name.
     *
     * @param {String=} name        Lowercase property name
     * @return {?ICAL.Property}     The found property
     */ getFirstProperty: function(name) {
            if (name) {
                var i = 0;
                var props = this.jCal[PROPERTY_INDEX];
                var len = props.length;
                for(; i < len; i++)if (props[i][NAME_INDEX] === name) {
                    var result = this._hydrateProperty(i);
                    return result;
                }
            } else {
                if (this.jCal[PROPERTY_INDEX].length) return this._hydrateProperty(0);
            }
            return null;
        },
        /**
     * Returns first property's value, if available.
     *
     * @param {String=} name    Lowercase property name
     * @return {?String}        The found property value.
     */ getFirstPropertyValue: function(name) {
            var prop = this.getFirstProperty(name);
            if (prop) return prop.getFirstValue();
            return null;
        },
        /**
     * Get all properties in the component, optionally filtered by name.
     *
     * @param {String=} name        Lowercase property name
     * @return {ICAL.Property[]}    List of properties
     */ getAllProperties: function(name) {
            var jCalLen = this.jCal[PROPERTY_INDEX].length;
            var i = 0;
            if (name) {
                var props = this.jCal[PROPERTY_INDEX];
                var result = [];
                for(; i < jCalLen; i++)if (name === props[i][NAME_INDEX]) result.push(this._hydrateProperty(i));
                return result;
            } else {
                if (!this._properties || this._hydratedPropertyCount !== jCalLen) for(; i < jCalLen; i++)this._hydrateProperty(i);
                return this._properties || [];
            }
        },
        _removeObjectByIndex: function(jCalIndex, cache, index) {
            cache = cache || [];
            // remove cached version
            if (cache[index]) {
                var obj = cache[index];
                if ("parent" in obj) obj.parent = null;
            }
            cache.splice(index, 1);
            // remove it from the jCal
            this.jCal[jCalIndex].splice(index, 1);
        },
        _removeObject: function(jCalIndex, cache, nameOrObject) {
            var i = 0;
            var objects = this.jCal[jCalIndex];
            var len = objects.length;
            var cached = this[cache];
            if (typeof nameOrObject === "string") {
                for(; i < len; i++)if (objects[i][NAME_INDEX] === nameOrObject) {
                    this._removeObjectByIndex(jCalIndex, cached, i);
                    return true;
                }
            } else if (cached) {
                for(; i < len; i++)if (cached[i] && cached[i] === nameOrObject) {
                    this._removeObjectByIndex(jCalIndex, cached, i);
                    return true;
                }
            }
            return false;
        },
        _removeAllObjects: function(jCalIndex, cache, name) {
            var cached = this[cache];
            // Unfortunately we have to run through all children to reset their
            // parent property.
            var objects = this.jCal[jCalIndex];
            var i = objects.length - 1;
            // descending search required because splice
            // is used and will effect the indices.
            for(; i >= 0; i--)if (!name || objects[i][NAME_INDEX] === name) this._removeObjectByIndex(jCalIndex, cached, i);
        },
        /**
     * Adds a single sub component.
     *
     * @param {ICAL.Component} component        The component to add
     * @return {ICAL.Component}                 The passed in component
     */ addSubcomponent: function(component) {
            if (!this._components) {
                this._components = [];
                this._hydratedComponentCount = 0;
            }
            if (component.parent) component.parent.removeSubcomponent(component);
            var idx = this.jCal[COMPONENT_INDEX].push(component.jCal);
            this._components[idx - 1] = component;
            this._hydratedComponentCount++;
            component.parent = this;
            return component;
        },
        /**
     * Removes a single component by name or the instance of a specific
     * component.
     *
     * @param {ICAL.Component|String} nameOrComp    Name of component, or component
     * @return {Boolean}                            True when comp is removed
     */ removeSubcomponent: function(nameOrComp) {
            var removed = this._removeObject(COMPONENT_INDEX, "_components", nameOrComp);
            if (removed) this._hydratedComponentCount--;
            return removed;
        },
        /**
     * Removes all components or (if given) all components by a particular
     * name.
     *
     * @param {String=} name            Lowercase component name
     */ removeAllSubcomponents: function(name) {
            var removed = this._removeAllObjects(COMPONENT_INDEX, "_components", name);
            this._hydratedComponentCount = 0;
            return removed;
        },
        /**
     * Adds an {@link ICAL.Property} to the component.
     *
     * @param {ICAL.Property} property      The property to add
     * @return {ICAL.Property}              The passed in property
     */ addProperty: function(property) {
            if (!(property instanceof ICAL.Property)) throw new TypeError("must instance of ICAL.Property");
            if (!this._properties) {
                this._properties = [];
                this._hydratedPropertyCount = 0;
            }
            if (property.parent) property.parent.removeProperty(property);
            var idx = this.jCal[PROPERTY_INDEX].push(property.jCal);
            this._properties[idx - 1] = property;
            this._hydratedPropertyCount++;
            property.parent = this;
            return property;
        },
        /**
     * Helper method to add a property with a value to the component.
     *
     * @param {String}               name         Property name to add
     * @param {String|Number|Object} value        Property value
     * @return {ICAL.Property}                    The created property
     */ addPropertyWithValue: function(name, value) {
            var prop = new ICAL.Property(name);
            prop.setValue(value);
            this.addProperty(prop);
            return prop;
        },
        /**
     * Helper method that will update or create a property of the given name
     * and sets its value. If multiple properties with the given name exist,
     * only the first is updated.
     *
     * @param {String}               name         Property name to update
     * @param {String|Number|Object} value        Property value
     * @return {ICAL.Property}                    The created property
     */ updatePropertyWithValue: function(name, value) {
            var prop = this.getFirstProperty(name);
            if (prop) prop.setValue(value);
            else prop = this.addPropertyWithValue(name, value);
            return prop;
        },
        /**
     * Removes a single property by name or the instance of the specific
     * property.
     *
     * @param {String|ICAL.Property} nameOrProp     Property name or instance to remove
     * @return {Boolean}                            True, when deleted
     */ removeProperty: function(nameOrProp) {
            var removed = this._removeObject(PROPERTY_INDEX, "_properties", nameOrProp);
            if (removed) this._hydratedPropertyCount--;
            return removed;
        },
        /**
     * Removes all properties associated with this component, optionally
     * filtered by name.
     *
     * @param {String=} name        Lowercase property name
     * @return {Boolean}            True, when deleted
     */ removeAllProperties: function(name) {
            var removed = this._removeAllObjects(PROPERTY_INDEX, "_properties", name);
            this._hydratedPropertyCount = 0;
            return removed;
        },
        /**
     * Returns the Object representation of this component. The returned object
     * is a live jCal object and should be cloned if modified.
     * @return {Object}
     */ toJSON: function() {
            return this.jCal;
        },
        /**
     * The string representation of this component.
     * @return {String}
     */ toString: function() {
            return ICAL.stringify.component(this.jCal, this._designSet);
        }
    };
    /**
   * Create an {@link ICAL.Component} by parsing the passed iCalendar string.
   *
   * @param {String} str        The iCalendar string to parse
   */ Component.fromString = function(str) {
        return new Component(ICAL.parse.component(str));
    };
    return Component;
}();
/* This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/.
 * Portions Copyright (C) Philipp Kewisch, 2011-2015 */ /**
 * This symbol is further described later on
 * @ignore
 */ ICAL.Property = function() {
    "use strict";
    var NAME_INDEX = 0;
    var PROP_INDEX = 1;
    var TYPE_INDEX = 2;
    var VALUE_INDEX = 3;
    var design = ICAL.design;
    /**
   * @classdesc
   * Provides a layer on top of the raw jCal object for manipulating a single
   * property, with its parameters and value.
   *
   * @description
   * It is important to note that mutations done in the wrapper
   * directly mutate the jCal object used to initialize.
   *
   * Can also be used to create new properties by passing
   * the name of the property (as a String).
   *
   * @class
   * @alias ICAL.Property
   * @param {Array|String} jCal         Raw jCal representation OR
   *  the new name of the property
   *
   * @param {ICAL.Component=} parent    Parent component
   */ function Property(jCal, parent) {
        this._parent = parent || null;
        if (typeof jCal === "string") {
            // We are creating the property by name and need to detect the type
            this.jCal = [
                jCal,
                {},
                design.defaultType
            ];
            this.jCal[TYPE_INDEX] = this.getDefaultType();
        } else this.jCal = jCal;
        this._updateType();
    }
    Property.prototype = {
        /**
     * The value type for this property
     * @readonly
     * @type {String}
     */ get type () {
            return this.jCal[TYPE_INDEX];
        },
        /**
     * The name of this property, in lowercase.
     * @readonly
     * @type {String}
     */ get name () {
            return this.jCal[NAME_INDEX];
        },
        /**
     * The parent component for this property.
     * @type {ICAL.Component}
     */ get parent () {
            return this._parent;
        },
        set parent (p){
            // Before setting the parent, check if the design set has changed. If it
            // has, we later need to update the type if it was unknown before.
            var designSetChanged = !this._parent || p && p._designSet != this._parent._designSet;
            this._parent = p;
            if (this.type == design.defaultType && designSetChanged) {
                this.jCal[TYPE_INDEX] = this.getDefaultType();
                this._updateType();
            }
            return p;
        },
        /**
     * The design set for this property, e.g. icalendar vs vcard
     *
     * @type {ICAL.design.designSet}
     * @private
     */ get _designSet () {
            return this.parent ? this.parent._designSet : design.defaultSet;
        },
        /**
     * Updates the type metadata from the current jCal type and design set.
     *
     * @private
     */ _updateType: function() {
            var designSet = this._designSet;
            if (this.type in designSet.value) {
                var designType = designSet.value[this.type];
                if ("decorate" in designSet.value[this.type]) this.isDecorated = true;
                else this.isDecorated = false;
                if (this.name in designSet.property) {
                    this.isMultiValue = "multiValue" in designSet.property[this.name];
                    this.isStructuredValue = "structuredValue" in designSet.property[this.name];
                }
            }
        },
        /**
     * Hydrate a single value. The act of hydrating means turning the raw jCal
     * value into a potentially wrapped object, for example {@link ICAL.Time}.
     *
     * @private
     * @param {Number} index        The index of the value to hydrate
     * @return {Object}             The decorated value.
     */ _hydrateValue: function(index) {
            if (this._values && this._values[index]) return this._values[index];
            // for the case where there is no value.
            if (this.jCal.length <= VALUE_INDEX + index) return null;
            if (this.isDecorated) {
                if (!this._values) this._values = [];
                return this._values[index] = this._decorate(this.jCal[VALUE_INDEX + index]);
            } else return this.jCal[VALUE_INDEX + index];
        },
        /**
     * Decorate a single value, returning its wrapped object. This is used by
     * the hydrate function to actually wrap the value.
     *
     * @private
     * @param {?} value         The value to decorate
     * @return {Object}         The decorated value
     */ _decorate: function(value) {
            return this._designSet.value[this.type].decorate(value, this);
        },
        /**
     * Undecorate a single value, returning its raw jCal data.
     *
     * @private
     * @param {Object} value         The value to undecorate
     * @return {?}                   The undecorated value
     */ _undecorate: function(value) {
            return this._designSet.value[this.type].undecorate(value, this);
        },
        /**
     * Sets the value at the given index while also hydrating it. The passed
     * value can either be a decorated or undecorated value.
     *
     * @private
     * @param {?} value             The value to set
     * @param {Number} index        The index to set it at
     */ _setDecoratedValue: function(value, index) {
            if (!this._values) this._values = [];
            if (typeof value === "object" && "icaltype" in value) {
                // decorated value
                this.jCal[VALUE_INDEX + index] = this._undecorate(value);
                this._values[index] = value;
            } else {
                // undecorated value
                this.jCal[VALUE_INDEX + index] = value;
                this._values[index] = this._decorate(value);
            }
        },
        /**
     * Gets a parameter on the property.
     *
     * @param {String}        name   Parameter name (lowercase)
     * @return {Array|String}        Parameter value
     */ getParameter: function(name) {
            if (name in this.jCal[PROP_INDEX]) return this.jCal[PROP_INDEX][name];
            else return undefined;
        },
        /**
     * Gets first parameter on the property.
     *
     * @param {String}        name   Parameter name (lowercase)
     * @return {String}        Parameter value
     */ getFirstParameter: function(name) {
            var parameters = this.getParameter(name);
            if (Array.isArray(parameters)) return parameters[0];
            return parameters;
        },
        /**
     * Sets a parameter on the property.
     *
     * @param {String}       name     The parameter name
     * @param {Array|String} value    The parameter value
     */ setParameter: function(name, value) {
            var lcname = name.toLowerCase();
            if (typeof value === "string" && lcname in this._designSet.param && "multiValue" in this._designSet.param[lcname]) value = [
                value
            ];
            this.jCal[PROP_INDEX][name] = value;
        },
        /**
     * Removes a parameter
     *
     * @param {String} name     The parameter name
     */ removeParameter: function(name) {
            delete this.jCal[PROP_INDEX][name];
        },
        /**
     * Get the default type based on this property's name.
     *
     * @return {String}     The default type for this property
     */ getDefaultType: function() {
            var name = this.jCal[NAME_INDEX];
            var designSet = this._designSet;
            if (name in designSet.property) {
                var details = designSet.property[name];
                if ("defaultType" in details) return details.defaultType;
            }
            return design.defaultType;
        },
        /**
     * Sets type of property and clears out any existing values of the current
     * type.
     *
     * @param {String} type     New iCAL type (see design.*.values)
     */ resetType: function(type) {
            this.removeAllValues();
            this.jCal[TYPE_INDEX] = type;
            this._updateType();
        },
        /**
     * Finds the first property value.
     *
     * @return {String}         First property value
     */ getFirstValue: function() {
            return this._hydrateValue(0);
        },
        /**
     * Gets all values on the property.
     *
     * NOTE: this creates an array during each call.
     *
     * @return {Array}          List of values
     */ getValues: function() {
            var len = this.jCal.length - VALUE_INDEX;
            if (len < 1) // it is possible for a property to have no value.
            return [];
            var i = 0;
            var result = [];
            for(; i < len; i++)result[i] = this._hydrateValue(i);
            return result;
        },
        /**
     * Removes all values from this property
     */ removeAllValues: function() {
            if (this._values) this._values.length = 0;
            this.jCal.length = 3;
        },
        /**
     * Sets the values of the property.  Will overwrite the existing values.
     * This can only be used for multi-value properties.
     *
     * @param {Array} values    An array of values
     */ setValues: function(values) {
            if (!this.isMultiValue) throw new Error(this.name + ": does not not support mulitValue.\n" + "override isMultiValue");
            var len = values.length;
            var i = 0;
            this.removeAllValues();
            if (len > 0 && typeof values[0] === "object" && "icaltype" in values[0]) this.resetType(values[0].icaltype);
            if (this.isDecorated) for(; i < len; i++)this._setDecoratedValue(values[i], i);
            else for(; i < len; i++)this.jCal[VALUE_INDEX + i] = values[i];
        },
        /**
     * Sets the current value of the property. If this is a multi-value
     * property, all other values will be removed.
     *
     * @param {String|Object} value     New property value.
     */ setValue: function(value) {
            this.removeAllValues();
            if (typeof value === "object" && "icaltype" in value) this.resetType(value.icaltype);
            if (this.isDecorated) this._setDecoratedValue(value, 0);
            else this.jCal[VALUE_INDEX] = value;
        },
        /**
     * Returns the Object representation of this component. The returned object
     * is a live jCal object and should be cloned if modified.
     * @return {Object}
     */ toJSON: function() {
            return this.jCal;
        },
        /**
     * The string representation of this component.
     * @return {String}
     */ toICALString: function() {
            return ICAL.stringify.property(this.jCal, this._designSet, true);
        }
    };
    /**
   * Create an {@link ICAL.Property} by parsing the passed iCalendar string.
   *
   * @param {String} str                        The iCalendar string to parse
   * @param {ICAL.design.designSet=} designSet  The design data to use for this property
   * @return {ICAL.Property}                    The created iCalendar property
   */ Property.fromString = function(str, designSet) {
        return new Property(ICAL.parse.property(str, designSet));
    };
    return Property;
}();
/* This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/.
 * Portions Copyright (C) Philipp Kewisch, 2011-2015 */ /**
 * This symbol is further described later on
 * @ignore
 */ ICAL.UtcOffset = function() {
    /**
   * @classdesc
   * This class represents the "duration" value type, with various calculation
   * and manipulation methods.
   *
   * @class
   * @alias ICAL.UtcOffset
   * @param {Object} aData          An object with members of the utc offset
   * @param {Number=} aData.hours   The hours for the utc offset
   * @param {Number=} aData.minutes The minutes in the utc offset
   * @param {Number=} aData.factor  The factor for the utc-offset, either -1 or 1
   */ function UtcOffset(aData) {
        this.fromData(aData);
    }
    UtcOffset.prototype = {
        /**
     * The hours in the utc-offset
     * @type {Number}
     */ hours: 0,
        /**
     * The minutes in the utc-offset
     * @type {Number}
     */ minutes: 0,
        /**
     * The sign of the utc offset, 1 for positive offset, -1 for negative
     * offsets.
     * @type {Number}
     */ factor: 1,
        /**
     * The type name, to be used in the jCal object.
     * @constant
     * @type {String}
     * @default "utc-offset"
     */ icaltype: "utc-offset",
        /**
     * Returns a clone of the utc offset object.
     *
     * @return {ICAL.UtcOffset}     The cloned object
     */ clone: function() {
            return ICAL.UtcOffset.fromSeconds(this.toSeconds());
        },
        /**
     * Sets up the current instance using members from the passed data object.
     *
     * @param {Object} aData          An object with members of the utc offset
     * @param {Number=} aData.hours   The hours for the utc offset
     * @param {Number=} aData.minutes The minutes in the utc offset
     * @param {Number=} aData.factor  The factor for the utc-offset, either -1 or 1
     */ fromData: function(aData) {
            if (aData) {
                for(var key in aData)/* istanbul ignore else */ if (aData.hasOwnProperty(key)) this[key] = aData[key];
            }
            this._normalize();
        },
        /**
     * Sets up the current instance from the given seconds value. The seconds
     * value is truncated to the minute. Offsets are wrapped when the world
     * ends, the hour after UTC+14:00 is UTC-12:00.
     *
     * @param {Number} aSeconds         The seconds to convert into an offset
     */ fromSeconds: function(aSeconds) {
            var secs = Math.abs(aSeconds);
            this.factor = aSeconds < 0 ? -1 : 1;
            this.hours = ICAL.helpers.trunc(secs / 3600);
            secs -= this.hours * 3600;
            this.minutes = ICAL.helpers.trunc(secs / 60);
            return this;
        },
        /**
     * Convert the current offset to a value in seconds
     *
     * @return {Number}                 The offset in seconds
     */ toSeconds: function() {
            return this.factor * (60 * this.minutes + 3600 * this.hours);
        },
        /**
     * Compare this utc offset with another one.
     *
     * @param {ICAL.UtcOffset} other        The other offset to compare with
     * @return {Number}                     -1, 0 or 1 for less/equal/greater
     */ compare: function icaltime_compare(other) {
            var a = this.toSeconds();
            var b = other.toSeconds();
            return (a > b) - (b > a);
        },
        _normalize: function() {
            // Range: 97200 seconds (with 1 hour inbetween)
            var secs = this.toSeconds();
            var factor = this.factor;
            while(secs < -43200)secs += 97200;
            while(secs > 50400)secs -= 97200;
            this.fromSeconds(secs);
            // Avoid changing the factor when on zero seconds
            if (secs == 0) this.factor = factor;
        },
        /**
     * The iCalendar string representation of this utc-offset.
     * @return {String}
     */ toICALString: function() {
            return ICAL.design.icalendar.value["utc-offset"].toICAL(this.toString());
        },
        /**
     * The string representation of this utc-offset.
     * @return {String}
     */ toString: function toString() {
            return (this.factor == 1 ? "+" : "-") + ICAL.helpers.pad2(this.hours) + ":" + ICAL.helpers.pad2(this.minutes);
        }
    };
    /**
   * Creates a new {@link ICAL.UtcOffset} instance from the passed string.
   *
   * @param {String} aString    The string to parse
   * @return {ICAL.Duration}    The created utc-offset instance
   */ UtcOffset.fromString = function(aString) {
        // -05:00
        var options = {};
        //TODO: support seconds per rfc5545 ?
        options.factor = aString[0] === "+" ? 1 : -1;
        options.hours = ICAL.helpers.strictParseInt(aString.substr(1, 2));
        options.minutes = ICAL.helpers.strictParseInt(aString.substr(4, 2));
        return new ICAL.UtcOffset(options);
    };
    /**
   * Creates a new {@link ICAL.UtcOffset} instance from the passed seconds
   * value.
   *
   * @param {Number} aSeconds       The number of seconds to convert
   */ UtcOffset.fromSeconds = function(aSeconds) {
        var instance = new UtcOffset();
        instance.fromSeconds(aSeconds);
        return instance;
    };
    return UtcOffset;
}();
/* This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/.
 * Portions Copyright (C) Philipp Kewisch, 2011-2015 */ /**
 * This symbol is further described later on
 * @ignore
 */ ICAL.Binary = function() {
    /**
   * @classdesc
   * Represents the BINARY value type, which contains extra methods for
   * encoding and decoding.
   *
   * @class
   * @alias ICAL.Binary
   * @param {String} aValue     The binary data for this value
   */ function Binary(aValue) {
        this.value = aValue;
    }
    Binary.prototype = {
        /**
     * The type name, to be used in the jCal object.
     * @default "binary"
     * @constant
     */ icaltype: "binary",
        /**
     * Base64 decode the current value
     *
     * @return {String}         The base64-decoded value
     */ decodeValue: function decodeValue() {
            return this._b64_decode(this.value);
        },
        /**
     * Encodes the passed parameter with base64 and sets the internal
     * value to the result.
     *
     * @param {String} aValue      The raw binary value to encode
     */ setEncodedValue: function setEncodedValue(aValue) {
            this.value = this._b64_encode(aValue);
        },
        _b64_encode: function base64_encode(data) {
            // http://kevin.vanzonneveld.net
            // +   original by: Tyler Akins (http://rumkin.com)
            // +   improved by: Bayron Guevara
            // +   improved by: Thunder.m
            // +   improved by: Kevin van Zonneveld (http://kevin.vanzonneveld.net)
            // +   bugfixed by: Pellentesque Malesuada
            // +   improved by: Kevin van Zonneveld (http://kevin.vanzonneveld.net)
            // +   improved by: Rafał Kukawski (http://kukawski.pl)
            // *     example 1: base64_encode('Kevin van Zonneveld');
            // *     returns 1: 'S2V2aW4gdmFuIFpvbm5ldmVsZA=='
            // mozilla has this native
            // - but breaks in 2.0.0.12!
            //if (typeof this.window['atob'] == 'function') {
            //    return atob(data);
            //}
            var b64 = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=";
            var o1, o2, o3, h1, h2, h3, h4, bits, i = 0, ac = 0, enc = "", tmp_arr = [];
            if (!data) return data;
            do {
                o1 = data.charCodeAt(i++);
                o2 = data.charCodeAt(i++);
                o3 = data.charCodeAt(i++);
                bits = o1 << 16 | o2 << 8 | o3;
                h1 = bits >> 18 & 0x3f;
                h2 = bits >> 12 & 0x3f;
                h3 = bits >> 6 & 0x3f;
                h4 = bits & 0x3f;
                // use hexets to index into b64, and append result to encoded string
                tmp_arr[ac++] = b64.charAt(h1) + b64.charAt(h2) + b64.charAt(h3) + b64.charAt(h4);
            }while (i < data.length);
            enc = tmp_arr.join("");
            var r = data.length % 3;
            return (r ? enc.slice(0, r - 3) : enc) + "===".slice(r || 3);
        },
        _b64_decode: function base64_decode(data) {
            // http://kevin.vanzonneveld.net
            // +   original by: Tyler Akins (http://rumkin.com)
            // +   improved by: Thunder.m
            // +      input by: Aman Gupta
            // +   improved by: Kevin van Zonneveld (http://kevin.vanzonneveld.net)
            // +   bugfixed by: Onno Marsman
            // +   bugfixed by: Pellentesque Malesuada
            // +   improved by: Kevin van Zonneveld (http://kevin.vanzonneveld.net)
            // +      input by: Brett Zamir (http://brett-zamir.me)
            // +   bugfixed by: Kevin van Zonneveld (http://kevin.vanzonneveld.net)
            // *     example 1: base64_decode('S2V2aW4gdmFuIFpvbm5ldmVsZA==');
            // *     returns 1: 'Kevin van Zonneveld'
            // mozilla has this native
            // - but breaks in 2.0.0.12!
            //if (typeof this.window['btoa'] == 'function') {
            //    return btoa(data);
            //}
            var b64 = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=";
            var o1, o2, o3, h1, h2, h3, h4, bits, i = 0, ac = 0, dec = "", tmp_arr = [];
            if (!data) return data;
            data += "";
            do {
                h1 = b64.indexOf(data.charAt(i++));
                h2 = b64.indexOf(data.charAt(i++));
                h3 = b64.indexOf(data.charAt(i++));
                h4 = b64.indexOf(data.charAt(i++));
                bits = h1 << 18 | h2 << 12 | h3 << 6 | h4;
                o1 = bits >> 16 & 0xff;
                o2 = bits >> 8 & 0xff;
                o3 = bits & 0xff;
                if (h3 == 64) tmp_arr[ac++] = String.fromCharCode(o1);
                else if (h4 == 64) tmp_arr[ac++] = String.fromCharCode(o1, o2);
                else tmp_arr[ac++] = String.fromCharCode(o1, o2, o3);
            }while (i < data.length);
            dec = tmp_arr.join("");
            return dec;
        },
        /**
     * The string representation of this value
     * @return {String}
     */ toString: function() {
            return this.value;
        }
    };
    /**
   * Creates a binary value from the given string.
   *
   * @param {String} aString        The binary value string
   * @return {ICAL.Binary}          The binary value instance
   */ Binary.fromString = function(aString) {
        return new Binary(aString);
    };
    return Binary;
}();
/* This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/.
 * Portions Copyright (C) Philipp Kewisch, 2011-2015 */ (function() {
    /**
   * @classdesc
   * This class represents the "period" value type, with various calculation
   * and manipulation methods.
   *
   * @description
   * The passed data object cannot contain both and end date and a duration.
   *
   * @class
   * @param {Object} aData                  An object with members of the period
   * @param {ICAL.Time=} aData.start        The start of the period
   * @param {ICAL.Time=} aData.end          The end of the period
   * @param {ICAL.Duration=} aData.duration The duration of the period
   */ ICAL.Period = function icalperiod(aData) {
        this.wrappedJSObject = this;
        if (aData && "start" in aData) {
            if (aData.start && !(aData.start instanceof ICAL.Time)) throw new TypeError(".start must be an instance of ICAL.Time");
            this.start = aData.start;
        }
        if (aData && aData.end && aData.duration) throw new Error("cannot accept both end and duration");
        if (aData && "end" in aData) {
            if (aData.end && !(aData.end instanceof ICAL.Time)) throw new TypeError(".end must be an instance of ICAL.Time");
            this.end = aData.end;
        }
        if (aData && "duration" in aData) {
            if (aData.duration && !(aData.duration instanceof ICAL.Duration)) throw new TypeError(".duration must be an instance of ICAL.Duration");
            this.duration = aData.duration;
        }
    };
    ICAL.Period.prototype = {
        /**
     * The start of the period
     * @type {ICAL.Time}
     */ start: null,
        /**
     * The end of the period
     * @type {ICAL.Time}
     */ end: null,
        /**
     * The duration of the period
     * @type {ICAL.Duration}
     */ duration: null,
        /**
     * The class identifier.
     * @constant
     * @type {String}
     * @default "icalperiod"
     */ icalclass: "icalperiod",
        /**
     * The type name, to be used in the jCal object.
     * @constant
     * @type {String}
     * @default "period"
     */ icaltype: "period",
        /**
     * Returns a clone of the duration object.
     *
     * @return {ICAL.Period}      The cloned object
     */ clone: function() {
            return ICAL.Period.fromData({
                start: this.start ? this.start.clone() : null,
                end: this.end ? this.end.clone() : null,
                duration: this.duration ? this.duration.clone() : null
            });
        },
        /**
     * Calculates the duration of the period, either directly or by subtracting
     * start from end date.
     *
     * @return {ICAL.Duration}      The calculated duration
     */ getDuration: function duration() {
            if (this.duration) return this.duration;
            else return this.end.subtractDate(this.start);
        },
        /**
     * Calculates the end date of the period, either directly or by adding
     * duration to start date.
     *
     * @return {ICAL.Time}          The calculated end date
     */ getEnd: function() {
            if (this.end) return this.end;
            else {
                var end = this.start.clone();
                end.addDuration(this.duration);
                return end;
            }
        },
        /**
     * The string representation of this period.
     * @return {String}
     */ toString: function toString() {
            return this.start + "/" + (this.end || this.duration);
        },
        /**
     * The jCal representation of this period type.
     * @return {Object}
     */ toJSON: function() {
            return [
                this.start.toString(),
                (this.end || this.duration).toString()
            ];
        },
        /**
     * The iCalendar string representation of this period.
     * @return {String}
     */ toICALString: function() {
            return this.start.toICALString() + "/" + (this.end || this.duration).toICALString();
        }
    };
    /**
   * Creates a new {@link ICAL.Period} instance from the passed string.
   *
   * @param {String} str            The string to parse
   * @param {ICAL.Property} prop    The property this period will be on
   * @return {ICAL.Period}          The created period instance
   */ ICAL.Period.fromString = function fromString(str, prop) {
        var parts = str.split("/");
        if (parts.length !== 2) throw new Error('Invalid string value: "' + str + '" must contain a "/" char.');
        var options = {
            start: ICAL.Time.fromDateTimeString(parts[0], prop)
        };
        var end = parts[1];
        if (ICAL.Duration.isValueString(end)) options.duration = ICAL.Duration.fromString(end);
        else options.end = ICAL.Time.fromDateTimeString(end, prop);
        return new ICAL.Period(options);
    };
    /**
   * Creates a new {@link ICAL.Period} instance from the given data object.
   * The passed data object cannot contain both and end date and a duration.
   *
   * @param {Object} aData                  An object with members of the period
   * @param {ICAL.Time=} aData.start        The start of the period
   * @param {ICAL.Time=} aData.end          The end of the period
   * @param {ICAL.Duration=} aData.duration The duration of the period
   * @return {ICAL.Period}                  The period instance
   */ ICAL.Period.fromData = function fromData(aData) {
        return new ICAL.Period(aData);
    };
    /**
   * Returns a new period instance from the given jCal data array. The first
   * member is always the start date string, the second member is either a
   * duration or end date string.
   *
   * @param {Array<String,String>} aData    The jCal data array
   * @param {ICAL.Property} aProp           The property this jCal data is on
   * @param {Boolean} aLenient              If true, data value can be both date and date-time
   * @return {ICAL.Period}                  The period instance
   */ ICAL.Period.fromJSON = function(aData, aProp1, aLenient) {
        function fromDateOrDateTimeString(aValue, aProp) {
            if (aLenient) return ICAL.Time.fromString(aValue, aProp);
            else return ICAL.Time.fromDateTimeString(aValue, aProp);
        }
        if (ICAL.Duration.isValueString(aData[1])) return ICAL.Period.fromData({
            start: fromDateOrDateTimeString(aData[0], aProp1),
            duration: ICAL.Duration.fromString(aData[1])
        });
        else return ICAL.Period.fromData({
            start: fromDateOrDateTimeString(aData[0], aProp1),
            end: fromDateOrDateTimeString(aData[1], aProp1)
        });
    };
})();
/* This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/.
 * Portions Copyright (C) Philipp Kewisch, 2011-2015 */ (function() {
    var DURATION_LETTERS = /([PDWHMTS]{1,1})/;
    /**
   * @classdesc
   * This class represents the "duration" value type, with various calculation
   * and manipulation methods.
   *
   * @class
   * @alias ICAL.Duration
   * @param {Object} data               An object with members of the duration
   * @param {Number} data.weeks         Duration in weeks
   * @param {Number} data.days          Duration in days
   * @param {Number} data.hours         Duration in hours
   * @param {Number} data.minutes       Duration in minutes
   * @param {Number} data.seconds       Duration in seconds
   * @param {Boolean} data.isNegative   If true, the duration is negative
   */ ICAL.Duration = function icalduration(data) {
        this.wrappedJSObject = this;
        this.fromData(data);
    };
    ICAL.Duration.prototype = {
        /**
     * The weeks in this duration
     * @type {Number}
     * @default 0
     */ weeks: 0,
        /**
     * The days in this duration
     * @type {Number}
     * @default 0
     */ days: 0,
        /**
     * The days in this duration
     * @type {Number}
     * @default 0
     */ hours: 0,
        /**
     * The minutes in this duration
     * @type {Number}
     * @default 0
     */ minutes: 0,
        /**
     * The seconds in this duration
     * @type {Number}
     * @default 0
     */ seconds: 0,
        /**
     * The seconds in this duration
     * @type {Boolean}
     * @default false
     */ isNegative: false,
        /**
     * The class identifier.
     * @constant
     * @type {String}
     * @default "icalduration"
     */ icalclass: "icalduration",
        /**
     * The type name, to be used in the jCal object.
     * @constant
     * @type {String}
     * @default "duration"
     */ icaltype: "duration",
        /**
     * Returns a clone of the duration object.
     *
     * @return {ICAL.Duration}      The cloned object
     */ clone: function clone() {
            return ICAL.Duration.fromData(this);
        },
        /**
     * The duration value expressed as a number of seconds.
     *
     * @return {Number}             The duration value in seconds
     */ toSeconds: function toSeconds() {
            var seconds = this.seconds + 60 * this.minutes + 3600 * this.hours + 86400 * this.days + 604800 * this.weeks;
            return this.isNegative ? -seconds : seconds;
        },
        /**
     * Reads the passed seconds value into this duration object. Afterwards,
     * members like {@link ICAL.Duration#days days} and {@link ICAL.Duration#weeks weeks} will be set up
     * accordingly.
     *
     * @param {Number} aSeconds     The duration value in seconds
     * @return {ICAL.Duration}      Returns this instance
     */ fromSeconds: function fromSeconds(aSeconds) {
            var secs = Math.abs(aSeconds);
            this.isNegative = aSeconds < 0;
            this.days = ICAL.helpers.trunc(secs / 86400);
            // If we have a flat number of weeks, use them.
            if (this.days % 7 == 0) {
                this.weeks = this.days / 7;
                this.days = 0;
            } else this.weeks = 0;
            secs -= (this.days + 7 * this.weeks) * 86400;
            this.hours = ICAL.helpers.trunc(secs / 3600);
            secs -= this.hours * 3600;
            this.minutes = ICAL.helpers.trunc(secs / 60);
            secs -= this.minutes * 60;
            this.seconds = secs;
            return this;
        },
        /**
     * Sets up the current instance using members from the passed data object.
     *
     * @param {Object} aData               An object with members of the duration
     * @param {Number} aData.weeks         Duration in weeks
     * @param {Number} aData.days          Duration in days
     * @param {Number} aData.hours         Duration in hours
     * @param {Number} aData.minutes       Duration in minutes
     * @param {Number} aData.seconds       Duration in seconds
     * @param {Boolean} aData.isNegative   If true, the duration is negative
     */ fromData: function fromData(aData) {
            var propsToCopy = [
                "weeks",
                "days",
                "hours",
                "minutes",
                "seconds",
                "isNegative"
            ];
            for(var key in propsToCopy){
                /* istanbul ignore if */ if (!propsToCopy.hasOwnProperty(key)) continue;
                var prop = propsToCopy[key];
                if (aData && prop in aData) this[prop] = aData[prop];
                else this[prop] = 0;
            }
        },
        /**
     * Resets the duration instance to the default values, i.e. PT0S
     */ reset: function reset() {
            this.isNegative = false;
            this.weeks = 0;
            this.days = 0;
            this.hours = 0;
            this.minutes = 0;
            this.seconds = 0;
        },
        /**
     * Compares the duration instance with another one.
     *
     * @param {ICAL.Duration} aOther        The instance to compare with
     * @return {Number}                     -1, 0 or 1 for less/equal/greater
     */ compare: function compare(aOther) {
            var thisSeconds = this.toSeconds();
            var otherSeconds = aOther.toSeconds();
            return (thisSeconds > otherSeconds) - (thisSeconds < otherSeconds);
        },
        /**
     * Normalizes the duration instance. For example, a duration with a value
     * of 61 seconds will be normalized to 1 minute and 1 second.
     */ normalize: function normalize() {
            this.fromSeconds(this.toSeconds());
        },
        /**
     * The string representation of this duration.
     * @return {String}
     */ toString: function toString() {
            if (this.toSeconds() == 0) return "PT0S";
            else {
                var str = "";
                if (this.isNegative) str += "-";
                str += "P";
                if (this.weeks) str += this.weeks + "W";
                if (this.days) str += this.days + "D";
                if (this.hours || this.minutes || this.seconds) {
                    str += "T";
                    if (this.hours) str += this.hours + "H";
                    if (this.minutes) str += this.minutes + "M";
                    if (this.seconds) str += this.seconds + "S";
                }
                return str;
            }
        },
        /**
     * The iCalendar string representation of this duration.
     * @return {String}
     */ toICALString: function() {
            return this.toString();
        }
    };
    /**
   * Returns a new ICAL.Duration instance from the passed seconds value.
   *
   * @param {Number} aSeconds       The seconds to create the instance from
   * @return {ICAL.Duration}        The newly created duration instance
   */ ICAL.Duration.fromSeconds = function icalduration_from_seconds(aSeconds) {
        return new ICAL.Duration().fromSeconds(aSeconds);
    };
    /**
   * Internal helper function to handle a chunk of a duration.
   *
   * @param {String} letter type of duration chunk
   * @param {String} number numeric value or -/+
   * @param {Object} dict target to assign values to
   */ function parseDurationChunk(letter, number, object) {
        var type;
        switch(letter){
            case "P":
                if (number && number === "-") object.isNegative = true;
                else object.isNegative = false;
                break;
            case "D":
                type = "days";
                break;
            case "W":
                type = "weeks";
                break;
            case "H":
                type = "hours";
                break;
            case "M":
                type = "minutes";
                break;
            case "S":
                type = "seconds";
                break;
            default:
                // Not a valid chunk
                return 0;
        }
        if (type) {
            if (!number && number !== 0) throw new Error('invalid duration value: Missing number before "' + letter + '"');
            var num = parseInt(number, 10);
            if (ICAL.helpers.isStrictlyNaN(num)) throw new Error('invalid duration value: Invalid number "' + number + '" before "' + letter + '"');
            object[type] = num;
        }
        return 1;
    }
    /**
   * Checks if the given string is an iCalendar duration value.
   *
   * @param {String} value      The raw ical value
   * @return {Boolean}          True, if the given value is of the
   *                              duration ical type
   */ ICAL.Duration.isValueString = function(string) {
        return string[0] === "P" || string[1] === "P";
    };
    /**
   * Creates a new {@link ICAL.Duration} instance from the passed string.
   *
   * @param {String} aStr       The string to parse
   * @return {ICAL.Duration}    The created duration instance
   */ ICAL.Duration.fromString = function icalduration_from_string(aStr) {
        var pos = 0;
        var dict = Object.create(null);
        var chunks = 0;
        while((pos = aStr.search(DURATION_LETTERS)) !== -1){
            var type = aStr[pos];
            var numeric = aStr.substr(0, pos);
            aStr = aStr.substr(pos + 1);
            chunks += parseDurationChunk(type, numeric, dict);
        }
        if (chunks < 2) // There must be at least a chunk with "P" and some unit chunk
        throw new Error('invalid duration value: Not enough duration components in "' + aStr + '"');
        return new ICAL.Duration(dict);
    };
    /**
   * Creates a new ICAL.Duration instance from the given data object.
   *
   * @param {Object} aData               An object with members of the duration
   * @param {Number} aData.weeks         Duration in weeks
   * @param {Number} aData.days          Duration in days
   * @param {Number} aData.hours         Duration in hours
   * @param {Number} aData.minutes       Duration in minutes
   * @param {Number} aData.seconds       Duration in seconds
   * @param {Boolean} aData.isNegative   If true, the duration is negative
   * @return {ICAL.Duration}             The createad duration instance
   */ ICAL.Duration.fromData = function icalduration_from_data(aData) {
        return new ICAL.Duration(aData);
    };
})();
/* This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/.
 * Portions Copyright (C) Philipp Kewisch, 2011-2012 */ (function() {
    var OPTIONS = [
        "tzid",
        "location",
        "tznames",
        "latitude",
        "longitude"
    ];
    /**
   * @classdesc
   * Timezone representation, created by passing in a tzid and component.
   *
   * @example
   * var vcalendar;
   * var timezoneComp = vcalendar.getFirstSubcomponent('vtimezone');
   * var tzid = timezoneComp.getFirstPropertyValue('tzid');
   *
   * var timezone = new ICAL.Timezone({
   *   component: timezoneComp,
   *   tzid
   * });
   *
   * @class
   * @param {ICAL.Component|Object} data options for class
   * @param {String|ICAL.Component} data.component
   *        If data is a simple object, then this member can be set to either a
   *        string containing the component data, or an already parsed
   *        ICAL.Component
   * @param {String} data.tzid      The timezone identifier
   * @param {String} data.location  The timezone locationw
   * @param {String} data.tznames   An alternative string representation of the
   *                                  timezone
   * @param {Number} data.latitude  The latitude of the timezone
   * @param {Number} data.longitude The longitude of the timezone
   */ ICAL.Timezone = function icaltimezone(data) {
        this.wrappedJSObject = this;
        this.fromData(data);
    };
    ICAL.Timezone.prototype = {
        /**
     * Timezone identifier
     * @type {String}
     */ tzid: "",
        /**
     * Timezone location
     * @type {String}
     */ location: "",
        /**
     * Alternative timezone name, for the string representation
     * @type {String}
     */ tznames: "",
        /**
     * The primary latitude for the timezone.
     * @type {Number}
     */ latitude: 0.0,
        /**
     * The primary longitude for the timezone.
     * @type {Number}
     */ longitude: 0.0,
        /**
     * The vtimezone component for this timezone.
     * @type {ICAL.Component}
     */ component: null,
        /**
     * The year this timezone has been expanded to. All timezone transition
     * dates until this year are known and can be used for calculation
     *
     * @private
     * @type {Number}
     */ expandedUntilYear: 0,
        /**
     * The class identifier.
     * @constant
     * @type {String}
     * @default "icaltimezone"
     */ icalclass: "icaltimezone",
        /**
     * Sets up the current instance using members from the passed data object.
     *
     * @param {ICAL.Component|Object} aData options for class
     * @param {String|ICAL.Component} aData.component
     *        If aData is a simple object, then this member can be set to either a
     *        string containing the component data, or an already parsed
     *        ICAL.Component
     * @param {String} aData.tzid      The timezone identifier
     * @param {String} aData.location  The timezone locationw
     * @param {String} aData.tznames   An alternative string representation of the
     *                                  timezone
     * @param {Number} aData.latitude  The latitude of the timezone
     * @param {Number} aData.longitude The longitude of the timezone
     */ fromData: function fromData(aData) {
            this.expandedUntilYear = 0;
            this.changes = [];
            if (aData instanceof ICAL.Component) // Either a component is passed directly
            this.component = aData;
            else {
                // Otherwise the component may be in the data object
                if (aData && "component" in aData) {
                    if (typeof aData.component == "string") {
                        // If a string was passed, parse it as a component
                        var jCal = ICAL.parse(aData.component);
                        this.component = new ICAL.Component(jCal);
                    } else if (aData.component instanceof ICAL.Component) // If it was a component already, then just set it
                    this.component = aData.component;
                    else // Otherwise just null out the component
                    this.component = null;
                }
                // Copy remaining passed properties
                for(var key in OPTIONS)/* istanbul ignore else */ if (OPTIONS.hasOwnProperty(key)) {
                    var prop = OPTIONS[key];
                    if (aData && prop in aData) this[prop] = aData[prop];
                }
            }
            // If we have a component but no TZID, attempt to get it from the
            // component's properties.
            if (this.component instanceof ICAL.Component && !this.tzid) this.tzid = this.component.getFirstPropertyValue("tzid");
            return this;
        },
        /**
     * Finds the utcOffset the given time would occur in this timezone.
     *
     * @param {ICAL.Time} tt        The time to check for
     * @return {Number} utc offset in seconds
     */ utcOffset: function utcOffset(tt) {
            if (this == ICAL.Timezone.utcTimezone || this == ICAL.Timezone.localTimezone) return 0;
            this._ensureCoverage(tt.year);
            if (!this.changes.length) return 0;
            var tt_change = {
                year: tt.year,
                month: tt.month,
                day: tt.day,
                hour: tt.hour,
                minute: tt.minute,
                second: tt.second
            };
            var change_num = this._findNearbyChange(tt_change);
            var change_num_to_use = -1;
            var step = 1;
            // TODO: replace with bin search?
            for(;;){
                var change = ICAL.helpers.clone(this.changes[change_num], true);
                if (change.utcOffset < change.prevUtcOffset) ICAL.Timezone.adjust_change(change, 0, 0, 0, change.utcOffset);
                else ICAL.Timezone.adjust_change(change, 0, 0, 0, change.prevUtcOffset);
                var cmp = ICAL.Timezone._compare_change_fn(tt_change, change);
                if (cmp >= 0) change_num_to_use = change_num;
                else step = -1;
                if (step == -1 && change_num_to_use != -1) break;
                change_num += step;
                if (change_num < 0) return 0;
                if (change_num >= this.changes.length) break;
            }
            var zone_change = this.changes[change_num_to_use];
            var utcOffset_change = zone_change.utcOffset - zone_change.prevUtcOffset;
            if (utcOffset_change < 0 && change_num_to_use > 0) {
                var tmp_change = ICAL.helpers.clone(zone_change, true);
                ICAL.Timezone.adjust_change(tmp_change, 0, 0, 0, tmp_change.prevUtcOffset);
                if (ICAL.Timezone._compare_change_fn(tt_change, tmp_change) < 0) {
                    var prev_zone_change = this.changes[change_num_to_use - 1];
                    var want_daylight = false; // TODO
                    if (zone_change.is_daylight != want_daylight && prev_zone_change.is_daylight == want_daylight) zone_change = prev_zone_change;
                }
            }
            // TODO return is_daylight?
            return zone_change.utcOffset;
        },
        _findNearbyChange: function icaltimezone_find_nearby_change(change) {
            // find the closest match
            var idx = ICAL.helpers.binsearchInsert(this.changes, change, ICAL.Timezone._compare_change_fn);
            if (idx >= this.changes.length) return this.changes.length - 1;
            return idx;
        },
        _ensureCoverage: function(aYear) {
            if (ICAL.Timezone._minimumExpansionYear == -1) {
                var today = ICAL.Time.now();
                ICAL.Timezone._minimumExpansionYear = today.year;
            }
            var changesEndYear = aYear;
            if (changesEndYear < ICAL.Timezone._minimumExpansionYear) changesEndYear = ICAL.Timezone._minimumExpansionYear;
            changesEndYear += ICAL.Timezone.EXTRA_COVERAGE;
            if (changesEndYear > ICAL.Timezone.MAX_YEAR) changesEndYear = ICAL.Timezone.MAX_YEAR;
            if (!this.changes.length || this.expandedUntilYear < aYear) {
                var subcomps = this.component.getAllSubcomponents();
                var compLen = subcomps.length;
                var compIdx = 0;
                for(; compIdx < compLen; compIdx++)this._expandComponent(subcomps[compIdx], changesEndYear, this.changes);
                this.changes.sort(ICAL.Timezone._compare_change_fn);
                this.expandedUntilYear = changesEndYear;
            }
        },
        _expandComponent: function(aComponent, aYear, changes) {
            if (!aComponent.hasProperty("dtstart") || !aComponent.hasProperty("tzoffsetto") || !aComponent.hasProperty("tzoffsetfrom")) return null;
            var dtstart = aComponent.getFirstProperty("dtstart").getFirstValue();
            var change;
            function convert_tzoffset(offset) {
                return offset.factor * (offset.hours * 3600 + offset.minutes * 60);
            }
            function init_changes() {
                var changebase = {};
                changebase.is_daylight = aComponent.name == "daylight";
                changebase.utcOffset = convert_tzoffset(aComponent.getFirstProperty("tzoffsetto").getFirstValue());
                changebase.prevUtcOffset = convert_tzoffset(aComponent.getFirstProperty("tzoffsetfrom").getFirstValue());
                return changebase;
            }
            if (!aComponent.hasProperty("rrule") && !aComponent.hasProperty("rdate")) {
                change = init_changes();
                change.year = dtstart.year;
                change.month = dtstart.month;
                change.day = dtstart.day;
                change.hour = dtstart.hour;
                change.minute = dtstart.minute;
                change.second = dtstart.second;
                ICAL.Timezone.adjust_change(change, 0, 0, 0, -change.prevUtcOffset);
                changes.push(change);
            } else {
                var props = aComponent.getAllProperties("rdate");
                for(var rdatekey in props){
                    /* istanbul ignore if */ if (!props.hasOwnProperty(rdatekey)) continue;
                    var rdate = props[rdatekey];
                    var time = rdate.getFirstValue();
                    change = init_changes();
                    change.year = time.year;
                    change.month = time.month;
                    change.day = time.day;
                    if (time.isDate) {
                        change.hour = dtstart.hour;
                        change.minute = dtstart.minute;
                        change.second = dtstart.second;
                        if (dtstart.zone != ICAL.Timezone.utcTimezone) ICAL.Timezone.adjust_change(change, 0, 0, 0, -change.prevUtcOffset);
                    } else {
                        change.hour = time.hour;
                        change.minute = time.minute;
                        change.second = time.second;
                        if (time.zone != ICAL.Timezone.utcTimezone) ICAL.Timezone.adjust_change(change, 0, 0, 0, -change.prevUtcOffset);
                    }
                    changes.push(change);
                }
                var rrule = aComponent.getFirstProperty("rrule");
                if (rrule) {
                    rrule = rrule.getFirstValue();
                    change = init_changes();
                    if (rrule.until && rrule.until.zone == ICAL.Timezone.utcTimezone) {
                        rrule.until.adjust(0, 0, 0, change.prevUtcOffset);
                        rrule.until.zone = ICAL.Timezone.localTimezone;
                    }
                    var iterator = rrule.iterator(dtstart);
                    var occ;
                    while(occ = iterator.next()){
                        change = init_changes();
                        if (occ.year > aYear || !occ) break;
                        change.year = occ.year;
                        change.month = occ.month;
                        change.day = occ.day;
                        change.hour = occ.hour;
                        change.minute = occ.minute;
                        change.second = occ.second;
                        change.isDate = occ.isDate;
                        ICAL.Timezone.adjust_change(change, 0, 0, 0, -change.prevUtcOffset);
                        changes.push(change);
                    }
                }
            }
            return changes;
        },
        /**
     * The string representation of this timezone.
     * @return {String}
     */ toString: function toString() {
            return this.tznames ? this.tznames : this.tzid;
        }
    };
    ICAL.Timezone._compare_change_fn = function icaltimezone_compare_change_fn(a, b) {
        if (a.year < b.year) return -1;
        else if (a.year > b.year) return 1;
        if (a.month < b.month) return -1;
        else if (a.month > b.month) return 1;
        if (a.day < b.day) return -1;
        else if (a.day > b.day) return 1;
        if (a.hour < b.hour) return -1;
        else if (a.hour > b.hour) return 1;
        if (a.minute < b.minute) return -1;
        else if (a.minute > b.minute) return 1;
        if (a.second < b.second) return -1;
        else if (a.second > b.second) return 1;
        return 0;
    };
    /**
   * Convert the date/time from one zone to the next.
   *
   * @param {ICAL.Time} tt                  The time to convert
   * @param {ICAL.Timezone} from_zone       The source zone to convert from
   * @param {ICAL.Timezone} to_zone         The target zone to convert to
   * @return {ICAL.Time}                    The converted date/time object
   */ ICAL.Timezone.convert_time = function icaltimezone_convert_time(tt, from_zone, to_zone) {
        if (tt.isDate || from_zone.tzid == to_zone.tzid || from_zone == ICAL.Timezone.localTimezone || to_zone == ICAL.Timezone.localTimezone) {
            tt.zone = to_zone;
            return tt;
        }
        var utcOffset = from_zone.utcOffset(tt);
        tt.adjust(0, 0, 0, -utcOffset);
        utcOffset = to_zone.utcOffset(tt);
        tt.adjust(0, 0, 0, utcOffset);
        return null;
    };
    /**
   * Creates a new ICAL.Timezone instance from the passed data object.
   *
   * @param {ICAL.Component|Object} aData options for class
   * @param {String|ICAL.Component} aData.component
   *        If aData is a simple object, then this member can be set to either a
   *        string containing the component data, or an already parsed
   *        ICAL.Component
   * @param {String} aData.tzid      The timezone identifier
   * @param {String} aData.location  The timezone locationw
   * @param {String} aData.tznames   An alternative string representation of the
   *                                  timezone
   * @param {Number} aData.latitude  The latitude of the timezone
   * @param {Number} aData.longitude The longitude of the timezone
   */ ICAL.Timezone.fromData = function icaltimezone_fromData(aData) {
        var tt = new ICAL.Timezone();
        return tt.fromData(aData);
    };
    /**
   * The instance describing the UTC timezone
   * @type {ICAL.Timezone}
   * @constant
   * @instance
   */ ICAL.Timezone.utcTimezone = ICAL.Timezone.fromData({
        tzid: "UTC"
    });
    /**
   * The instance describing the local timezone
   * @type {ICAL.Timezone}
   * @constant
   * @instance
   */ ICAL.Timezone.localTimezone = ICAL.Timezone.fromData({
        tzid: "floating"
    });
    /**
   * Adjust a timezone change object.
   * @private
   * @param {Object} change     The timezone change object
   * @param {Number} days       The extra amount of days
   * @param {Number} hours      The extra amount of hours
   * @param {Number} minutes    The extra amount of minutes
   * @param {Number} seconds    The extra amount of seconds
   */ ICAL.Timezone.adjust_change = function icaltimezone_adjust_change(change, days, hours, minutes, seconds) {
        return ICAL.Time.prototype.adjust.call(change, days, hours, minutes, seconds, change);
    };
    ICAL.Timezone._minimumExpansionYear = -1;
    ICAL.Timezone.MAX_YEAR = 2035; // TODO this is because of time_t, which we don't need. Still usefull?
    ICAL.Timezone.EXTRA_COVERAGE = 5;
})();
/* This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/.
 * Portions Copyright (C) Philipp Kewisch, 2011-2015 */ /**
 * This symbol is further described later on
 * @ignore
 */ ICAL.TimezoneService = function() {
    var zones;
    /**
   * @classdesc
   * Singleton class to contain timezones.  Right now it is all manual registry in
   * the future we may use this class to download timezone information or handle
   * loading pre-expanded timezones.
   *
   * @namespace
   * @alias ICAL.TimezoneService
   */ var TimezoneService = {
        get count () {
            return Object.keys(zones).length;
        },
        reset: function() {
            zones = Object.create(null);
            var utc = ICAL.Timezone.utcTimezone;
            zones.Z = utc;
            zones.UTC = utc;
            zones.GMT = utc;
        },
        /**
     * Checks if timezone id has been registered.
     *
     * @param {String} tzid     Timezone identifier (e.g. America/Los_Angeles)
     * @return {Boolean}        False, when not present
     */ has: function(tzid) {
            return !!zones[tzid];
        },
        /**
     * Returns a timezone by its tzid if present.
     *
     * @param {String} tzid     Timezone identifier (e.g. America/Los_Angeles)
     * @return {?ICAL.Timezone} The timezone, or null if not found
     */ get: function(tzid) {
            return zones[tzid];
        },
        /**
     * Registers a timezone object or component.
     *
     * @param {String=} name
     *        The name of the timezone. Defaults to the component's TZID if not
     *        passed.
     * @param {ICAL.Component|ICAL.Timezone} zone
     *        The initialized zone or vtimezone.
     */ register: function(name, timezone) {
            if (name instanceof ICAL.Component) {
                if (name.name === "vtimezone") {
                    timezone = new ICAL.Timezone(name);
                    name = timezone.tzid;
                }
            }
            if (timezone instanceof ICAL.Timezone) zones[name] = timezone;
            else throw new TypeError("timezone must be ICAL.Timezone or ICAL.Component");
        },
        /**
     * Removes a timezone by its tzid from the list.
     *
     * @param {String} tzid     Timezone identifier (e.g. America/Los_Angeles)
     * @return {?ICAL.Timezone} The removed timezone, or null if not registered
     */ remove: function(tzid) {
            return delete zones[tzid];
        }
    };
    // initialize defaults
    TimezoneService.reset();
    return TimezoneService;
}();
/* This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/.
 * Portions Copyright (C) Philipp Kewisch, 2011-2015 */ (function() {
    /**
   * @classdesc
   * iCalendar Time representation (similar to JS Date object).  Fully
   * independent of system (OS) timezone / time.  Unlike JS Date, the month
   * January is 1, not zero.
   *
   * @example
   * var time = new ICAL.Time({
   *   year: 2012,
   *   month: 10,
   *   day: 11
   *   minute: 0,
   *   second: 0,
   *   isDate: false
   * });
   *
   *
   * @alias ICAL.Time
   * @class
   * @param {Object} data           Time initialization
   * @param {Number=} data.year     The year for this date
   * @param {Number=} data.month    The month for this date
   * @param {Number=} data.day      The day for this date
   * @param {Number=} data.hour     The hour for this date
   * @param {Number=} data.minute   The minute for this date
   * @param {Number=} data.second   The second for this date
   * @param {Boolean=} data.isDate  If true, the instance represents a date (as
   *                                  opposed to a date-time)
   * @param {ICAL.Timezone} zone timezone this position occurs in
   */ ICAL.Time = function icaltime(data, zone) {
        this.wrappedJSObject = this;
        var time = this._time = Object.create(null);
        /* time defaults */ time.year = 0;
        time.month = 1;
        time.day = 1;
        time.hour = 0;
        time.minute = 0;
        time.second = 0;
        time.isDate = false;
        this.fromData(data, zone);
    };
    ICAL.Time._dowCache = {};
    ICAL.Time._wnCache = {};
    ICAL.Time.prototype = {
        /**
     * The class identifier.
     * @constant
     * @type {String}
     * @default "icaltime"
     */ icalclass: "icaltime",
        _cachedUnixTime: null,
        /**
     * The type name, to be used in the jCal object. This value may change and
     * is strictly defined by the {@link ICAL.Time#isDate isDate} member.
     * @readonly
     * @type {String}
     * @default "date-time"
     */ get icaltype () {
            return this.isDate ? "date" : "date-time";
        },
        /**
     * The timezone for this time.
     * @type {ICAL.Timezone}
     */ zone: null,
        /**
     * Internal uses to indicate that a change has been made and the next read
     * operation must attempt to normalize the value (for example changing the
     * day to 33).
     *
     * @type {Boolean}
     * @private
     */ _pendingNormalization: false,
        /**
     * Returns a clone of the time object.
     *
     * @return {ICAL.Time}              The cloned object
     */ clone: function() {
            return new ICAL.Time(this._time, this.zone);
        },
        /**
     * Reset the time instance to epoch time
     */ reset: function icaltime_reset() {
            this.fromData(ICAL.Time.epochTime);
            this.zone = ICAL.Timezone.utcTimezone;
        },
        /**
     * Reset the time instance to the given date/time values.
     *
     * @param {Number} year             The year to set
     * @param {Number} month            The month to set
     * @param {Number} day              The day to set
     * @param {Number} hour             The hour to set
     * @param {Number} minute           The minute to set
     * @param {Number} second           The second to set
     * @param {ICAL.Timezone} timezone  The timezone to set
     */ resetTo: function icaltime_resetTo(year, month, day, hour, minute, second, timezone) {
            this.fromData({
                year: year,
                month: month,
                day: day,
                hour: hour,
                minute: minute,
                second: second,
                zone: timezone
            });
        },
        /**
     * Set up the current instance from the Javascript date value.
     *
     * @param {?Date} aDate     The Javascript Date to read, or null to reset
     * @param {Boolean} useUTC  If true, the UTC values of the date will be used
     */ fromJSDate: function icaltime_fromJSDate(aDate, useUTC) {
            if (!aDate) this.reset();
            else if (useUTC) {
                this.zone = ICAL.Timezone.utcTimezone;
                this.year = aDate.getUTCFullYear();
                this.month = aDate.getUTCMonth() + 1;
                this.day = aDate.getUTCDate();
                this.hour = aDate.getUTCHours();
                this.minute = aDate.getUTCMinutes();
                this.second = aDate.getUTCSeconds();
            } else {
                this.zone = ICAL.Timezone.localTimezone;
                this.year = aDate.getFullYear();
                this.month = aDate.getMonth() + 1;
                this.day = aDate.getDate();
                this.hour = aDate.getHours();
                this.minute = aDate.getMinutes();
                this.second = aDate.getSeconds();
            }
            this._cachedUnixTime = null;
            return this;
        },
        /**
     * Sets up the current instance using members from the passed data object.
     *
     * @param {Object} aData            Time initialization
     * @param {Number=} aData.year      The year for this date
     * @param {Number=} aData.month     The month for this date
     * @param {Number=} aData.day       The day for this date
     * @param {Number=} aData.hour      The hour for this date
     * @param {Number=} aData.minute    The minute for this date
     * @param {Number=} aData.second    The second for this date
     * @param {Boolean=} aData.isDate   If true, the instance represents a date
     *                                    (as opposed to a date-time)
     * @param {ICAL.Timezone=} aZone    Timezone this position occurs in
     */ fromData: function fromData(aData, aZone) {
            if (aData) {
                for(var key in aData)/* istanbul ignore else */ if (Object.prototype.hasOwnProperty.call(aData, key)) {
                    // ical type cannot be set
                    if (key === "icaltype") continue;
                    this[key] = aData[key];
                }
            }
            if (aZone) this.zone = aZone;
            if (aData && !("isDate" in aData)) this.isDate = !("hour" in aData);
            else if (aData && "isDate" in aData) this.isDate = aData.isDate;
            if (aData && "timezone" in aData) {
                var zone = ICAL.TimezoneService.get(aData.timezone);
                this.zone = zone || ICAL.Timezone.localTimezone;
            }
            if (aData && "zone" in aData) this.zone = aData.zone;
            if (!this.zone) this.zone = ICAL.Timezone.localTimezone;
            this._cachedUnixTime = null;
            return this;
        },
        /**
     * Calculate the day of week.
     * @param {ICAL.Time.weekDay=} aWeekStart
     *        The week start weekday, defaults to SUNDAY
     * @return {ICAL.Time.weekDay}
     */ dayOfWeek: function icaltime_dayOfWeek(aWeekStart) {
            var firstDow = aWeekStart || ICAL.Time.SUNDAY;
            var dowCacheKey = (this.year << 12) + (this.month << 8) + (this.day << 3) + firstDow;
            if (dowCacheKey in ICAL.Time._dowCache) return ICAL.Time._dowCache[dowCacheKey];
            // Using Zeller's algorithm
            var q = this.day;
            var m = this.month + (this.month < 3 ? 12 : 0);
            var Y = this.year - (this.month < 3 ? 1 : 0);
            var h = q + Y + ICAL.helpers.trunc((m + 1) * 26 / 10) + ICAL.helpers.trunc(Y / 4);
            h += ICAL.helpers.trunc(Y / 100) * 6 + ICAL.helpers.trunc(Y / 400);
            // Normalize to 1 = wkst
            h = (h + 7 - firstDow) % 7 + 1;
            ICAL.Time._dowCache[dowCacheKey] = h;
            return h;
        },
        /**
     * Calculate the day of year.
     * @return {Number}
     */ dayOfYear: function dayOfYear() {
            var is_leap = ICAL.Time.isLeapYear(this.year) ? 1 : 0;
            var diypm = ICAL.Time.daysInYearPassedMonth;
            return diypm[is_leap][this.month - 1] + this.day;
        },
        /**
     * Returns a copy of the current date/time, rewound to the start of the
     * week. The resulting ICAL.Time instance is of icaltype date, even if this
     * is a date-time.
     *
     * @param {ICAL.Time.weekDay=} aWeekStart
     *        The week start weekday, defaults to SUNDAY
     * @return {ICAL.Time}      The start of the week (cloned)
     */ startOfWeek: function startOfWeek(aWeekStart) {
            var firstDow = aWeekStart || ICAL.Time.SUNDAY;
            var result = this.clone();
            result.day -= (this.dayOfWeek() + 7 - firstDow) % 7;
            result.isDate = true;
            result.hour = 0;
            result.minute = 0;
            result.second = 0;
            return result;
        },
        /**
     * Returns a copy of the current date/time, shifted to the end of the week.
     * The resulting ICAL.Time instance is of icaltype date, even if this is a
     * date-time.
     *
     * @param {ICAL.Time.weekDay=} aWeekStart
     *        The week start weekday, defaults to SUNDAY
     * @return {ICAL.Time}      The end of the week (cloned)
     */ endOfWeek: function endOfWeek(aWeekStart) {
            var firstDow = aWeekStart || ICAL.Time.SUNDAY;
            var result = this.clone();
            result.day += (7 - this.dayOfWeek() + firstDow - ICAL.Time.SUNDAY) % 7;
            result.isDate = true;
            result.hour = 0;
            result.minute = 0;
            result.second = 0;
            return result;
        },
        /**
     * Returns a copy of the current date/time, rewound to the start of the
     * month. The resulting ICAL.Time instance is of icaltype date, even if
     * this is a date-time.
     *
     * @return {ICAL.Time}      The start of the month (cloned)
     */ startOfMonth: function startOfMonth() {
            var result = this.clone();
            result.day = 1;
            result.isDate = true;
            result.hour = 0;
            result.minute = 0;
            result.second = 0;
            return result;
        },
        /**
     * Returns a copy of the current date/time, shifted to the end of the
     * month.  The resulting ICAL.Time instance is of icaltype date, even if
     * this is a date-time.
     *
     * @return {ICAL.Time}      The end of the month (cloned)
     */ endOfMonth: function endOfMonth() {
            var result = this.clone();
            result.day = ICAL.Time.daysInMonth(result.month, result.year);
            result.isDate = true;
            result.hour = 0;
            result.minute = 0;
            result.second = 0;
            return result;
        },
        /**
     * Returns a copy of the current date/time, rewound to the start of the
     * year. The resulting ICAL.Time instance is of icaltype date, even if
     * this is a date-time.
     *
     * @return {ICAL.Time}      The start of the year (cloned)
     */ startOfYear: function startOfYear() {
            var result = this.clone();
            result.day = 1;
            result.month = 1;
            result.isDate = true;
            result.hour = 0;
            result.minute = 0;
            result.second = 0;
            return result;
        },
        /**
     * Returns a copy of the current date/time, shifted to the end of the
     * year.  The resulting ICAL.Time instance is of icaltype date, even if
     * this is a date-time.
     *
     * @return {ICAL.Time}      The end of the year (cloned)
     */ endOfYear: function endOfYear() {
            var result = this.clone();
            result.day = 31;
            result.month = 12;
            result.isDate = true;
            result.hour = 0;
            result.minute = 0;
            result.second = 0;
            return result;
        },
        /**
     * First calculates the start of the week, then returns the day of year for
     * this date. If the day falls into the previous year, the day is zero or negative.
     *
     * @param {ICAL.Time.weekDay=} aFirstDayOfWeek
     *        The week start weekday, defaults to SUNDAY
     * @return {Number}     The calculated day of year
     */ startDoyWeek: function startDoyWeek(aFirstDayOfWeek) {
            var firstDow = aFirstDayOfWeek || ICAL.Time.SUNDAY;
            var delta = this.dayOfWeek() - firstDow;
            if (delta < 0) delta += 7;
            return this.dayOfYear() - delta;
        },
        /**
     * Get the dominical letter for the current year. Letters range from A - G
     * for common years, and AG to GF for leap years.
     *
     * @param {Number} yr           The year to retrieve the letter for
     * @return {String}             The dominical letter.
     */ getDominicalLetter: function() {
            return ICAL.Time.getDominicalLetter(this.year);
        },
        /**
     * Finds the nthWeekDay relative to the current month (not day).  The
     * returned value is a day relative the month that this month belongs to so
     * 1 would indicate the first of the month and 40 would indicate a day in
     * the following month.
     *
     * @param {Number} aDayOfWeek   Day of the week see the day name constants
     * @param {Number} aPos         Nth occurrence of a given week day values
     *        of 1 and 0 both indicate the first weekday of that type. aPos may
     *        be either positive or negative
     *
     * @return {Number} numeric value indicating a day relative
     *                   to the current month of this time object
     */ nthWeekDay: function icaltime_nthWeekDay(aDayOfWeek, aPos) {
            var daysInMonth = ICAL.Time.daysInMonth(this.month, this.year);
            var weekday;
            var pos = aPos;
            var start = 0;
            var otherDay = this.clone();
            if (pos >= 0) {
                otherDay.day = 1;
                // because 0 means no position has been given
                // 1 and 0 indicate the same day.
                if (pos != 0) // remove the extra numeric value
                pos--;
                // set current start offset to current day.
                start = otherDay.day;
                // find the current day of week
                var startDow = otherDay.dayOfWeek();
                // calculate the difference between current
                // day of the week and desired day of the week
                var offset = aDayOfWeek - startDow;
                // if the offset goes into the past
                // week we add 7 so it goes into the next
                // week. We only want to go forward in time here.
                if (offset < 0) // this is really important otherwise we would
                // end up with dates from in the past.
                offset += 7;
                // add offset to start so start is the same
                // day of the week as the desired day of week.
                start += offset;
                // because we are going to add (and multiply)
                // the numeric value of the day we subtract it
                // from the start position so not to add it twice.
                start -= aDayOfWeek;
                // set week day
                weekday = aDayOfWeek;
            } else {
                // then we set it to the last day in the current month
                otherDay.day = daysInMonth;
                // find the ends weekday
                var endDow = otherDay.dayOfWeek();
                pos++;
                weekday = endDow - aDayOfWeek;
                if (weekday < 0) weekday += 7;
                weekday = daysInMonth - weekday;
            }
            weekday += pos * 7;
            return start + weekday;
        },
        /**
     * Checks if current time is the nth weekday, relative to the current
     * month.  Will always return false when rule resolves outside of current
     * month.
     *
     * @param {ICAL.Time.weekDay} aDayOfWeek       Day of week to check
     * @param {Number} aPos                        Relative position
     * @return {Boolean}                           True, if it is the nth weekday
     */ isNthWeekDay: function(aDayOfWeek, aPos) {
            var dow = this.dayOfWeek();
            if (aPos === 0 && dow === aDayOfWeek) return true;
            // get pos
            var day = this.nthWeekDay(aDayOfWeek, aPos);
            if (day === this.day) return true;
            return false;
        },
        /**
     * Calculates the ISO 8601 week number. The first week of a year is the
     * week that contains the first Thursday. The year can have 53 weeks, if
     * January 1st is a Friday.
     *
     * Note there are regions where the first week of the year is the one that
     * starts on January 1st, which may offset the week number. Also, if a
     * different week start is specified, this will also affect the week
     * number.
     *
     * @see ICAL.Time.weekOneStarts
     * @param {ICAL.Time.weekDay} aWeekStart        The weekday the week starts with
     * @return {Number}                             The ISO week number
     */ weekNumber: function weekNumber(aWeekStart) {
            var wnCacheKey = (this.year << 12) + (this.month << 8) + (this.day << 3) + aWeekStart;
            if (wnCacheKey in ICAL.Time._wnCache) return ICAL.Time._wnCache[wnCacheKey];
            // This function courtesty of Julian Bucknall, published under the MIT license
            // http://www.boyet.com/articles/publishedarticles/calculatingtheisoweeknumb.html
            // plus some fixes to be able to use different week starts.
            var week1;
            var dt = this.clone();
            dt.isDate = true;
            var isoyear = this.year;
            if (dt.month == 12 && dt.day > 25) {
                week1 = ICAL.Time.weekOneStarts(isoyear + 1, aWeekStart);
                if (dt.compare(week1) < 0) week1 = ICAL.Time.weekOneStarts(isoyear, aWeekStart);
                else isoyear++;
            } else {
                week1 = ICAL.Time.weekOneStarts(isoyear, aWeekStart);
                if (dt.compare(week1) < 0) week1 = ICAL.Time.weekOneStarts(--isoyear, aWeekStart);
            }
            var daysBetween = dt.subtractDate(week1).toSeconds() / 86400;
            var answer = ICAL.helpers.trunc(daysBetween / 7) + 1;
            ICAL.Time._wnCache[wnCacheKey] = answer;
            return answer;
        },
        /**
     * Adds the duration to the current time. The instance is modified in
     * place.
     *
     * @param {ICAL.Duration} aDuration         The duration to add
     */ addDuration: function icaltime_add(aDuration) {
            var mult = aDuration.isNegative ? -1 : 1;
            // because of the duration optimizations it is much
            // more efficient to grab all the values up front
            // then set them directly (which will avoid a normalization call).
            // So we don't actually normalize until we need it.
            var second = this.second;
            var minute = this.minute;
            var hour = this.hour;
            var day = this.day;
            second += mult * aDuration.seconds;
            minute += mult * aDuration.minutes;
            hour += mult * aDuration.hours;
            day += mult * aDuration.days;
            day += mult * 7 * aDuration.weeks;
            this.second = second;
            this.minute = minute;
            this.hour = hour;
            this.day = day;
            this._cachedUnixTime = null;
        },
        /**
     * Subtract the date details (_excluding_ timezone).  Useful for finding
     * the relative difference between two time objects excluding their
     * timezone differences.
     *
     * @param {ICAL.Time} aDate     The date to substract
     * @return {ICAL.Duration}      The difference as a duration
     */ subtractDate: function icaltime_subtract(aDate) {
            var unixTime = this.toUnixTime() + this.utcOffset();
            var other = aDate.toUnixTime() + aDate.utcOffset();
            return ICAL.Duration.fromSeconds(unixTime - other);
        },
        /**
     * Subtract the date details, taking timezones into account.
     *
     * @param {ICAL.Time} aDate  The date to subtract
     * @return {ICAL.Duration}  The difference in duration
     */ subtractDateTz: function icaltime_subtract_abs(aDate) {
            var unixTime = this.toUnixTime();
            var other = aDate.toUnixTime();
            return ICAL.Duration.fromSeconds(unixTime - other);
        },
        /**
     * Compares the ICAL.Time instance with another one.
     *
     * @param {ICAL.Duration} aOther        The instance to compare with
     * @return {Number}                     -1, 0 or 1 for less/equal/greater
     */ compare: function icaltime_compare(other) {
            var a = this.toUnixTime();
            var b = other.toUnixTime();
            if (a > b) return 1;
            if (b > a) return -1;
            return 0;
        },
        /**
     * Compares only the date part of this instance with another one.
     *
     * @param {ICAL.Duration} other         The instance to compare with
     * @param {ICAL.Timezone} tz            The timezone to compare in
     * @return {Number}                     -1, 0 or 1 for less/equal/greater
     */ compareDateOnlyTz: function icaltime_compareDateOnlyTz(other, tz) {
            function cmp(attr) {
                return ICAL.Time._cmp_attr(a, b, attr);
            }
            var a = this.convertToZone(tz);
            var b = other.convertToZone(tz);
            var rc = 0;
            if ((rc = cmp("year")) != 0) return rc;
            if ((rc = cmp("month")) != 0) return rc;
            if ((rc = cmp("day")) != 0) return rc;
            return rc;
        },
        /**
     * Convert the instance into another timezone. The returned ICAL.Time
     * instance is always a copy.
     *
     * @param {ICAL.Timezone} zone      The zone to convert to
     * @return {ICAL.Time}              The copy, converted to the zone
     */ convertToZone: function convertToZone(zone) {
            var copy = this.clone();
            var zone_equals = this.zone.tzid == zone.tzid;
            if (!this.isDate && !zone_equals) ICAL.Timezone.convert_time(copy, this.zone, zone);
            copy.zone = zone;
            return copy;
        },
        /**
     * Calculates the UTC offset of the current date/time in the timezone it is
     * in.
     *
     * @return {Number}     UTC offset in seconds
     */ utcOffset: function utc_offset() {
            if (this.zone == ICAL.Timezone.localTimezone || this.zone == ICAL.Timezone.utcTimezone) return 0;
            else return this.zone.utcOffset(this);
        },
        /**
     * Returns an RFC 5545 compliant ical representation of this object.
     *
     * @return {String} ical date/date-time
     */ toICALString: function() {
            var string = this.toString();
            if (string.length > 10) return ICAL.design.icalendar.value["date-time"].toICAL(string);
            else return ICAL.design.icalendar.value.date.toICAL(string);
        },
        /**
     * The string representation of this date/time, in jCal form
     * (including : and - separators).
     * @return {String}
     */ toString: function toString() {
            var result = this.year + "-" + ICAL.helpers.pad2(this.month) + "-" + ICAL.helpers.pad2(this.day);
            if (!this.isDate) {
                result += "T" + ICAL.helpers.pad2(this.hour) + ":" + ICAL.helpers.pad2(this.minute) + ":" + ICAL.helpers.pad2(this.second);
                if (this.zone === ICAL.Timezone.utcTimezone) result += "Z";
            }
            return result;
        },
        /**
     * Converts the current instance to a Javascript date
     * @return {Date}
     */ toJSDate: function toJSDate() {
            if (this.zone == ICAL.Timezone.localTimezone) {
                if (this.isDate) return new Date(this.year, this.month - 1, this.day);
                else return new Date(this.year, this.month - 1, this.day, this.hour, this.minute, this.second, 0);
            } else return new Date(this.toUnixTime() * 1000);
        },
        _normalize: function icaltime_normalize() {
            var isDate = this._time.isDate;
            if (this._time.isDate) {
                this._time.hour = 0;
                this._time.minute = 0;
                this._time.second = 0;
            }
            this.adjust(0, 0, 0, 0);
            return this;
        },
        /**
     * Adjust the date/time by the given offset
     *
     * @param {Number} aExtraDays       The extra amount of days
     * @param {Number} aExtraHours      The extra amount of hours
     * @param {Number} aExtraMinutes    The extra amount of minutes
     * @param {Number} aExtraSeconds    The extra amount of seconds
     * @param {Number=} aTime           The time to adjust, defaults to the
     *                                    current instance.
     */ adjust: function icaltime_adjust(aExtraDays, aExtraHours, aExtraMinutes, aExtraSeconds, aTime) {
            var minutesOverflow, hoursOverflow, daysOverflow = 0, yearsOverflow = 0;
            var second, minute, hour, day;
            var daysInMonth;
            var time = aTime || this._time;
            if (!time.isDate) {
                second = time.second + aExtraSeconds;
                time.second = second % 60;
                minutesOverflow = ICAL.helpers.trunc(second / 60);
                if (time.second < 0) {
                    time.second += 60;
                    minutesOverflow--;
                }
                minute = time.minute + aExtraMinutes + minutesOverflow;
                time.minute = minute % 60;
                hoursOverflow = ICAL.helpers.trunc(minute / 60);
                if (time.minute < 0) {
                    time.minute += 60;
                    hoursOverflow--;
                }
                hour = time.hour + aExtraHours + hoursOverflow;
                time.hour = hour % 24;
                daysOverflow = ICAL.helpers.trunc(hour / 24);
                if (time.hour < 0) {
                    time.hour += 24;
                    daysOverflow--;
                }
            }
            // Adjust month and year first, because we need to know what month the day
            // is in before adjusting it.
            if (time.month > 12) yearsOverflow = ICAL.helpers.trunc((time.month - 1) / 12);
            else if (time.month < 1) yearsOverflow = ICAL.helpers.trunc(time.month / 12) - 1;
            time.year += yearsOverflow;
            time.month -= 12 * yearsOverflow;
            // Now take care of the days (and adjust month if needed)
            day = time.day + aExtraDays + daysOverflow;
            if (day > 0) for(;;){
                daysInMonth = ICAL.Time.daysInMonth(time.month, time.year);
                if (day <= daysInMonth) break;
                time.month++;
                if (time.month > 12) {
                    time.year++;
                    time.month = 1;
                }
                day -= daysInMonth;
            }
            else while(day <= 0){
                if (time.month == 1) {
                    time.year--;
                    time.month = 12;
                } else time.month--;
                day += ICAL.Time.daysInMonth(time.month, time.year);
            }
            time.day = day;
            this._cachedUnixTime = null;
            return this;
        },
        /**
     * Sets up the current instance from unix time, the number of seconds since
     * January 1st, 1970.
     *
     * @param {Number} seconds      The seconds to set up with
     */ fromUnixTime: function fromUnixTime(seconds) {
            this.zone = ICAL.Timezone.utcTimezone;
            var epoch = ICAL.Time.epochTime.clone();
            epoch.adjust(0, 0, 0, seconds);
            this.year = epoch.year;
            this.month = epoch.month;
            this.day = epoch.day;
            this.hour = epoch.hour;
            this.minute = epoch.minute;
            this.second = Math.floor(epoch.second);
            this._cachedUnixTime = null;
        },
        /**
     * Converts the current instance to seconds since January 1st 1970.
     *
     * @return {Number}         Seconds since 1970
     */ toUnixTime: function toUnixTime() {
            if (this._cachedUnixTime !== null) return this._cachedUnixTime;
            var offset = this.utcOffset();
            // we use the offset trick to ensure
            // that we are getting the actual UTC time
            var ms = Date.UTC(this.year, this.month - 1, this.day, this.hour, this.minute, this.second - offset);
            // seconds
            this._cachedUnixTime = ms / 1000;
            return this._cachedUnixTime;
        },
        /**
     * Converts time to into Object which can be serialized then re-created
     * using the constructor.
     *
     * @example
     * // toJSON will automatically be called
     * var json = JSON.stringify(mytime);
     *
     * var deserialized = JSON.parse(json);
     *
     * var time = new ICAL.Time(deserialized);
     *
     * @return {Object}
     */ toJSON: function() {
            var copy = [
                "year",
                "month",
                "day",
                "hour",
                "minute",
                "second",
                "isDate"
            ];
            var result = Object.create(null);
            var i = 0;
            var len = copy.length;
            var prop;
            for(; i < len; i++){
                prop = copy[i];
                result[prop] = this[prop];
            }
            if (this.zone) result.timezone = this.zone.tzid;
            return result;
        }
    };
    (function setupNormalizeAttributes() {
        // This needs to run before any instances are created!
        function defineAttr(attr) {
            Object.defineProperty(ICAL.Time.prototype, attr, {
                get: function getTimeAttr() {
                    if (this._pendingNormalization) {
                        this._normalize();
                        this._pendingNormalization = false;
                    }
                    return this._time[attr];
                },
                set: function setTimeAttr(val) {
                    // Check if isDate will be set and if was not set to normalize date.
                    // This avoids losing days when seconds, minutes and hours are zeroed
                    // what normalize will do when time is a date.
                    if (attr === "isDate" && val && !this._time.isDate) this.adjust(0, 0, 0, 0);
                    this._cachedUnixTime = null;
                    this._pendingNormalization = true;
                    this._time[attr] = val;
                    return val;
                }
            });
        }
        /* istanbul ignore else */ if ("defineProperty" in Object) {
            defineAttr("year");
            defineAttr("month");
            defineAttr("day");
            defineAttr("hour");
            defineAttr("minute");
            defineAttr("second");
            defineAttr("isDate");
        }
    })();
    /**
   * Returns the days in the given month
   *
   * @param {Number} month      The month to check
   * @param {Number} year       The year to check
   * @return {Number}           The number of days in the month
   */ ICAL.Time.daysInMonth = function icaltime_daysInMonth(month, year) {
        var _daysInMonth = [
            0,
            31,
            28,
            31,
            30,
            31,
            30,
            31,
            31,
            30,
            31,
            30,
            31
        ];
        var days = 30;
        if (month < 1 || month > 12) return days;
        days = _daysInMonth[month];
        if (month == 2) days += ICAL.Time.isLeapYear(year);
        return days;
    };
    /**
   * Checks if the year is a leap year
   *
   * @param {Number} year       The year to check
   * @return {Boolean}          True, if the year is a leap year
   */ ICAL.Time.isLeapYear = function isLeapYear(year) {
        if (year <= 1752) return year % 4 == 0;
        else return year % 4 == 0 && year % 100 != 0 || year % 400 == 0;
    };
    /**
   * Create a new ICAL.Time from the day of year and year. The date is returned
   * in floating timezone.
   *
   * @param {Number} aDayOfYear     The day of year
   * @param {Number} aYear          The year to create the instance in
   * @return {ICAL.Time}            The created instance with the calculated date
   */ ICAL.Time.fromDayOfYear = function icaltime_fromDayOfYear(aDayOfYear, aYear) {
        var year = aYear;
        var doy = aDayOfYear;
        var tt = new ICAL.Time();
        tt.auto_normalize = false;
        var is_leap = ICAL.Time.isLeapYear(year) ? 1 : 0;
        if (doy < 1) {
            year--;
            is_leap = ICAL.Time.isLeapYear(year) ? 1 : 0;
            doy += ICAL.Time.daysInYearPassedMonth[is_leap][12];
            return ICAL.Time.fromDayOfYear(doy, year);
        } else if (doy > ICAL.Time.daysInYearPassedMonth[is_leap][12]) {
            is_leap = ICAL.Time.isLeapYear(year) ? 1 : 0;
            doy -= ICAL.Time.daysInYearPassedMonth[is_leap][12];
            year++;
            return ICAL.Time.fromDayOfYear(doy, year);
        }
        tt.year = year;
        tt.isDate = true;
        for(var month = 11; month >= 0; month--)if (doy > ICAL.Time.daysInYearPassedMonth[is_leap][month]) {
            tt.month = month + 1;
            tt.day = doy - ICAL.Time.daysInYearPassedMonth[is_leap][month];
            break;
        }
        tt.auto_normalize = true;
        return tt;
    };
    /**
   * Returns a new ICAL.Time instance from a date string, e.g 2015-01-02.
   *
   * @deprecated                Use {@link ICAL.Time.fromDateString} instead
   * @param {String} str        The string to create from
   * @return {ICAL.Time}        The date/time instance
   */ ICAL.Time.fromStringv2 = function fromString(str) {
        return new ICAL.Time({
            year: parseInt(str.substr(0, 4), 10),
            month: parseInt(str.substr(5, 2), 10),
            day: parseInt(str.substr(8, 2), 10),
            isDate: true
        });
    };
    /**
   * Returns a new ICAL.Time instance from a date string, e.g 2015-01-02.
   *
   * @param {String} aValue     The string to create from
   * @return {ICAL.Time}        The date/time instance
   */ ICAL.Time.fromDateString = function(aValue) {
        // Dates should have no timezone.
        // Google likes to sometimes specify Z on dates
        // we specifically ignore that to avoid issues.
        // YYYY-MM-DD
        // 2012-10-10
        return new ICAL.Time({
            year: ICAL.helpers.strictParseInt(aValue.substr(0, 4)),
            month: ICAL.helpers.strictParseInt(aValue.substr(5, 2)),
            day: ICAL.helpers.strictParseInt(aValue.substr(8, 2)),
            isDate: true
        });
    };
    /**
   * Returns a new ICAL.Time instance from a date-time string, e.g
   * 2015-01-02T03:04:05. If a property is specified, the timezone is set up
   * from the property's TZID parameter.
   *
   * @param {String} aValue         The string to create from
   * @param {ICAL.Property=} prop   The property the date belongs to
   * @return {ICAL.Time}            The date/time instance
   */ ICAL.Time.fromDateTimeString = function(aValue, prop) {
        if (aValue.length < 19) throw new Error('invalid date-time value: "' + aValue + '"');
        var zone;
        if (aValue[19] && aValue[19] === "Z") zone = "Z";
        else if (prop) zone = prop.getParameter("tzid");
        // 2012-10-10T10:10:10(Z)?
        var time = new ICAL.Time({
            year: ICAL.helpers.strictParseInt(aValue.substr(0, 4)),
            month: ICAL.helpers.strictParseInt(aValue.substr(5, 2)),
            day: ICAL.helpers.strictParseInt(aValue.substr(8, 2)),
            hour: ICAL.helpers.strictParseInt(aValue.substr(11, 2)),
            minute: ICAL.helpers.strictParseInt(aValue.substr(14, 2)),
            second: ICAL.helpers.strictParseInt(aValue.substr(17, 2)),
            timezone: zone
        });
        return time;
    };
    /**
   * Returns a new ICAL.Time instance from a date or date-time string,
   *
   * @param {String} aValue         The string to create from
   * @param {ICAL.Property=} prop   The property the date belongs to
   * @return {ICAL.Time}            The date/time instance
   */ ICAL.Time.fromString = function fromString(aValue, aProperty) {
        if (aValue.length > 10) return ICAL.Time.fromDateTimeString(aValue, aProperty);
        else return ICAL.Time.fromDateString(aValue);
    };
    /**
   * Creates a new ICAL.Time instance from the given Javascript Date.
   *
   * @param {?Date} aDate     The Javascript Date to read, or null to reset
   * @param {Boolean} useUTC  If true, the UTC values of the date will be used
   */ ICAL.Time.fromJSDate = function fromJSDate(aDate, useUTC) {
        var tt = new ICAL.Time();
        return tt.fromJSDate(aDate, useUTC);
    };
    /**
   * Creates a new ICAL.Time instance from the the passed data object.
   *
   * @param {Object} aData            Time initialization
   * @param {Number=} aData.year      The year for this date
   * @param {Number=} aData.month     The month for this date
   * @param {Number=} aData.day       The day for this date
   * @param {Number=} aData.hour      The hour for this date
   * @param {Number=} aData.minute    The minute for this date
   * @param {Number=} aData.second    The second for this date
   * @param {Boolean=} aData.isDate   If true, the instance represents a date
   *                                    (as opposed to a date-time)
   * @param {ICAL.Timezone=} aZone    Timezone this position occurs in
   */ ICAL.Time.fromData = function fromData(aData, aZone) {
        var t = new ICAL.Time();
        return t.fromData(aData, aZone);
    };
    /**
   * Creates a new ICAL.Time instance from the current moment.
   * The instance is “floating” - has no timezone relation.
   * To create an instance considering the time zone, call
   * ICAL.Time.fromJSDate(new Date(), true)
   * @return {ICAL.Time}
   */ ICAL.Time.now = function icaltime_now() {
        return ICAL.Time.fromJSDate(new Date(), false);
    };
    /**
   * Returns the date on which ISO week number 1 starts.
   *
   * @see ICAL.Time#weekNumber
   * @param {Number} aYear                  The year to search in
   * @param {ICAL.Time.weekDay=} aWeekStart The week start weekday, used for calculation.
   * @return {ICAL.Time}                    The date on which week number 1 starts
   */ ICAL.Time.weekOneStarts = function weekOneStarts(aYear, aWeekStart) {
        var t = ICAL.Time.fromData({
            year: aYear,
            month: 1,
            day: 1,
            isDate: true
        });
        var dow = t.dayOfWeek();
        var wkst = aWeekStart || ICAL.Time.DEFAULT_WEEK_START;
        if (dow > ICAL.Time.THURSDAY) t.day += 7;
        if (wkst > ICAL.Time.THURSDAY) t.day -= 7;
        t.day -= dow - wkst;
        return t;
    };
    /**
   * Get the dominical letter for the given year. Letters range from A - G for
   * common years, and AG to GF for leap years.
   *
   * @param {Number} yr           The year to retrieve the letter for
   * @return {String}             The dominical letter.
   */ ICAL.Time.getDominicalLetter = function(yr) {
        var LTRS = "GFEDCBA";
        var dom = (yr + (yr / 4 | 0) + (yr / 400 | 0) - (yr / 100 | 0) - 1) % 7;
        var isLeap = ICAL.Time.isLeapYear(yr);
        if (isLeap) return LTRS[(dom + 6) % 7] + LTRS[dom];
        else return LTRS[dom];
    };
    /**
   * January 1st, 1970 as an ICAL.Time.
   * @type {ICAL.Time}
   * @constant
   * @instance
   */ ICAL.Time.epochTime = ICAL.Time.fromData({
        year: 1970,
        month: 1,
        day: 1,
        hour: 0,
        minute: 0,
        second: 0,
        isDate: false,
        timezone: "Z"
    });
    ICAL.Time._cmp_attr = function _cmp_attr(a, b, attr) {
        if (a[attr] > b[attr]) return 1;
        if (a[attr] < b[attr]) return -1;
        return 0;
    };
    /**
   * The days that have passed in the year after a given month. The array has
   * two members, one being an array of passed days for non-leap years, the
   * other analog for leap years.
   * @example
   * var isLeapYear = ICAL.Time.isLeapYear(year);
   * var passedDays = ICAL.Time.daysInYearPassedMonth[isLeapYear][month];
   * @type {Array.<Array.<Number>>}
   */ ICAL.Time.daysInYearPassedMonth = [
        [
            0,
            31,
            59,
            90,
            120,
            151,
            181,
            212,
            243,
            273,
            304,
            334,
            365
        ],
        [
            0,
            31,
            60,
            91,
            121,
            152,
            182,
            213,
            244,
            274,
            305,
            335,
            366
        ]
    ];
    /**
   * The weekday, 1 = SUNDAY, 7 = SATURDAY. Access via
   * ICAL.Time.MONDAY, ICAL.Time.TUESDAY, ...
   *
   * @typedef {Number} weekDay
   * @memberof ICAL.Time
   */ ICAL.Time.SUNDAY = 1;
    ICAL.Time.MONDAY = 2;
    ICAL.Time.TUESDAY = 3;
    ICAL.Time.WEDNESDAY = 4;
    ICAL.Time.THURSDAY = 5;
    ICAL.Time.FRIDAY = 6;
    ICAL.Time.SATURDAY = 7;
    /**
   * The default weekday for the WKST part.
   * @constant
   * @default ICAL.Time.MONDAY
   */ ICAL.Time.DEFAULT_WEEK_START = ICAL.Time.MONDAY;
})();
/* This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/.
 * Portions Copyright (C) Philipp Kewisch, 2015 */ (function() {
    /**
   * Describes a vCard time, which has slight differences to the ICAL.Time.
   * Properties can be null if not specified, for example for dates with
   * reduced accuracy or truncation.
   *
   * Note that currently not all methods are correctly re-implemented for
   * VCardTime. For example, comparison will have undefined results when some
   * members are null.
   *
   * Also, normalization is not yet implemented for this class!
   *
   * @alias ICAL.VCardTime
   * @class
   * @extends {ICAL.Time}
   * @param {Object} data                           The data for the time instance
   * @param {Number=} data.year                     The year for this date
   * @param {Number=} data.month                    The month for this date
   * @param {Number=} data.day                      The day for this date
   * @param {Number=} data.hour                     The hour for this date
   * @param {Number=} data.minute                   The minute for this date
   * @param {Number=} data.second                   The second for this date
   * @param {ICAL.Timezone|ICAL.UtcOffset} zone     The timezone to use
   * @param {String} icaltype                       The type for this date/time object
   */ ICAL.VCardTime = function(data, zone, icaltype) {
        this.wrappedJSObject = this;
        var time = this._time = Object.create(null);
        time.year = null;
        time.month = null;
        time.day = null;
        time.hour = null;
        time.minute = null;
        time.second = null;
        this.icaltype = icaltype || "date-and-or-time";
        this.fromData(data, zone);
    };
    ICAL.helpers.inherits(ICAL.Time, ICAL.VCardTime, /** @lends ICAL.VCardTime */ {
        /**
     * The class identifier.
     * @constant
     * @type {String}
     * @default "vcardtime"
     */ icalclass: "vcardtime",
        /**
     * The type name, to be used in the jCal object.
     * @type {String}
     * @default "date-and-or-time"
     */ icaltype: "date-and-or-time",
        /**
     * The timezone. This can either be floating, UTC, or an instance of
     * ICAL.UtcOffset.
     * @type {ICAL.Timezone|ICAL.UtcOFfset}
     */ zone: null,
        /**
     * Returns a clone of the vcard date/time object.
     *
     * @return {ICAL.VCardTime}     The cloned object
     */ clone: function() {
            return new ICAL.VCardTime(this._time, this.zone, this.icaltype);
        },
        _normalize: function() {
            return this;
        },
        /**
     * @inheritdoc
     */ utcOffset: function() {
            if (this.zone instanceof ICAL.UtcOffset) return this.zone.toSeconds();
            else return ICAL.Time.prototype.utcOffset.apply(this, arguments);
        },
        /**
     * Returns an RFC 6350 compliant representation of this object.
     *
     * @return {String}         vcard date/time string
     */ toICALString: function() {
            return ICAL.design.vcard.value[this.icaltype].toICAL(this.toString());
        },
        /**
     * The string representation of this date/time, in jCard form
     * (including : and - separators).
     * @return {String}
     */ toString: function toString() {
            var p2 = ICAL.helpers.pad2;
            var y = this.year, m = this.month, d = this.day;
            var h = this.hour, mm = this.minute, s = this.second;
            var hasYear = y !== null, hasMonth = m !== null, hasDay = d !== null;
            var hasHour = h !== null, hasMinute = mm !== null, hasSecond = s !== null;
            var datepart = (hasYear ? p2(y) + (hasMonth || hasDay ? "-" : "") : hasMonth || hasDay ? "--" : "") + (hasMonth ? p2(m) : "") + (hasDay ? "-" + p2(d) : "");
            var timepart = (hasHour ? p2(h) : "-") + (hasHour && hasMinute ? ":" : "") + (hasMinute ? p2(mm) : "") + (!hasHour && !hasMinute ? "-" : "") + (hasMinute && hasSecond ? ":" : "") + (hasSecond ? p2(s) : "");
            var zone;
            if (this.zone === ICAL.Timezone.utcTimezone) zone = "Z";
            else if (this.zone instanceof ICAL.UtcOffset) zone = this.zone.toString();
            else if (this.zone === ICAL.Timezone.localTimezone) zone = "";
            else if (this.zone instanceof ICAL.Timezone) {
                var offset = ICAL.UtcOffset.fromSeconds(this.zone.utcOffset(this));
                zone = offset.toString();
            } else zone = "";
            switch(this.icaltype){
                case "time":
                    return timepart + zone;
                case "date-and-or-time":
                case "date-time":
                    return datepart + (timepart == "--" ? "" : "T" + timepart + zone);
                case "date":
                    return datepart;
            }
            return null;
        }
    });
    /**
   * Returns a new ICAL.VCardTime instance from a date and/or time string.
   *
   * @param {String} aValue     The string to create from
   * @param {String} aIcalType  The type for this instance, e.g. date-and-or-time
   * @return {ICAL.VCardTime}   The date/time instance
   */ ICAL.VCardTime.fromDateAndOrTimeString = function(aValue, aIcalType) {
        function part(v, s, e) {
            return v ? ICAL.helpers.strictParseInt(v.substr(s, e)) : null;
        }
        var parts = aValue.split("T");
        var dt = parts[0], tmz = parts[1];
        var splitzone = tmz ? ICAL.design.vcard.value.time._splitZone(tmz) : [];
        var zone = splitzone[0], tm = splitzone[1];
        var stoi = ICAL.helpers.strictParseInt;
        var dtlen = dt ? dt.length : 0;
        var tmlen = tm ? tm.length : 0;
        var hasDashDate = dt && dt[0] == "-" && dt[1] == "-";
        var hasDashTime = tm && tm[0] == "-";
        var o = {
            year: hasDashDate ? null : part(dt, 0, 4),
            month: hasDashDate && (dtlen == 4 || dtlen == 7) ? part(dt, 2, 2) : dtlen == 7 ? part(dt, 5, 2) : dtlen == 10 ? part(dt, 5, 2) : null,
            day: dtlen == 5 ? part(dt, 3, 2) : dtlen == 7 && hasDashDate ? part(dt, 5, 2) : dtlen == 10 ? part(dt, 8, 2) : null,
            hour: hasDashTime ? null : part(tm, 0, 2),
            minute: hasDashTime && tmlen == 3 ? part(tm, 1, 2) : tmlen > 4 ? hasDashTime ? part(tm, 1, 2) : part(tm, 3, 2) : null,
            second: tmlen == 4 ? part(tm, 2, 2) : tmlen == 6 ? part(tm, 4, 2) : tmlen == 8 ? part(tm, 6, 2) : null
        };
        if (zone == "Z") zone = ICAL.Timezone.utcTimezone;
        else if (zone && zone[3] == ":") zone = ICAL.UtcOffset.fromString(zone);
        else zone = null;
        return new ICAL.VCardTime(o, zone, aIcalType);
    };
})();
/* This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/.
 * Portions Copyright (C) Philipp Kewisch, 2011-2015 */ (function() {
    var DOW_MAP = {
        SU: ICAL.Time.SUNDAY,
        MO: ICAL.Time.MONDAY,
        TU: ICAL.Time.TUESDAY,
        WE: ICAL.Time.WEDNESDAY,
        TH: ICAL.Time.THURSDAY,
        FR: ICAL.Time.FRIDAY,
        SA: ICAL.Time.SATURDAY
    };
    var REVERSE_DOW_MAP = {};
    for(var key1 in DOW_MAP)/* istanbul ignore else */ if (DOW_MAP.hasOwnProperty(key1)) REVERSE_DOW_MAP[DOW_MAP[key1]] = key1;
    var COPY_PARTS = [
        "BYSECOND",
        "BYMINUTE",
        "BYHOUR",
        "BYDAY",
        "BYMONTHDAY",
        "BYYEARDAY",
        "BYWEEKNO",
        "BYMONTH",
        "BYSETPOS"
    ];
    /**
   * @classdesc
   * This class represents the "recur" value type, with various calculation
   * and manipulation methods.
   *
   * @class
   * @alias ICAL.Recur
   * @param {Object} data                               An object with members of the recurrence
   * @param {ICAL.Recur.frequencyValues=} data.freq     The frequency value
   * @param {Number=} data.interval                     The INTERVAL value
   * @param {ICAL.Time.weekDay=} data.wkst              The week start value
   * @param {ICAL.Time=} data.until                     The end of the recurrence set
   * @param {Number=} data.count                        The number of occurrences
   * @param {Array.<Number>=} data.bysecond             The seconds for the BYSECOND part
   * @param {Array.<Number>=} data.byminute             The minutes for the BYMINUTE part
   * @param {Array.<Number>=} data.byhour               The hours for the BYHOUR part
   * @param {Array.<String>=} data.byday                The BYDAY values
   * @param {Array.<Number>=} data.bymonthday           The days for the BYMONTHDAY part
   * @param {Array.<Number>=} data.byyearday            The days for the BYYEARDAY part
   * @param {Array.<Number>=} data.byweekno             The weeks for the BYWEEKNO part
   * @param {Array.<Number>=} data.bymonth              The month for the BYMONTH part
   * @param {Array.<Number>=} data.bysetpos             The positionals for the BYSETPOS part
   */ ICAL.Recur = function icalrecur(data) {
        this.wrappedJSObject = this;
        this.parts = {};
        if (data && typeof data === "object") this.fromData(data);
    };
    ICAL.Recur.prototype = {
        /**
     * An object holding the BY-parts of the recurrence rule
     * @type {Object}
     */ parts: null,
        /**
     * The interval value for the recurrence rule.
     * @type {Number}
     */ interval: 1,
        /**
     * The week start day
     *
     * @type {ICAL.Time.weekDay}
     * @default ICAL.Time.MONDAY
     */ wkst: ICAL.Time.MONDAY,
        /**
     * The end of the recurrence
     * @type {?ICAL.Time}
     */ until: null,
        /**
     * The maximum number of occurrences
     * @type {?Number}
     */ count: null,
        /**
     * The frequency value.
     * @type {ICAL.Recur.frequencyValues}
     */ freq: null,
        /**
     * The class identifier.
     * @constant
     * @type {String}
     * @default "icalrecur"
     */ icalclass: "icalrecur",
        /**
     * The type name, to be used in the jCal object.
     * @constant
     * @type {String}
     * @default "recur"
     */ icaltype: "recur",
        /**
     * Create a new iterator for this recurrence rule. The passed start date
     * must be the start date of the event, not the start of the range to
     * search in.
     *
     * @example
     * var recur = comp.getFirstPropertyValue('rrule');
     * var dtstart = comp.getFirstPropertyValue('dtstart');
     * var iter = recur.iterator(dtstart);
     * for (var next = iter.next(); next; next = iter.next()) {
     *   if (next.compare(rangeStart) < 0) {
     *     continue;
     *   }
     *   console.log(next.toString());
     * }
     *
     * @param {ICAL.Time} aStart        The item's start date
     * @return {ICAL.RecurIterator}     The recurrence iterator
     */ iterator: function(aStart) {
            return new ICAL.RecurIterator({
                rule: this,
                dtstart: aStart
            });
        },
        /**
     * Returns a clone of the recurrence object.
     *
     * @return {ICAL.Recur}      The cloned object
     */ clone: function clone() {
            return new ICAL.Recur(this.toJSON());
        },
        /**
     * Checks if the current rule is finite, i.e. has a count or until part.
     *
     * @return {Boolean}        True, if the rule is finite
     */ isFinite: function isfinite() {
            return !!(this.count || this.until);
        },
        /**
     * Checks if the current rule has a count part, and not limited by an until
     * part.
     *
     * @return {Boolean}        True, if the rule is by count
     */ isByCount: function isbycount() {
            return !!(this.count && !this.until);
        },
        /**
     * Adds a component (part) to the recurrence rule. This is not a component
     * in the sense of {@link ICAL.Component}, but a part of the recurrence
     * rule, i.e. BYMONTH.
     *
     * @param {String} aType            The name of the component part
     * @param {Array|String} aValue     The component value
     */ addComponent: function addPart(aType, aValue) {
            var ucname = aType.toUpperCase();
            if (ucname in this.parts) this.parts[ucname].push(aValue);
            else this.parts[ucname] = [
                aValue
            ];
        },
        /**
     * Sets the component value for the given by-part.
     *
     * @param {String} aType        The component part name
     * @param {Array} aValues       The component values
     */ setComponent: function setComponent(aType, aValues) {
            this.parts[aType.toUpperCase()] = aValues.slice();
        },
        /**
     * Gets (a copy) of the requested component value.
     *
     * @param {String} aType        The component part name
     * @return {Array}              The component part value
     */ getComponent: function getComponent(aType) {
            var ucname = aType.toUpperCase();
            return ucname in this.parts ? this.parts[ucname].slice() : [];
        },
        /**
     * Retrieves the next occurrence after the given recurrence id. See the
     * guide on {@tutorial terminology} for more details.
     *
     * NOTE: Currently, this method iterates all occurrences from the start
     * date. It should not be called in a loop for performance reasons. If you
     * would like to get more than one occurrence, you can iterate the
     * occurrences manually, see the example on the
     * {@link ICAL.Recur#iterator iterator} method.
     *
     * @param {ICAL.Time} aStartTime        The start of the event series
     * @param {ICAL.Time} aRecurrenceId     The date of the last occurrence
     * @return {ICAL.Time}                  The next occurrence after
     */ getNextOccurrence: function getNextOccurrence(aStartTime, aRecurrenceId) {
            var iter = this.iterator(aStartTime);
            var next, cdt;
            do next = iter.next();
            while (next && next.compare(aRecurrenceId) <= 0);
            if (next && aRecurrenceId.zone) next.zone = aRecurrenceId.zone;
            return next;
        },
        /**
     * Sets up the current instance using members from the passed data object.
     *
     * @param {Object} data                               An object with members of the recurrence
     * @param {ICAL.Recur.frequencyValues=} data.freq     The frequency value
     * @param {Number=} data.interval                     The INTERVAL value
     * @param {ICAL.Time.weekDay=} data.wkst              The week start value
     * @param {ICAL.Time=} data.until                     The end of the recurrence set
     * @param {Number=} data.count                        The number of occurrences
     * @param {Array.<Number>=} data.bysecond             The seconds for the BYSECOND part
     * @param {Array.<Number>=} data.byminute             The minutes for the BYMINUTE part
     * @param {Array.<Number>=} data.byhour               The hours for the BYHOUR part
     * @param {Array.<String>=} data.byday                The BYDAY values
     * @param {Array.<Number>=} data.bymonthday           The days for the BYMONTHDAY part
     * @param {Array.<Number>=} data.byyearday            The days for the BYYEARDAY part
     * @param {Array.<Number>=} data.byweekno             The weeks for the BYWEEKNO part
     * @param {Array.<Number>=} data.bymonth              The month for the BYMONTH part
     * @param {Array.<Number>=} data.bysetpos             The positionals for the BYSETPOS part
     */ fromData: function(data) {
            for(var key in data){
                var uckey = key.toUpperCase();
                if (uckey in partDesign) {
                    if (Array.isArray(data[key])) this.parts[uckey] = data[key];
                    else this.parts[uckey] = [
                        data[key]
                    ];
                } else this[key] = data[key];
            }
            if (this.interval && typeof this.interval != "number") optionDesign.INTERVAL(this.interval, this);
            if (this.wkst && typeof this.wkst != "number") this.wkst = ICAL.Recur.icalDayToNumericDay(this.wkst);
            if (this.until && !(this.until instanceof ICAL.Time)) this.until = ICAL.Time.fromString(this.until);
        },
        /**
     * The jCal representation of this recurrence type.
     * @return {Object}
     */ toJSON: function() {
            var res = Object.create(null);
            res.freq = this.freq;
            if (this.count) res.count = this.count;
            if (this.interval > 1) res.interval = this.interval;
            for(var k in this.parts){
                /* istanbul ignore if */ if (!this.parts.hasOwnProperty(k)) continue;
                var kparts = this.parts[k];
                if (Array.isArray(kparts) && kparts.length == 1) res[k.toLowerCase()] = kparts[0];
                else res[k.toLowerCase()] = ICAL.helpers.clone(this.parts[k]);
            }
            if (this.until) res.until = this.until.toString();
            if ("wkst" in this && this.wkst !== ICAL.Time.DEFAULT_WEEK_START) res.wkst = ICAL.Recur.numericDayToIcalDay(this.wkst);
            return res;
        },
        /**
     * The string representation of this recurrence rule.
     * @return {String}
     */ toString: function icalrecur_toString() {
            // TODO retain order
            var str = "FREQ=" + this.freq;
            if (this.count) str += ";COUNT=" + this.count;
            if (this.interval > 1) str += ";INTERVAL=" + this.interval;
            for(var k in this.parts)/* istanbul ignore else */ if (this.parts.hasOwnProperty(k)) str += ";" + k + "=" + this.parts[k];
            if (this.until) str += ";UNTIL=" + this.until.toICALString();
            if ("wkst" in this && this.wkst !== ICAL.Time.DEFAULT_WEEK_START) str += ";WKST=" + ICAL.Recur.numericDayToIcalDay(this.wkst);
            return str;
        }
    };
    function parseNumericValue(type, min, max, value) {
        var result = value;
        if (value[0] === "+") result = value.substr(1);
        result = ICAL.helpers.strictParseInt(result);
        if (min !== undefined && value < min) throw new Error(type + ': invalid value "' + value + '" must be > ' + min);
        if (max !== undefined && value > max) throw new Error(type + ': invalid value "' + value + '" must be < ' + min);
        return result;
    }
    /**
   * Convert an ical representation of a day (SU, MO, etc..)
   * into a numeric value of that day.
   *
   * @param {String} string     The iCalendar day name
   * @param {ICAL.Time.weekDay=} aWeekStart
   *        The week start weekday, defaults to SUNDAY
   * @return {Number}           Numeric value of given day
   */ ICAL.Recur.icalDayToNumericDay = function toNumericDay(string, aWeekStart) {
        //XXX: this is here so we can deal
        //     with possibly invalid string values.
        var firstDow = aWeekStart || ICAL.Time.SUNDAY;
        return (DOW_MAP[string] - firstDow + 7) % 7 + 1;
    };
    /**
   * Convert a numeric day value into its ical representation (SU, MO, etc..)
   *
   * @param {Number} num        Numeric value of given day
   * @param {ICAL.Time.weekDay=} aWeekStart
   *        The week start weekday, defaults to SUNDAY
   * @return {String}           The ICAL day value, e.g SU,MO,...
   */ ICAL.Recur.numericDayToIcalDay = function toIcalDay(num, aWeekStart) {
        //XXX: this is here so we can deal with possibly invalid number values.
        //     Also, this allows consistent mapping between day numbers and day
        //     names for external users.
        var firstDow = aWeekStart || ICAL.Time.SUNDAY;
        var dow = num + firstDow - ICAL.Time.SUNDAY;
        if (dow > 7) dow -= 7;
        return REVERSE_DOW_MAP[dow];
    };
    var VALID_DAY_NAMES = /^(SU|MO|TU|WE|TH|FR|SA)$/;
    var VALID_BYDAY_PART = /^([+-])?(5[0-3]|[1-4][0-9]|[1-9])?(SU|MO|TU|WE|TH|FR|SA)$/;
    /**
   * Possible frequency values for the FREQ part
   * (YEARLY, MONTHLY, WEEKLY, DAILY, HOURLY, MINUTELY, SECONDLY)
   *
   * @typedef {String} frequencyValues
   * @memberof ICAL.Recur
   */ var ALLOWED_FREQ = [
        "SECONDLY",
        "MINUTELY",
        "HOURLY",
        "DAILY",
        "WEEKLY",
        "MONTHLY",
        "YEARLY"
    ];
    var optionDesign = {
        FREQ: function(value, dict, fmtIcal) {
            // yes this is actually equal or faster then regex.
            // upside here is we can enumerate the valid values.
            if (ALLOWED_FREQ.indexOf(value) !== -1) dict.freq = value;
            else throw new Error('invalid frequency "' + value + '" expected: "' + ALLOWED_FREQ.join(", ") + '"');
        },
        COUNT: function(value, dict, fmtIcal) {
            dict.count = ICAL.helpers.strictParseInt(value);
        },
        INTERVAL: function(value, dict, fmtIcal) {
            dict.interval = ICAL.helpers.strictParseInt(value);
            if (dict.interval < 1) // 0 or negative values are not allowed, some engines seem to generate
            // it though. Assume 1 instead.
            dict.interval = 1;
        },
        UNTIL: function(value, dict, fmtIcal) {
            if (value.length > 10) dict.until = ICAL.design.icalendar.value["date-time"].fromICAL(value);
            else dict.until = ICAL.design.icalendar.value.date.fromICAL(value);
            if (!fmtIcal) dict.until = ICAL.Time.fromString(dict.until);
        },
        WKST: function(value, dict, fmtIcal) {
            if (VALID_DAY_NAMES.test(value)) dict.wkst = ICAL.Recur.icalDayToNumericDay(value);
            else throw new Error('invalid WKST value "' + value + '"');
        }
    };
    var partDesign = {
        BYSECOND: parseNumericValue.bind(this, "BYSECOND", 0, 60),
        BYMINUTE: parseNumericValue.bind(this, "BYMINUTE", 0, 59),
        BYHOUR: parseNumericValue.bind(this, "BYHOUR", 0, 23),
        BYDAY: function(value) {
            if (VALID_BYDAY_PART.test(value)) return value;
            else throw new Error('invalid BYDAY value "' + value + '"');
        },
        BYMONTHDAY: parseNumericValue.bind(this, "BYMONTHDAY", -31, 31),
        BYYEARDAY: parseNumericValue.bind(this, "BYYEARDAY", -366, 366),
        BYWEEKNO: parseNumericValue.bind(this, "BYWEEKNO", -53, 53),
        BYMONTH: parseNumericValue.bind(this, "BYMONTH", 1, 12),
        BYSETPOS: parseNumericValue.bind(this, "BYSETPOS", -366, 366)
    };
    /**
   * Creates a new {@link ICAL.Recur} instance from the passed string.
   *
   * @param {String} string         The string to parse
   * @return {ICAL.Recur}           The created recurrence instance
   */ ICAL.Recur.fromString = function(string) {
        var data = ICAL.Recur._stringToData(string, false);
        return new ICAL.Recur(data);
    };
    /**
   * Creates a new {@link ICAL.Recur} instance using members from the passed
   * data object.
   *
   * @param {Object} aData                              An object with members of the recurrence
   * @param {ICAL.Recur.frequencyValues=} aData.freq    The frequency value
   * @param {Number=} aData.interval                    The INTERVAL value
   * @param {ICAL.Time.weekDay=} aData.wkst             The week start value
   * @param {ICAL.Time=} aData.until                    The end of the recurrence set
   * @param {Number=} aData.count                       The number of occurrences
   * @param {Array.<Number>=} aData.bysecond            The seconds for the BYSECOND part
   * @param {Array.<Number>=} aData.byminute            The minutes for the BYMINUTE part
   * @param {Array.<Number>=} aData.byhour              The hours for the BYHOUR part
   * @param {Array.<String>=} aData.byday               The BYDAY values
   * @param {Array.<Number>=} aData.bymonthday          The days for the BYMONTHDAY part
   * @param {Array.<Number>=} aData.byyearday           The days for the BYYEARDAY part
   * @param {Array.<Number>=} aData.byweekno            The weeks for the BYWEEKNO part
   * @param {Array.<Number>=} aData.bymonth             The month for the BYMONTH part
   * @param {Array.<Number>=} aData.bysetpos            The positionals for the BYSETPOS part
   */ ICAL.Recur.fromData = function(aData) {
        return new ICAL.Recur(aData);
    };
    /**
   * Converts a recurrence string to a data object, suitable for the fromData
   * method.
   *
   * @param {String} string     The string to parse
   * @param {Boolean} fmtIcal   If true, the string is considered to be an
   *                              iCalendar string
   * @return {ICAL.Recur}       The recurrence instance
   */ ICAL.Recur._stringToData = function(string, fmtIcal) {
        var dict = Object.create(null);
        // split is slower in FF but fast enough.
        // v8 however this is faster then manual split?
        var values = string.split(";");
        var len = values.length;
        for(var i = 0; i < len; i++){
            var parts = values[i].split("=");
            var ucname = parts[0].toUpperCase();
            var lcname = parts[0].toLowerCase();
            var name = fmtIcal ? lcname : ucname;
            var value = parts[1];
            if (ucname in partDesign) {
                var partArr = value.split(",");
                var partArrIdx = 0;
                var partArrLen = partArr.length;
                for(; partArrIdx < partArrLen; partArrIdx++)partArr[partArrIdx] = partDesign[ucname](partArr[partArrIdx]);
                dict[name] = partArr.length == 1 ? partArr[0] : partArr;
            } else if (ucname in optionDesign) optionDesign[ucname](value, dict, fmtIcal);
            else // Don't swallow unknown values. Just set them as they are.
            dict[lcname] = value;
        }
        return dict;
    };
})();
/* This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/.
 * Portions Copyright (C) Philipp Kewisch, 2011-2015 */ /**
 * This symbol is further described later on
 * @ignore
 */ ICAL.RecurIterator = function() {
    /**
   * @classdesc
   * An iterator for a single recurrence rule. This class usually doesn't have
   * to be instanciated directly, the convenience method
   * {@link ICAL.Recur#iterator} can be used.
   *
   * @description
   * The options object may contain additional members when resuming iteration from a previous run
   *
   * @description
   * The options object may contain additional members when resuming iteration
   * from a previous run.
   *
   * @class
   * @alias ICAL.RecurIterator
   * @param {Object} options                The iterator options
   * @param {ICAL.Recur} options.rule       The rule to iterate.
   * @param {ICAL.Time} options.dtstart     The start date of the event.
   * @param {Boolean=} options.initialized  When true, assume that options are
   *        from a previously constructed iterator. Initialization will not be
   *        repeated.
   */ function icalrecur_iterator(options) {
        this.fromData(options);
    }
    icalrecur_iterator.prototype = {
        /**
     * True when iteration is finished.
     * @type {Boolean}
     */ completed: false,
        /**
     * The rule that is being iterated
     * @type {ICAL.Recur}
     */ rule: null,
        /**
     * The start date of the event being iterated.
     * @type {ICAL.Time}
     */ dtstart: null,
        /**
     * The last occurrence that was returned from the
     * {@link ICAL.RecurIterator#next} method.
     * @type {ICAL.Time}
     */ last: null,
        /**
     * The sequence number from the occurrence
     * @type {Number}
     */ occurrence_number: 0,
        /**
     * The indices used for the {@link ICAL.RecurIterator#by_data} object.
     * @type {Object}
     * @private
     */ by_indices: null,
        /**
     * If true, the iterator has already been initialized
     * @type {Boolean}
     * @private
     */ initialized: false,
        /**
     * The initializd by-data.
     * @type {Object}
     * @private
     */ by_data: null,
        /**
     * The expanded yeardays
     * @type {Array}
     * @private
     */ days: null,
        /**
     * The index in the {@link ICAL.RecurIterator#days} array.
     * @type {Number}
     * @private
     */ days_index: 0,
        /**
     * Initialize the recurrence iterator from the passed data object. This
     * method is usually not called directly, you can initialize the iterator
     * through the constructor.
     *
     * @param {Object} options                The iterator options
     * @param {ICAL.Recur} options.rule       The rule to iterate.
     * @param {ICAL.Time} options.dtstart     The start date of the event.
     * @param {Boolean=} options.initialized  When true, assume that options are
     *        from a previously constructed iterator. Initialization will not be
     *        repeated.
     */ fromData: function(options) {
            this.rule = ICAL.helpers.formatClassType(options.rule, ICAL.Recur);
            if (!this.rule) throw new Error("iterator requires a (ICAL.Recur) rule");
            this.dtstart = ICAL.helpers.formatClassType(options.dtstart, ICAL.Time);
            if (!this.dtstart) throw new Error("iterator requires a (ICAL.Time) dtstart");
            if (options.by_data) this.by_data = options.by_data;
            else this.by_data = ICAL.helpers.clone(this.rule.parts, true);
            if (options.occurrence_number) this.occurrence_number = options.occurrence_number;
            this.days = options.days || [];
            if (options.last) this.last = ICAL.helpers.formatClassType(options.last, ICAL.Time);
            this.by_indices = options.by_indices;
            if (!this.by_indices) this.by_indices = {
                "BYSECOND": 0,
                "BYMINUTE": 0,
                "BYHOUR": 0,
                "BYDAY": 0,
                "BYMONTH": 0,
                "BYWEEKNO": 0,
                "BYMONTHDAY": 0
            };
            this.initialized = options.initialized || false;
            if (!this.initialized) this.init();
        },
        /**
     * Intialize the iterator
     * @private
     */ init: function icalrecur_iterator_init() {
            this.initialized = true;
            this.last = this.dtstart.clone();
            var parts = this.by_data;
            if ("BYDAY" in parts) // libical does this earlier when the rule is loaded, but we postpone to
            // now so we can preserve the original order.
            this.sort_byday_rules(parts.BYDAY);
            // If the BYYEARDAY appares, no other date rule part may appear
            if ("BYYEARDAY" in parts) {
                if ("BYMONTH" in parts || "BYWEEKNO" in parts || "BYMONTHDAY" in parts || "BYDAY" in parts) throw new Error("Invalid BYYEARDAY rule");
            }
            // BYWEEKNO and BYMONTHDAY rule parts may not both appear
            if ("BYWEEKNO" in parts && "BYMONTHDAY" in parts) throw new Error("BYWEEKNO does not fit to BYMONTHDAY");
            // For MONTHLY recurrences (FREQ=MONTHLY) neither BYYEARDAY nor
            // BYWEEKNO may appear.
            if (this.rule.freq == "MONTHLY" && ("BYYEARDAY" in parts || "BYWEEKNO" in parts)) throw new Error("For MONTHLY recurrences neither BYYEARDAY nor BYWEEKNO may appear");
            // For WEEKLY recurrences (FREQ=WEEKLY) neither BYMONTHDAY nor
            // BYYEARDAY may appear.
            if (this.rule.freq == "WEEKLY" && ("BYYEARDAY" in parts || "BYMONTHDAY" in parts)) throw new Error("For WEEKLY recurrences neither BYMONTHDAY nor BYYEARDAY may appear");
            // BYYEARDAY may only appear in YEARLY rules
            if (this.rule.freq != "YEARLY" && "BYYEARDAY" in parts) throw new Error("BYYEARDAY may only appear in YEARLY rules");
            this.last.second = this.setup_defaults("BYSECOND", "SECONDLY", this.dtstart.second);
            this.last.minute = this.setup_defaults("BYMINUTE", "MINUTELY", this.dtstart.minute);
            this.last.hour = this.setup_defaults("BYHOUR", "HOURLY", this.dtstart.hour);
            this.last.day = this.setup_defaults("BYMONTHDAY", "DAILY", this.dtstart.day);
            this.last.month = this.setup_defaults("BYMONTH", "MONTHLY", this.dtstart.month);
            if (this.rule.freq == "WEEKLY") {
                if ("BYDAY" in parts) {
                    var bydayParts = this.ruleDayOfWeek(parts.BYDAY[0], this.rule.wkst);
                    var pos = bydayParts[0];
                    var dow = bydayParts[1];
                    var wkdy = dow - this.last.dayOfWeek(this.rule.wkst);
                    if (this.last.dayOfWeek(this.rule.wkst) < dow && wkdy >= 0 || wkdy < 0) // Initial time is after first day of BYDAY data
                    this.last.day += wkdy;
                } else {
                    var dayName = ICAL.Recur.numericDayToIcalDay(this.dtstart.dayOfWeek());
                    parts.BYDAY = [
                        dayName
                    ];
                }
            }
            if (this.rule.freq == "YEARLY") {
                for(;;){
                    this.expand_year_days(this.last.year);
                    if (this.days.length > 0) break;
                    this.increment_year(this.rule.interval);
                }
                this._nextByYearDay();
            }
            if (this.rule.freq == "MONTHLY" && this.has_by_data("BYDAY")) {
                var tempLast = null;
                var initLast = this.last.clone();
                var daysInMonth = ICAL.Time.daysInMonth(this.last.month, this.last.year);
                // Check every weekday in BYDAY with relative dow and pos.
                for(var i in this.by_data.BYDAY){
                    /* istanbul ignore if */ if (!this.by_data.BYDAY.hasOwnProperty(i)) continue;
                    this.last = initLast.clone();
                    var bydayParts = this.ruleDayOfWeek(this.by_data.BYDAY[i]);
                    var pos = bydayParts[0];
                    var dow = bydayParts[1];
                    var dayOfMonth = this.last.nthWeekDay(dow, pos);
                    // If |pos| >= 6, the byday is invalid for a monthly rule.
                    if (pos >= 6 || pos <= -6) throw new Error("Malformed values in BYDAY part");
                    // If a Byday with pos=+/-5 is not in the current month it
                    // must be searched in the next months.
                    if (dayOfMonth > daysInMonth || dayOfMonth <= 0) {
                        // Skip if we have already found a "last" in this month.
                        if (tempLast && tempLast.month == initLast.month) continue;
                        while(dayOfMonth > daysInMonth || dayOfMonth <= 0){
                            this.increment_month();
                            daysInMonth = ICAL.Time.daysInMonth(this.last.month, this.last.year);
                            dayOfMonth = this.last.nthWeekDay(dow, pos);
                        }
                    }
                    this.last.day = dayOfMonth;
                    if (!tempLast || this.last.compare(tempLast) < 0) tempLast = this.last.clone();
                }
                this.last = tempLast.clone();
                //XXX: This feels like a hack, but we need to initialize
                //     the BYMONTHDAY case correctly and byDayAndMonthDay handles
                //     this case. It accepts a special flag which will avoid incrementing
                //     the initial value without the flag days that match the start time
                //     would be missed.
                if (this.has_by_data("BYMONTHDAY")) this._byDayAndMonthDay(true);
                if (this.last.day > daysInMonth || this.last.day == 0) throw new Error("Malformed values in BYDAY part");
            } else if (this.has_by_data("BYMONTHDAY")) {
                if (this.last.day < 0) {
                    var daysInMonth = ICAL.Time.daysInMonth(this.last.month, this.last.year);
                    this.last.day = daysInMonth + this.last.day + 1;
                }
            }
        },
        /**
     * Retrieve the next occurrence from the iterator.
     * @return {ICAL.Time}
     */ next: function icalrecur_iterator_next() {
            var before = this.last ? this.last.clone() : null;
            if (this.rule.count && this.occurrence_number >= this.rule.count || this.rule.until && this.last.compare(this.rule.until) > 0) {
                //XXX: right now this is just a flag and has no impact
                //     we can simplify the above case to check for completed later.
                this.completed = true;
                return null;
            }
            if (this.occurrence_number == 0 && this.last.compare(this.dtstart) >= 0) {
                // First of all, give the instance that was initialized
                this.occurrence_number++;
                return this.last;
            }
            var valid;
            do {
                valid = 1;
                switch(this.rule.freq){
                    case "SECONDLY":
                        this.next_second();
                        break;
                    case "MINUTELY":
                        this.next_minute();
                        break;
                    case "HOURLY":
                        this.next_hour();
                        break;
                    case "DAILY":
                        this.next_day();
                        break;
                    case "WEEKLY":
                        this.next_week();
                        break;
                    case "MONTHLY":
                        valid = this.next_month();
                        break;
                    case "YEARLY":
                        this.next_year();
                        break;
                    default:
                        return null;
                }
            }while (!this.check_contracting_rules() || this.last.compare(this.dtstart) < 0 || !valid);
            // TODO is this valid?
            if (this.last.compare(before) == 0) throw new Error("Same occurrence found twice, protecting you from death by recursion");
            if (this.rule.until && this.last.compare(this.rule.until) > 0) {
                this.completed = true;
                return null;
            } else {
                this.occurrence_number++;
                return this.last;
            }
        },
        next_second: function next_second() {
            return this.next_generic("BYSECOND", "SECONDLY", "second", "minute");
        },
        increment_second: function increment_second(inc) {
            return this.increment_generic(inc, "second", 60, "minute");
        },
        next_minute: function next_minute() {
            return this.next_generic("BYMINUTE", "MINUTELY", "minute", "hour", "next_second");
        },
        increment_minute: function increment_minute(inc) {
            return this.increment_generic(inc, "minute", 60, "hour");
        },
        next_hour: function next_hour() {
            return this.next_generic("BYHOUR", "HOURLY", "hour", "monthday", "next_minute");
        },
        increment_hour: function increment_hour(inc) {
            this.increment_generic(inc, "hour", 24, "monthday");
        },
        next_day: function next_day() {
            var has_by_day = "BYDAY" in this.by_data;
            var this_freq = this.rule.freq == "DAILY";
            if (this.next_hour() == 0) return 0;
            if (this_freq) this.increment_monthday(this.rule.interval);
            else this.increment_monthday(1);
            return 0;
        },
        next_week: function next_week() {
            var end_of_data = 0;
            if (this.next_weekday_by_week() == 0) return end_of_data;
            if (this.has_by_data("BYWEEKNO")) {
                var idx = ++this.by_indices.BYWEEKNO;
                if (this.by_indices.BYWEEKNO == this.by_data.BYWEEKNO.length) {
                    this.by_indices.BYWEEKNO = 0;
                    end_of_data = 1;
                }
                // HACK should be first month of the year
                this.last.month = 1;
                this.last.day = 1;
                var week_no = this.by_data.BYWEEKNO[this.by_indices.BYWEEKNO];
                this.last.day += 7 * week_no;
                if (end_of_data) this.increment_year(1);
            } else // Jump to the next week
            this.increment_monthday(7 * this.rule.interval);
            return end_of_data;
        },
        /**
     * Normalize each by day rule for a given year/month.
     * Takes into account ordering and negative rules
     *
     * @private
     * @param {Number} year         Current year.
     * @param {Number} month        Current month.
     * @param {Array}  rules        Array of rules.
     *
     * @return {Array} sorted and normalized rules.
     *                 Negative rules will be expanded to their
     *                 correct positive values for easier processing.
     */ normalizeByMonthDayRules: function(year, month, rules) {
            var daysInMonth = ICAL.Time.daysInMonth(month, year);
            // XXX: This is probably bad for performance to allocate
            //      a new array for each month we scan, if possible
            //      we should try to optimize this...
            var newRules = [];
            var ruleIdx = 0;
            var len = rules.length;
            var rule;
            for(; ruleIdx < len; ruleIdx++){
                rule = rules[ruleIdx];
                // if this rule falls outside of given
                // month discard it.
                if (Math.abs(rule) > daysInMonth) continue;
                // negative case
                if (rule < 0) // we add (not subtract it is a negative number)
                // one from the rule because 1 === last day of month
                rule = daysInMonth + (rule + 1);
                else if (rule === 0) continue;
                // only add unique items...
                if (newRules.indexOf(rule) === -1) newRules.push(rule);
            }
            // unique and sort
            return newRules.sort(function(a, b) {
                return a - b;
            });
        },
        /**
     * NOTES:
     * We are given a list of dates in the month (BYMONTHDAY) (23, etc..)
     * Also we are given a list of days (BYDAY) (MO, 2SU, etc..) when
     * both conditions match a given date (this.last.day) iteration stops.
     *
     * @private
     * @param {Boolean=} isInit     When given true will not increment the
     *                                current day (this.last).
     */ _byDayAndMonthDay: function(isInit) {
            var byMonthDay; // setup in initMonth
            var byDay = this.by_data.BYDAY;
            var date;
            var dateIdx = 0;
            var dateLen; // setup in initMonth
            var dayLen = byDay.length;
            // we are not valid by default
            var dataIsValid = 0;
            var daysInMonth;
            var self = this;
            // we need a copy of this, because a DateTime gets normalized
            // automatically if the day is out of range. At some points we
            // set the last day to 0 to start counting.
            var lastDay = this.last.day;
            function initMonth() {
                daysInMonth = ICAL.Time.daysInMonth(self.last.month, self.last.year);
                byMonthDay = self.normalizeByMonthDayRules(self.last.year, self.last.month, self.by_data.BYMONTHDAY);
                dateLen = byMonthDay.length;
                // For the case of more than one occurrence in one month
                // we have to be sure to start searching after the last
                // found date or at the last BYMONTHDAY, unless we are
                // initializing the iterator because in this case we have
                // to consider the last found date too.
                while(byMonthDay[dateIdx] <= lastDay && !(isInit && byMonthDay[dateIdx] == lastDay) && dateIdx < dateLen - 1)dateIdx++;
            }
            function nextMonth() {
                // since the day is incremented at the start
                // of the loop below, we need to start at 0
                lastDay = 0;
                self.increment_month();
                dateIdx = 0;
                initMonth();
            }
            initMonth();
            // should come after initMonth
            if (isInit) lastDay -= 1;
            // Use a counter to avoid an infinite loop with malformed rules.
            // Stop checking after 4 years so we consider also a leap year.
            var monthsCounter = 48;
            while(!dataIsValid && monthsCounter){
                monthsCounter--;
                // increment the current date. This is really
                // important otherwise we may fall into the infinite
                // loop trap. The initial date takes care of the case
                // where the current date is the date we are looking
                // for.
                date = lastDay + 1;
                if (date > daysInMonth) {
                    nextMonth();
                    continue;
                }
                // find next date
                var next = byMonthDay[dateIdx++];
                // this logic is dependant on the BYMONTHDAYS
                // being in order (which is done by #normalizeByMonthDayRules)
                if (next >= date) // if the next month day is in the future jump to it.
                lastDay = next;
                else {
                    // in this case the 'next' monthday has past
                    // we must move to the month.
                    nextMonth();
                    continue;
                }
                // Now we can loop through the day rules to see
                // if one matches the current month date.
                for(var dayIdx = 0; dayIdx < dayLen; dayIdx++){
                    var parts = this.ruleDayOfWeek(byDay[dayIdx]);
                    var pos = parts[0];
                    var dow = parts[1];
                    this.last.day = lastDay;
                    if (this.last.isNthWeekDay(dow, pos)) {
                        // when we find the valid one we can mark
                        // the conditions as met and break the loop.
                        // (Because we have this condition above
                        //  it will also break the parent loop).
                        dataIsValid = 1;
                        break;
                    }
                }
                // It is completely possible that the combination
                // cannot be matched in the current month.
                // When we reach the end of possible combinations
                // in the current month we iterate to the next one.
                // since dateIdx is incremented right after getting
                // "next", we don't need dateLen -1 here.
                if (!dataIsValid && dateIdx === dateLen) {
                    nextMonth();
                    continue;
                }
            }
            if (monthsCounter <= 0) // Checked 4 years without finding a Byday that matches
            // a Bymonthday. Maybe the rule is not correct.
            throw new Error("Malformed values in BYDAY combined with BYMONTHDAY parts");
            return dataIsValid;
        },
        next_month: function next_month() {
            var this_freq = this.rule.freq == "MONTHLY";
            var data_valid = 1;
            if (this.next_hour() == 0) return data_valid;
            if (this.has_by_data("BYDAY") && this.has_by_data("BYMONTHDAY")) data_valid = this._byDayAndMonthDay();
            else if (this.has_by_data("BYDAY")) {
                var daysInMonth = ICAL.Time.daysInMonth(this.last.month, this.last.year);
                var setpos = 0;
                var setpos_total = 0;
                if (this.has_by_data("BYSETPOS")) {
                    var last_day = this.last.day;
                    for(var day = 1; day <= daysInMonth; day++){
                        this.last.day = day;
                        if (this.is_day_in_byday(this.last)) {
                            setpos_total++;
                            if (day <= last_day) setpos++;
                        }
                    }
                    this.last.day = last_day;
                }
                data_valid = 0;
                for(var day = this.last.day + 1; day <= daysInMonth; day++){
                    this.last.day = day;
                    if (this.is_day_in_byday(this.last)) {
                        if (!this.has_by_data("BYSETPOS") || this.check_set_position(++setpos) || this.check_set_position(setpos - setpos_total - 1)) {
                            data_valid = 1;
                            break;
                        }
                    }
                }
                if (day > daysInMonth) {
                    this.last.day = 1;
                    this.increment_month();
                    if (this.is_day_in_byday(this.last)) {
                        if (!this.has_by_data("BYSETPOS") || this.check_set_position(1)) data_valid = 1;
                    } else data_valid = 0;
                }
            } else if (this.has_by_data("BYMONTHDAY")) {
                this.by_indices.BYMONTHDAY++;
                if (this.by_indices.BYMONTHDAY >= this.by_data.BYMONTHDAY.length) {
                    this.by_indices.BYMONTHDAY = 0;
                    this.increment_month();
                }
                var daysInMonth = ICAL.Time.daysInMonth(this.last.month, this.last.year);
                var day = this.by_data.BYMONTHDAY[this.by_indices.BYMONTHDAY];
                if (day < 0) day = daysInMonth + day + 1;
                if (day > daysInMonth) {
                    this.last.day = 1;
                    data_valid = this.is_day_in_byday(this.last);
                } else this.last.day = day;
            } else {
                this.increment_month();
                var daysInMonth = ICAL.Time.daysInMonth(this.last.month, this.last.year);
                if (this.by_data.BYMONTHDAY[0] > daysInMonth) data_valid = 0;
                else this.last.day = this.by_data.BYMONTHDAY[0];
            }
            return data_valid;
        },
        next_weekday_by_week: function next_weekday_by_week() {
            var end_of_data = 0;
            if (this.next_hour() == 0) return end_of_data;
            if (!this.has_by_data("BYDAY")) return 1;
            for(;;){
                var tt = new ICAL.Time();
                this.by_indices.BYDAY++;
                if (this.by_indices.BYDAY == Object.keys(this.by_data.BYDAY).length) {
                    this.by_indices.BYDAY = 0;
                    end_of_data = 1;
                }
                var coded_day = this.by_data.BYDAY[this.by_indices.BYDAY];
                var parts = this.ruleDayOfWeek(coded_day);
                var dow = parts[1];
                dow -= this.rule.wkst;
                if (dow < 0) dow += 7;
                tt.year = this.last.year;
                tt.month = this.last.month;
                tt.day = this.last.day;
                var startOfWeek = tt.startDoyWeek(this.rule.wkst);
                if (dow + startOfWeek < 1) {
                    // The selected date is in the previous year
                    if (!end_of_data) continue;
                }
                var next = ICAL.Time.fromDayOfYear(startOfWeek + dow, this.last.year);
                /**
         * The normalization horrors below are due to
         * the fact that when the year/month/day changes
         * it can effect the other operations that come after.
         */ this.last.year = next.year;
                this.last.month = next.month;
                this.last.day = next.day;
                return end_of_data;
            }
        },
        next_year: function next_year() {
            if (this.next_hour() == 0) return 0;
            if (++this.days_index == this.days.length) {
                this.days_index = 0;
                do {
                    this.increment_year(this.rule.interval);
                    this.expand_year_days(this.last.year);
                }while (this.days.length == 0);
            }
            this._nextByYearDay();
            return 1;
        },
        _nextByYearDay: function _nextByYearDay() {
            var doy = this.days[this.days_index];
            var year = this.last.year;
            if (doy < 1) {
                // Time.fromDayOfYear(doy, year) indexes relative to the
                // start of the given year. That is different from the
                // semantics of BYYEARDAY where negative indexes are an
                // offset from the end of the given year.
                doy += 1;
                year += 1;
            }
            var next = ICAL.Time.fromDayOfYear(doy, year);
            this.last.day = next.day;
            this.last.month = next.month;
        },
        /**
     * @param dow (eg: '1TU', '-1MO')
     * @param {ICAL.Time.weekDay=} aWeekStart The week start weekday
     * @return [pos, numericDow] (eg: [1, 3]) numericDow is relative to aWeekStart
     */ ruleDayOfWeek: function ruleDayOfWeek(dow, aWeekStart) {
            var matches = dow.match(/([+-]?[0-9])?(MO|TU|WE|TH|FR|SA|SU)/);
            if (matches) {
                var pos = parseInt(matches[1] || 0, 10);
                dow = ICAL.Recur.icalDayToNumericDay(matches[2], aWeekStart);
                return [
                    pos,
                    dow
                ];
            } else return [
                0,
                0
            ];
        },
        next_generic: function next_generic(aRuleType, aInterval, aDateAttr, aFollowingAttr, aPreviousIncr) {
            var has_by_rule = aRuleType in this.by_data;
            var this_freq = this.rule.freq == aInterval;
            var end_of_data = 0;
            if (aPreviousIncr && this[aPreviousIncr]() == 0) return end_of_data;
            if (has_by_rule) {
                this.by_indices[aRuleType]++;
                var idx = this.by_indices[aRuleType];
                var dta = this.by_data[aRuleType];
                if (this.by_indices[aRuleType] == dta.length) {
                    this.by_indices[aRuleType] = 0;
                    end_of_data = 1;
                }
                this.last[aDateAttr] = dta[this.by_indices[aRuleType]];
            } else if (this_freq) this["increment_" + aDateAttr](this.rule.interval);
            if (has_by_rule && end_of_data && this_freq) this["increment_" + aFollowingAttr](1);
            return end_of_data;
        },
        increment_monthday: function increment_monthday(inc) {
            for(var i = 0; i < inc; i++){
                var daysInMonth = ICAL.Time.daysInMonth(this.last.month, this.last.year);
                this.last.day++;
                if (this.last.day > daysInMonth) {
                    this.last.day -= daysInMonth;
                    this.increment_month();
                }
            }
        },
        increment_month: function increment_month() {
            this.last.day = 1;
            if (this.has_by_data("BYMONTH")) {
                this.by_indices.BYMONTH++;
                if (this.by_indices.BYMONTH == this.by_data.BYMONTH.length) {
                    this.by_indices.BYMONTH = 0;
                    this.increment_year(1);
                }
                this.last.month = this.by_data.BYMONTH[this.by_indices.BYMONTH];
            } else {
                if (this.rule.freq == "MONTHLY") this.last.month += this.rule.interval;
                else this.last.month++;
                this.last.month--;
                var years = ICAL.helpers.trunc(this.last.month / 12);
                this.last.month %= 12;
                this.last.month++;
                if (years != 0) this.increment_year(years);
            }
        },
        increment_year: function increment_year(inc) {
            this.last.year += inc;
        },
        increment_generic: function increment_generic(inc, aDateAttr, aFactor, aNextIncrement) {
            this.last[aDateAttr] += inc;
            var nextunit = ICAL.helpers.trunc(this.last[aDateAttr] / aFactor);
            this.last[aDateAttr] %= aFactor;
            if (nextunit != 0) this["increment_" + aNextIncrement](nextunit);
        },
        has_by_data: function has_by_data(aRuleType) {
            return aRuleType in this.rule.parts;
        },
        expand_year_days: function expand_year_days(aYear) {
            var t = new ICAL.Time();
            this.days = [];
            // We need our own copy with a few keys set
            var parts = {};
            var rules = [
                "BYDAY",
                "BYWEEKNO",
                "BYMONTHDAY",
                "BYMONTH",
                "BYYEARDAY"
            ];
            for(var p in rules)/* istanbul ignore else */ if (rules.hasOwnProperty(p)) {
                var part = rules[p];
                if (part in this.rule.parts) parts[part] = this.rule.parts[part];
            }
            if ("BYMONTH" in parts && "BYWEEKNO" in parts) {
                var valid = 1;
                var validWeeks = {};
                t.year = aYear;
                t.isDate = true;
                for(var monthIdx = 0; monthIdx < this.by_data.BYMONTH.length; monthIdx++){
                    var month = this.by_data.BYMONTH[monthIdx];
                    t.month = month;
                    t.day = 1;
                    var first_week = t.weekNumber(this.rule.wkst);
                    t.day = ICAL.Time.daysInMonth(month, aYear);
                    var last_week = t.weekNumber(this.rule.wkst);
                    for(monthIdx = first_week; monthIdx < last_week; monthIdx++)validWeeks[monthIdx] = 1;
                }
                for(var weekIdx = 0; weekIdx < this.by_data.BYWEEKNO.length && valid; weekIdx++){
                    var weekno = this.by_data.BYWEEKNO[weekIdx];
                    if (weekno < 52) valid &= validWeeks[weekIdx];
                    else valid = 0;
                }
                if (valid) delete parts.BYMONTH;
                else delete parts.BYWEEKNO;
            }
            var partCount = Object.keys(parts).length;
            if (partCount == 0) {
                var t1 = this.dtstart.clone();
                t1.year = this.last.year;
                this.days.push(t1.dayOfYear());
            } else if (partCount == 1 && "BYMONTH" in parts) for(var monthkey in this.by_data.BYMONTH){
                /* istanbul ignore if */ if (!this.by_data.BYMONTH.hasOwnProperty(monthkey)) continue;
                var t2 = this.dtstart.clone();
                t2.year = aYear;
                t2.month = this.by_data.BYMONTH[monthkey];
                t2.isDate = true;
                this.days.push(t2.dayOfYear());
            }
            else if (partCount == 1 && "BYMONTHDAY" in parts) for(var monthdaykey in this.by_data.BYMONTHDAY){
                /* istanbul ignore if */ if (!this.by_data.BYMONTHDAY.hasOwnProperty(monthdaykey)) continue;
                var t3 = this.dtstart.clone();
                var day_ = this.by_data.BYMONTHDAY[monthdaykey];
                if (day_ < 0) {
                    var daysInMonth = ICAL.Time.daysInMonth(t3.month, aYear);
                    day_ = day_ + daysInMonth + 1;
                }
                t3.day = day_;
                t3.year = aYear;
                t3.isDate = true;
                this.days.push(t3.dayOfYear());
            }
            else if (partCount == 2 && "BYMONTHDAY" in parts && "BYMONTH" in parts) for(var monthkey in this.by_data.BYMONTH){
                /* istanbul ignore if */ if (!this.by_data.BYMONTH.hasOwnProperty(monthkey)) continue;
                var month_ = this.by_data.BYMONTH[monthkey];
                var daysInMonth = ICAL.Time.daysInMonth(month_, aYear);
                for(var monthdaykey in this.by_data.BYMONTHDAY){
                    /* istanbul ignore if */ if (!this.by_data.BYMONTHDAY.hasOwnProperty(monthdaykey)) continue;
                    var day_ = this.by_data.BYMONTHDAY[monthdaykey];
                    if (day_ < 0) day_ = day_ + daysInMonth + 1;
                    t.day = day_;
                    t.month = month_;
                    t.year = aYear;
                    t.isDate = true;
                    this.days.push(t.dayOfYear());
                }
            }
            else if (partCount == 1 && "BYWEEKNO" in parts) ;
            else if (partCount == 2 && "BYWEEKNO" in parts && "BYMONTHDAY" in parts) ;
            else if (partCount == 1 && "BYDAY" in parts) this.days = this.days.concat(this.expand_by_day(aYear));
            else if (partCount == 2 && "BYDAY" in parts && "BYMONTH" in parts) {
                for(var monthkey in this.by_data.BYMONTH){
                    /* istanbul ignore if */ if (!this.by_data.BYMONTH.hasOwnProperty(monthkey)) continue;
                    var month = this.by_data.BYMONTH[monthkey];
                    var daysInMonth = ICAL.Time.daysInMonth(month, aYear);
                    t.year = aYear;
                    t.month = this.by_data.BYMONTH[monthkey];
                    t.day = 1;
                    t.isDate = true;
                    var first_dow = t.dayOfWeek();
                    var doy_offset = t.dayOfYear() - 1;
                    t.day = daysInMonth;
                    var last_dow = t.dayOfWeek();
                    if (this.has_by_data("BYSETPOS")) {
                        var set_pos_counter = 0;
                        var by_month_day = [];
                        for(var day = 1; day <= daysInMonth; day++){
                            t.day = day;
                            if (this.is_day_in_byday(t)) by_month_day.push(day);
                        }
                        for(var spIndex = 0; spIndex < by_month_day.length; spIndex++)if (this.check_set_position(spIndex + 1) || this.check_set_position(spIndex - by_month_day.length)) this.days.push(doy_offset + by_month_day[spIndex]);
                    } else for(var daycodedkey in this.by_data.BYDAY){
                        /* istanbul ignore if */ if (!this.by_data.BYDAY.hasOwnProperty(daycodedkey)) continue;
                        var coded_day = this.by_data.BYDAY[daycodedkey];
                        var bydayParts = this.ruleDayOfWeek(coded_day);
                        var pos = bydayParts[0];
                        var dow = bydayParts[1];
                        var month_day;
                        var first_matching_day = (dow + 7 - first_dow) % 7 + 1;
                        var last_matching_day = daysInMonth - (last_dow + 7 - dow) % 7;
                        if (pos == 0) for(var day = first_matching_day; day <= daysInMonth; day += 7)this.days.push(doy_offset + day);
                        else if (pos > 0) {
                            month_day = first_matching_day + (pos - 1) * 7;
                            if (month_day <= daysInMonth) this.days.push(doy_offset + month_day);
                        } else {
                            month_day = last_matching_day + (pos + 1) * 7;
                            if (month_day > 0) this.days.push(doy_offset + month_day);
                        }
                    }
                }
                // Return dates in order of occurrence (1,2,3,...) instead
                // of by groups of weekdays (1,8,15,...,2,9,16,...).
                this.days.sort(function(a, b) {
                    return a - b;
                }); // Comparator function allows to sort numbers.
            } else if (partCount == 2 && "BYDAY" in parts && "BYMONTHDAY" in parts) {
                var expandedDays = this.expand_by_day(aYear);
                for(var daykey in expandedDays){
                    /* istanbul ignore if */ if (!expandedDays.hasOwnProperty(daykey)) continue;
                    var day = expandedDays[daykey];
                    var tt = ICAL.Time.fromDayOfYear(day, aYear);
                    if (this.by_data.BYMONTHDAY.indexOf(tt.day) >= 0) this.days.push(day);
                }
            } else if (partCount == 3 && "BYDAY" in parts && "BYMONTHDAY" in parts && "BYMONTH" in parts) {
                var expandedDays = this.expand_by_day(aYear);
                for(var daykey in expandedDays){
                    /* istanbul ignore if */ if (!expandedDays.hasOwnProperty(daykey)) continue;
                    var day = expandedDays[daykey];
                    var tt = ICAL.Time.fromDayOfYear(day, aYear);
                    if (this.by_data.BYMONTH.indexOf(tt.month) >= 0 && this.by_data.BYMONTHDAY.indexOf(tt.day) >= 0) this.days.push(day);
                }
            } else if (partCount == 2 && "BYDAY" in parts && "BYWEEKNO" in parts) {
                var expandedDays = this.expand_by_day(aYear);
                for(var daykey in expandedDays){
                    /* istanbul ignore if */ if (!expandedDays.hasOwnProperty(daykey)) continue;
                    var day = expandedDays[daykey];
                    var tt = ICAL.Time.fromDayOfYear(day, aYear);
                    var weekno = tt.weekNumber(this.rule.wkst);
                    if (this.by_data.BYWEEKNO.indexOf(weekno)) this.days.push(day);
                }
            } else if (partCount == 3 && "BYDAY" in parts && "BYWEEKNO" in parts && "BYMONTHDAY" in parts) ;
            else if (partCount == 1 && "BYYEARDAY" in parts) this.days = this.days.concat(this.by_data.BYYEARDAY);
            else this.days = [];
            return 0;
        },
        expand_by_day: function expand_by_day(aYear) {
            var days_list = [];
            var tmp = this.last.clone();
            tmp.year = aYear;
            tmp.month = 1;
            tmp.day = 1;
            tmp.isDate = true;
            var start_dow = tmp.dayOfWeek();
            tmp.month = 12;
            tmp.day = 31;
            tmp.isDate = true;
            var end_dow = tmp.dayOfWeek();
            var end_year_day = tmp.dayOfYear();
            for(var daykey in this.by_data.BYDAY){
                /* istanbul ignore if */ if (!this.by_data.BYDAY.hasOwnProperty(daykey)) continue;
                var day = this.by_data.BYDAY[daykey];
                var parts = this.ruleDayOfWeek(day);
                var pos = parts[0];
                var dow = parts[1];
                if (pos == 0) {
                    var tmp_start_doy = (dow + 7 - start_dow) % 7 + 1;
                    for(var doy = tmp_start_doy; doy <= end_year_day; doy += 7)days_list.push(doy);
                } else if (pos > 0) {
                    var first;
                    if (dow >= start_dow) first = dow - start_dow + 1;
                    else first = dow - start_dow + 8;
                    days_list.push(first + (pos - 1) * 7);
                } else {
                    var last;
                    pos = -pos;
                    if (dow <= end_dow) last = end_year_day - end_dow + dow;
                    else last = end_year_day - end_dow + dow - 7;
                    days_list.push(last - (pos - 1) * 7);
                }
            }
            return days_list;
        },
        is_day_in_byday: function is_day_in_byday(tt) {
            for(var daykey in this.by_data.BYDAY){
                /* istanbul ignore if */ if (!this.by_data.BYDAY.hasOwnProperty(daykey)) continue;
                var day = this.by_data.BYDAY[daykey];
                var parts = this.ruleDayOfWeek(day);
                var pos = parts[0];
                var dow = parts[1];
                var this_dow = tt.dayOfWeek();
                if (pos == 0 && dow == this_dow || tt.nthWeekDay(dow, pos) == tt.day) return 1;
            }
            return 0;
        },
        /**
     * Checks if given value is in BYSETPOS.
     *
     * @private
     * @param {Numeric} aPos position to check for.
     * @return {Boolean} false unless BYSETPOS rules exist
     *                   and the given value is present in rules.
     */ check_set_position: function check_set_position(aPos) {
            if (this.has_by_data("BYSETPOS")) {
                var idx = this.by_data.BYSETPOS.indexOf(aPos);
                // negative numbers are not false-y
                return idx !== -1;
            }
            return false;
        },
        sort_byday_rules: function icalrecur_sort_byday_rules(aRules) {
            for(var i = 0; i < aRules.length; i++)for(var j = 0; j < i; j++){
                var one = this.ruleDayOfWeek(aRules[j], this.rule.wkst)[1];
                var two = this.ruleDayOfWeek(aRules[i], this.rule.wkst)[1];
                if (one > two) {
                    var tmp = aRules[i];
                    aRules[i] = aRules[j];
                    aRules[j] = tmp;
                }
            }
        },
        check_contract_restriction: function check_contract_restriction(aRuleType, v) {
            var indexMapValue = icalrecur_iterator._indexMap[aRuleType];
            var ruleMapValue = icalrecur_iterator._expandMap[this.rule.freq][indexMapValue];
            var pass = false;
            if (aRuleType in this.by_data && ruleMapValue == icalrecur_iterator.CONTRACT) {
                var ruleType = this.by_data[aRuleType];
                for(var bydatakey in ruleType){
                    /* istanbul ignore else */ if (ruleType.hasOwnProperty(bydatakey)) {
                        if (ruleType[bydatakey] == v) {
                            pass = true;
                            break;
                        }
                    }
                }
            } else // Not a contracting byrule or has no data, test passes
            pass = true;
            return pass;
        },
        check_contracting_rules: function check_contracting_rules() {
            var dow = this.last.dayOfWeek();
            var weekNo = this.last.weekNumber(this.rule.wkst);
            var doy = this.last.dayOfYear();
            return this.check_contract_restriction("BYSECOND", this.last.second) && this.check_contract_restriction("BYMINUTE", this.last.minute) && this.check_contract_restriction("BYHOUR", this.last.hour) && this.check_contract_restriction("BYDAY", ICAL.Recur.numericDayToIcalDay(dow)) && this.check_contract_restriction("BYWEEKNO", weekNo) && this.check_contract_restriction("BYMONTHDAY", this.last.day) && this.check_contract_restriction("BYMONTH", this.last.month) && this.check_contract_restriction("BYYEARDAY", doy);
        },
        setup_defaults: function setup_defaults(aRuleType, req, deftime) {
            var indexMapValue = icalrecur_iterator._indexMap[aRuleType];
            var ruleMapValue = icalrecur_iterator._expandMap[this.rule.freq][indexMapValue];
            if (ruleMapValue != icalrecur_iterator.CONTRACT) {
                if (!(aRuleType in this.by_data)) this.by_data[aRuleType] = [
                    deftime
                ];
                if (this.rule.freq != req) return this.by_data[aRuleType][0];
            }
            return deftime;
        },
        /**
     * Convert iterator into a serialize-able object.  Will preserve current
     * iteration sequence to ensure the seamless continuation of the recurrence
     * rule.
     * @return {Object}
     */ toJSON: function() {
            var result = Object.create(null);
            result.initialized = this.initialized;
            result.rule = this.rule.toJSON();
            result.dtstart = this.dtstart.toJSON();
            result.by_data = this.by_data;
            result.days = this.days;
            result.last = this.last.toJSON();
            result.by_indices = this.by_indices;
            result.occurrence_number = this.occurrence_number;
            return result;
        }
    };
    icalrecur_iterator._indexMap = {
        "BYSECOND": 0,
        "BYMINUTE": 1,
        "BYHOUR": 2,
        "BYDAY": 3,
        "BYMONTHDAY": 4,
        "BYYEARDAY": 5,
        "BYWEEKNO": 6,
        "BYMONTH": 7,
        "BYSETPOS": 8
    };
    icalrecur_iterator._expandMap = {
        "SECONDLY": [
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1
        ],
        "MINUTELY": [
            2,
            1,
            1,
            1,
            1,
            1,
            1,
            1
        ],
        "HOURLY": [
            2,
            2,
            1,
            1,
            1,
            1,
            1,
            1
        ],
        "DAILY": [
            2,
            2,
            2,
            1,
            1,
            1,
            1,
            1
        ],
        "WEEKLY": [
            2,
            2,
            2,
            2,
            3,
            3,
            1,
            1
        ],
        "MONTHLY": [
            2,
            2,
            2,
            2,
            2,
            3,
            3,
            1
        ],
        "YEARLY": [
            2,
            2,
            2,
            2,
            2,
            2,
            2,
            2
        ]
    };
    icalrecur_iterator.UNKNOWN = 0;
    icalrecur_iterator.CONTRACT = 1;
    icalrecur_iterator.EXPAND = 2;
    icalrecur_iterator.ILLEGAL = 3;
    return icalrecur_iterator;
}();
/* This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/.
 * Portions Copyright (C) Philipp Kewisch, 2011-2015 */ /**
 * This symbol is further described later on
 * @ignore
 */ ICAL.RecurExpansion = function() {
    function formatTime(item) {
        return ICAL.helpers.formatClassType(item, ICAL.Time);
    }
    function compareTime(a, b) {
        return a.compare(b);
    }
    function isRecurringComponent(comp) {
        return comp.hasProperty("rdate") || comp.hasProperty("rrule") || comp.hasProperty("recurrence-id");
    }
    /**
   * @classdesc
   * Primary class for expanding recurring rules.  Can take multiple rrules,
   * rdates, exdate(s) and iterate (in order) over each next occurrence.
   *
   * Once initialized this class can also be serialized saved and continue
   * iteration from the last point.
   *
   * NOTE: it is intended that this class is to be used
   *       with ICAL.Event which handles recurrence exceptions.
   *
   * @example
   * // assuming event is a parsed ical component
   * var event;
   *
   * var expand = new ICAL.RecurExpansion({
   *   component: event,
   *   dtstart: event.getFirstPropertyValue('dtstart')
   * });
   *
   * // remember there are infinite rules
   * // so it is a good idea to limit the scope
   * // of the iterations then resume later on.
   *
   * // next is always an ICAL.Time or null
   * var next;
   *
   * while (someCondition && (next = expand.next())) {
   *   // do something with next
   * }
   *
   * // save instance for later
   * var json = JSON.stringify(expand);
   *
   * //...
   *
   * // NOTE: if the component's properties have
   * //       changed you will need to rebuild the
   * //       class and start over. This only works
   * //       when the component's recurrence info is the same.
   * var expand = new ICAL.RecurExpansion(JSON.parse(json));
   *
   * @description
   * The options object can be filled with the specified initial values. It can
   * also contain additional members, as a result of serializing a previous
   * expansion state, as shown in the example.
   *
   * @class
   * @alias ICAL.RecurExpansion
   * @param {Object} options
   *        Recurrence expansion options
   * @param {ICAL.Time} options.dtstart
   *        Start time of the event
   * @param {ICAL.Component=} options.component
   *        Component for expansion, required if not resuming.
   */ function RecurExpansion(options) {
        this.ruleDates = [];
        this.exDates = [];
        this.fromData(options);
    }
    RecurExpansion.prototype = {
        /**
     * True when iteration is fully completed.
     * @type {Boolean}
     */ complete: false,
        /**
     * Array of rrule iterators.
     *
     * @type {ICAL.RecurIterator[]}
     * @private
     */ ruleIterators: null,
        /**
     * Array of rdate instances.
     *
     * @type {ICAL.Time[]}
     * @private
     */ ruleDates: null,
        /**
     * Array of exdate instances.
     *
     * @type {ICAL.Time[]}
     * @private
     */ exDates: null,
        /**
     * Current position in ruleDates array.
     * @type {Number}
     * @private
     */ ruleDateInc: 0,
        /**
     * Current position in exDates array
     * @type {Number}
     * @private
     */ exDateInc: 0,
        /**
     * Current negative date.
     *
     * @type {ICAL.Time}
     * @private
     */ exDate: null,
        /**
     * Current additional date.
     *
     * @type {ICAL.Time}
     * @private
     */ ruleDate: null,
        /**
     * Start date of recurring rules.
     *
     * @type {ICAL.Time}
     */ dtstart: null,
        /**
     * Last expanded time
     *
     * @type {ICAL.Time}
     */ last: null,
        /**
     * Initialize the recurrence expansion from the data object. The options
     * object may also contain additional members, see the
     * {@link ICAL.RecurExpansion constructor} for more details.
     *
     * @param {Object} options
     *        Recurrence expansion options
     * @param {ICAL.Time} options.dtstart
     *        Start time of the event
     * @param {ICAL.Component=} options.component
     *        Component for expansion, required if not resuming.
     */ fromData: function(options) {
            var start = ICAL.helpers.formatClassType(options.dtstart, ICAL.Time);
            if (!start) throw new Error(".dtstart (ICAL.Time) must be given");
            else this.dtstart = start;
            if (options.component) this._init(options.component);
            else {
                this.last = formatTime(options.last) || start.clone();
                if (!options.ruleIterators) throw new Error(".ruleIterators or .component must be given");
                this.ruleIterators = options.ruleIterators.map(function(item) {
                    return ICAL.helpers.formatClassType(item, ICAL.RecurIterator);
                });
                this.ruleDateInc = options.ruleDateInc;
                this.exDateInc = options.exDateInc;
                if (options.ruleDates) {
                    this.ruleDates = options.ruleDates.map(formatTime);
                    this.ruleDate = this.ruleDates[this.ruleDateInc];
                }
                if (options.exDates) {
                    this.exDates = options.exDates.map(formatTime);
                    this.exDate = this.exDates[this.exDateInc];
                }
                if (typeof options.complete !== "undefined") this.complete = options.complete;
            }
        },
        /**
     * Retrieve the next occurrence in the series.
     * @return {ICAL.Time}
     */ next: function() {
            var iter;
            var ruleOfDay;
            var next;
            var compare;
            var maxTries = 500;
            var currentTry = 0;
            while(true){
                if ((currentTry++) > maxTries) throw new Error("max tries have occured, rule may be impossible to forfill.");
                next = this.ruleDate;
                iter = this._nextRecurrenceIter(this.last);
                // no more matches
                // because we increment the rule day or rule
                // _after_ we choose a value this should be
                // the only spot where we need to worry about the
                // end of events.
                if (!next && !iter) {
                    // there are no more iterators or rdates
                    this.complete = true;
                    break;
                }
                // no next rule day or recurrence rule is first.
                if (!next || iter && next.compare(iter.last) > 0) {
                    // must be cloned, recur will reuse the time element.
                    next = iter.last.clone();
                    // move to next so we can continue
                    iter.next();
                }
                // if the ruleDate is still next increment it.
                if (this.ruleDate === next) this._nextRuleDay();
                this.last = next;
                // check the negative rules
                if (this.exDate) {
                    compare = this.exDate.compare(this.last);
                    if (compare < 0) this._nextExDay();
                    // if the current rule is excluded skip it.
                    if (compare === 0) {
                        this._nextExDay();
                        continue;
                    }
                }
                //XXX: The spec states that after we resolve the final
                //     list of dates we execute exdate this seems somewhat counter
                //     intuitive to what I have seen most servers do so for now
                //     I exclude based on the original date not the one that may
                //     have been modified by the exception.
                return this.last;
            }
        },
        /**
     * Converts object into a serialize-able format. This format can be passed
     * back into the expansion to resume iteration.
     * @return {Object}
     */ toJSON: function() {
            function toJSON(item) {
                return item.toJSON();
            }
            var result = Object.create(null);
            result.ruleIterators = this.ruleIterators.map(toJSON);
            if (this.ruleDates) result.ruleDates = this.ruleDates.map(toJSON);
            if (this.exDates) result.exDates = this.exDates.map(toJSON);
            result.ruleDateInc = this.ruleDateInc;
            result.exDateInc = this.exDateInc;
            result.last = this.last.toJSON();
            result.dtstart = this.dtstart.toJSON();
            result.complete = this.complete;
            return result;
        },
        /**
     * Extract all dates from the properties in the given component. The
     * properties will be filtered by the property name.
     *
     * @private
     * @param {ICAL.Component} component        The component to search in
     * @param {String} propertyName             The property name to search for
     * @return {ICAL.Time[]}                    The extracted dates.
     */ _extractDates: function(component, propertyName) {
            function handleProp(prop) {
                idx = ICAL.helpers.binsearchInsert(result, prop, compareTime);
                // ordered insert
                result.splice(idx, 0, prop);
            }
            var result = [];
            var props = component.getAllProperties(propertyName);
            var len = props.length;
            var i = 0;
            var prop1;
            var idx;
            for(; i < len; i++)props[i].getValues().forEach(handleProp);
            return result;
        },
        /**
     * Initialize the recurrence expansion.
     *
     * @private
     * @param {ICAL.Component} component    The component to initialize from.
     */ _init: function(component) {
            this.ruleIterators = [];
            this.last = this.dtstart.clone();
            // to provide api consistency non-recurring
            // events can also use the iterator though it will
            // only return a single time.
            if (!isRecurringComponent(component)) {
                this.ruleDate = this.last.clone();
                this.complete = true;
                return;
            }
            if (component.hasProperty("rdate")) {
                this.ruleDates = this._extractDates(component, "rdate");
                // special hack for cases where first rdate is prior
                // to the start date. We only check for the first rdate.
                // This is mostly for google's crazy recurring date logic
                // (contacts birthdays).
                if (this.ruleDates[0] && this.ruleDates[0].compare(this.dtstart) < 0) {
                    this.ruleDateInc = 0;
                    this.last = this.ruleDates[0].clone();
                } else this.ruleDateInc = ICAL.helpers.binsearchInsert(this.ruleDates, this.last, compareTime);
                this.ruleDate = this.ruleDates[this.ruleDateInc];
            }
            if (component.hasProperty("rrule")) {
                var rules = component.getAllProperties("rrule");
                var i = 0;
                var len = rules.length;
                var rule;
                var iter;
                for(; i < len; i++){
                    rule = rules[i].getFirstValue();
                    iter = rule.iterator(this.dtstart);
                    this.ruleIterators.push(iter);
                    // increment to the next occurrence so future
                    // calls to next return times beyond the initial iteration.
                    // XXX: I find this suspicious might be a bug?
                    iter.next();
                }
            }
            if (component.hasProperty("exdate")) {
                this.exDates = this._extractDates(component, "exdate");
                // if we have a .last day we increment the index to beyond it.
                this.exDateInc = ICAL.helpers.binsearchInsert(this.exDates, this.last, compareTime);
                this.exDate = this.exDates[this.exDateInc];
            }
        },
        /**
     * Advance to the next exdate
     * @private
     */ _nextExDay: function() {
            this.exDate = this.exDates[++this.exDateInc];
        },
        /**
     * Advance to the next rule date
     * @private
     */ _nextRuleDay: function() {
            this.ruleDate = this.ruleDates[++this.ruleDateInc];
        },
        /**
     * Find and return the recurrence rule with the most recent event and
     * return it.
     *
     * @private
     * @return {?ICAL.RecurIterator}    Found iterator.
     */ _nextRecurrenceIter: function() {
            var iters = this.ruleIterators;
            if (iters.length === 0) return null;
            var len = iters.length;
            var iter;
            var iterTime;
            var iterIdx = 0;
            var chosenIter;
            // loop through each iterator
            for(; iterIdx < len; iterIdx++){
                iter = iters[iterIdx];
                iterTime = iter.last;
                // if iteration is complete
                // then we must exclude it from
                // the search and remove it.
                if (iter.completed) {
                    len--;
                    if (iterIdx !== 0) iterIdx--;
                    iters.splice(iterIdx, 1);
                    continue;
                }
                // find the most recent possible choice
                if (!chosenIter || chosenIter.last.compare(iterTime) > 0) // that iterator is saved
                chosenIter = iter;
            }
            // the chosen iterator is returned but not mutated
            // this iterator contains the most recent event.
            return chosenIter;
        }
    };
    return RecurExpansion;
}();
/* This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/.
 * Portions Copyright (C) Philipp Kewisch, 2011-2015 */ /**
 * This symbol is further described later on
 * @ignore
 */ ICAL.Event = function() {
    /**
   * @classdesc
   * ICAL.js is organized into multiple layers. The bottom layer is a raw jCal
   * object, followed by the component/property layer. The highest level is the
   * event representation, which this class is part of. See the
   * {@tutorial layers} guide for more details.
   *
   * @class
   * @alias ICAL.Event
   * @param {ICAL.Component=} component         The ICAL.Component to base this event on
   * @param {Object} options                    Options for this event
   * @param {Boolean} options.strictExceptions
   *          When true, will verify exceptions are related by their UUID
   * @param {Array<ICAL.Component|ICAL.Event>} options.exceptions
   *          Exceptions to this event, either as components or events. If not
   *            specified exceptions will automatically be set in relation of
   *            component's parent
   */ function Event(component, options) {
        if (!(component instanceof ICAL.Component)) {
            options = component;
            component = null;
        }
        if (component) this.component = component;
        else this.component = new ICAL.Component("vevent");
        this._rangeExceptionCache = Object.create(null);
        this.exceptions = Object.create(null);
        this.rangeExceptions = [];
        if (options && options.strictExceptions) this.strictExceptions = options.strictExceptions;
        if (options && options.exceptions) options.exceptions.forEach(this.relateException, this);
        else if (this.component.parent && !this.isRecurrenceException()) this.component.parent.getAllSubcomponents("vevent").forEach(function(event) {
            if (event.hasProperty("recurrence-id")) this.relateException(event);
        }, this);
    }
    Event.prototype = {
        THISANDFUTURE: "THISANDFUTURE",
        /**
     * List of related event exceptions.
     *
     * @type {ICAL.Event[]}
     */ exceptions: null,
        /**
     * When true, will verify exceptions are related by their UUID.
     *
     * @type {Boolean}
     */ strictExceptions: false,
        /**
     * Relates a given event exception to this object.  If the given component
     * does not share the UID of this event it cannot be related and will throw
     * an exception.
     *
     * If this component is an exception it cannot have other exceptions
     * related to it.
     *
     * @param {ICAL.Component|ICAL.Event} obj       Component or event
     */ relateException: function(obj) {
            if (this.isRecurrenceException()) throw new Error("cannot relate exception to exceptions");
            if (obj instanceof ICAL.Component) obj = new ICAL.Event(obj);
            if (this.strictExceptions && obj.uid !== this.uid) throw new Error("attempted to relate unrelated exception");
            var id = obj.recurrenceId.toString();
            // we don't sort or manage exceptions directly
            // here the recurrence expander handles that.
            this.exceptions[id] = obj;
            // index RANGE=THISANDFUTURE exceptions so we can
            // look them up later in getOccurrenceDetails.
            if (obj.modifiesFuture()) {
                var item = [
                    obj.recurrenceId.toUnixTime(),
                    id
                ];
                // we keep them sorted so we can find the nearest
                // value later on...
                var idx = ICAL.helpers.binsearchInsert(this.rangeExceptions, item, compareRangeException);
                this.rangeExceptions.splice(idx, 0, item);
            }
        },
        /**
     * Checks if this record is an exception and has the RANGE=THISANDFUTURE
     * value.
     *
     * @return {Boolean}        True, when exception is within range
     */ modifiesFuture: function() {
            if (!this.component.hasProperty("recurrence-id")) return false;
            var range = this.component.getFirstProperty("recurrence-id").getParameter("range");
            return range === this.THISANDFUTURE;
        },
        /**
     * Finds the range exception nearest to the given date.
     *
     * @param {ICAL.Time} time usually an occurrence time of an event
     * @return {?ICAL.Event} the related event/exception or null
     */ findRangeException: function(time) {
            if (!this.rangeExceptions.length) return null;
            var utc = time.toUnixTime();
            var idx = ICAL.helpers.binsearchInsert(this.rangeExceptions, [
                utc
            ], compareRangeException);
            idx -= 1;
            // occurs before
            if (idx < 0) return null;
            var rangeItem = this.rangeExceptions[idx];
            /* istanbul ignore next: sanity check only */ if (utc < rangeItem[0]) return null;
            return rangeItem[1];
        },
        /**
     * This object is returned by {@link ICAL.Event#getOccurrenceDetails getOccurrenceDetails}
     *
     * @typedef {Object} occurrenceDetails
     * @memberof ICAL.Event
     * @property {ICAL.Time} recurrenceId       The passed in recurrence id
     * @property {ICAL.Event} item              The occurrence
     * @property {ICAL.Time} startDate          The start of the occurrence
     * @property {ICAL.Time} endDate            The end of the occurrence
     */ /**
     * Returns the occurrence details based on its start time.  If the
     * occurrence has an exception will return the details for that exception.
     *
     * NOTE: this method is intend to be used in conjunction
     *       with the {@link ICAL.Event#iterator iterator} method.
     *
     * @param {ICAL.Time} occurrence time occurrence
     * @return {ICAL.Event.occurrenceDetails} Information about the occurrence
     */ getOccurrenceDetails: function(occurrence) {
            var id = occurrence.toString();
            var utcId = occurrence.convertToZone(ICAL.Timezone.utcTimezone).toString();
            var item;
            var result = {
                //XXX: Clone?
                recurrenceId: occurrence
            };
            if (id in this.exceptions) {
                item = result.item = this.exceptions[id];
                result.startDate = item.startDate;
                result.endDate = item.endDate;
                result.item = item;
            } else if (utcId in this.exceptions) {
                item = this.exceptions[utcId];
                result.startDate = item.startDate;
                result.endDate = item.endDate;
                result.item = item;
            } else {
                // range exceptions (RANGE=THISANDFUTURE) have a
                // lower priority then direct exceptions but
                // must be accounted for first. Their item is
                // always the first exception with the range prop.
                var rangeExceptionId = this.findRangeException(occurrence);
                var end;
                if (rangeExceptionId) {
                    var exception = this.exceptions[rangeExceptionId];
                    // range exception must modify standard time
                    // by the difference (if any) in start/end times.
                    result.item = exception;
                    var startDiff = this._rangeExceptionCache[rangeExceptionId];
                    if (!startDiff) {
                        var original = exception.recurrenceId.clone();
                        var newStart = exception.startDate.clone();
                        // zones must be same otherwise subtract may be incorrect.
                        original.zone = newStart.zone;
                        startDiff = newStart.subtractDate(original);
                        this._rangeExceptionCache[rangeExceptionId] = startDiff;
                    }
                    var start = occurrence.clone();
                    start.zone = exception.startDate.zone;
                    start.addDuration(startDiff);
                    end = start.clone();
                    end.addDuration(exception.duration);
                    result.startDate = start;
                    result.endDate = end;
                } else {
                    // no range exception standard expansion
                    end = occurrence.clone();
                    end.addDuration(this.duration);
                    result.endDate = end;
                    result.startDate = occurrence;
                    result.item = this;
                }
            }
            return result;
        },
        /**
     * Builds a recur expansion instance for a specific point in time (defaults
     * to startDate).
     *
     * @param {ICAL.Time} startTime     Starting point for expansion
     * @return {ICAL.RecurExpansion}    Expansion object
     */ iterator: function(startTime) {
            return new ICAL.RecurExpansion({
                component: this.component,
                dtstart: startTime || this.startDate
            });
        },
        /**
     * Checks if the event is recurring
     *
     * @return {Boolean}        True, if event is recurring
     */ isRecurring: function() {
            var comp = this.component;
            return comp.hasProperty("rrule") || comp.hasProperty("rdate");
        },
        /**
     * Checks if the event describes a recurrence exception. See
     * {@tutorial terminology} for details.
     *
     * @return {Boolean}    True, if the event describes a recurrence exception
     */ isRecurrenceException: function() {
            return this.component.hasProperty("recurrence-id");
        },
        /**
     * Returns the types of recurrences this event may have.
     *
     * Returned as an object with the following possible keys:
     *
     *    - YEARLY
     *    - MONTHLY
     *    - WEEKLY
     *    - DAILY
     *    - MINUTELY
     *    - SECONDLY
     *
     * @return {Object.<ICAL.Recur.frequencyValues, Boolean>}
     *          Object of recurrence flags
     */ getRecurrenceTypes: function() {
            var rules = this.component.getAllProperties("rrule");
            var i = 0;
            var len = rules.length;
            var result = Object.create(null);
            for(; i < len; i++){
                var value = rules[i].getFirstValue();
                result[value.freq] = true;
            }
            return result;
        },
        /**
     * The uid of this event
     * @type {String}
     */ get uid () {
            return this._firstProp("uid");
        },
        set uid (value){
            this._setProp("uid", value);
        },
        /**
     * The start date
     * @type {ICAL.Time}
     */ get startDate () {
            return this._firstProp("dtstart");
        },
        set startDate (value){
            this._setTime("dtstart", value);
        },
        /**
     * The end date. This can be the result directly from the property, or the
     * end date calculated from start date and duration. Setting the property
     * will remove any duration properties.
     * @type {ICAL.Time}
     */ get endDate () {
            var endDate = this._firstProp("dtend");
            if (!endDate) {
                var duration = this._firstProp("duration");
                endDate = this.startDate.clone();
                if (duration) endDate.addDuration(duration);
                else if (endDate.isDate) endDate.day += 1;
            }
            return endDate;
        },
        set endDate (value){
            if (this.component.hasProperty("duration")) this.component.removeProperty("duration");
            this._setTime("dtend", value);
        },
        /**
     * The duration. This can be the result directly from the property, or the
     * duration calculated from start date and end date. Setting the property
     * will remove any `dtend` properties.
     * @type {ICAL.Duration}
     */ get duration () {
            var duration1 = this._firstProp("duration");
            if (!duration1) return this.endDate.subtractDateTz(this.startDate);
            return duration1;
        },
        set duration (value){
            if (this.component.hasProperty("dtend")) this.component.removeProperty("dtend");
            this._setProp("duration", value);
        },
        /**
     * The location of the event.
     * @type {String}
     */ get location () {
            return this._firstProp("location");
        },
        set location (value){
            return this._setProp("location", value);
        },
        /**
     * The attendees in the event
     * @type {ICAL.Property[]}
     * @readonly
     */ get attendees () {
            //XXX: This is way lame we should have a better
            //     data structure for this later.
            return this.component.getAllProperties("attendee");
        },
        /**
     * The event summary
     * @type {String}
     */ get summary () {
            return this._firstProp("summary");
        },
        set summary (value){
            this._setProp("summary", value);
        },
        /**
     * The event description.
     * @type {String}
     */ get description () {
            return this._firstProp("description");
        },
        set description (value){
            this._setProp("description", value);
        },
        /**
     * The event color from [rfc7986](https://datatracker.ietf.org/doc/html/rfc7986)
     * @type {String}
     */ get color () {
            return this._firstProp("color");
        },
        set color (value){
            this._setProp("color", value);
        },
        /**
     * The organizer value as an uri. In most cases this is a mailto: uri, but
     * it can also be something else, like urn:uuid:...
     * @type {String}
     */ get organizer () {
            return this._firstProp("organizer");
        },
        set organizer (value){
            this._setProp("organizer", value);
        },
        /**
     * The sequence value for this event. Used for scheduling
     * see {@tutorial terminology}.
     * @type {Number}
     */ get sequence () {
            return this._firstProp("sequence");
        },
        set sequence (value){
            this._setProp("sequence", value);
        },
        /**
     * The recurrence id for this event. See {@tutorial terminology} for details.
     * @type {ICAL.Time}
     */ get recurrenceId () {
            return this._firstProp("recurrence-id");
        },
        set recurrenceId (value){
            this._setTime("recurrence-id", value);
        },
        /**
     * Set/update a time property's value.
     * This will also update the TZID of the property.
     *
     * TODO: this method handles the case where we are switching
     * from a known timezone to an implied timezone (one without TZID).
     * This does _not_ handle the case of moving between a known
     *  (by TimezoneService) timezone to an unknown timezone...
     *
     * We will not add/remove/update the VTIMEZONE subcomponents
     *  leading to invalid ICAL data...
     * @private
     * @param {String} propName     The property name
     * @param {ICAL.Time} time      The time to set
     */ _setTime: function(propName, time) {
            var prop = this.component.getFirstProperty(propName);
            if (!prop) {
                prop = new ICAL.Property(propName);
                this.component.addProperty(prop);
            }
            // utc and local don't get a tzid
            if (time.zone === ICAL.Timezone.localTimezone || time.zone === ICAL.Timezone.utcTimezone) // remove the tzid
            prop.removeParameter("tzid");
            else prop.setParameter("tzid", time.zone.tzid);
            prop.setValue(time);
        },
        _setProp: function(name, value) {
            this.component.updatePropertyWithValue(name, value);
        },
        _firstProp: function(name) {
            return this.component.getFirstPropertyValue(name);
        },
        /**
     * The string representation of this event.
     * @return {String}
     */ toString: function() {
            return this.component.toString();
        }
    };
    function compareRangeException(a, b) {
        if (a[0] > b[0]) return 1;
        if (b[0] > a[0]) return -1;
        return 0;
    }
    return Event;
}();
/* This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/.
 * Portions Copyright (C) Philipp Kewisch, 2011-2015 */ /**
 * This symbol is further described later on
 * @ignore
 */ ICAL.ComponentParser = function() {
    /**
   * @classdesc
   * The ComponentParser is used to process a String or jCal Object,
   * firing callbacks for various found components, as well as completion.
   *
   * @example
   * var options = {
   *   // when false no events will be emitted for type
   *   parseEvent: true,
   *   parseTimezone: true
   * };
   *
   * var parser = new ICAL.ComponentParser(options);
   *
   * parser.onevent(eventComponent) {
   *   //...
   * }
   *
   * // ontimezone, etc...
   *
   * parser.oncomplete = function() {
   *
   * };
   *
   * parser.process(stringOrComponent);
   *
   * @class
   * @alias ICAL.ComponentParser
   * @param {Object=} options        Component parser options
   * @param {Boolean} options.parseEvent        Whether events should be parsed
   * @param {Boolean} options.parseTimezeone    Whether timezones should be parsed
   */ function ComponentParser(options) {
        if (typeof options === "undefined") options = {};
        var key;
        for(key in options)/* istanbul ignore else */ if (options.hasOwnProperty(key)) this[key] = options[key];
    }
    ComponentParser.prototype = {
        /**
     * When true, parse events
     *
     * @type {Boolean}
     */ parseEvent: true,
        /**
     * When true, parse timezones
     *
     * @type {Boolean}
     */ parseTimezone: true,
        /* SAX like events here for reference */ /**
     * Fired when parsing is complete
     * @callback
     */ oncomplete: /* istanbul ignore next */ function() {},
        /**
     * Fired if an error occurs during parsing.
     *
     * @callback
     * @param {Error} err details of error
     */ onerror: /* istanbul ignore next */ function(err) {},
        /**
     * Fired when a top level component (VTIMEZONE) is found
     *
     * @callback
     * @param {ICAL.Timezone} component     Timezone object
     */ ontimezone: /* istanbul ignore next */ function(component) {},
        /**
     * Fired when a top level component (VEVENT) is found.
     *
     * @callback
     * @param {ICAL.Event} component    Top level component
     */ onevent: /* istanbul ignore next */ function(component) {},
        /**
     * Process a string or parse ical object.  This function itself will return
     * nothing but will start the parsing process.
     *
     * Events must be registered prior to calling this method.
     *
     * @param {ICAL.Component|String|Object} ical      The component to process,
     *        either in its final form, as a jCal Object, or string representation
     */ process: function(ical) {
            //TODO: this is sync now in the future we will have a incremental parser.
            if (typeof ical === "string") ical = ICAL.parse(ical);
            if (!(ical instanceof ICAL.Component)) ical = new ICAL.Component(ical);
            var components = ical.getAllSubcomponents();
            var i = 0;
            var len = components.length;
            var component;
            for(; i < len; i++){
                component = components[i];
                switch(component.name){
                    case "vtimezone":
                        if (this.parseTimezone) {
                            var tzid = component.getFirstPropertyValue("tzid");
                            if (tzid) this.ontimezone(new ICAL.Timezone({
                                tzid: tzid,
                                component: component
                            }));
                        }
                        break;
                    case "vevent":
                        if (this.parseEvent) this.onevent(new ICAL.Event(component));
                        break;
                    default:
                        continue;
                }
            }
            //XXX: ideally we should do a "nextTick" here
            //     so in all cases this is actually async.
            this.oncomplete();
        }
    };
    return ComponentParser;
}();

},{}],"6auJa":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "stop_scan", ()=>stop_scan);
parcelHelpers.export(exports, "start_scan", ()=>start_scan);
var _jsqr = require("jsqr");
var _jsqrDefault = parcelHelpers.interopDefault(_jsqr);
let video = document.querySelector("video");
let intv;
let mediaStream;
let stop_scan = function(callback) {
    mediaStream.getTracks().map(function(val) {
        val.stop();
    });
    document.getElementById("qr-screen").style.display = "none";
    callback();
};
let start_scan = function(callback) {
    document.getElementById("qr-screen").style.display = "block";
    navigator.getUserMedia = navigator.getUserMedia || navigator.webkitGetUserMedia || navigator.mozGetUserMedia;
    if (navigator.getUserMedia) navigator.getUserMedia({
        audio: false,
        video: {
            width: 200,
            height: 200
        }
    }, function(stream) {
        video.srcObject = stream;
        console.log(stream);
        mediaStream = stream;
        video.onloadedmetadata = function(e) {
            video.play();
            var barcodeCanvas = document.createElement("canvas");
            intv = setInterval(()=>{
                barcodeCanvas.width = video.videoWidth;
                barcodeCanvas.height = video.videoHeight;
                var barcodeContext = barcodeCanvas.getContext("2d");
                var imageWidth = Math.max(1, Math.floor(video.videoWidth)), imageHeight = Math.max(1, Math.floor(video.videoHeight));
                barcodeContext.drawImage(video, 0, 0, imageWidth, imageHeight);
                var imageData = barcodeContext.getImageData(0, 0, imageWidth, imageHeight);
                var idd = imageData.data;
                let code = (0, _jsqrDefault.default)(idd, imageWidth, imageHeight);
                if (code) {
                    clearInterval(intv);
                    callback(code.data);
                    stop_scan();
                }
            }, 1000);
        };
    }, function(err) {
        console.log("The following error occurred: " + err.name);
    });
    else console.log("getUserMedia not supported");
};

},{"jsqr":"04jWG","@parcel/transformer-js/src/esmodule-helpers.js":"j7FRh"}],"04jWG":[function(require,module,exports) {
(function webpackUniversalModuleDefinition(root, factory) {
    module.exports = factory();
})(typeof self !== "undefined" ? self : this, function() {
    return /******/ function(modules) {
        /******/ // The module cache
        /******/ var installedModules = {};
        /******/ /******/ // The require function
        /******/ function __webpack_require__(moduleId) {
            /******/ /******/ // Check if module is in cache
            /******/ if (installedModules[moduleId]) /******/ return installedModules[moduleId].exports;
            /******/ // Create a new module (and put it into the cache)
            /******/ var module = installedModules[moduleId] = {
                /******/ i: moduleId,
                /******/ l: false,
                /******/ exports: {}
            };
            /******/ /******/ // Execute the module function
            /******/ modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
            /******/ /******/ // Flag the module as loaded
            /******/ module.l = true;
            /******/ /******/ // Return the exports of the module
            /******/ return module.exports;
        /******/ }
        /******/ /******/ /******/ // expose the modules object (__webpack_modules__)
        /******/ __webpack_require__.m = modules;
        /******/ /******/ // expose the module cache
        /******/ __webpack_require__.c = installedModules;
        /******/ /******/ // define getter function for harmony exports
        /******/ __webpack_require__.d = function(exports, name, getter) {
            /******/ if (!__webpack_require__.o(exports, name)) /******/ Object.defineProperty(exports, name, {
                /******/ configurable: false,
                /******/ enumerable: true,
                /******/ get: getter
            });
        /******/ };
        /******/ /******/ // getDefaultExport function for compatibility with non-harmony modules
        /******/ __webpack_require__.n = function(module) {
            /******/ var getter = module && module.__esModule ? /******/ function getDefault() {
                return module["default"];
            } : /******/ function getModuleExports() {
                return module;
            };
            /******/ __webpack_require__.d(getter, "a", getter);
            /******/ return getter;
        /******/ };
        /******/ /******/ // Object.prototype.hasOwnProperty.call
        /******/ __webpack_require__.o = function(object, property) {
            return Object.prototype.hasOwnProperty.call(object, property);
        };
        /******/ /******/ // __webpack_public_path__
        /******/ __webpack_require__.p = "";
        /******/ /******/ // Load entry module and return exports
        /******/ return __webpack_require__(__webpack_require__.s = 3);
    /******/ }([
        /* 0 */ /***/ function(module, exports, __webpack_require__) {
            "use strict";
            Object.defineProperty(exports, "__esModule", {
                value: true
            });
            var BitMatrix1 = /** @class */ function() {
                function BitMatrix(data, width) {
                    this.width = width;
                    this.height = data.length / width;
                    this.data = data;
                }
                BitMatrix.createEmpty = function(width, height) {
                    return new BitMatrix(new Uint8ClampedArray(width * height), width);
                };
                BitMatrix.prototype.get = function(x, y) {
                    if (x < 0 || x >= this.width || y < 0 || y >= this.height) return false;
                    return !!this.data[y * this.width + x];
                };
                BitMatrix.prototype.set = function(x, y, v) {
                    this.data[y * this.width + x] = v ? 1 : 0;
                };
                BitMatrix.prototype.setRegion = function(left, top, width, height, v) {
                    for(var y = top; y < top + height; y++)for(var x = left; x < left + width; x++)this.set(x, y, !!v);
                };
                return BitMatrix;
            }();
            exports.BitMatrix = BitMatrix1;
        /***/ },
        /* 1 */ /***/ function(module, exports, __webpack_require__) {
            "use strict";
            Object.defineProperty(exports, "__esModule", {
                value: true
            });
            var GenericGFPoly_1 = __webpack_require__(2);
            function addOrSubtractGF(a, b) {
                return a ^ b; // tslint:disable-line:no-bitwise
            }
            exports.addOrSubtractGF = addOrSubtractGF;
            var GenericGF1 = /** @class */ function() {
                function GenericGF(primitive, size, genBase) {
                    this.primitive = primitive;
                    this.size = size;
                    this.generatorBase = genBase;
                    this.expTable = new Array(this.size);
                    this.logTable = new Array(this.size);
                    var x = 1;
                    for(var i = 0; i < this.size; i++){
                        this.expTable[i] = x;
                        x = x * 2;
                        if (x >= this.size) x = (x ^ this.primitive) & this.size - 1; // tslint:disable-line:no-bitwise
                    }
                    for(var i = 0; i < this.size - 1; i++)this.logTable[this.expTable[i]] = i;
                    this.zero = new GenericGFPoly_1.default(this, Uint8ClampedArray.from([
                        0
                    ]));
                    this.one = new GenericGFPoly_1.default(this, Uint8ClampedArray.from([
                        1
                    ]));
                }
                GenericGF.prototype.multiply = function(a, b) {
                    if (a === 0 || b === 0) return 0;
                    return this.expTable[(this.logTable[a] + this.logTable[b]) % (this.size - 1)];
                };
                GenericGF.prototype.inverse = function(a) {
                    if (a === 0) throw new Error("Can't invert 0");
                    return this.expTable[this.size - this.logTable[a] - 1];
                };
                GenericGF.prototype.buildMonomial = function(degree, coefficient) {
                    if (degree < 0) throw new Error("Invalid monomial degree less than 0");
                    if (coefficient === 0) return this.zero;
                    var coefficients = new Uint8ClampedArray(degree + 1);
                    coefficients[0] = coefficient;
                    return new GenericGFPoly_1.default(this, coefficients);
                };
                GenericGF.prototype.log = function(a) {
                    if (a === 0) throw new Error("Can't take log(0)");
                    return this.logTable[a];
                };
                GenericGF.prototype.exp = function(a) {
                    return this.expTable[a];
                };
                return GenericGF;
            }();
            exports.default = GenericGF1;
        /***/ },
        /* 2 */ /***/ function(module, exports, __webpack_require__) {
            "use strict";
            Object.defineProperty(exports, "__esModule", {
                value: true
            });
            var GenericGF_1 = __webpack_require__(1);
            var GenericGFPoly1 = /** @class */ function() {
                function GenericGFPoly(field, coefficients) {
                    if (coefficients.length === 0) throw new Error("No coefficients.");
                    this.field = field;
                    var coefficientsLength = coefficients.length;
                    if (coefficientsLength > 1 && coefficients[0] === 0) {
                        // Leading term must be non-zero for anything except the constant polynomial "0"
                        var firstNonZero = 1;
                        while(firstNonZero < coefficientsLength && coefficients[firstNonZero] === 0)firstNonZero++;
                        if (firstNonZero === coefficientsLength) this.coefficients = field.zero.coefficients;
                        else {
                            this.coefficients = new Uint8ClampedArray(coefficientsLength - firstNonZero);
                            for(var i = 0; i < this.coefficients.length; i++)this.coefficients[i] = coefficients[firstNonZero + i];
                        }
                    } else this.coefficients = coefficients;
                }
                GenericGFPoly.prototype.degree = function() {
                    return this.coefficients.length - 1;
                };
                GenericGFPoly.prototype.isZero = function() {
                    return this.coefficients[0] === 0;
                };
                GenericGFPoly.prototype.getCoefficient = function(degree) {
                    return this.coefficients[this.coefficients.length - 1 - degree];
                };
                GenericGFPoly.prototype.addOrSubtract = function(other) {
                    var _a;
                    if (this.isZero()) return other;
                    if (other.isZero()) return this;
                    var smallerCoefficients = this.coefficients;
                    var largerCoefficients = other.coefficients;
                    if (smallerCoefficients.length > largerCoefficients.length) _a = [
                        largerCoefficients,
                        smallerCoefficients
                    ], smallerCoefficients = _a[0], largerCoefficients = _a[1];
                    var sumDiff = new Uint8ClampedArray(largerCoefficients.length);
                    var lengthDiff = largerCoefficients.length - smallerCoefficients.length;
                    for(var i = 0; i < lengthDiff; i++)sumDiff[i] = largerCoefficients[i];
                    for(var i = lengthDiff; i < largerCoefficients.length; i++)sumDiff[i] = GenericGF_1.addOrSubtractGF(smallerCoefficients[i - lengthDiff], largerCoefficients[i]);
                    return new GenericGFPoly(this.field, sumDiff);
                };
                GenericGFPoly.prototype.multiply = function(scalar) {
                    if (scalar === 0) return this.field.zero;
                    if (scalar === 1) return this;
                    var size = this.coefficients.length;
                    var product = new Uint8ClampedArray(size);
                    for(var i = 0; i < size; i++)product[i] = this.field.multiply(this.coefficients[i], scalar);
                    return new GenericGFPoly(this.field, product);
                };
                GenericGFPoly.prototype.multiplyPoly = function(other) {
                    if (this.isZero() || other.isZero()) return this.field.zero;
                    var aCoefficients = this.coefficients;
                    var aLength = aCoefficients.length;
                    var bCoefficients = other.coefficients;
                    var bLength = bCoefficients.length;
                    var product = new Uint8ClampedArray(aLength + bLength - 1);
                    for(var i = 0; i < aLength; i++){
                        var aCoeff = aCoefficients[i];
                        for(var j = 0; j < bLength; j++)product[i + j] = GenericGF_1.addOrSubtractGF(product[i + j], this.field.multiply(aCoeff, bCoefficients[j]));
                    }
                    return new GenericGFPoly(this.field, product);
                };
                GenericGFPoly.prototype.multiplyByMonomial = function(degree, coefficient) {
                    if (degree < 0) throw new Error("Invalid degree less than 0");
                    if (coefficient === 0) return this.field.zero;
                    var size = this.coefficients.length;
                    var product = new Uint8ClampedArray(size + degree);
                    for(var i = 0; i < size; i++)product[i] = this.field.multiply(this.coefficients[i], coefficient);
                    return new GenericGFPoly(this.field, product);
                };
                GenericGFPoly.prototype.evaluateAt = function(a) {
                    var result = 0;
                    if (a === 0) // Just return the x^0 coefficient
                    return this.getCoefficient(0);
                    var size = this.coefficients.length;
                    if (a === 1) {
                        // Just the sum of the coefficients
                        this.coefficients.forEach(function(coefficient) {
                            result = GenericGF_1.addOrSubtractGF(result, coefficient);
                        });
                        return result;
                    }
                    result = this.coefficients[0];
                    for(var i = 1; i < size; i++)result = GenericGF_1.addOrSubtractGF(this.field.multiply(a, result), this.coefficients[i]);
                    return result;
                };
                return GenericGFPoly;
            }();
            exports.default = GenericGFPoly1;
        /***/ },
        /* 3 */ /***/ function(module, exports, __webpack_require__) {
            "use strict";
            Object.defineProperty(exports, "__esModule", {
                value: true
            });
            var binarizer_1 = __webpack_require__(4);
            var decoder_1 = __webpack_require__(5);
            var extractor_1 = __webpack_require__(11);
            var locator_1 = __webpack_require__(12);
            function scan(matrix) {
                var locations = locator_1.locate(matrix);
                if (!locations) return null;
                for(var _i = 0, locations_1 = locations; _i < locations_1.length; _i++){
                    var location_1 = locations_1[_i];
                    var extracted = extractor_1.extract(matrix, location_1);
                    var decoded = decoder_1.decode(extracted.matrix);
                    if (decoded) return {
                        binaryData: decoded.bytes,
                        data: decoded.text,
                        chunks: decoded.chunks,
                        version: decoded.version,
                        location: {
                            topRightCorner: extracted.mappingFunction(location_1.dimension, 0),
                            topLeftCorner: extracted.mappingFunction(0, 0),
                            bottomRightCorner: extracted.mappingFunction(location_1.dimension, location_1.dimension),
                            bottomLeftCorner: extracted.mappingFunction(0, location_1.dimension),
                            topRightFinderPattern: location_1.topRight,
                            topLeftFinderPattern: location_1.topLeft,
                            bottomLeftFinderPattern: location_1.bottomLeft,
                            bottomRightAlignmentPattern: location_1.alignmentPattern
                        }
                    };
                }
                return null;
            }
            var defaultOptions = {
                inversionAttempts: "attemptBoth"
            };
            function jsQR(data, width, height, providedOptions) {
                if (providedOptions === void 0) providedOptions = {};
                var options = defaultOptions;
                Object.keys(options || {}).forEach(function(opt) {
                    options[opt] = providedOptions[opt] || options[opt];
                });
                var shouldInvert = options.inversionAttempts === "attemptBoth" || options.inversionAttempts === "invertFirst";
                var tryInvertedFirst = options.inversionAttempts === "onlyInvert" || options.inversionAttempts === "invertFirst";
                var _a = binarizer_1.binarize(data, width, height, shouldInvert), binarized = _a.binarized, inverted = _a.inverted;
                var result = scan(tryInvertedFirst ? inverted : binarized);
                if (!result && (options.inversionAttempts === "attemptBoth" || options.inversionAttempts === "invertFirst")) result = scan(tryInvertedFirst ? binarized : inverted);
                return result;
            }
            jsQR.default = jsQR;
            exports.default = jsQR;
        /***/ },
        /* 4 */ /***/ function(module, exports, __webpack_require__) {
            "use strict";
            Object.defineProperty(exports, "__esModule", {
                value: true
            });
            var BitMatrix_1 = __webpack_require__(0);
            var REGION_SIZE = 8;
            var MIN_DYNAMIC_RANGE = 24;
            function numBetween(value, min, max) {
                return value < min ? min : value > max ? max : value;
            }
            // Like BitMatrix but accepts arbitry Uint8 values
            var Matrix1 = /** @class */ function() {
                function Matrix(width, height) {
                    this.width = width;
                    this.data = new Uint8ClampedArray(width * height);
                }
                Matrix.prototype.get = function(x, y) {
                    return this.data[y * this.width + x];
                };
                Matrix.prototype.set = function(x, y, value) {
                    this.data[y * this.width + x] = value;
                };
                return Matrix;
            }();
            function binarize(data, width, height, returnInverted) {
                if (data.length !== width * height * 4) throw new Error("Malformed data passed to binarizer.");
                // Convert image to greyscale
                var greyscalePixels = new Matrix1(width, height);
                for(var x = 0; x < width; x++)for(var y = 0; y < height; y++){
                    var r = data[(y * width + x) * 4 + 0];
                    var g = data[(y * width + x) * 4 + 1];
                    var b = data[(y * width + x) * 4 + 2];
                    greyscalePixels.set(x, y, 0.2126 * r + 0.7152 * g + 0.0722 * b);
                }
                var horizontalRegionCount = Math.ceil(width / REGION_SIZE);
                var verticalRegionCount = Math.ceil(height / REGION_SIZE);
                var blackPoints = new Matrix1(horizontalRegionCount, verticalRegionCount);
                for(var verticalRegion = 0; verticalRegion < verticalRegionCount; verticalRegion++)for(var hortizontalRegion = 0; hortizontalRegion < horizontalRegionCount; hortizontalRegion++){
                    var sum = 0;
                    var min = Infinity;
                    var max = 0;
                    for(var y = 0; y < REGION_SIZE; y++)for(var x = 0; x < REGION_SIZE; x++){
                        var pixelLumosity = greyscalePixels.get(hortizontalRegion * REGION_SIZE + x, verticalRegion * REGION_SIZE + y);
                        sum += pixelLumosity;
                        min = Math.min(min, pixelLumosity);
                        max = Math.max(max, pixelLumosity);
                    }
                    var average = sum / Math.pow(REGION_SIZE, 2);
                    if (max - min <= MIN_DYNAMIC_RANGE) {
                        // If variation within the block is low, assume this is a block with only light or only
                        // dark pixels. In that case we do not want to use the average, as it would divide this
                        // low contrast area into black and white pixels, essentially creating data out of noise.
                        //
                        // Default the blackpoint for these blocks to be half the min - effectively white them out
                        average = min / 2;
                        if (verticalRegion > 0 && hortizontalRegion > 0) {
                            // Correct the "white background" assumption for blocks that have neighbors by comparing
                            // the pixels in this block to the previously calculated black points. This is based on
                            // the fact that dark barcode symbology is always surrounded by some amount of light
                            // background for which reasonable black point estimates were made. The bp estimated at
                            // the boundaries is used for the interior.
                            // The (min < bp) is arbitrary but works better than other heuristics that were tried.
                            var averageNeighborBlackPoint = (blackPoints.get(hortizontalRegion, verticalRegion - 1) + 2 * blackPoints.get(hortizontalRegion - 1, verticalRegion) + blackPoints.get(hortizontalRegion - 1, verticalRegion - 1)) / 4;
                            if (min < averageNeighborBlackPoint) average = averageNeighborBlackPoint;
                        }
                    }
                    blackPoints.set(hortizontalRegion, verticalRegion, average);
                }
                var binarized = BitMatrix_1.BitMatrix.createEmpty(width, height);
                var inverted = null;
                if (returnInverted) inverted = BitMatrix_1.BitMatrix.createEmpty(width, height);
                for(var verticalRegion = 0; verticalRegion < verticalRegionCount; verticalRegion++)for(var hortizontalRegion = 0; hortizontalRegion < horizontalRegionCount; hortizontalRegion++){
                    var left = numBetween(hortizontalRegion, 2, horizontalRegionCount - 3);
                    var top_1 = numBetween(verticalRegion, 2, verticalRegionCount - 3);
                    var sum = 0;
                    for(var xRegion = -2; xRegion <= 2; xRegion++)for(var yRegion = -2; yRegion <= 2; yRegion++)sum += blackPoints.get(left + xRegion, top_1 + yRegion);
                    var threshold = sum / 25;
                    for(var xRegion = 0; xRegion < REGION_SIZE; xRegion++)for(var yRegion = 0; yRegion < REGION_SIZE; yRegion++){
                        var x = hortizontalRegion * REGION_SIZE + xRegion;
                        var y = verticalRegion * REGION_SIZE + yRegion;
                        var lum = greyscalePixels.get(x, y);
                        binarized.set(x, y, lum <= threshold);
                        if (returnInverted) inverted.set(x, y, !(lum <= threshold));
                    }
                }
                if (returnInverted) return {
                    binarized: binarized,
                    inverted: inverted
                };
                return {
                    binarized: binarized
                };
            }
            exports.binarize = binarize;
        /***/ },
        /* 5 */ /***/ function(module, exports, __webpack_require__) {
            "use strict";
            Object.defineProperty(exports, "__esModule", {
                value: true
            });
            var BitMatrix_1 = __webpack_require__(0);
            var decodeData_1 = __webpack_require__(6);
            var reedsolomon_1 = __webpack_require__(9);
            var version_1 = __webpack_require__(10);
            // tslint:disable:no-bitwise
            function numBitsDiffering(x, y) {
                var z = x ^ y;
                var bitCount = 0;
                while(z){
                    bitCount++;
                    z &= z - 1;
                }
                return bitCount;
            }
            function pushBit(bit, byte) {
                return byte << 1 | bit;
            }
            // tslint:enable:no-bitwise
            var FORMAT_INFO_TABLE = [
                {
                    bits: 0x5412,
                    formatInfo: {
                        errorCorrectionLevel: 1,
                        dataMask: 0
                    }
                },
                {
                    bits: 0x5125,
                    formatInfo: {
                        errorCorrectionLevel: 1,
                        dataMask: 1
                    }
                },
                {
                    bits: 0x5E7C,
                    formatInfo: {
                        errorCorrectionLevel: 1,
                        dataMask: 2
                    }
                },
                {
                    bits: 0x5B4B,
                    formatInfo: {
                        errorCorrectionLevel: 1,
                        dataMask: 3
                    }
                },
                {
                    bits: 0x45F9,
                    formatInfo: {
                        errorCorrectionLevel: 1,
                        dataMask: 4
                    }
                },
                {
                    bits: 0x40CE,
                    formatInfo: {
                        errorCorrectionLevel: 1,
                        dataMask: 5
                    }
                },
                {
                    bits: 0x4F97,
                    formatInfo: {
                        errorCorrectionLevel: 1,
                        dataMask: 6
                    }
                },
                {
                    bits: 0x4AA0,
                    formatInfo: {
                        errorCorrectionLevel: 1,
                        dataMask: 7
                    }
                },
                {
                    bits: 0x77C4,
                    formatInfo: {
                        errorCorrectionLevel: 0,
                        dataMask: 0
                    }
                },
                {
                    bits: 0x72F3,
                    formatInfo: {
                        errorCorrectionLevel: 0,
                        dataMask: 1
                    }
                },
                {
                    bits: 0x7DAA,
                    formatInfo: {
                        errorCorrectionLevel: 0,
                        dataMask: 2
                    }
                },
                {
                    bits: 0x789D,
                    formatInfo: {
                        errorCorrectionLevel: 0,
                        dataMask: 3
                    }
                },
                {
                    bits: 0x662F,
                    formatInfo: {
                        errorCorrectionLevel: 0,
                        dataMask: 4
                    }
                },
                {
                    bits: 0x6318,
                    formatInfo: {
                        errorCorrectionLevel: 0,
                        dataMask: 5
                    }
                },
                {
                    bits: 0x6C41,
                    formatInfo: {
                        errorCorrectionLevel: 0,
                        dataMask: 6
                    }
                },
                {
                    bits: 0x6976,
                    formatInfo: {
                        errorCorrectionLevel: 0,
                        dataMask: 7
                    }
                },
                {
                    bits: 0x1689,
                    formatInfo: {
                        errorCorrectionLevel: 3,
                        dataMask: 0
                    }
                },
                {
                    bits: 0x13BE,
                    formatInfo: {
                        errorCorrectionLevel: 3,
                        dataMask: 1
                    }
                },
                {
                    bits: 0x1CE7,
                    formatInfo: {
                        errorCorrectionLevel: 3,
                        dataMask: 2
                    }
                },
                {
                    bits: 0x19D0,
                    formatInfo: {
                        errorCorrectionLevel: 3,
                        dataMask: 3
                    }
                },
                {
                    bits: 0x0762,
                    formatInfo: {
                        errorCorrectionLevel: 3,
                        dataMask: 4
                    }
                },
                {
                    bits: 0x0255,
                    formatInfo: {
                        errorCorrectionLevel: 3,
                        dataMask: 5
                    }
                },
                {
                    bits: 0x0D0C,
                    formatInfo: {
                        errorCorrectionLevel: 3,
                        dataMask: 6
                    }
                },
                {
                    bits: 0x083B,
                    formatInfo: {
                        errorCorrectionLevel: 3,
                        dataMask: 7
                    }
                },
                {
                    bits: 0x355F,
                    formatInfo: {
                        errorCorrectionLevel: 2,
                        dataMask: 0
                    }
                },
                {
                    bits: 0x3068,
                    formatInfo: {
                        errorCorrectionLevel: 2,
                        dataMask: 1
                    }
                },
                {
                    bits: 0x3F31,
                    formatInfo: {
                        errorCorrectionLevel: 2,
                        dataMask: 2
                    }
                },
                {
                    bits: 0x3A06,
                    formatInfo: {
                        errorCorrectionLevel: 2,
                        dataMask: 3
                    }
                },
                {
                    bits: 0x24B4,
                    formatInfo: {
                        errorCorrectionLevel: 2,
                        dataMask: 4
                    }
                },
                {
                    bits: 0x2183,
                    formatInfo: {
                        errorCorrectionLevel: 2,
                        dataMask: 5
                    }
                },
                {
                    bits: 0x2EDA,
                    formatInfo: {
                        errorCorrectionLevel: 2,
                        dataMask: 6
                    }
                },
                {
                    bits: 0x2BED,
                    formatInfo: {
                        errorCorrectionLevel: 2,
                        dataMask: 7
                    }
                }, 
            ];
            var DATA_MASKS = [
                function(p) {
                    return (p.y + p.x) % 2 === 0;
                },
                function(p) {
                    return p.y % 2 === 0;
                },
                function(p) {
                    return p.x % 3 === 0;
                },
                function(p) {
                    return (p.y + p.x) % 3 === 0;
                },
                function(p) {
                    return (Math.floor(p.y / 2) + Math.floor(p.x / 3)) % 2 === 0;
                },
                function(p) {
                    return p.x * p.y % 2 + p.x * p.y % 3 === 0;
                },
                function(p) {
                    return (p.y * p.x % 2 + p.y * p.x % 3) % 2 === 0;
                },
                function(p) {
                    return ((p.y + p.x) % 2 + p.y * p.x % 3) % 2 === 0;
                }, 
            ];
            function buildFunctionPatternMask(version) {
                var dimension = 17 + 4 * version.versionNumber;
                var matrix = BitMatrix_1.BitMatrix.createEmpty(dimension, dimension);
                matrix.setRegion(0, 0, 9, 9, true); // Top left finder pattern + separator + format
                matrix.setRegion(dimension - 8, 0, 8, 9, true); // Top right finder pattern + separator + format
                matrix.setRegion(0, dimension - 8, 9, 8, true); // Bottom left finder pattern + separator + format
                // Alignment patterns
                for(var _i = 0, _a = version.alignmentPatternCenters; _i < _a.length; _i++){
                    var x = _a[_i];
                    for(var _b = 0, _c = version.alignmentPatternCenters; _b < _c.length; _b++){
                        var y = _c[_b];
                        if (!(x === 6 && y === 6 || x === 6 && y === dimension - 7 || x === dimension - 7 && y === 6)) matrix.setRegion(x - 2, y - 2, 5, 5, true);
                    }
                }
                matrix.setRegion(6, 9, 1, dimension - 17, true); // Vertical timing pattern
                matrix.setRegion(9, 6, dimension - 17, 1, true); // Horizontal timing pattern
                if (version.versionNumber > 6) {
                    matrix.setRegion(dimension - 11, 0, 3, 6, true); // Version info, top right
                    matrix.setRegion(0, dimension - 11, 6, 3, true); // Version info, bottom left
                }
                return matrix;
            }
            function readCodewords(matrix, version, formatInfo) {
                var dataMask = DATA_MASKS[formatInfo.dataMask];
                var dimension = matrix.height;
                var functionPatternMask = buildFunctionPatternMask(version);
                var codewords = [];
                var currentByte = 0;
                var bitsRead = 0;
                // Read columns in pairs, from right to left
                var readingUp = true;
                for(var columnIndex = dimension - 1; columnIndex > 0; columnIndex -= 2){
                    if (columnIndex === 6) columnIndex--;
                    for(var i = 0; i < dimension; i++){
                        var y = readingUp ? dimension - 1 - i : i;
                        for(var columnOffset = 0; columnOffset < 2; columnOffset++){
                            var x = columnIndex - columnOffset;
                            if (!functionPatternMask.get(x, y)) {
                                bitsRead++;
                                var bit = matrix.get(x, y);
                                if (dataMask({
                                    y: y,
                                    x: x
                                })) bit = !bit;
                                currentByte = pushBit(bit, currentByte);
                                if (bitsRead === 8) {
                                    codewords.push(currentByte);
                                    bitsRead = 0;
                                    currentByte = 0;
                                }
                            }
                        }
                    }
                    readingUp = !readingUp;
                }
                return codewords;
            }
            function readVersion(matrix) {
                var dimension = matrix.height;
                var provisionalVersion = Math.floor((dimension - 17) / 4);
                if (provisionalVersion <= 6) return version_1.VERSIONS[provisionalVersion - 1];
                var topRightVersionBits = 0;
                for(var y = 5; y >= 0; y--)for(var x = dimension - 9; x >= dimension - 11; x--)topRightVersionBits = pushBit(matrix.get(x, y), topRightVersionBits);
                var bottomLeftVersionBits = 0;
                for(var x = 5; x >= 0; x--)for(var y = dimension - 9; y >= dimension - 11; y--)bottomLeftVersionBits = pushBit(matrix.get(x, y), bottomLeftVersionBits);
                var bestDifference = Infinity;
                var bestVersion;
                for(var _i = 0, VERSIONS_1 = version_1.VERSIONS; _i < VERSIONS_1.length; _i++){
                    var version = VERSIONS_1[_i];
                    if (version.infoBits === topRightVersionBits || version.infoBits === bottomLeftVersionBits) return version;
                    var difference = numBitsDiffering(topRightVersionBits, version.infoBits);
                    if (difference < bestDifference) {
                        bestVersion = version;
                        bestDifference = difference;
                    }
                    difference = numBitsDiffering(bottomLeftVersionBits, version.infoBits);
                    if (difference < bestDifference) {
                        bestVersion = version;
                        bestDifference = difference;
                    }
                }
                // We can tolerate up to 3 bits of error since no two version info codewords will
                // differ in less than 8 bits.
                if (bestDifference <= 3) return bestVersion;
            }
            function readFormatInformation(matrix) {
                var topLeftFormatInfoBits = 0;
                for(var x = 0; x <= 8; x++)if (x !== 6) topLeftFormatInfoBits = pushBit(matrix.get(x, 8), topLeftFormatInfoBits);
                for(var y = 7; y >= 0; y--)if (y !== 6) topLeftFormatInfoBits = pushBit(matrix.get(8, y), topLeftFormatInfoBits);
                var dimension = matrix.height;
                var topRightBottomRightFormatInfoBits = 0;
                for(var y = dimension - 1; y >= dimension - 7; y--)topRightBottomRightFormatInfoBits = pushBit(matrix.get(8, y), topRightBottomRightFormatInfoBits);
                for(var x = dimension - 8; x < dimension; x++)topRightBottomRightFormatInfoBits = pushBit(matrix.get(x, 8), topRightBottomRightFormatInfoBits);
                var bestDifference = Infinity;
                var bestFormatInfo = null;
                for(var _i = 0, FORMAT_INFO_TABLE_1 = FORMAT_INFO_TABLE; _i < FORMAT_INFO_TABLE_1.length; _i++){
                    var _a = FORMAT_INFO_TABLE_1[_i], bits = _a.bits, formatInfo = _a.formatInfo;
                    if (bits === topLeftFormatInfoBits || bits === topRightBottomRightFormatInfoBits) return formatInfo;
                    var difference = numBitsDiffering(topLeftFormatInfoBits, bits);
                    if (difference < bestDifference) {
                        bestFormatInfo = formatInfo;
                        bestDifference = difference;
                    }
                    if (topLeftFormatInfoBits !== topRightBottomRightFormatInfoBits) {
                        difference = numBitsDiffering(topRightBottomRightFormatInfoBits, bits);
                        if (difference < bestDifference) {
                            bestFormatInfo = formatInfo;
                            bestDifference = difference;
                        }
                    }
                }
                // Hamming distance of the 32 masked codes is 7, by construction, so <= 3 bits differing means we found a match
                if (bestDifference <= 3) return bestFormatInfo;
                return null;
            }
            function getDataBlocks(codewords, version, ecLevel) {
                var ecInfo = version.errorCorrectionLevels[ecLevel];
                var dataBlocks = [];
                var totalCodewords = 0;
                ecInfo.ecBlocks.forEach(function(block) {
                    for(var i = 0; i < block.numBlocks; i++){
                        dataBlocks.push({
                            numDataCodewords: block.dataCodewordsPerBlock,
                            codewords: []
                        });
                        totalCodewords += block.dataCodewordsPerBlock + ecInfo.ecCodewordsPerBlock;
                    }
                });
                // In some cases the QR code will be malformed enough that we pull off more or less than we should.
                // If we pull off less there's nothing we can do.
                // If we pull off more we can safely truncate
                if (codewords.length < totalCodewords) return null;
                codewords = codewords.slice(0, totalCodewords);
                var shortBlockSize = ecInfo.ecBlocks[0].dataCodewordsPerBlock;
                // Pull codewords to fill the blocks up to the minimum size
                for(var i1 = 0; i1 < shortBlockSize; i1++)for(var _i = 0, dataBlocks_1 = dataBlocks; _i < dataBlocks_1.length; _i++){
                    var dataBlock = dataBlocks_1[_i];
                    dataBlock.codewords.push(codewords.shift());
                }
                // If there are any large blocks, pull codewords to fill the last element of those
                if (ecInfo.ecBlocks.length > 1) {
                    var smallBlockCount = ecInfo.ecBlocks[0].numBlocks;
                    var largeBlockCount = ecInfo.ecBlocks[1].numBlocks;
                    for(var i1 = 0; i1 < largeBlockCount; i1++)dataBlocks[smallBlockCount + i1].codewords.push(codewords.shift());
                }
                // Add the rest of the codewords to the blocks. These are the error correction codewords.
                while(codewords.length > 0)for(var _a = 0, dataBlocks_2 = dataBlocks; _a < dataBlocks_2.length; _a++){
                    var dataBlock = dataBlocks_2[_a];
                    dataBlock.codewords.push(codewords.shift());
                }
                return dataBlocks;
            }
            function decodeMatrix(matrix) {
                var version = readVersion(matrix);
                if (!version) return null;
                var formatInfo = readFormatInformation(matrix);
                if (!formatInfo) return null;
                var codewords = readCodewords(matrix, version, formatInfo);
                var dataBlocks = getDataBlocks(codewords, version, formatInfo.errorCorrectionLevel);
                if (!dataBlocks) return null;
                // Count total number of data bytes
                var totalBytes = dataBlocks.reduce(function(a, b) {
                    return a + b.numDataCodewords;
                }, 0);
                var resultBytes = new Uint8ClampedArray(totalBytes);
                var resultIndex = 0;
                for(var _i = 0, dataBlocks_3 = dataBlocks; _i < dataBlocks_3.length; _i++){
                    var dataBlock = dataBlocks_3[_i];
                    var correctedBytes = reedsolomon_1.decode(dataBlock.codewords, dataBlock.codewords.length - dataBlock.numDataCodewords);
                    if (!correctedBytes) return null;
                    for(var i = 0; i < dataBlock.numDataCodewords; i++)resultBytes[resultIndex++] = correctedBytes[i];
                }
                try {
                    return decodeData_1.decode(resultBytes, version.versionNumber);
                } catch (_a) {
                    return null;
                }
            }
            function decode(matrix) {
                if (matrix == null) return null;
                var result = decodeMatrix(matrix);
                if (result) return result;
                // Decoding didn't work, try mirroring the QR across the topLeft -> bottomRight line.
                for(var x = 0; x < matrix.width; x++){
                    for(var y = x + 1; y < matrix.height; y++)if (matrix.get(x, y) !== matrix.get(y, x)) {
                        matrix.set(x, y, !matrix.get(x, y));
                        matrix.set(y, x, !matrix.get(y, x));
                    }
                }
                return decodeMatrix(matrix);
            }
            exports.decode = decode;
        /***/ },
        /* 6 */ /***/ function(module, exports, __webpack_require__) {
            "use strict";
            Object.defineProperty(exports, "__esModule", {
                value: true
            });
            // tslint:disable:no-bitwise
            var BitStream_1 = __webpack_require__(7);
            var shiftJISTable_1 = __webpack_require__(8);
            var Mode1;
            (function(Mode) {
                Mode["Numeric"] = "numeric";
                Mode["Alphanumeric"] = "alphanumeric";
                Mode["Byte"] = "byte";
                Mode["Kanji"] = "kanji";
                Mode["ECI"] = "eci";
            })(Mode1 = exports.Mode || (exports.Mode = {}));
            var ModeByte1;
            (function(ModeByte) {
                ModeByte[ModeByte["Terminator"] = 0] = "Terminator";
                ModeByte[ModeByte["Numeric"] = 1] = "Numeric";
                ModeByte[ModeByte["Alphanumeric"] = 2] = "Alphanumeric";
                ModeByte[ModeByte["Byte"] = 4] = "Byte";
                ModeByte[ModeByte["Kanji"] = 8] = "Kanji";
                ModeByte[ModeByte["ECI"] = 7] = "ECI";
            // StructuredAppend = 0x3,
            // FNC1FirstPosition = 0x5,
            // FNC1SecondPosition = 0x9,
            })(ModeByte1 || (ModeByte1 = {}));
            function decodeNumeric(stream, size) {
                var bytes = [];
                var text = "";
                var characterCountSize = [
                    10,
                    12,
                    14
                ][size];
                var length = stream.readBits(characterCountSize);
                // Read digits in groups of 3
                while(length >= 3){
                    var num = stream.readBits(10);
                    if (num >= 1000) throw new Error("Invalid numeric value above 999");
                    var a = Math.floor(num / 100);
                    var b = Math.floor(num / 10) % 10;
                    var c = num % 10;
                    bytes.push(48 + a, 48 + b, 48 + c);
                    text += a.toString() + b.toString() + c.toString();
                    length -= 3;
                }
                // If the number of digits aren't a multiple of 3, the remaining digits are special cased.
                if (length === 2) {
                    var num = stream.readBits(7);
                    if (num >= 100) throw new Error("Invalid numeric value above 99");
                    var a = Math.floor(num / 10);
                    var b = num % 10;
                    bytes.push(48 + a, 48 + b);
                    text += a.toString() + b.toString();
                } else if (length === 1) {
                    var num = stream.readBits(4);
                    if (num >= 10) throw new Error("Invalid numeric value above 9");
                    bytes.push(48 + num);
                    text += num.toString();
                }
                return {
                    bytes: bytes,
                    text: text
                };
            }
            var AlphanumericCharacterCodes = [
                "0",
                "1",
                "2",
                "3",
                "4",
                "5",
                "6",
                "7",
                "8",
                "9",
                "A",
                "B",
                "C",
                "D",
                "E",
                "F",
                "G",
                "H",
                "I",
                "J",
                "K",
                "L",
                "M",
                "N",
                "O",
                "P",
                "Q",
                "R",
                "S",
                "T",
                "U",
                "V",
                "W",
                "X",
                "Y",
                "Z",
                " ",
                "$",
                "%",
                "*",
                "+",
                "-",
                ".",
                "/",
                ":", 
            ];
            function decodeAlphanumeric(stream, size) {
                var bytes = [];
                var text = "";
                var characterCountSize = [
                    9,
                    11,
                    13
                ][size];
                var length = stream.readBits(characterCountSize);
                while(length >= 2){
                    var v = stream.readBits(11);
                    var a = Math.floor(v / 45);
                    var b = v % 45;
                    bytes.push(AlphanumericCharacterCodes[a].charCodeAt(0), AlphanumericCharacterCodes[b].charCodeAt(0));
                    text += AlphanumericCharacterCodes[a] + AlphanumericCharacterCodes[b];
                    length -= 2;
                }
                if (length === 1) {
                    var a = stream.readBits(6);
                    bytes.push(AlphanumericCharacterCodes[a].charCodeAt(0));
                    text += AlphanumericCharacterCodes[a];
                }
                return {
                    bytes: bytes,
                    text: text
                };
            }
            function decodeByte(stream, size) {
                var bytes = [];
                var text = "";
                var characterCountSize = [
                    8,
                    16,
                    16
                ][size];
                var length = stream.readBits(characterCountSize);
                for(var i = 0; i < length; i++){
                    var b = stream.readBits(8);
                    bytes.push(b);
                }
                try {
                    text += decodeURIComponent(bytes.map(function(b) {
                        return "%" + ("0" + b.toString(16)).substr(-2);
                    }).join(""));
                } catch (_a) {
                // failed to decode
                }
                return {
                    bytes: bytes,
                    text: text
                };
            }
            function decodeKanji(stream, size) {
                var bytes = [];
                var text = "";
                var characterCountSize = [
                    8,
                    10,
                    12
                ][size];
                var length = stream.readBits(characterCountSize);
                for(var i = 0; i < length; i++){
                    var k = stream.readBits(13);
                    var c = Math.floor(k / 0xC0) << 8 | k % 0xC0;
                    if (c < 0x1F00) c += 0x8140;
                    else c += 0xC140;
                    bytes.push(c >> 8, c & 0xFF);
                    text += String.fromCharCode(shiftJISTable_1.shiftJISTable[c]);
                }
                return {
                    bytes: bytes,
                    text: text
                };
            }
            function decode(data, version) {
                var _a, _b, _c, _d;
                var stream = new BitStream_1.BitStream(data);
                // There are 3 'sizes' based on the version. 1-9 is small (0), 10-26 is medium (1) and 27-40 is large (2).
                var size = version <= 9 ? 0 : version <= 26 ? 1 : 2;
                var result = {
                    text: "",
                    bytes: [],
                    chunks: [],
                    version: version
                };
                while(stream.available() >= 4){
                    var mode = stream.readBits(4);
                    if (mode === ModeByte1.Terminator) return result;
                    else if (mode === ModeByte1.ECI) {
                        if (stream.readBits(1) === 0) result.chunks.push({
                            type: Mode1.ECI,
                            assignmentNumber: stream.readBits(7)
                        });
                        else if (stream.readBits(1) === 0) result.chunks.push({
                            type: Mode1.ECI,
                            assignmentNumber: stream.readBits(14)
                        });
                        else if (stream.readBits(1) === 0) result.chunks.push({
                            type: Mode1.ECI,
                            assignmentNumber: stream.readBits(21)
                        });
                        else // ECI data seems corrupted
                        result.chunks.push({
                            type: Mode1.ECI,
                            assignmentNumber: -1
                        });
                    } else if (mode === ModeByte1.Numeric) {
                        var numericResult = decodeNumeric(stream, size);
                        result.text += numericResult.text;
                        (_a = result.bytes).push.apply(_a, numericResult.bytes);
                        result.chunks.push({
                            type: Mode1.Numeric,
                            text: numericResult.text
                        });
                    } else if (mode === ModeByte1.Alphanumeric) {
                        var alphanumericResult = decodeAlphanumeric(stream, size);
                        result.text += alphanumericResult.text;
                        (_b = result.bytes).push.apply(_b, alphanumericResult.bytes);
                        result.chunks.push({
                            type: Mode1.Alphanumeric,
                            text: alphanumericResult.text
                        });
                    } else if (mode === ModeByte1.Byte) {
                        var byteResult = decodeByte(stream, size);
                        result.text += byteResult.text;
                        (_c = result.bytes).push.apply(_c, byteResult.bytes);
                        result.chunks.push({
                            type: Mode1.Byte,
                            bytes: byteResult.bytes,
                            text: byteResult.text
                        });
                    } else if (mode === ModeByte1.Kanji) {
                        var kanjiResult = decodeKanji(stream, size);
                        result.text += kanjiResult.text;
                        (_d = result.bytes).push.apply(_d, kanjiResult.bytes);
                        result.chunks.push({
                            type: Mode1.Kanji,
                            bytes: kanjiResult.bytes,
                            text: kanjiResult.text
                        });
                    }
                }
                // If there is no data left, or the remaining bits are all 0, then that counts as a termination marker
                if (stream.available() === 0 || stream.readBits(stream.available()) === 0) return result;
            }
            exports.decode = decode;
        /***/ },
        /* 7 */ /***/ function(module, exports, __webpack_require__) {
            "use strict";
            // tslint:disable:no-bitwise
            Object.defineProperty(exports, "__esModule", {
                value: true
            });
            var BitStream1 = /** @class */ function() {
                function BitStream(bytes) {
                    this.byteOffset = 0;
                    this.bitOffset = 0;
                    this.bytes = bytes;
                }
                BitStream.prototype.readBits = function(numBits) {
                    if (numBits < 1 || numBits > 32 || numBits > this.available()) throw new Error("Cannot read " + numBits.toString() + " bits");
                    var result = 0;
                    // First, read remainder from current byte
                    if (this.bitOffset > 0) {
                        var bitsLeft = 8 - this.bitOffset;
                        var toRead = numBits < bitsLeft ? numBits : bitsLeft;
                        var bitsToNotRead = bitsLeft - toRead;
                        var mask = 0xFF >> 8 - toRead << bitsToNotRead;
                        result = (this.bytes[this.byteOffset] & mask) >> bitsToNotRead;
                        numBits -= toRead;
                        this.bitOffset += toRead;
                        if (this.bitOffset === 8) {
                            this.bitOffset = 0;
                            this.byteOffset++;
                        }
                    }
                    // Next read whole bytes
                    if (numBits > 0) {
                        while(numBits >= 8){
                            result = result << 8 | this.bytes[this.byteOffset] & 0xFF;
                            this.byteOffset++;
                            numBits -= 8;
                        }
                        // Finally read a partial byte
                        if (numBits > 0) {
                            var bitsToNotRead = 8 - numBits;
                            var mask = 0xFF >> bitsToNotRead << bitsToNotRead;
                            result = result << numBits | (this.bytes[this.byteOffset] & mask) >> bitsToNotRead;
                            this.bitOffset += numBits;
                        }
                    }
                    return result;
                };
                BitStream.prototype.available = function() {
                    return 8 * (this.bytes.length - this.byteOffset) - this.bitOffset;
                };
                return BitStream;
            }();
            exports.BitStream = BitStream1;
        /***/ },
        /* 8 */ /***/ function(module, exports, __webpack_require__) {
            "use strict";
            Object.defineProperty(exports, "__esModule", {
                value: true
            });
            exports.shiftJISTable = {
                0x20: 0x0020,
                0x21: 0x0021,
                0x22: 0x0022,
                0x23: 0x0023,
                0x24: 0x0024,
                0x25: 0x0025,
                0x26: 0x0026,
                0x27: 0x0027,
                0x28: 0x0028,
                0x29: 0x0029,
                0x2A: 0x002A,
                0x2B: 0x002B,
                0x2C: 0x002C,
                0x2D: 0x002D,
                0x2E: 0x002E,
                0x2F: 0x002F,
                0x30: 0x0030,
                0x31: 0x0031,
                0x32: 0x0032,
                0x33: 0x0033,
                0x34: 0x0034,
                0x35: 0x0035,
                0x36: 0x0036,
                0x37: 0x0037,
                0x38: 0x0038,
                0x39: 0x0039,
                0x3A: 0x003A,
                0x3B: 0x003B,
                0x3C: 0x003C,
                0x3D: 0x003D,
                0x3E: 0x003E,
                0x3F: 0x003F,
                0x40: 0x0040,
                0x41: 0x0041,
                0x42: 0x0042,
                0x43: 0x0043,
                0x44: 0x0044,
                0x45: 0x0045,
                0x46: 0x0046,
                0x47: 0x0047,
                0x48: 0x0048,
                0x49: 0x0049,
                0x4A: 0x004A,
                0x4B: 0x004B,
                0x4C: 0x004C,
                0x4D: 0x004D,
                0x4E: 0x004E,
                0x4F: 0x004F,
                0x50: 0x0050,
                0x51: 0x0051,
                0x52: 0x0052,
                0x53: 0x0053,
                0x54: 0x0054,
                0x55: 0x0055,
                0x56: 0x0056,
                0x57: 0x0057,
                0x58: 0x0058,
                0x59: 0x0059,
                0x5A: 0x005A,
                0x5B: 0x005B,
                0x5C: 0x00A5,
                0x5D: 0x005D,
                0x5E: 0x005E,
                0x5F: 0x005F,
                0x60: 0x0060,
                0x61: 0x0061,
                0x62: 0x0062,
                0x63: 0x0063,
                0x64: 0x0064,
                0x65: 0x0065,
                0x66: 0x0066,
                0x67: 0x0067,
                0x68: 0x0068,
                0x69: 0x0069,
                0x6A: 0x006A,
                0x6B: 0x006B,
                0x6C: 0x006C,
                0x6D: 0x006D,
                0x6E: 0x006E,
                0x6F: 0x006F,
                0x70: 0x0070,
                0x71: 0x0071,
                0x72: 0x0072,
                0x73: 0x0073,
                0x74: 0x0074,
                0x75: 0x0075,
                0x76: 0x0076,
                0x77: 0x0077,
                0x78: 0x0078,
                0x79: 0x0079,
                0x7A: 0x007A,
                0x7B: 0x007B,
                0x7C: 0x007C,
                0x7D: 0x007D,
                0x7E: 0x203E,
                0x8140: 0x3000,
                0x8141: 0x3001,
                0x8142: 0x3002,
                0x8143: 0xFF0C,
                0x8144: 0xFF0E,
                0x8145: 0x30FB,
                0x8146: 0xFF1A,
                0x8147: 0xFF1B,
                0x8148: 0xFF1F,
                0x8149: 0xFF01,
                0x814A: 0x309B,
                0x814B: 0x309C,
                0x814C: 0x00B4,
                0x814D: 0xFF40,
                0x814E: 0x00A8,
                0x814F: 0xFF3E,
                0x8150: 0xFFE3,
                0x8151: 0xFF3F,
                0x8152: 0x30FD,
                0x8153: 0x30FE,
                0x8154: 0x309D,
                0x8155: 0x309E,
                0x8156: 0x3003,
                0x8157: 0x4EDD,
                0x8158: 0x3005,
                0x8159: 0x3006,
                0x815A: 0x3007,
                0x815B: 0x30FC,
                0x815C: 0x2015,
                0x815D: 0x2010,
                0x815E: 0xFF0F,
                0x815F: 0x005C,
                0x8160: 0x301C,
                0x8161: 0x2016,
                0x8162: 0xFF5C,
                0x8163: 0x2026,
                0x8164: 0x2025,
                0x8165: 0x2018,
                0x8166: 0x2019,
                0x8167: 0x201C,
                0x8168: 0x201D,
                0x8169: 0xFF08,
                0x816A: 0xFF09,
                0x816B: 0x3014,
                0x816C: 0x3015,
                0x816D: 0xFF3B,
                0x816E: 0xFF3D,
                0x816F: 0xFF5B,
                0x8170: 0xFF5D,
                0x8171: 0x3008,
                0x8172: 0x3009,
                0x8173: 0x300A,
                0x8174: 0x300B,
                0x8175: 0x300C,
                0x8176: 0x300D,
                0x8177: 0x300E,
                0x8178: 0x300F,
                0x8179: 0x3010,
                0x817A: 0x3011,
                0x817B: 0xFF0B,
                0x817C: 0x2212,
                0x817D: 0x00B1,
                0x817E: 0x00D7,
                0x8180: 0x00F7,
                0x8181: 0xFF1D,
                0x8182: 0x2260,
                0x8183: 0xFF1C,
                0x8184: 0xFF1E,
                0x8185: 0x2266,
                0x8186: 0x2267,
                0x8187: 0x221E,
                0x8188: 0x2234,
                0x8189: 0x2642,
                0x818A: 0x2640,
                0x818B: 0x00B0,
                0x818C: 0x2032,
                0x818D: 0x2033,
                0x818E: 0x2103,
                0x818F: 0xFFE5,
                0x8190: 0xFF04,
                0x8191: 0x00A2,
                0x8192: 0x00A3,
                0x8193: 0xFF05,
                0x8194: 0xFF03,
                0x8195: 0xFF06,
                0x8196: 0xFF0A,
                0x8197: 0xFF20,
                0x8198: 0x00A7,
                0x8199: 0x2606,
                0x819A: 0x2605,
                0x819B: 0x25CB,
                0x819C: 0x25CF,
                0x819D: 0x25CE,
                0x819E: 0x25C7,
                0x819F: 0x25C6,
                0x81A0: 0x25A1,
                0x81A1: 0x25A0,
                0x81A2: 0x25B3,
                0x81A3: 0x25B2,
                0x81A4: 0x25BD,
                0x81A5: 0x25BC,
                0x81A6: 0x203B,
                0x81A7: 0x3012,
                0x81A8: 0x2192,
                0x81A9: 0x2190,
                0x81AA: 0x2191,
                0x81AB: 0x2193,
                0x81AC: 0x3013,
                0x81B8: 0x2208,
                0x81B9: 0x220B,
                0x81BA: 0x2286,
                0x81BB: 0x2287,
                0x81BC: 0x2282,
                0x81BD: 0x2283,
                0x81BE: 0x222A,
                0x81BF: 0x2229,
                0x81C8: 0x2227,
                0x81C9: 0x2228,
                0x81CA: 0x00AC,
                0x81CB: 0x21D2,
                0x81CC: 0x21D4,
                0x81CD: 0x2200,
                0x81CE: 0x2203,
                0x81DA: 0x2220,
                0x81DB: 0x22A5,
                0x81DC: 0x2312,
                0x81DD: 0x2202,
                0x81DE: 0x2207,
                0x81DF: 0x2261,
                0x81E0: 0x2252,
                0x81E1: 0x226A,
                0x81E2: 0x226B,
                0x81E3: 0x221A,
                0x81E4: 0x223D,
                0x81E5: 0x221D,
                0x81E6: 0x2235,
                0x81E7: 0x222B,
                0x81E8: 0x222C,
                0x81F0: 0x212B,
                0x81F1: 0x2030,
                0x81F2: 0x266F,
                0x81F3: 0x266D,
                0x81F4: 0x266A,
                0x81F5: 0x2020,
                0x81F6: 0x2021,
                0x81F7: 0x00B6,
                0x81FC: 0x25EF,
                0x824F: 0xFF10,
                0x8250: 0xFF11,
                0x8251: 0xFF12,
                0x8252: 0xFF13,
                0x8253: 0xFF14,
                0x8254: 0xFF15,
                0x8255: 0xFF16,
                0x8256: 0xFF17,
                0x8257: 0xFF18,
                0x8258: 0xFF19,
                0x8260: 0xFF21,
                0x8261: 0xFF22,
                0x8262: 0xFF23,
                0x8263: 0xFF24,
                0x8264: 0xFF25,
                0x8265: 0xFF26,
                0x8266: 0xFF27,
                0x8267: 0xFF28,
                0x8268: 0xFF29,
                0x8269: 0xFF2A,
                0x826A: 0xFF2B,
                0x826B: 0xFF2C,
                0x826C: 0xFF2D,
                0x826D: 0xFF2E,
                0x826E: 0xFF2F,
                0x826F: 0xFF30,
                0x8270: 0xFF31,
                0x8271: 0xFF32,
                0x8272: 0xFF33,
                0x8273: 0xFF34,
                0x8274: 0xFF35,
                0x8275: 0xFF36,
                0x8276: 0xFF37,
                0x8277: 0xFF38,
                0x8278: 0xFF39,
                0x8279: 0xFF3A,
                0x8281: 0xFF41,
                0x8282: 0xFF42,
                0x8283: 0xFF43,
                0x8284: 0xFF44,
                0x8285: 0xFF45,
                0x8286: 0xFF46,
                0x8287: 0xFF47,
                0x8288: 0xFF48,
                0x8289: 0xFF49,
                0x828A: 0xFF4A,
                0x828B: 0xFF4B,
                0x828C: 0xFF4C,
                0x828D: 0xFF4D,
                0x828E: 0xFF4E,
                0x828F: 0xFF4F,
                0x8290: 0xFF50,
                0x8291: 0xFF51,
                0x8292: 0xFF52,
                0x8293: 0xFF53,
                0x8294: 0xFF54,
                0x8295: 0xFF55,
                0x8296: 0xFF56,
                0x8297: 0xFF57,
                0x8298: 0xFF58,
                0x8299: 0xFF59,
                0x829A: 0xFF5A,
                0x829F: 0x3041,
                0x82A0: 0x3042,
                0x82A1: 0x3043,
                0x82A2: 0x3044,
                0x82A3: 0x3045,
                0x82A4: 0x3046,
                0x82A5: 0x3047,
                0x82A6: 0x3048,
                0x82A7: 0x3049,
                0x82A8: 0x304A,
                0x82A9: 0x304B,
                0x82AA: 0x304C,
                0x82AB: 0x304D,
                0x82AC: 0x304E,
                0x82AD: 0x304F,
                0x82AE: 0x3050,
                0x82AF: 0x3051,
                0x82B0: 0x3052,
                0x82B1: 0x3053,
                0x82B2: 0x3054,
                0x82B3: 0x3055,
                0x82B4: 0x3056,
                0x82B5: 0x3057,
                0x82B6: 0x3058,
                0x82B7: 0x3059,
                0x82B8: 0x305A,
                0x82B9: 0x305B,
                0x82BA: 0x305C,
                0x82BB: 0x305D,
                0x82BC: 0x305E,
                0x82BD: 0x305F,
                0x82BE: 0x3060,
                0x82BF: 0x3061,
                0x82C0: 0x3062,
                0x82C1: 0x3063,
                0x82C2: 0x3064,
                0x82C3: 0x3065,
                0x82C4: 0x3066,
                0x82C5: 0x3067,
                0x82C6: 0x3068,
                0x82C7: 0x3069,
                0x82C8: 0x306A,
                0x82C9: 0x306B,
                0x82CA: 0x306C,
                0x82CB: 0x306D,
                0x82CC: 0x306E,
                0x82CD: 0x306F,
                0x82CE: 0x3070,
                0x82CF: 0x3071,
                0x82D0: 0x3072,
                0x82D1: 0x3073,
                0x82D2: 0x3074,
                0x82D3: 0x3075,
                0x82D4: 0x3076,
                0x82D5: 0x3077,
                0x82D6: 0x3078,
                0x82D7: 0x3079,
                0x82D8: 0x307A,
                0x82D9: 0x307B,
                0x82DA: 0x307C,
                0x82DB: 0x307D,
                0x82DC: 0x307E,
                0x82DD: 0x307F,
                0x82DE: 0x3080,
                0x82DF: 0x3081,
                0x82E0: 0x3082,
                0x82E1: 0x3083,
                0x82E2: 0x3084,
                0x82E3: 0x3085,
                0x82E4: 0x3086,
                0x82E5: 0x3087,
                0x82E6: 0x3088,
                0x82E7: 0x3089,
                0x82E8: 0x308A,
                0x82E9: 0x308B,
                0x82EA: 0x308C,
                0x82EB: 0x308D,
                0x82EC: 0x308E,
                0x82ED: 0x308F,
                0x82EE: 0x3090,
                0x82EF: 0x3091,
                0x82F0: 0x3092,
                0x82F1: 0x3093,
                0x8340: 0x30A1,
                0x8341: 0x30A2,
                0x8342: 0x30A3,
                0x8343: 0x30A4,
                0x8344: 0x30A5,
                0x8345: 0x30A6,
                0x8346: 0x30A7,
                0x8347: 0x30A8,
                0x8348: 0x30A9,
                0x8349: 0x30AA,
                0x834A: 0x30AB,
                0x834B: 0x30AC,
                0x834C: 0x30AD,
                0x834D: 0x30AE,
                0x834E: 0x30AF,
                0x834F: 0x30B0,
                0x8350: 0x30B1,
                0x8351: 0x30B2,
                0x8352: 0x30B3,
                0x8353: 0x30B4,
                0x8354: 0x30B5,
                0x8355: 0x30B6,
                0x8356: 0x30B7,
                0x8357: 0x30B8,
                0x8358: 0x30B9,
                0x8359: 0x30BA,
                0x835A: 0x30BB,
                0x835B: 0x30BC,
                0x835C: 0x30BD,
                0x835D: 0x30BE,
                0x835E: 0x30BF,
                0x835F: 0x30C0,
                0x8360: 0x30C1,
                0x8361: 0x30C2,
                0x8362: 0x30C3,
                0x8363: 0x30C4,
                0x8364: 0x30C5,
                0x8365: 0x30C6,
                0x8366: 0x30C7,
                0x8367: 0x30C8,
                0x8368: 0x30C9,
                0x8369: 0x30CA,
                0x836A: 0x30CB,
                0x836B: 0x30CC,
                0x836C: 0x30CD,
                0x836D: 0x30CE,
                0x836E: 0x30CF,
                0x836F: 0x30D0,
                0x8370: 0x30D1,
                0x8371: 0x30D2,
                0x8372: 0x30D3,
                0x8373: 0x30D4,
                0x8374: 0x30D5,
                0x8375: 0x30D6,
                0x8376: 0x30D7,
                0x8377: 0x30D8,
                0x8378: 0x30D9,
                0x8379: 0x30DA,
                0x837A: 0x30DB,
                0x837B: 0x30DC,
                0x837C: 0x30DD,
                0x837D: 0x30DE,
                0x837E: 0x30DF,
                0x8380: 0x30E0,
                0x8381: 0x30E1,
                0x8382: 0x30E2,
                0x8383: 0x30E3,
                0x8384: 0x30E4,
                0x8385: 0x30E5,
                0x8386: 0x30E6,
                0x8387: 0x30E7,
                0x8388: 0x30E8,
                0x8389: 0x30E9,
                0x838A: 0x30EA,
                0x838B: 0x30EB,
                0x838C: 0x30EC,
                0x838D: 0x30ED,
                0x838E: 0x30EE,
                0x838F: 0x30EF,
                0x8390: 0x30F0,
                0x8391: 0x30F1,
                0x8392: 0x30F2,
                0x8393: 0x30F3,
                0x8394: 0x30F4,
                0x8395: 0x30F5,
                0x8396: 0x30F6,
                0x839F: 0x0391,
                0x83A0: 0x0392,
                0x83A1: 0x0393,
                0x83A2: 0x0394,
                0x83A3: 0x0395,
                0x83A4: 0x0396,
                0x83A5: 0x0397,
                0x83A6: 0x0398,
                0x83A7: 0x0399,
                0x83A8: 0x039A,
                0x83A9: 0x039B,
                0x83AA: 0x039C,
                0x83AB: 0x039D,
                0x83AC: 0x039E,
                0x83AD: 0x039F,
                0x83AE: 0x03A0,
                0x83AF: 0x03A1,
                0x83B0: 0x03A3,
                0x83B1: 0x03A4,
                0x83B2: 0x03A5,
                0x83B3: 0x03A6,
                0x83B4: 0x03A7,
                0x83B5: 0x03A8,
                0x83B6: 0x03A9,
                0x83BF: 0x03B1,
                0x83C0: 0x03B2,
                0x83C1: 0x03B3,
                0x83C2: 0x03B4,
                0x83C3: 0x03B5,
                0x83C4: 0x03B6,
                0x83C5: 0x03B7,
                0x83C6: 0x03B8,
                0x83C7: 0x03B9,
                0x83C8: 0x03BA,
                0x83C9: 0x03BB,
                0x83CA: 0x03BC,
                0x83CB: 0x03BD,
                0x83CC: 0x03BE,
                0x83CD: 0x03BF,
                0x83CE: 0x03C0,
                0x83CF: 0x03C1,
                0x83D0: 0x03C3,
                0x83D1: 0x03C4,
                0x83D2: 0x03C5,
                0x83D3: 0x03C6,
                0x83D4: 0x03C7,
                0x83D5: 0x03C8,
                0x83D6: 0x03C9,
                0x8440: 0x0410,
                0x8441: 0x0411,
                0x8442: 0x0412,
                0x8443: 0x0413,
                0x8444: 0x0414,
                0x8445: 0x0415,
                0x8446: 0x0401,
                0x8447: 0x0416,
                0x8448: 0x0417,
                0x8449: 0x0418,
                0x844A: 0x0419,
                0x844B: 0x041A,
                0x844C: 0x041B,
                0x844D: 0x041C,
                0x844E: 0x041D,
                0x844F: 0x041E,
                0x8450: 0x041F,
                0x8451: 0x0420,
                0x8452: 0x0421,
                0x8453: 0x0422,
                0x8454: 0x0423,
                0x8455: 0x0424,
                0x8456: 0x0425,
                0x8457: 0x0426,
                0x8458: 0x0427,
                0x8459: 0x0428,
                0x845A: 0x0429,
                0x845B: 0x042A,
                0x845C: 0x042B,
                0x845D: 0x042C,
                0x845E: 0x042D,
                0x845F: 0x042E,
                0x8460: 0x042F,
                0x8470: 0x0430,
                0x8471: 0x0431,
                0x8472: 0x0432,
                0x8473: 0x0433,
                0x8474: 0x0434,
                0x8475: 0x0435,
                0x8476: 0x0451,
                0x8477: 0x0436,
                0x8478: 0x0437,
                0x8479: 0x0438,
                0x847A: 0x0439,
                0x847B: 0x043A,
                0x847C: 0x043B,
                0x847D: 0x043C,
                0x847E: 0x043D,
                0x8480: 0x043E,
                0x8481: 0x043F,
                0x8482: 0x0440,
                0x8483: 0x0441,
                0x8484: 0x0442,
                0x8485: 0x0443,
                0x8486: 0x0444,
                0x8487: 0x0445,
                0x8488: 0x0446,
                0x8489: 0x0447,
                0x848A: 0x0448,
                0x848B: 0x0449,
                0x848C: 0x044A,
                0x848D: 0x044B,
                0x848E: 0x044C,
                0x848F: 0x044D,
                0x8490: 0x044E,
                0x8491: 0x044F,
                0x849F: 0x2500,
                0x84A0: 0x2502,
                0x84A1: 0x250C,
                0x84A2: 0x2510,
                0x84A3: 0x2518,
                0x84A4: 0x2514,
                0x84A5: 0x251C,
                0x84A6: 0x252C,
                0x84A7: 0x2524,
                0x84A8: 0x2534,
                0x84A9: 0x253C,
                0x84AA: 0x2501,
                0x84AB: 0x2503,
                0x84AC: 0x250F,
                0x84AD: 0x2513,
                0x84AE: 0x251B,
                0x84AF: 0x2517,
                0x84B0: 0x2523,
                0x84B1: 0x2533,
                0x84B2: 0x252B,
                0x84B3: 0x253B,
                0x84B4: 0x254B,
                0x84B5: 0x2520,
                0x84B6: 0x252F,
                0x84B7: 0x2528,
                0x84B8: 0x2537,
                0x84B9: 0x253F,
                0x84BA: 0x251D,
                0x84BB: 0x2530,
                0x84BC: 0x2525,
                0x84BD: 0x2538,
                0x84BE: 0x2542,
                0x889F: 0x4E9C,
                0x88A0: 0x5516,
                0x88A1: 0x5A03,
                0x88A2: 0x963F,
                0x88A3: 0x54C0,
                0x88A4: 0x611B,
                0x88A5: 0x6328,
                0x88A6: 0x59F6,
                0x88A7: 0x9022,
                0x88A8: 0x8475,
                0x88A9: 0x831C,
                0x88AA: 0x7A50,
                0x88AB: 0x60AA,
                0x88AC: 0x63E1,
                0x88AD: 0x6E25,
                0x88AE: 0x65ED,
                0x88AF: 0x8466,
                0x88B0: 0x82A6,
                0x88B1: 0x9BF5,
                0x88B2: 0x6893,
                0x88B3: 0x5727,
                0x88B4: 0x65A1,
                0x88B5: 0x6271,
                0x88B6: 0x5B9B,
                0x88B7: 0x59D0,
                0x88B8: 0x867B,
                0x88B9: 0x98F4,
                0x88BA: 0x7D62,
                0x88BB: 0x7DBE,
                0x88BC: 0x9B8E,
                0x88BD: 0x6216,
                0x88BE: 0x7C9F,
                0x88BF: 0x88B7,
                0x88C0: 0x5B89,
                0x88C1: 0x5EB5,
                0x88C2: 0x6309,
                0x88C3: 0x6697,
                0x88C4: 0x6848,
                0x88C5: 0x95C7,
                0x88C6: 0x978D,
                0x88C7: 0x674F,
                0x88C8: 0x4EE5,
                0x88C9: 0x4F0A,
                0x88CA: 0x4F4D,
                0x88CB: 0x4F9D,
                0x88CC: 0x5049,
                0x88CD: 0x56F2,
                0x88CE: 0x5937,
                0x88CF: 0x59D4,
                0x88D0: 0x5A01,
                0x88D1: 0x5C09,
                0x88D2: 0x60DF,
                0x88D3: 0x610F,
                0x88D4: 0x6170,
                0x88D5: 0x6613,
                0x88D6: 0x6905,
                0x88D7: 0x70BA,
                0x88D8: 0x754F,
                0x88D9: 0x7570,
                0x88DA: 0x79FB,
                0x88DB: 0x7DAD,
                0x88DC: 0x7DEF,
                0x88DD: 0x80C3,
                0x88DE: 0x840E,
                0x88DF: 0x8863,
                0x88E0: 0x8B02,
                0x88E1: 0x9055,
                0x88E2: 0x907A,
                0x88E3: 0x533B,
                0x88E4: 0x4E95,
                0x88E5: 0x4EA5,
                0x88E6: 0x57DF,
                0x88E7: 0x80B2,
                0x88E8: 0x90C1,
                0x88E9: 0x78EF,
                0x88EA: 0x4E00,
                0x88EB: 0x58F1,
                0x88EC: 0x6EA2,
                0x88ED: 0x9038,
                0x88EE: 0x7A32,
                0x88EF: 0x8328,
                0x88F0: 0x828B,
                0x88F1: 0x9C2F,
                0x88F2: 0x5141,
                0x88F3: 0x5370,
                0x88F4: 0x54BD,
                0x88F5: 0x54E1,
                0x88F6: 0x56E0,
                0x88F7: 0x59FB,
                0x88F8: 0x5F15,
                0x88F9: 0x98F2,
                0x88FA: 0x6DEB,
                0x88FB: 0x80E4,
                0x88FC: 0x852D,
                0x8940: 0x9662,
                0x8941: 0x9670,
                0x8942: 0x96A0,
                0x8943: 0x97FB,
                0x8944: 0x540B,
                0x8945: 0x53F3,
                0x8946: 0x5B87,
                0x8947: 0x70CF,
                0x8948: 0x7FBD,
                0x8949: 0x8FC2,
                0x894A: 0x96E8,
                0x894B: 0x536F,
                0x894C: 0x9D5C,
                0x894D: 0x7ABA,
                0x894E: 0x4E11,
                0x894F: 0x7893,
                0x8950: 0x81FC,
                0x8951: 0x6E26,
                0x8952: 0x5618,
                0x8953: 0x5504,
                0x8954: 0x6B1D,
                0x8955: 0x851A,
                0x8956: 0x9C3B,
                0x8957: 0x59E5,
                0x8958: 0x53A9,
                0x8959: 0x6D66,
                0x895A: 0x74DC,
                0x895B: 0x958F,
                0x895C: 0x5642,
                0x895D: 0x4E91,
                0x895E: 0x904B,
                0x895F: 0x96F2,
                0x8960: 0x834F,
                0x8961: 0x990C,
                0x8962: 0x53E1,
                0x8963: 0x55B6,
                0x8964: 0x5B30,
                0x8965: 0x5F71,
                0x8966: 0x6620,
                0x8967: 0x66F3,
                0x8968: 0x6804,
                0x8969: 0x6C38,
                0x896A: 0x6CF3,
                0x896B: 0x6D29,
                0x896C: 0x745B,
                0x896D: 0x76C8,
                0x896E: 0x7A4E,
                0x896F: 0x9834,
                0x8970: 0x82F1,
                0x8971: 0x885B,
                0x8972: 0x8A60,
                0x8973: 0x92ED,
                0x8974: 0x6DB2,
                0x8975: 0x75AB,
                0x8976: 0x76CA,
                0x8977: 0x99C5,
                0x8978: 0x60A6,
                0x8979: 0x8B01,
                0x897A: 0x8D8A,
                0x897B: 0x95B2,
                0x897C: 0x698E,
                0x897D: 0x53AD,
                0x897E: 0x5186,
                0x8980: 0x5712,
                0x8981: 0x5830,
                0x8982: 0x5944,
                0x8983: 0x5BB4,
                0x8984: 0x5EF6,
                0x8985: 0x6028,
                0x8986: 0x63A9,
                0x8987: 0x63F4,
                0x8988: 0x6CBF,
                0x8989: 0x6F14,
                0x898A: 0x708E,
                0x898B: 0x7114,
                0x898C: 0x7159,
                0x898D: 0x71D5,
                0x898E: 0x733F,
                0x898F: 0x7E01,
                0x8990: 0x8276,
                0x8991: 0x82D1,
                0x8992: 0x8597,
                0x8993: 0x9060,
                0x8994: 0x925B,
                0x8995: 0x9D1B,
                0x8996: 0x5869,
                0x8997: 0x65BC,
                0x8998: 0x6C5A,
                0x8999: 0x7525,
                0x899A: 0x51F9,
                0x899B: 0x592E,
                0x899C: 0x5965,
                0x899D: 0x5F80,
                0x899E: 0x5FDC,
                0x899F: 0x62BC,
                0x89A0: 0x65FA,
                0x89A1: 0x6A2A,
                0x89A2: 0x6B27,
                0x89A3: 0x6BB4,
                0x89A4: 0x738B,
                0x89A5: 0x7FC1,
                0x89A6: 0x8956,
                0x89A7: 0x9D2C,
                0x89A8: 0x9D0E,
                0x89A9: 0x9EC4,
                0x89AA: 0x5CA1,
                0x89AB: 0x6C96,
                0x89AC: 0x837B,
                0x89AD: 0x5104,
                0x89AE: 0x5C4B,
                0x89AF: 0x61B6,
                0x89B0: 0x81C6,
                0x89B1: 0x6876,
                0x89B2: 0x7261,
                0x89B3: 0x4E59,
                0x89B4: 0x4FFA,
                0x89B5: 0x5378,
                0x89B6: 0x6069,
                0x89B7: 0x6E29,
                0x89B8: 0x7A4F,
                0x89B9: 0x97F3,
                0x89BA: 0x4E0B,
                0x89BB: 0x5316,
                0x89BC: 0x4EEE,
                0x89BD: 0x4F55,
                0x89BE: 0x4F3D,
                0x89BF: 0x4FA1,
                0x89C0: 0x4F73,
                0x89C1: 0x52A0,
                0x89C2: 0x53EF,
                0x89C3: 0x5609,
                0x89C4: 0x590F,
                0x89C5: 0x5AC1,
                0x89C6: 0x5BB6,
                0x89C7: 0x5BE1,
                0x89C8: 0x79D1,
                0x89C9: 0x6687,
                0x89CA: 0x679C,
                0x89CB: 0x67B6,
                0x89CC: 0x6B4C,
                0x89CD: 0x6CB3,
                0x89CE: 0x706B,
                0x89CF: 0x73C2,
                0x89D0: 0x798D,
                0x89D1: 0x79BE,
                0x89D2: 0x7A3C,
                0x89D3: 0x7B87,
                0x89D4: 0x82B1,
                0x89D5: 0x82DB,
                0x89D6: 0x8304,
                0x89D7: 0x8377,
                0x89D8: 0x83EF,
                0x89D9: 0x83D3,
                0x89DA: 0x8766,
                0x89DB: 0x8AB2,
                0x89DC: 0x5629,
                0x89DD: 0x8CA8,
                0x89DE: 0x8FE6,
                0x89DF: 0x904E,
                0x89E0: 0x971E,
                0x89E1: 0x868A,
                0x89E2: 0x4FC4,
                0x89E3: 0x5CE8,
                0x89E4: 0x6211,
                0x89E5: 0x7259,
                0x89E6: 0x753B,
                0x89E7: 0x81E5,
                0x89E8: 0x82BD,
                0x89E9: 0x86FE,
                0x89EA: 0x8CC0,
                0x89EB: 0x96C5,
                0x89EC: 0x9913,
                0x89ED: 0x99D5,
                0x89EE: 0x4ECB,
                0x89EF: 0x4F1A,
                0x89F0: 0x89E3,
                0x89F1: 0x56DE,
                0x89F2: 0x584A,
                0x89F3: 0x58CA,
                0x89F4: 0x5EFB,
                0x89F5: 0x5FEB,
                0x89F6: 0x602A,
                0x89F7: 0x6094,
                0x89F8: 0x6062,
                0x89F9: 0x61D0,
                0x89FA: 0x6212,
                0x89FB: 0x62D0,
                0x89FC: 0x6539,
                0x8A40: 0x9B41,
                0x8A41: 0x6666,
                0x8A42: 0x68B0,
                0x8A43: 0x6D77,
                0x8A44: 0x7070,
                0x8A45: 0x754C,
                0x8A46: 0x7686,
                0x8A47: 0x7D75,
                0x8A48: 0x82A5,
                0x8A49: 0x87F9,
                0x8A4A: 0x958B,
                0x8A4B: 0x968E,
                0x8A4C: 0x8C9D,
                0x8A4D: 0x51F1,
                0x8A4E: 0x52BE,
                0x8A4F: 0x5916,
                0x8A50: 0x54B3,
                0x8A51: 0x5BB3,
                0x8A52: 0x5D16,
                0x8A53: 0x6168,
                0x8A54: 0x6982,
                0x8A55: 0x6DAF,
                0x8A56: 0x788D,
                0x8A57: 0x84CB,
                0x8A58: 0x8857,
                0x8A59: 0x8A72,
                0x8A5A: 0x93A7,
                0x8A5B: 0x9AB8,
                0x8A5C: 0x6D6C,
                0x8A5D: 0x99A8,
                0x8A5E: 0x86D9,
                0x8A5F: 0x57A3,
                0x8A60: 0x67FF,
                0x8A61: 0x86CE,
                0x8A62: 0x920E,
                0x8A63: 0x5283,
                0x8A64: 0x5687,
                0x8A65: 0x5404,
                0x8A66: 0x5ED3,
                0x8A67: 0x62E1,
                0x8A68: 0x64B9,
                0x8A69: 0x683C,
                0x8A6A: 0x6838,
                0x8A6B: 0x6BBB,
                0x8A6C: 0x7372,
                0x8A6D: 0x78BA,
                0x8A6E: 0x7A6B,
                0x8A6F: 0x899A,
                0x8A70: 0x89D2,
                0x8A71: 0x8D6B,
                0x8A72: 0x8F03,
                0x8A73: 0x90ED,
                0x8A74: 0x95A3,
                0x8A75: 0x9694,
                0x8A76: 0x9769,
                0x8A77: 0x5B66,
                0x8A78: 0x5CB3,
                0x8A79: 0x697D,
                0x8A7A: 0x984D,
                0x8A7B: 0x984E,
                0x8A7C: 0x639B,
                0x8A7D: 0x7B20,
                0x8A7E: 0x6A2B,
                0x8A80: 0x6A7F,
                0x8A81: 0x68B6,
                0x8A82: 0x9C0D,
                0x8A83: 0x6F5F,
                0x8A84: 0x5272,
                0x8A85: 0x559D,
                0x8A86: 0x6070,
                0x8A87: 0x62EC,
                0x8A88: 0x6D3B,
                0x8A89: 0x6E07,
                0x8A8A: 0x6ED1,
                0x8A8B: 0x845B,
                0x8A8C: 0x8910,
                0x8A8D: 0x8F44,
                0x8A8E: 0x4E14,
                0x8A8F: 0x9C39,
                0x8A90: 0x53F6,
                0x8A91: 0x691B,
                0x8A92: 0x6A3A,
                0x8A93: 0x9784,
                0x8A94: 0x682A,
                0x8A95: 0x515C,
                0x8A96: 0x7AC3,
                0x8A97: 0x84B2,
                0x8A98: 0x91DC,
                0x8A99: 0x938C,
                0x8A9A: 0x565B,
                0x8A9B: 0x9D28,
                0x8A9C: 0x6822,
                0x8A9D: 0x8305,
                0x8A9E: 0x8431,
                0x8A9F: 0x7CA5,
                0x8AA0: 0x5208,
                0x8AA1: 0x82C5,
                0x8AA2: 0x74E6,
                0x8AA3: 0x4E7E,
                0x8AA4: 0x4F83,
                0x8AA5: 0x51A0,
                0x8AA6: 0x5BD2,
                0x8AA7: 0x520A,
                0x8AA8: 0x52D8,
                0x8AA9: 0x52E7,
                0x8AAA: 0x5DFB,
                0x8AAB: 0x559A,
                0x8AAC: 0x582A,
                0x8AAD: 0x59E6,
                0x8AAE: 0x5B8C,
                0x8AAF: 0x5B98,
                0x8AB0: 0x5BDB,
                0x8AB1: 0x5E72,
                0x8AB2: 0x5E79,
                0x8AB3: 0x60A3,
                0x8AB4: 0x611F,
                0x8AB5: 0x6163,
                0x8AB6: 0x61BE,
                0x8AB7: 0x63DB,
                0x8AB8: 0x6562,
                0x8AB9: 0x67D1,
                0x8ABA: 0x6853,
                0x8ABB: 0x68FA,
                0x8ABC: 0x6B3E,
                0x8ABD: 0x6B53,
                0x8ABE: 0x6C57,
                0x8ABF: 0x6F22,
                0x8AC0: 0x6F97,
                0x8AC1: 0x6F45,
                0x8AC2: 0x74B0,
                0x8AC3: 0x7518,
                0x8AC4: 0x76E3,
                0x8AC5: 0x770B,
                0x8AC6: 0x7AFF,
                0x8AC7: 0x7BA1,
                0x8AC8: 0x7C21,
                0x8AC9: 0x7DE9,
                0x8ACA: 0x7F36,
                0x8ACB: 0x7FF0,
                0x8ACC: 0x809D,
                0x8ACD: 0x8266,
                0x8ACE: 0x839E,
                0x8ACF: 0x89B3,
                0x8AD0: 0x8ACC,
                0x8AD1: 0x8CAB,
                0x8AD2: 0x9084,
                0x8AD3: 0x9451,
                0x8AD4: 0x9593,
                0x8AD5: 0x9591,
                0x8AD6: 0x95A2,
                0x8AD7: 0x9665,
                0x8AD8: 0x97D3,
                0x8AD9: 0x9928,
                0x8ADA: 0x8218,
                0x8ADB: 0x4E38,
                0x8ADC: 0x542B,
                0x8ADD: 0x5CB8,
                0x8ADE: 0x5DCC,
                0x8ADF: 0x73A9,
                0x8AE0: 0x764C,
                0x8AE1: 0x773C,
                0x8AE2: 0x5CA9,
                0x8AE3: 0x7FEB,
                0x8AE4: 0x8D0B,
                0x8AE5: 0x96C1,
                0x8AE6: 0x9811,
                0x8AE7: 0x9854,
                0x8AE8: 0x9858,
                0x8AE9: 0x4F01,
                0x8AEA: 0x4F0E,
                0x8AEB: 0x5371,
                0x8AEC: 0x559C,
                0x8AED: 0x5668,
                0x8AEE: 0x57FA,
                0x8AEF: 0x5947,
                0x8AF0: 0x5B09,
                0x8AF1: 0x5BC4,
                0x8AF2: 0x5C90,
                0x8AF3: 0x5E0C,
                0x8AF4: 0x5E7E,
                0x8AF5: 0x5FCC,
                0x8AF6: 0x63EE,
                0x8AF7: 0x673A,
                0x8AF8: 0x65D7,
                0x8AF9: 0x65E2,
                0x8AFA: 0x671F,
                0x8AFB: 0x68CB,
                0x8AFC: 0x68C4,
                0x8B40: 0x6A5F,
                0x8B41: 0x5E30,
                0x8B42: 0x6BC5,
                0x8B43: 0x6C17,
                0x8B44: 0x6C7D,
                0x8B45: 0x757F,
                0x8B46: 0x7948,
                0x8B47: 0x5B63,
                0x8B48: 0x7A00,
                0x8B49: 0x7D00,
                0x8B4A: 0x5FBD,
                0x8B4B: 0x898F,
                0x8B4C: 0x8A18,
                0x8B4D: 0x8CB4,
                0x8B4E: 0x8D77,
                0x8B4F: 0x8ECC,
                0x8B50: 0x8F1D,
                0x8B51: 0x98E2,
                0x8B52: 0x9A0E,
                0x8B53: 0x9B3C,
                0x8B54: 0x4E80,
                0x8B55: 0x507D,
                0x8B56: 0x5100,
                0x8B57: 0x5993,
                0x8B58: 0x5B9C,
                0x8B59: 0x622F,
                0x8B5A: 0x6280,
                0x8B5B: 0x64EC,
                0x8B5C: 0x6B3A,
                0x8B5D: 0x72A0,
                0x8B5E: 0x7591,
                0x8B5F: 0x7947,
                0x8B60: 0x7FA9,
                0x8B61: 0x87FB,
                0x8B62: 0x8ABC,
                0x8B63: 0x8B70,
                0x8B64: 0x63AC,
                0x8B65: 0x83CA,
                0x8B66: 0x97A0,
                0x8B67: 0x5409,
                0x8B68: 0x5403,
                0x8B69: 0x55AB,
                0x8B6A: 0x6854,
                0x8B6B: 0x6A58,
                0x8B6C: 0x8A70,
                0x8B6D: 0x7827,
                0x8B6E: 0x6775,
                0x8B6F: 0x9ECD,
                0x8B70: 0x5374,
                0x8B71: 0x5BA2,
                0x8B72: 0x811A,
                0x8B73: 0x8650,
                0x8B74: 0x9006,
                0x8B75: 0x4E18,
                0x8B76: 0x4E45,
                0x8B77: 0x4EC7,
                0x8B78: 0x4F11,
                0x8B79: 0x53CA,
                0x8B7A: 0x5438,
                0x8B7B: 0x5BAE,
                0x8B7C: 0x5F13,
                0x8B7D: 0x6025,
                0x8B7E: 0x6551,
                0x8B80: 0x673D,
                0x8B81: 0x6C42,
                0x8B82: 0x6C72,
                0x8B83: 0x6CE3,
                0x8B84: 0x7078,
                0x8B85: 0x7403,
                0x8B86: 0x7A76,
                0x8B87: 0x7AAE,
                0x8B88: 0x7B08,
                0x8B89: 0x7D1A,
                0x8B8A: 0x7CFE,
                0x8B8B: 0x7D66,
                0x8B8C: 0x65E7,
                0x8B8D: 0x725B,
                0x8B8E: 0x53BB,
                0x8B8F: 0x5C45,
                0x8B90: 0x5DE8,
                0x8B91: 0x62D2,
                0x8B92: 0x62E0,
                0x8B93: 0x6319,
                0x8B94: 0x6E20,
                0x8B95: 0x865A,
                0x8B96: 0x8A31,
                0x8B97: 0x8DDD,
                0x8B98: 0x92F8,
                0x8B99: 0x6F01,
                0x8B9A: 0x79A6,
                0x8B9B: 0x9B5A,
                0x8B9C: 0x4EA8,
                0x8B9D: 0x4EAB,
                0x8B9E: 0x4EAC,
                0x8B9F: 0x4F9B,
                0x8BA0: 0x4FA0,
                0x8BA1: 0x50D1,
                0x8BA2: 0x5147,
                0x8BA3: 0x7AF6,
                0x8BA4: 0x5171,
                0x8BA5: 0x51F6,
                0x8BA6: 0x5354,
                0x8BA7: 0x5321,
                0x8BA8: 0x537F,
                0x8BA9: 0x53EB,
                0x8BAA: 0x55AC,
                0x8BAB: 0x5883,
                0x8BAC: 0x5CE1,
                0x8BAD: 0x5F37,
                0x8BAE: 0x5F4A,
                0x8BAF: 0x602F,
                0x8BB0: 0x6050,
                0x8BB1: 0x606D,
                0x8BB2: 0x631F,
                0x8BB3: 0x6559,
                0x8BB4: 0x6A4B,
                0x8BB5: 0x6CC1,
                0x8BB6: 0x72C2,
                0x8BB7: 0x72ED,
                0x8BB8: 0x77EF,
                0x8BB9: 0x80F8,
                0x8BBA: 0x8105,
                0x8BBB: 0x8208,
                0x8BBC: 0x854E,
                0x8BBD: 0x90F7,
                0x8BBE: 0x93E1,
                0x8BBF: 0x97FF,
                0x8BC0: 0x9957,
                0x8BC1: 0x9A5A,
                0x8BC2: 0x4EF0,
                0x8BC3: 0x51DD,
                0x8BC4: 0x5C2D,
                0x8BC5: 0x6681,
                0x8BC6: 0x696D,
                0x8BC7: 0x5C40,
                0x8BC8: 0x66F2,
                0x8BC9: 0x6975,
                0x8BCA: 0x7389,
                0x8BCB: 0x6850,
                0x8BCC: 0x7C81,
                0x8BCD: 0x50C5,
                0x8BCE: 0x52E4,
                0x8BCF: 0x5747,
                0x8BD0: 0x5DFE,
                0x8BD1: 0x9326,
                0x8BD2: 0x65A4,
                0x8BD3: 0x6B23,
                0x8BD4: 0x6B3D,
                0x8BD5: 0x7434,
                0x8BD6: 0x7981,
                0x8BD7: 0x79BD,
                0x8BD8: 0x7B4B,
                0x8BD9: 0x7DCA,
                0x8BDA: 0x82B9,
                0x8BDB: 0x83CC,
                0x8BDC: 0x887F,
                0x8BDD: 0x895F,
                0x8BDE: 0x8B39,
                0x8BDF: 0x8FD1,
                0x8BE0: 0x91D1,
                0x8BE1: 0x541F,
                0x8BE2: 0x9280,
                0x8BE3: 0x4E5D,
                0x8BE4: 0x5036,
                0x8BE5: 0x53E5,
                0x8BE6: 0x533A,
                0x8BE7: 0x72D7,
                0x8BE8: 0x7396,
                0x8BE9: 0x77E9,
                0x8BEA: 0x82E6,
                0x8BEB: 0x8EAF,
                0x8BEC: 0x99C6,
                0x8BED: 0x99C8,
                0x8BEE: 0x99D2,
                0x8BEF: 0x5177,
                0x8BF0: 0x611A,
                0x8BF1: 0x865E,
                0x8BF2: 0x55B0,
                0x8BF3: 0x7A7A,
                0x8BF4: 0x5076,
                0x8BF5: 0x5BD3,
                0x8BF6: 0x9047,
                0x8BF7: 0x9685,
                0x8BF8: 0x4E32,
                0x8BF9: 0x6ADB,
                0x8BFA: 0x91E7,
                0x8BFB: 0x5C51,
                0x8BFC: 0x5C48,
                0x8C40: 0x6398,
                0x8C41: 0x7A9F,
                0x8C42: 0x6C93,
                0x8C43: 0x9774,
                0x8C44: 0x8F61,
                0x8C45: 0x7AAA,
                0x8C46: 0x718A,
                0x8C47: 0x9688,
                0x8C48: 0x7C82,
                0x8C49: 0x6817,
                0x8C4A: 0x7E70,
                0x8C4B: 0x6851,
                0x8C4C: 0x936C,
                0x8C4D: 0x52F2,
                0x8C4E: 0x541B,
                0x8C4F: 0x85AB,
                0x8C50: 0x8A13,
                0x8C51: 0x7FA4,
                0x8C52: 0x8ECD,
                0x8C53: 0x90E1,
                0x8C54: 0x5366,
                0x8C55: 0x8888,
                0x8C56: 0x7941,
                0x8C57: 0x4FC2,
                0x8C58: 0x50BE,
                0x8C59: 0x5211,
                0x8C5A: 0x5144,
                0x8C5B: 0x5553,
                0x8C5C: 0x572D,
                0x8C5D: 0x73EA,
                0x8C5E: 0x578B,
                0x8C5F: 0x5951,
                0x8C60: 0x5F62,
                0x8C61: 0x5F84,
                0x8C62: 0x6075,
                0x8C63: 0x6176,
                0x8C64: 0x6167,
                0x8C65: 0x61A9,
                0x8C66: 0x63B2,
                0x8C67: 0x643A,
                0x8C68: 0x656C,
                0x8C69: 0x666F,
                0x8C6A: 0x6842,
                0x8C6B: 0x6E13,
                0x8C6C: 0x7566,
                0x8C6D: 0x7A3D,
                0x8C6E: 0x7CFB,
                0x8C6F: 0x7D4C,
                0x8C70: 0x7D99,
                0x8C71: 0x7E4B,
                0x8C72: 0x7F6B,
                0x8C73: 0x830E,
                0x8C74: 0x834A,
                0x8C75: 0x86CD,
                0x8C76: 0x8A08,
                0x8C77: 0x8A63,
                0x8C78: 0x8B66,
                0x8C79: 0x8EFD,
                0x8C7A: 0x981A,
                0x8C7B: 0x9D8F,
                0x8C7C: 0x82B8,
                0x8C7D: 0x8FCE,
                0x8C7E: 0x9BE8,
                0x8C80: 0x5287,
                0x8C81: 0x621F,
                0x8C82: 0x6483,
                0x8C83: 0x6FC0,
                0x8C84: 0x9699,
                0x8C85: 0x6841,
                0x8C86: 0x5091,
                0x8C87: 0x6B20,
                0x8C88: 0x6C7A,
                0x8C89: 0x6F54,
                0x8C8A: 0x7A74,
                0x8C8B: 0x7D50,
                0x8C8C: 0x8840,
                0x8C8D: 0x8A23,
                0x8C8E: 0x6708,
                0x8C8F: 0x4EF6,
                0x8C90: 0x5039,
                0x8C91: 0x5026,
                0x8C92: 0x5065,
                0x8C93: 0x517C,
                0x8C94: 0x5238,
                0x8C95: 0x5263,
                0x8C96: 0x55A7,
                0x8C97: 0x570F,
                0x8C98: 0x5805,
                0x8C99: 0x5ACC,
                0x8C9A: 0x5EFA,
                0x8C9B: 0x61B2,
                0x8C9C: 0x61F8,
                0x8C9D: 0x62F3,
                0x8C9E: 0x6372,
                0x8C9F: 0x691C,
                0x8CA0: 0x6A29,
                0x8CA1: 0x727D,
                0x8CA2: 0x72AC,
                0x8CA3: 0x732E,
                0x8CA4: 0x7814,
                0x8CA5: 0x786F,
                0x8CA6: 0x7D79,
                0x8CA7: 0x770C,
                0x8CA8: 0x80A9,
                0x8CA9: 0x898B,
                0x8CAA: 0x8B19,
                0x8CAB: 0x8CE2,
                0x8CAC: 0x8ED2,
                0x8CAD: 0x9063,
                0x8CAE: 0x9375,
                0x8CAF: 0x967A,
                0x8CB0: 0x9855,
                0x8CB1: 0x9A13,
                0x8CB2: 0x9E78,
                0x8CB3: 0x5143,
                0x8CB4: 0x539F,
                0x8CB5: 0x53B3,
                0x8CB6: 0x5E7B,
                0x8CB7: 0x5F26,
                0x8CB8: 0x6E1B,
                0x8CB9: 0x6E90,
                0x8CBA: 0x7384,
                0x8CBB: 0x73FE,
                0x8CBC: 0x7D43,
                0x8CBD: 0x8237,
                0x8CBE: 0x8A00,
                0x8CBF: 0x8AFA,
                0x8CC0: 0x9650,
                0x8CC1: 0x4E4E,
                0x8CC2: 0x500B,
                0x8CC3: 0x53E4,
                0x8CC4: 0x547C,
                0x8CC5: 0x56FA,
                0x8CC6: 0x59D1,
                0x8CC7: 0x5B64,
                0x8CC8: 0x5DF1,
                0x8CC9: 0x5EAB,
                0x8CCA: 0x5F27,
                0x8CCB: 0x6238,
                0x8CCC: 0x6545,
                0x8CCD: 0x67AF,
                0x8CCE: 0x6E56,
                0x8CCF: 0x72D0,
                0x8CD0: 0x7CCA,
                0x8CD1: 0x88B4,
                0x8CD2: 0x80A1,
                0x8CD3: 0x80E1,
                0x8CD4: 0x83F0,
                0x8CD5: 0x864E,
                0x8CD6: 0x8A87,
                0x8CD7: 0x8DE8,
                0x8CD8: 0x9237,
                0x8CD9: 0x96C7,
                0x8CDA: 0x9867,
                0x8CDB: 0x9F13,
                0x8CDC: 0x4E94,
                0x8CDD: 0x4E92,
                0x8CDE: 0x4F0D,
                0x8CDF: 0x5348,
                0x8CE0: 0x5449,
                0x8CE1: 0x543E,
                0x8CE2: 0x5A2F,
                0x8CE3: 0x5F8C,
                0x8CE4: 0x5FA1,
                0x8CE5: 0x609F,
                0x8CE6: 0x68A7,
                0x8CE7: 0x6A8E,
                0x8CE8: 0x745A,
                0x8CE9: 0x7881,
                0x8CEA: 0x8A9E,
                0x8CEB: 0x8AA4,
                0x8CEC: 0x8B77,
                0x8CED: 0x9190,
                0x8CEE: 0x4E5E,
                0x8CEF: 0x9BC9,
                0x8CF0: 0x4EA4,
                0x8CF1: 0x4F7C,
                0x8CF2: 0x4FAF,
                0x8CF3: 0x5019,
                0x8CF4: 0x5016,
                0x8CF5: 0x5149,
                0x8CF6: 0x516C,
                0x8CF7: 0x529F,
                0x8CF8: 0x52B9,
                0x8CF9: 0x52FE,
                0x8CFA: 0x539A,
                0x8CFB: 0x53E3,
                0x8CFC: 0x5411,
                0x8D40: 0x540E,
                0x8D41: 0x5589,
                0x8D42: 0x5751,
                0x8D43: 0x57A2,
                0x8D44: 0x597D,
                0x8D45: 0x5B54,
                0x8D46: 0x5B5D,
                0x8D47: 0x5B8F,
                0x8D48: 0x5DE5,
                0x8D49: 0x5DE7,
                0x8D4A: 0x5DF7,
                0x8D4B: 0x5E78,
                0x8D4C: 0x5E83,
                0x8D4D: 0x5E9A,
                0x8D4E: 0x5EB7,
                0x8D4F: 0x5F18,
                0x8D50: 0x6052,
                0x8D51: 0x614C,
                0x8D52: 0x6297,
                0x8D53: 0x62D8,
                0x8D54: 0x63A7,
                0x8D55: 0x653B,
                0x8D56: 0x6602,
                0x8D57: 0x6643,
                0x8D58: 0x66F4,
                0x8D59: 0x676D,
                0x8D5A: 0x6821,
                0x8D5B: 0x6897,
                0x8D5C: 0x69CB,
                0x8D5D: 0x6C5F,
                0x8D5E: 0x6D2A,
                0x8D5F: 0x6D69,
                0x8D60: 0x6E2F,
                0x8D61: 0x6E9D,
                0x8D62: 0x7532,
                0x8D63: 0x7687,
                0x8D64: 0x786C,
                0x8D65: 0x7A3F,
                0x8D66: 0x7CE0,
                0x8D67: 0x7D05,
                0x8D68: 0x7D18,
                0x8D69: 0x7D5E,
                0x8D6A: 0x7DB1,
                0x8D6B: 0x8015,
                0x8D6C: 0x8003,
                0x8D6D: 0x80AF,
                0x8D6E: 0x80B1,
                0x8D6F: 0x8154,
                0x8D70: 0x818F,
                0x8D71: 0x822A,
                0x8D72: 0x8352,
                0x8D73: 0x884C,
                0x8D74: 0x8861,
                0x8D75: 0x8B1B,
                0x8D76: 0x8CA2,
                0x8D77: 0x8CFC,
                0x8D78: 0x90CA,
                0x8D79: 0x9175,
                0x8D7A: 0x9271,
                0x8D7B: 0x783F,
                0x8D7C: 0x92FC,
                0x8D7D: 0x95A4,
                0x8D7E: 0x964D,
                0x8D80: 0x9805,
                0x8D81: 0x9999,
                0x8D82: 0x9AD8,
                0x8D83: 0x9D3B,
                0x8D84: 0x525B,
                0x8D85: 0x52AB,
                0x8D86: 0x53F7,
                0x8D87: 0x5408,
                0x8D88: 0x58D5,
                0x8D89: 0x62F7,
                0x8D8A: 0x6FE0,
                0x8D8B: 0x8C6A,
                0x8D8C: 0x8F5F,
                0x8D8D: 0x9EB9,
                0x8D8E: 0x514B,
                0x8D8F: 0x523B,
                0x8D90: 0x544A,
                0x8D91: 0x56FD,
                0x8D92: 0x7A40,
                0x8D93: 0x9177,
                0x8D94: 0x9D60,
                0x8D95: 0x9ED2,
                0x8D96: 0x7344,
                0x8D97: 0x6F09,
                0x8D98: 0x8170,
                0x8D99: 0x7511,
                0x8D9A: 0x5FFD,
                0x8D9B: 0x60DA,
                0x8D9C: 0x9AA8,
                0x8D9D: 0x72DB,
                0x8D9E: 0x8FBC,
                0x8D9F: 0x6B64,
                0x8DA0: 0x9803,
                0x8DA1: 0x4ECA,
                0x8DA2: 0x56F0,
                0x8DA3: 0x5764,
                0x8DA4: 0x58BE,
                0x8DA5: 0x5A5A,
                0x8DA6: 0x6068,
                0x8DA7: 0x61C7,
                0x8DA8: 0x660F,
                0x8DA9: 0x6606,
                0x8DAA: 0x6839,
                0x8DAB: 0x68B1,
                0x8DAC: 0x6DF7,
                0x8DAD: 0x75D5,
                0x8DAE: 0x7D3A,
                0x8DAF: 0x826E,
                0x8DB0: 0x9B42,
                0x8DB1: 0x4E9B,
                0x8DB2: 0x4F50,
                0x8DB3: 0x53C9,
                0x8DB4: 0x5506,
                0x8DB5: 0x5D6F,
                0x8DB6: 0x5DE6,
                0x8DB7: 0x5DEE,
                0x8DB8: 0x67FB,
                0x8DB9: 0x6C99,
                0x8DBA: 0x7473,
                0x8DBB: 0x7802,
                0x8DBC: 0x8A50,
                0x8DBD: 0x9396,
                0x8DBE: 0x88DF,
                0x8DBF: 0x5750,
                0x8DC0: 0x5EA7,
                0x8DC1: 0x632B,
                0x8DC2: 0x50B5,
                0x8DC3: 0x50AC,
                0x8DC4: 0x518D,
                0x8DC5: 0x6700,
                0x8DC6: 0x54C9,
                0x8DC7: 0x585E,
                0x8DC8: 0x59BB,
                0x8DC9: 0x5BB0,
                0x8DCA: 0x5F69,
                0x8DCB: 0x624D,
                0x8DCC: 0x63A1,
                0x8DCD: 0x683D,
                0x8DCE: 0x6B73,
                0x8DCF: 0x6E08,
                0x8DD0: 0x707D,
                0x8DD1: 0x91C7,
                0x8DD2: 0x7280,
                0x8DD3: 0x7815,
                0x8DD4: 0x7826,
                0x8DD5: 0x796D,
                0x8DD6: 0x658E,
                0x8DD7: 0x7D30,
                0x8DD8: 0x83DC,
                0x8DD9: 0x88C1,
                0x8DDA: 0x8F09,
                0x8DDB: 0x969B,
                0x8DDC: 0x5264,
                0x8DDD: 0x5728,
                0x8DDE: 0x6750,
                0x8DDF: 0x7F6A,
                0x8DE0: 0x8CA1,
                0x8DE1: 0x51B4,
                0x8DE2: 0x5742,
                0x8DE3: 0x962A,
                0x8DE4: 0x583A,
                0x8DE5: 0x698A,
                0x8DE6: 0x80B4,
                0x8DE7: 0x54B2,
                0x8DE8: 0x5D0E,
                0x8DE9: 0x57FC,
                0x8DEA: 0x7895,
                0x8DEB: 0x9DFA,
                0x8DEC: 0x4F5C,
                0x8DED: 0x524A,
                0x8DEE: 0x548B,
                0x8DEF: 0x643E,
                0x8DF0: 0x6628,
                0x8DF1: 0x6714,
                0x8DF2: 0x67F5,
                0x8DF3: 0x7A84,
                0x8DF4: 0x7B56,
                0x8DF5: 0x7D22,
                0x8DF6: 0x932F,
                0x8DF7: 0x685C,
                0x8DF8: 0x9BAD,
                0x8DF9: 0x7B39,
                0x8DFA: 0x5319,
                0x8DFB: 0x518A,
                0x8DFC: 0x5237,
                0x8E40: 0x5BDF,
                0x8E41: 0x62F6,
                0x8E42: 0x64AE,
                0x8E43: 0x64E6,
                0x8E44: 0x672D,
                0x8E45: 0x6BBA,
                0x8E46: 0x85A9,
                0x8E47: 0x96D1,
                0x8E48: 0x7690,
                0x8E49: 0x9BD6,
                0x8E4A: 0x634C,
                0x8E4B: 0x9306,
                0x8E4C: 0x9BAB,
                0x8E4D: 0x76BF,
                0x8E4E: 0x6652,
                0x8E4F: 0x4E09,
                0x8E50: 0x5098,
                0x8E51: 0x53C2,
                0x8E52: 0x5C71,
                0x8E53: 0x60E8,
                0x8E54: 0x6492,
                0x8E55: 0x6563,
                0x8E56: 0x685F,
                0x8E57: 0x71E6,
                0x8E58: 0x73CA,
                0x8E59: 0x7523,
                0x8E5A: 0x7B97,
                0x8E5B: 0x7E82,
                0x8E5C: 0x8695,
                0x8E5D: 0x8B83,
                0x8E5E: 0x8CDB,
                0x8E5F: 0x9178,
                0x8E60: 0x9910,
                0x8E61: 0x65AC,
                0x8E62: 0x66AB,
                0x8E63: 0x6B8B,
                0x8E64: 0x4ED5,
                0x8E65: 0x4ED4,
                0x8E66: 0x4F3A,
                0x8E67: 0x4F7F,
                0x8E68: 0x523A,
                0x8E69: 0x53F8,
                0x8E6A: 0x53F2,
                0x8E6B: 0x55E3,
                0x8E6C: 0x56DB,
                0x8E6D: 0x58EB,
                0x8E6E: 0x59CB,
                0x8E6F: 0x59C9,
                0x8E70: 0x59FF,
                0x8E71: 0x5B50,
                0x8E72: 0x5C4D,
                0x8E73: 0x5E02,
                0x8E74: 0x5E2B,
                0x8E75: 0x5FD7,
                0x8E76: 0x601D,
                0x8E77: 0x6307,
                0x8E78: 0x652F,
                0x8E79: 0x5B5C,
                0x8E7A: 0x65AF,
                0x8E7B: 0x65BD,
                0x8E7C: 0x65E8,
                0x8E7D: 0x679D,
                0x8E7E: 0x6B62,
                0x8E80: 0x6B7B,
                0x8E81: 0x6C0F,
                0x8E82: 0x7345,
                0x8E83: 0x7949,
                0x8E84: 0x79C1,
                0x8E85: 0x7CF8,
                0x8E86: 0x7D19,
                0x8E87: 0x7D2B,
                0x8E88: 0x80A2,
                0x8E89: 0x8102,
                0x8E8A: 0x81F3,
                0x8E8B: 0x8996,
                0x8E8C: 0x8A5E,
                0x8E8D: 0x8A69,
                0x8E8E: 0x8A66,
                0x8E8F: 0x8A8C,
                0x8E90: 0x8AEE,
                0x8E91: 0x8CC7,
                0x8E92: 0x8CDC,
                0x8E93: 0x96CC,
                0x8E94: 0x98FC,
                0x8E95: 0x6B6F,
                0x8E96: 0x4E8B,
                0x8E97: 0x4F3C,
                0x8E98: 0x4F8D,
                0x8E99: 0x5150,
                0x8E9A: 0x5B57,
                0x8E9B: 0x5BFA,
                0x8E9C: 0x6148,
                0x8E9D: 0x6301,
                0x8E9E: 0x6642,
                0x8E9F: 0x6B21,
                0x8EA0: 0x6ECB,
                0x8EA1: 0x6CBB,
                0x8EA2: 0x723E,
                0x8EA3: 0x74BD,
                0x8EA4: 0x75D4,
                0x8EA5: 0x78C1,
                0x8EA6: 0x793A,
                0x8EA7: 0x800C,
                0x8EA8: 0x8033,
                0x8EA9: 0x81EA,
                0x8EAA: 0x8494,
                0x8EAB: 0x8F9E,
                0x8EAC: 0x6C50,
                0x8EAD: 0x9E7F,
                0x8EAE: 0x5F0F,
                0x8EAF: 0x8B58,
                0x8EB0: 0x9D2B,
                0x8EB1: 0x7AFA,
                0x8EB2: 0x8EF8,
                0x8EB3: 0x5B8D,
                0x8EB4: 0x96EB,
                0x8EB5: 0x4E03,
                0x8EB6: 0x53F1,
                0x8EB7: 0x57F7,
                0x8EB8: 0x5931,
                0x8EB9: 0x5AC9,
                0x8EBA: 0x5BA4,
                0x8EBB: 0x6089,
                0x8EBC: 0x6E7F,
                0x8EBD: 0x6F06,
                0x8EBE: 0x75BE,
                0x8EBF: 0x8CEA,
                0x8EC0: 0x5B9F,
                0x8EC1: 0x8500,
                0x8EC2: 0x7BE0,
                0x8EC3: 0x5072,
                0x8EC4: 0x67F4,
                0x8EC5: 0x829D,
                0x8EC6: 0x5C61,
                0x8EC7: 0x854A,
                0x8EC8: 0x7E1E,
                0x8EC9: 0x820E,
                0x8ECA: 0x5199,
                0x8ECB: 0x5C04,
                0x8ECC: 0x6368,
                0x8ECD: 0x8D66,
                0x8ECE: 0x659C,
                0x8ECF: 0x716E,
                0x8ED0: 0x793E,
                0x8ED1: 0x7D17,
                0x8ED2: 0x8005,
                0x8ED3: 0x8B1D,
                0x8ED4: 0x8ECA,
                0x8ED5: 0x906E,
                0x8ED6: 0x86C7,
                0x8ED7: 0x90AA,
                0x8ED8: 0x501F,
                0x8ED9: 0x52FA,
                0x8EDA: 0x5C3A,
                0x8EDB: 0x6753,
                0x8EDC: 0x707C,
                0x8EDD: 0x7235,
                0x8EDE: 0x914C,
                0x8EDF: 0x91C8,
                0x8EE0: 0x932B,
                0x8EE1: 0x82E5,
                0x8EE2: 0x5BC2,
                0x8EE3: 0x5F31,
                0x8EE4: 0x60F9,
                0x8EE5: 0x4E3B,
                0x8EE6: 0x53D6,
                0x8EE7: 0x5B88,
                0x8EE8: 0x624B,
                0x8EE9: 0x6731,
                0x8EEA: 0x6B8A,
                0x8EEB: 0x72E9,
                0x8EEC: 0x73E0,
                0x8EED: 0x7A2E,
                0x8EEE: 0x816B,
                0x8EEF: 0x8DA3,
                0x8EF0: 0x9152,
                0x8EF1: 0x9996,
                0x8EF2: 0x5112,
                0x8EF3: 0x53D7,
                0x8EF4: 0x546A,
                0x8EF5: 0x5BFF,
                0x8EF6: 0x6388,
                0x8EF7: 0x6A39,
                0x8EF8: 0x7DAC,
                0x8EF9: 0x9700,
                0x8EFA: 0x56DA,
                0x8EFB: 0x53CE,
                0x8EFC: 0x5468,
                0x8F40: 0x5B97,
                0x8F41: 0x5C31,
                0x8F42: 0x5DDE,
                0x8F43: 0x4FEE,
                0x8F44: 0x6101,
                0x8F45: 0x62FE,
                0x8F46: 0x6D32,
                0x8F47: 0x79C0,
                0x8F48: 0x79CB,
                0x8F49: 0x7D42,
                0x8F4A: 0x7E4D,
                0x8F4B: 0x7FD2,
                0x8F4C: 0x81ED,
                0x8F4D: 0x821F,
                0x8F4E: 0x8490,
                0x8F4F: 0x8846,
                0x8F50: 0x8972,
                0x8F51: 0x8B90,
                0x8F52: 0x8E74,
                0x8F53: 0x8F2F,
                0x8F54: 0x9031,
                0x8F55: 0x914B,
                0x8F56: 0x916C,
                0x8F57: 0x96C6,
                0x8F58: 0x919C,
                0x8F59: 0x4EC0,
                0x8F5A: 0x4F4F,
                0x8F5B: 0x5145,
                0x8F5C: 0x5341,
                0x8F5D: 0x5F93,
                0x8F5E: 0x620E,
                0x8F5F: 0x67D4,
                0x8F60: 0x6C41,
                0x8F61: 0x6E0B,
                0x8F62: 0x7363,
                0x8F63: 0x7E26,
                0x8F64: 0x91CD,
                0x8F65: 0x9283,
                0x8F66: 0x53D4,
                0x8F67: 0x5919,
                0x8F68: 0x5BBF,
                0x8F69: 0x6DD1,
                0x8F6A: 0x795D,
                0x8F6B: 0x7E2E,
                0x8F6C: 0x7C9B,
                0x8F6D: 0x587E,
                0x8F6E: 0x719F,
                0x8F6F: 0x51FA,
                0x8F70: 0x8853,
                0x8F71: 0x8FF0,
                0x8F72: 0x4FCA,
                0x8F73: 0x5CFB,
                0x8F74: 0x6625,
                0x8F75: 0x77AC,
                0x8F76: 0x7AE3,
                0x8F77: 0x821C,
                0x8F78: 0x99FF,
                0x8F79: 0x51C6,
                0x8F7A: 0x5FAA,
                0x8F7B: 0x65EC,
                0x8F7C: 0x696F,
                0x8F7D: 0x6B89,
                0x8F7E: 0x6DF3,
                0x8F80: 0x6E96,
                0x8F81: 0x6F64,
                0x8F82: 0x76FE,
                0x8F83: 0x7D14,
                0x8F84: 0x5DE1,
                0x8F85: 0x9075,
                0x8F86: 0x9187,
                0x8F87: 0x9806,
                0x8F88: 0x51E6,
                0x8F89: 0x521D,
                0x8F8A: 0x6240,
                0x8F8B: 0x6691,
                0x8F8C: 0x66D9,
                0x8F8D: 0x6E1A,
                0x8F8E: 0x5EB6,
                0x8F8F: 0x7DD2,
                0x8F90: 0x7F72,
                0x8F91: 0x66F8,
                0x8F92: 0x85AF,
                0x8F93: 0x85F7,
                0x8F94: 0x8AF8,
                0x8F95: 0x52A9,
                0x8F96: 0x53D9,
                0x8F97: 0x5973,
                0x8F98: 0x5E8F,
                0x8F99: 0x5F90,
                0x8F9A: 0x6055,
                0x8F9B: 0x92E4,
                0x8F9C: 0x9664,
                0x8F9D: 0x50B7,
                0x8F9E: 0x511F,
                0x8F9F: 0x52DD,
                0x8FA0: 0x5320,
                0x8FA1: 0x5347,
                0x8FA2: 0x53EC,
                0x8FA3: 0x54E8,
                0x8FA4: 0x5546,
                0x8FA5: 0x5531,
                0x8FA6: 0x5617,
                0x8FA7: 0x5968,
                0x8FA8: 0x59BE,
                0x8FA9: 0x5A3C,
                0x8FAA: 0x5BB5,
                0x8FAB: 0x5C06,
                0x8FAC: 0x5C0F,
                0x8FAD: 0x5C11,
                0x8FAE: 0x5C1A,
                0x8FAF: 0x5E84,
                0x8FB0: 0x5E8A,
                0x8FB1: 0x5EE0,
                0x8FB2: 0x5F70,
                0x8FB3: 0x627F,
                0x8FB4: 0x6284,
                0x8FB5: 0x62DB,
                0x8FB6: 0x638C,
                0x8FB7: 0x6377,
                0x8FB8: 0x6607,
                0x8FB9: 0x660C,
                0x8FBA: 0x662D,
                0x8FBB: 0x6676,
                0x8FBC: 0x677E,
                0x8FBD: 0x68A2,
                0x8FBE: 0x6A1F,
                0x8FBF: 0x6A35,
                0x8FC0: 0x6CBC,
                0x8FC1: 0x6D88,
                0x8FC2: 0x6E09,
                0x8FC3: 0x6E58,
                0x8FC4: 0x713C,
                0x8FC5: 0x7126,
                0x8FC6: 0x7167,
                0x8FC7: 0x75C7,
                0x8FC8: 0x7701,
                0x8FC9: 0x785D,
                0x8FCA: 0x7901,
                0x8FCB: 0x7965,
                0x8FCC: 0x79F0,
                0x8FCD: 0x7AE0,
                0x8FCE: 0x7B11,
                0x8FCF: 0x7CA7,
                0x8FD0: 0x7D39,
                0x8FD1: 0x8096,
                0x8FD2: 0x83D6,
                0x8FD3: 0x848B,
                0x8FD4: 0x8549,
                0x8FD5: 0x885D,
                0x8FD6: 0x88F3,
                0x8FD7: 0x8A1F,
                0x8FD8: 0x8A3C,
                0x8FD9: 0x8A54,
                0x8FDA: 0x8A73,
                0x8FDB: 0x8C61,
                0x8FDC: 0x8CDE,
                0x8FDD: 0x91A4,
                0x8FDE: 0x9266,
                0x8FDF: 0x937E,
                0x8FE0: 0x9418,
                0x8FE1: 0x969C,
                0x8FE2: 0x9798,
                0x8FE3: 0x4E0A,
                0x8FE4: 0x4E08,
                0x8FE5: 0x4E1E,
                0x8FE6: 0x4E57,
                0x8FE7: 0x5197,
                0x8FE8: 0x5270,
                0x8FE9: 0x57CE,
                0x8FEA: 0x5834,
                0x8FEB: 0x58CC,
                0x8FEC: 0x5B22,
                0x8FED: 0x5E38,
                0x8FEE: 0x60C5,
                0x8FEF: 0x64FE,
                0x8FF0: 0x6761,
                0x8FF1: 0x6756,
                0x8FF2: 0x6D44,
                0x8FF3: 0x72B6,
                0x8FF4: 0x7573,
                0x8FF5: 0x7A63,
                0x8FF6: 0x84B8,
                0x8FF7: 0x8B72,
                0x8FF8: 0x91B8,
                0x8FF9: 0x9320,
                0x8FFA: 0x5631,
                0x8FFB: 0x57F4,
                0x8FFC: 0x98FE,
                0x9040: 0x62ED,
                0x9041: 0x690D,
                0x9042: 0x6B96,
                0x9043: 0x71ED,
                0x9044: 0x7E54,
                0x9045: 0x8077,
                0x9046: 0x8272,
                0x9047: 0x89E6,
                0x9048: 0x98DF,
                0x9049: 0x8755,
                0x904A: 0x8FB1,
                0x904B: 0x5C3B,
                0x904C: 0x4F38,
                0x904D: 0x4FE1,
                0x904E: 0x4FB5,
                0x904F: 0x5507,
                0x9050: 0x5A20,
                0x9051: 0x5BDD,
                0x9052: 0x5BE9,
                0x9053: 0x5FC3,
                0x9054: 0x614E,
                0x9055: 0x632F,
                0x9056: 0x65B0,
                0x9057: 0x664B,
                0x9058: 0x68EE,
                0x9059: 0x699B,
                0x905A: 0x6D78,
                0x905B: 0x6DF1,
                0x905C: 0x7533,
                0x905D: 0x75B9,
                0x905E: 0x771F,
                0x905F: 0x795E,
                0x9060: 0x79E6,
                0x9061: 0x7D33,
                0x9062: 0x81E3,
                0x9063: 0x82AF,
                0x9064: 0x85AA,
                0x9065: 0x89AA,
                0x9066: 0x8A3A,
                0x9067: 0x8EAB,
                0x9068: 0x8F9B,
                0x9069: 0x9032,
                0x906A: 0x91DD,
                0x906B: 0x9707,
                0x906C: 0x4EBA,
                0x906D: 0x4EC1,
                0x906E: 0x5203,
                0x906F: 0x5875,
                0x9070: 0x58EC,
                0x9071: 0x5C0B,
                0x9072: 0x751A,
                0x9073: 0x5C3D,
                0x9074: 0x814E,
                0x9075: 0x8A0A,
                0x9076: 0x8FC5,
                0x9077: 0x9663,
                0x9078: 0x976D,
                0x9079: 0x7B25,
                0x907A: 0x8ACF,
                0x907B: 0x9808,
                0x907C: 0x9162,
                0x907D: 0x56F3,
                0x907E: 0x53A8,
                0x9080: 0x9017,
                0x9081: 0x5439,
                0x9082: 0x5782,
                0x9083: 0x5E25,
                0x9084: 0x63A8,
                0x9085: 0x6C34,
                0x9086: 0x708A,
                0x9087: 0x7761,
                0x9088: 0x7C8B,
                0x9089: 0x7FE0,
                0x908A: 0x8870,
                0x908B: 0x9042,
                0x908C: 0x9154,
                0x908D: 0x9310,
                0x908E: 0x9318,
                0x908F: 0x968F,
                0x9090: 0x745E,
                0x9091: 0x9AC4,
                0x9092: 0x5D07,
                0x9093: 0x5D69,
                0x9094: 0x6570,
                0x9095: 0x67A2,
                0x9096: 0x8DA8,
                0x9097: 0x96DB,
                0x9098: 0x636E,
                0x9099: 0x6749,
                0x909A: 0x6919,
                0x909B: 0x83C5,
                0x909C: 0x9817,
                0x909D: 0x96C0,
                0x909E: 0x88FE,
                0x909F: 0x6F84,
                0x90A0: 0x647A,
                0x90A1: 0x5BF8,
                0x90A2: 0x4E16,
                0x90A3: 0x702C,
                0x90A4: 0x755D,
                0x90A5: 0x662F,
                0x90A6: 0x51C4,
                0x90A7: 0x5236,
                0x90A8: 0x52E2,
                0x90A9: 0x59D3,
                0x90AA: 0x5F81,
                0x90AB: 0x6027,
                0x90AC: 0x6210,
                0x90AD: 0x653F,
                0x90AE: 0x6574,
                0x90AF: 0x661F,
                0x90B0: 0x6674,
                0x90B1: 0x68F2,
                0x90B2: 0x6816,
                0x90B3: 0x6B63,
                0x90B4: 0x6E05,
                0x90B5: 0x7272,
                0x90B6: 0x751F,
                0x90B7: 0x76DB,
                0x90B8: 0x7CBE,
                0x90B9: 0x8056,
                0x90BA: 0x58F0,
                0x90BB: 0x88FD,
                0x90BC: 0x897F,
                0x90BD: 0x8AA0,
                0x90BE: 0x8A93,
                0x90BF: 0x8ACB,
                0x90C0: 0x901D,
                0x90C1: 0x9192,
                0x90C2: 0x9752,
                0x90C3: 0x9759,
                0x90C4: 0x6589,
                0x90C5: 0x7A0E,
                0x90C6: 0x8106,
                0x90C7: 0x96BB,
                0x90C8: 0x5E2D,
                0x90C9: 0x60DC,
                0x90CA: 0x621A,
                0x90CB: 0x65A5,
                0x90CC: 0x6614,
                0x90CD: 0x6790,
                0x90CE: 0x77F3,
                0x90CF: 0x7A4D,
                0x90D0: 0x7C4D,
                0x90D1: 0x7E3E,
                0x90D2: 0x810A,
                0x90D3: 0x8CAC,
                0x90D4: 0x8D64,
                0x90D5: 0x8DE1,
                0x90D6: 0x8E5F,
                0x90D7: 0x78A9,
                0x90D8: 0x5207,
                0x90D9: 0x62D9,
                0x90DA: 0x63A5,
                0x90DB: 0x6442,
                0x90DC: 0x6298,
                0x90DD: 0x8A2D,
                0x90DE: 0x7A83,
                0x90DF: 0x7BC0,
                0x90E0: 0x8AAC,
                0x90E1: 0x96EA,
                0x90E2: 0x7D76,
                0x90E3: 0x820C,
                0x90E4: 0x8749,
                0x90E5: 0x4ED9,
                0x90E6: 0x5148,
                0x90E7: 0x5343,
                0x90E8: 0x5360,
                0x90E9: 0x5BA3,
                0x90EA: 0x5C02,
                0x90EB: 0x5C16,
                0x90EC: 0x5DDD,
                0x90ED: 0x6226,
                0x90EE: 0x6247,
                0x90EF: 0x64B0,
                0x90F0: 0x6813,
                0x90F1: 0x6834,
                0x90F2: 0x6CC9,
                0x90F3: 0x6D45,
                0x90F4: 0x6D17,
                0x90F5: 0x67D3,
                0x90F6: 0x6F5C,
                0x90F7: 0x714E,
                0x90F8: 0x717D,
                0x90F9: 0x65CB,
                0x90FA: 0x7A7F,
                0x90FB: 0x7BAD,
                0x90FC: 0x7DDA,
                0x9140: 0x7E4A,
                0x9141: 0x7FA8,
                0x9142: 0x817A,
                0x9143: 0x821B,
                0x9144: 0x8239,
                0x9145: 0x85A6,
                0x9146: 0x8A6E,
                0x9147: 0x8CCE,
                0x9148: 0x8DF5,
                0x9149: 0x9078,
                0x914A: 0x9077,
                0x914B: 0x92AD,
                0x914C: 0x9291,
                0x914D: 0x9583,
                0x914E: 0x9BAE,
                0x914F: 0x524D,
                0x9150: 0x5584,
                0x9151: 0x6F38,
                0x9152: 0x7136,
                0x9153: 0x5168,
                0x9154: 0x7985,
                0x9155: 0x7E55,
                0x9156: 0x81B3,
                0x9157: 0x7CCE,
                0x9158: 0x564C,
                0x9159: 0x5851,
                0x915A: 0x5CA8,
                0x915B: 0x63AA,
                0x915C: 0x66FE,
                0x915D: 0x66FD,
                0x915E: 0x695A,
                0x915F: 0x72D9,
                0x9160: 0x758F,
                0x9161: 0x758E,
                0x9162: 0x790E,
                0x9163: 0x7956,
                0x9164: 0x79DF,
                0x9165: 0x7C97,
                0x9166: 0x7D20,
                0x9167: 0x7D44,
                0x9168: 0x8607,
                0x9169: 0x8A34,
                0x916A: 0x963B,
                0x916B: 0x9061,
                0x916C: 0x9F20,
                0x916D: 0x50E7,
                0x916E: 0x5275,
                0x916F: 0x53CC,
                0x9170: 0x53E2,
                0x9171: 0x5009,
                0x9172: 0x55AA,
                0x9173: 0x58EE,
                0x9174: 0x594F,
                0x9175: 0x723D,
                0x9176: 0x5B8B,
                0x9177: 0x5C64,
                0x9178: 0x531D,
                0x9179: 0x60E3,
                0x917A: 0x60F3,
                0x917B: 0x635C,
                0x917C: 0x6383,
                0x917D: 0x633F,
                0x917E: 0x63BB,
                0x9180: 0x64CD,
                0x9181: 0x65E9,
                0x9182: 0x66F9,
                0x9183: 0x5DE3,
                0x9184: 0x69CD,
                0x9185: 0x69FD,
                0x9186: 0x6F15,
                0x9187: 0x71E5,
                0x9188: 0x4E89,
                0x9189: 0x75E9,
                0x918A: 0x76F8,
                0x918B: 0x7A93,
                0x918C: 0x7CDF,
                0x918D: 0x7DCF,
                0x918E: 0x7D9C,
                0x918F: 0x8061,
                0x9190: 0x8349,
                0x9191: 0x8358,
                0x9192: 0x846C,
                0x9193: 0x84BC,
                0x9194: 0x85FB,
                0x9195: 0x88C5,
                0x9196: 0x8D70,
                0x9197: 0x9001,
                0x9198: 0x906D,
                0x9199: 0x9397,
                0x919A: 0x971C,
                0x919B: 0x9A12,
                0x919C: 0x50CF,
                0x919D: 0x5897,
                0x919E: 0x618E,
                0x919F: 0x81D3,
                0x91A0: 0x8535,
                0x91A1: 0x8D08,
                0x91A2: 0x9020,
                0x91A3: 0x4FC3,
                0x91A4: 0x5074,
                0x91A5: 0x5247,
                0x91A6: 0x5373,
                0x91A7: 0x606F,
                0x91A8: 0x6349,
                0x91A9: 0x675F,
                0x91AA: 0x6E2C,
                0x91AB: 0x8DB3,
                0x91AC: 0x901F,
                0x91AD: 0x4FD7,
                0x91AE: 0x5C5E,
                0x91AF: 0x8CCA,
                0x91B0: 0x65CF,
                0x91B1: 0x7D9A,
                0x91B2: 0x5352,
                0x91B3: 0x8896,
                0x91B4: 0x5176,
                0x91B5: 0x63C3,
                0x91B6: 0x5B58,
                0x91B7: 0x5B6B,
                0x91B8: 0x5C0A,
                0x91B9: 0x640D,
                0x91BA: 0x6751,
                0x91BB: 0x905C,
                0x91BC: 0x4ED6,
                0x91BD: 0x591A,
                0x91BE: 0x592A,
                0x91BF: 0x6C70,
                0x91C0: 0x8A51,
                0x91C1: 0x553E,
                0x91C2: 0x5815,
                0x91C3: 0x59A5,
                0x91C4: 0x60F0,
                0x91C5: 0x6253,
                0x91C6: 0x67C1,
                0x91C7: 0x8235,
                0x91C8: 0x6955,
                0x91C9: 0x9640,
                0x91CA: 0x99C4,
                0x91CB: 0x9A28,
                0x91CC: 0x4F53,
                0x91CD: 0x5806,
                0x91CE: 0x5BFE,
                0x91CF: 0x8010,
                0x91D0: 0x5CB1,
                0x91D1: 0x5E2F,
                0x91D2: 0x5F85,
                0x91D3: 0x6020,
                0x91D4: 0x614B,
                0x91D5: 0x6234,
                0x91D6: 0x66FF,
                0x91D7: 0x6CF0,
                0x91D8: 0x6EDE,
                0x91D9: 0x80CE,
                0x91DA: 0x817F,
                0x91DB: 0x82D4,
                0x91DC: 0x888B,
                0x91DD: 0x8CB8,
                0x91DE: 0x9000,
                0x91DF: 0x902E,
                0x91E0: 0x968A,
                0x91E1: 0x9EDB,
                0x91E2: 0x9BDB,
                0x91E3: 0x4EE3,
                0x91E4: 0x53F0,
                0x91E5: 0x5927,
                0x91E6: 0x7B2C,
                0x91E7: 0x918D,
                0x91E8: 0x984C,
                0x91E9: 0x9DF9,
                0x91EA: 0x6EDD,
                0x91EB: 0x7027,
                0x91EC: 0x5353,
                0x91ED: 0x5544,
                0x91EE: 0x5B85,
                0x91EF: 0x6258,
                0x91F0: 0x629E,
                0x91F1: 0x62D3,
                0x91F2: 0x6CA2,
                0x91F3: 0x6FEF,
                0x91F4: 0x7422,
                0x91F5: 0x8A17,
                0x91F6: 0x9438,
                0x91F7: 0x6FC1,
                0x91F8: 0x8AFE,
                0x91F9: 0x8338,
                0x91FA: 0x51E7,
                0x91FB: 0x86F8,
                0x91FC: 0x53EA,
                0x9240: 0x53E9,
                0x9241: 0x4F46,
                0x9242: 0x9054,
                0x9243: 0x8FB0,
                0x9244: 0x596A,
                0x9245: 0x8131,
                0x9246: 0x5DFD,
                0x9247: 0x7AEA,
                0x9248: 0x8FBF,
                0x9249: 0x68DA,
                0x924A: 0x8C37,
                0x924B: 0x72F8,
                0x924C: 0x9C48,
                0x924D: 0x6A3D,
                0x924E: 0x8AB0,
                0x924F: 0x4E39,
                0x9250: 0x5358,
                0x9251: 0x5606,
                0x9252: 0x5766,
                0x9253: 0x62C5,
                0x9254: 0x63A2,
                0x9255: 0x65E6,
                0x9256: 0x6B4E,
                0x9257: 0x6DE1,
                0x9258: 0x6E5B,
                0x9259: 0x70AD,
                0x925A: 0x77ED,
                0x925B: 0x7AEF,
                0x925C: 0x7BAA,
                0x925D: 0x7DBB,
                0x925E: 0x803D,
                0x925F: 0x80C6,
                0x9260: 0x86CB,
                0x9261: 0x8A95,
                0x9262: 0x935B,
                0x9263: 0x56E3,
                0x9264: 0x58C7,
                0x9265: 0x5F3E,
                0x9266: 0x65AD,
                0x9267: 0x6696,
                0x9268: 0x6A80,
                0x9269: 0x6BB5,
                0x926A: 0x7537,
                0x926B: 0x8AC7,
                0x926C: 0x5024,
                0x926D: 0x77E5,
                0x926E: 0x5730,
                0x926F: 0x5F1B,
                0x9270: 0x6065,
                0x9271: 0x667A,
                0x9272: 0x6C60,
                0x9273: 0x75F4,
                0x9274: 0x7A1A,
                0x9275: 0x7F6E,
                0x9276: 0x81F4,
                0x9277: 0x8718,
                0x9278: 0x9045,
                0x9279: 0x99B3,
                0x927A: 0x7BC9,
                0x927B: 0x755C,
                0x927C: 0x7AF9,
                0x927D: 0x7B51,
                0x927E: 0x84C4,
                0x9280: 0x9010,
                0x9281: 0x79E9,
                0x9282: 0x7A92,
                0x9283: 0x8336,
                0x9284: 0x5AE1,
                0x9285: 0x7740,
                0x9286: 0x4E2D,
                0x9287: 0x4EF2,
                0x9288: 0x5B99,
                0x9289: 0x5FE0,
                0x928A: 0x62BD,
                0x928B: 0x663C,
                0x928C: 0x67F1,
                0x928D: 0x6CE8,
                0x928E: 0x866B,
                0x928F: 0x8877,
                0x9290: 0x8A3B,
                0x9291: 0x914E,
                0x9292: 0x92F3,
                0x9293: 0x99D0,
                0x9294: 0x6A17,
                0x9295: 0x7026,
                0x9296: 0x732A,
                0x9297: 0x82E7,
                0x9298: 0x8457,
                0x9299: 0x8CAF,
                0x929A: 0x4E01,
                0x929B: 0x5146,
                0x929C: 0x51CB,
                0x929D: 0x558B,
                0x929E: 0x5BF5,
                0x929F: 0x5E16,
                0x92A0: 0x5E33,
                0x92A1: 0x5E81,
                0x92A2: 0x5F14,
                0x92A3: 0x5F35,
                0x92A4: 0x5F6B,
                0x92A5: 0x5FB4,
                0x92A6: 0x61F2,
                0x92A7: 0x6311,
                0x92A8: 0x66A2,
                0x92A9: 0x671D,
                0x92AA: 0x6F6E,
                0x92AB: 0x7252,
                0x92AC: 0x753A,
                0x92AD: 0x773A,
                0x92AE: 0x8074,
                0x92AF: 0x8139,
                0x92B0: 0x8178,
                0x92B1: 0x8776,
                0x92B2: 0x8ABF,
                0x92B3: 0x8ADC,
                0x92B4: 0x8D85,
                0x92B5: 0x8DF3,
                0x92B6: 0x929A,
                0x92B7: 0x9577,
                0x92B8: 0x9802,
                0x92B9: 0x9CE5,
                0x92BA: 0x52C5,
                0x92BB: 0x6357,
                0x92BC: 0x76F4,
                0x92BD: 0x6715,
                0x92BE: 0x6C88,
                0x92BF: 0x73CD,
                0x92C0: 0x8CC3,
                0x92C1: 0x93AE,
                0x92C2: 0x9673,
                0x92C3: 0x6D25,
                0x92C4: 0x589C,
                0x92C5: 0x690E,
                0x92C6: 0x69CC,
                0x92C7: 0x8FFD,
                0x92C8: 0x939A,
                0x92C9: 0x75DB,
                0x92CA: 0x901A,
                0x92CB: 0x585A,
                0x92CC: 0x6802,
                0x92CD: 0x63B4,
                0x92CE: 0x69FB,
                0x92CF: 0x4F43,
                0x92D0: 0x6F2C,
                0x92D1: 0x67D8,
                0x92D2: 0x8FBB,
                0x92D3: 0x8526,
                0x92D4: 0x7DB4,
                0x92D5: 0x9354,
                0x92D6: 0x693F,
                0x92D7: 0x6F70,
                0x92D8: 0x576A,
                0x92D9: 0x58F7,
                0x92DA: 0x5B2C,
                0x92DB: 0x7D2C,
                0x92DC: 0x722A,
                0x92DD: 0x540A,
                0x92DE: 0x91E3,
                0x92DF: 0x9DB4,
                0x92E0: 0x4EAD,
                0x92E1: 0x4F4E,
                0x92E2: 0x505C,
                0x92E3: 0x5075,
                0x92E4: 0x5243,
                0x92E5: 0x8C9E,
                0x92E6: 0x5448,
                0x92E7: 0x5824,
                0x92E8: 0x5B9A,
                0x92E9: 0x5E1D,
                0x92EA: 0x5E95,
                0x92EB: 0x5EAD,
                0x92EC: 0x5EF7,
                0x92ED: 0x5F1F,
                0x92EE: 0x608C,
                0x92EF: 0x62B5,
                0x92F0: 0x633A,
                0x92F1: 0x63D0,
                0x92F2: 0x68AF,
                0x92F3: 0x6C40,
                0x92F4: 0x7887,
                0x92F5: 0x798E,
                0x92F6: 0x7A0B,
                0x92F7: 0x7DE0,
                0x92F8: 0x8247,
                0x92F9: 0x8A02,
                0x92FA: 0x8AE6,
                0x92FB: 0x8E44,
                0x92FC: 0x9013,
                0x9340: 0x90B8,
                0x9341: 0x912D,
                0x9342: 0x91D8,
                0x9343: 0x9F0E,
                0x9344: 0x6CE5,
                0x9345: 0x6458,
                0x9346: 0x64E2,
                0x9347: 0x6575,
                0x9348: 0x6EF4,
                0x9349: 0x7684,
                0x934A: 0x7B1B,
                0x934B: 0x9069,
                0x934C: 0x93D1,
                0x934D: 0x6EBA,
                0x934E: 0x54F2,
                0x934F: 0x5FB9,
                0x9350: 0x64A4,
                0x9351: 0x8F4D,
                0x9352: 0x8FED,
                0x9353: 0x9244,
                0x9354: 0x5178,
                0x9355: 0x586B,
                0x9356: 0x5929,
                0x9357: 0x5C55,
                0x9358: 0x5E97,
                0x9359: 0x6DFB,
                0x935A: 0x7E8F,
                0x935B: 0x751C,
                0x935C: 0x8CBC,
                0x935D: 0x8EE2,
                0x935E: 0x985B,
                0x935F: 0x70B9,
                0x9360: 0x4F1D,
                0x9361: 0x6BBF,
                0x9362: 0x6FB1,
                0x9363: 0x7530,
                0x9364: 0x96FB,
                0x9365: 0x514E,
                0x9366: 0x5410,
                0x9367: 0x5835,
                0x9368: 0x5857,
                0x9369: 0x59AC,
                0x936A: 0x5C60,
                0x936B: 0x5F92,
                0x936C: 0x6597,
                0x936D: 0x675C,
                0x936E: 0x6E21,
                0x936F: 0x767B,
                0x9370: 0x83DF,
                0x9371: 0x8CED,
                0x9372: 0x9014,
                0x9373: 0x90FD,
                0x9374: 0x934D,
                0x9375: 0x7825,
                0x9376: 0x783A,
                0x9377: 0x52AA,
                0x9378: 0x5EA6,
                0x9379: 0x571F,
                0x937A: 0x5974,
                0x937B: 0x6012,
                0x937C: 0x5012,
                0x937D: 0x515A,
                0x937E: 0x51AC,
                0x9380: 0x51CD,
                0x9381: 0x5200,
                0x9382: 0x5510,
                0x9383: 0x5854,
                0x9384: 0x5858,
                0x9385: 0x5957,
                0x9386: 0x5B95,
                0x9387: 0x5CF6,
                0x9388: 0x5D8B,
                0x9389: 0x60BC,
                0x938A: 0x6295,
                0x938B: 0x642D,
                0x938C: 0x6771,
                0x938D: 0x6843,
                0x938E: 0x68BC,
                0x938F: 0x68DF,
                0x9390: 0x76D7,
                0x9391: 0x6DD8,
                0x9392: 0x6E6F,
                0x9393: 0x6D9B,
                0x9394: 0x706F,
                0x9395: 0x71C8,
                0x9396: 0x5F53,
                0x9397: 0x75D8,
                0x9398: 0x7977,
                0x9399: 0x7B49,
                0x939A: 0x7B54,
                0x939B: 0x7B52,
                0x939C: 0x7CD6,
                0x939D: 0x7D71,
                0x939E: 0x5230,
                0x939F: 0x8463,
                0x93A0: 0x8569,
                0x93A1: 0x85E4,
                0x93A2: 0x8A0E,
                0x93A3: 0x8B04,
                0x93A4: 0x8C46,
                0x93A5: 0x8E0F,
                0x93A6: 0x9003,
                0x93A7: 0x900F,
                0x93A8: 0x9419,
                0x93A9: 0x9676,
                0x93AA: 0x982D,
                0x93AB: 0x9A30,
                0x93AC: 0x95D8,
                0x93AD: 0x50CD,
                0x93AE: 0x52D5,
                0x93AF: 0x540C,
                0x93B0: 0x5802,
                0x93B1: 0x5C0E,
                0x93B2: 0x61A7,
                0x93B3: 0x649E,
                0x93B4: 0x6D1E,
                0x93B5: 0x77B3,
                0x93B6: 0x7AE5,
                0x93B7: 0x80F4,
                0x93B8: 0x8404,
                0x93B9: 0x9053,
                0x93BA: 0x9285,
                0x93BB: 0x5CE0,
                0x93BC: 0x9D07,
                0x93BD: 0x533F,
                0x93BE: 0x5F97,
                0x93BF: 0x5FB3,
                0x93C0: 0x6D9C,
                0x93C1: 0x7279,
                0x93C2: 0x7763,
                0x93C3: 0x79BF,
                0x93C4: 0x7BE4,
                0x93C5: 0x6BD2,
                0x93C6: 0x72EC,
                0x93C7: 0x8AAD,
                0x93C8: 0x6803,
                0x93C9: 0x6A61,
                0x93CA: 0x51F8,
                0x93CB: 0x7A81,
                0x93CC: 0x6934,
                0x93CD: 0x5C4A,
                0x93CE: 0x9CF6,
                0x93CF: 0x82EB,
                0x93D0: 0x5BC5,
                0x93D1: 0x9149,
                0x93D2: 0x701E,
                0x93D3: 0x5678,
                0x93D4: 0x5C6F,
                0x93D5: 0x60C7,
                0x93D6: 0x6566,
                0x93D7: 0x6C8C,
                0x93D8: 0x8C5A,
                0x93D9: 0x9041,
                0x93DA: 0x9813,
                0x93DB: 0x5451,
                0x93DC: 0x66C7,
                0x93DD: 0x920D,
                0x93DE: 0x5948,
                0x93DF: 0x90A3,
                0x93E0: 0x5185,
                0x93E1: 0x4E4D,
                0x93E2: 0x51EA,
                0x93E3: 0x8599,
                0x93E4: 0x8B0E,
                0x93E5: 0x7058,
                0x93E6: 0x637A,
                0x93E7: 0x934B,
                0x93E8: 0x6962,
                0x93E9: 0x99B4,
                0x93EA: 0x7E04,
                0x93EB: 0x7577,
                0x93EC: 0x5357,
                0x93ED: 0x6960,
                0x93EE: 0x8EDF,
                0x93EF: 0x96E3,
                0x93F0: 0x6C5D,
                0x93F1: 0x4E8C,
                0x93F2: 0x5C3C,
                0x93F3: 0x5F10,
                0x93F4: 0x8FE9,
                0x93F5: 0x5302,
                0x93F6: 0x8CD1,
                0x93F7: 0x8089,
                0x93F8: 0x8679,
                0x93F9: 0x5EFF,
                0x93FA: 0x65E5,
                0x93FB: 0x4E73,
                0x93FC: 0x5165,
                0x9440: 0x5982,
                0x9441: 0x5C3F,
                0x9442: 0x97EE,
                0x9443: 0x4EFB,
                0x9444: 0x598A,
                0x9445: 0x5FCD,
                0x9446: 0x8A8D,
                0x9447: 0x6FE1,
                0x9448: 0x79B0,
                0x9449: 0x7962,
                0x944A: 0x5BE7,
                0x944B: 0x8471,
                0x944C: 0x732B,
                0x944D: 0x71B1,
                0x944E: 0x5E74,
                0x944F: 0x5FF5,
                0x9450: 0x637B,
                0x9451: 0x649A,
                0x9452: 0x71C3,
                0x9453: 0x7C98,
                0x9454: 0x4E43,
                0x9455: 0x5EFC,
                0x9456: 0x4E4B,
                0x9457: 0x57DC,
                0x9458: 0x56A2,
                0x9459: 0x60A9,
                0x945A: 0x6FC3,
                0x945B: 0x7D0D,
                0x945C: 0x80FD,
                0x945D: 0x8133,
                0x945E: 0x81BF,
                0x945F: 0x8FB2,
                0x9460: 0x8997,
                0x9461: 0x86A4,
                0x9462: 0x5DF4,
                0x9463: 0x628A,
                0x9464: 0x64AD,
                0x9465: 0x8987,
                0x9466: 0x6777,
                0x9467: 0x6CE2,
                0x9468: 0x6D3E,
                0x9469: 0x7436,
                0x946A: 0x7834,
                0x946B: 0x5A46,
                0x946C: 0x7F75,
                0x946D: 0x82AD,
                0x946E: 0x99AC,
                0x946F: 0x4FF3,
                0x9470: 0x5EC3,
                0x9471: 0x62DD,
                0x9472: 0x6392,
                0x9473: 0x6557,
                0x9474: 0x676F,
                0x9475: 0x76C3,
                0x9476: 0x724C,
                0x9477: 0x80CC,
                0x9478: 0x80BA,
                0x9479: 0x8F29,
                0x947A: 0x914D,
                0x947B: 0x500D,
                0x947C: 0x57F9,
                0x947D: 0x5A92,
                0x947E: 0x6885,
                0x9480: 0x6973,
                0x9481: 0x7164,
                0x9482: 0x72FD,
                0x9483: 0x8CB7,
                0x9484: 0x58F2,
                0x9485: 0x8CE0,
                0x9486: 0x966A,
                0x9487: 0x9019,
                0x9488: 0x877F,
                0x9489: 0x79E4,
                0x948A: 0x77E7,
                0x948B: 0x8429,
                0x948C: 0x4F2F,
                0x948D: 0x5265,
                0x948E: 0x535A,
                0x948F: 0x62CD,
                0x9490: 0x67CF,
                0x9491: 0x6CCA,
                0x9492: 0x767D,
                0x9493: 0x7B94,
                0x9494: 0x7C95,
                0x9495: 0x8236,
                0x9496: 0x8584,
                0x9497: 0x8FEB,
                0x9498: 0x66DD,
                0x9499: 0x6F20,
                0x949A: 0x7206,
                0x949B: 0x7E1B,
                0x949C: 0x83AB,
                0x949D: 0x99C1,
                0x949E: 0x9EA6,
                0x949F: 0x51FD,
                0x94A0: 0x7BB1,
                0x94A1: 0x7872,
                0x94A2: 0x7BB8,
                0x94A3: 0x8087,
                0x94A4: 0x7B48,
                0x94A5: 0x6AE8,
                0x94A6: 0x5E61,
                0x94A7: 0x808C,
                0x94A8: 0x7551,
                0x94A9: 0x7560,
                0x94AA: 0x516B,
                0x94AB: 0x9262,
                0x94AC: 0x6E8C,
                0x94AD: 0x767A,
                0x94AE: 0x9197,
                0x94AF: 0x9AEA,
                0x94B0: 0x4F10,
                0x94B1: 0x7F70,
                0x94B2: 0x629C,
                0x94B3: 0x7B4F,
                0x94B4: 0x95A5,
                0x94B5: 0x9CE9,
                0x94B6: 0x567A,
                0x94B7: 0x5859,
                0x94B8: 0x86E4,
                0x94B9: 0x96BC,
                0x94BA: 0x4F34,
                0x94BB: 0x5224,
                0x94BC: 0x534A,
                0x94BD: 0x53CD,
                0x94BE: 0x53DB,
                0x94BF: 0x5E06,
                0x94C0: 0x642C,
                0x94C1: 0x6591,
                0x94C2: 0x677F,
                0x94C3: 0x6C3E,
                0x94C4: 0x6C4E,
                0x94C5: 0x7248,
                0x94C6: 0x72AF,
                0x94C7: 0x73ED,
                0x94C8: 0x7554,
                0x94C9: 0x7E41,
                0x94CA: 0x822C,
                0x94CB: 0x85E9,
                0x94CC: 0x8CA9,
                0x94CD: 0x7BC4,
                0x94CE: 0x91C6,
                0x94CF: 0x7169,
                0x94D0: 0x9812,
                0x94D1: 0x98EF,
                0x94D2: 0x633D,
                0x94D3: 0x6669,
                0x94D4: 0x756A,
                0x94D5: 0x76E4,
                0x94D6: 0x78D0,
                0x94D7: 0x8543,
                0x94D8: 0x86EE,
                0x94D9: 0x532A,
                0x94DA: 0x5351,
                0x94DB: 0x5426,
                0x94DC: 0x5983,
                0x94DD: 0x5E87,
                0x94DE: 0x5F7C,
                0x94DF: 0x60B2,
                0x94E0: 0x6249,
                0x94E1: 0x6279,
                0x94E2: 0x62AB,
                0x94E3: 0x6590,
                0x94E4: 0x6BD4,
                0x94E5: 0x6CCC,
                0x94E6: 0x75B2,
                0x94E7: 0x76AE,
                0x94E8: 0x7891,
                0x94E9: 0x79D8,
                0x94EA: 0x7DCB,
                0x94EB: 0x7F77,
                0x94EC: 0x80A5,
                0x94ED: 0x88AB,
                0x94EE: 0x8AB9,
                0x94EF: 0x8CBB,
                0x94F0: 0x907F,
                0x94F1: 0x975E,
                0x94F2: 0x98DB,
                0x94F3: 0x6A0B,
                0x94F4: 0x7C38,
                0x94F5: 0x5099,
                0x94F6: 0x5C3E,
                0x94F7: 0x5FAE,
                0x94F8: 0x6787,
                0x94F9: 0x6BD8,
                0x94FA: 0x7435,
                0x94FB: 0x7709,
                0x94FC: 0x7F8E,
                0x9540: 0x9F3B,
                0x9541: 0x67CA,
                0x9542: 0x7A17,
                0x9543: 0x5339,
                0x9544: 0x758B,
                0x9545: 0x9AED,
                0x9546: 0x5F66,
                0x9547: 0x819D,
                0x9548: 0x83F1,
                0x9549: 0x8098,
                0x954A: 0x5F3C,
                0x954B: 0x5FC5,
                0x954C: 0x7562,
                0x954D: 0x7B46,
                0x954E: 0x903C,
                0x954F: 0x6867,
                0x9550: 0x59EB,
                0x9551: 0x5A9B,
                0x9552: 0x7D10,
                0x9553: 0x767E,
                0x9554: 0x8B2C,
                0x9555: 0x4FF5,
                0x9556: 0x5F6A,
                0x9557: 0x6A19,
                0x9558: 0x6C37,
                0x9559: 0x6F02,
                0x955A: 0x74E2,
                0x955B: 0x7968,
                0x955C: 0x8868,
                0x955D: 0x8A55,
                0x955E: 0x8C79,
                0x955F: 0x5EDF,
                0x9560: 0x63CF,
                0x9561: 0x75C5,
                0x9562: 0x79D2,
                0x9563: 0x82D7,
                0x9564: 0x9328,
                0x9565: 0x92F2,
                0x9566: 0x849C,
                0x9567: 0x86ED,
                0x9568: 0x9C2D,
                0x9569: 0x54C1,
                0x956A: 0x5F6C,
                0x956B: 0x658C,
                0x956C: 0x6D5C,
                0x956D: 0x7015,
                0x956E: 0x8CA7,
                0x956F: 0x8CD3,
                0x9570: 0x983B,
                0x9571: 0x654F,
                0x9572: 0x74F6,
                0x9573: 0x4E0D,
                0x9574: 0x4ED8,
                0x9575: 0x57E0,
                0x9576: 0x592B,
                0x9577: 0x5A66,
                0x9578: 0x5BCC,
                0x9579: 0x51A8,
                0x957A: 0x5E03,
                0x957B: 0x5E9C,
                0x957C: 0x6016,
                0x957D: 0x6276,
                0x957E: 0x6577,
                0x9580: 0x65A7,
                0x9581: 0x666E,
                0x9582: 0x6D6E,
                0x9583: 0x7236,
                0x9584: 0x7B26,
                0x9585: 0x8150,
                0x9586: 0x819A,
                0x9587: 0x8299,
                0x9588: 0x8B5C,
                0x9589: 0x8CA0,
                0x958A: 0x8CE6,
                0x958B: 0x8D74,
                0x958C: 0x961C,
                0x958D: 0x9644,
                0x958E: 0x4FAE,
                0x958F: 0x64AB,
                0x9590: 0x6B66,
                0x9591: 0x821E,
                0x9592: 0x8461,
                0x9593: 0x856A,
                0x9594: 0x90E8,
                0x9595: 0x5C01,
                0x9596: 0x6953,
                0x9597: 0x98A8,
                0x9598: 0x847A,
                0x9599: 0x8557,
                0x959A: 0x4F0F,
                0x959B: 0x526F,
                0x959C: 0x5FA9,
                0x959D: 0x5E45,
                0x959E: 0x670D,
                0x959F: 0x798F,
                0x95A0: 0x8179,
                0x95A1: 0x8907,
                0x95A2: 0x8986,
                0x95A3: 0x6DF5,
                0x95A4: 0x5F17,
                0x95A5: 0x6255,
                0x95A6: 0x6CB8,
                0x95A7: 0x4ECF,
                0x95A8: 0x7269,
                0x95A9: 0x9B92,
                0x95AA: 0x5206,
                0x95AB: 0x543B,
                0x95AC: 0x5674,
                0x95AD: 0x58B3,
                0x95AE: 0x61A4,
                0x95AF: 0x626E,
                0x95B0: 0x711A,
                0x95B1: 0x596E,
                0x95B2: 0x7C89,
                0x95B3: 0x7CDE,
                0x95B4: 0x7D1B,
                0x95B5: 0x96F0,
                0x95B6: 0x6587,
                0x95B7: 0x805E,
                0x95B8: 0x4E19,
                0x95B9: 0x4F75,
                0x95BA: 0x5175,
                0x95BB: 0x5840,
                0x95BC: 0x5E63,
                0x95BD: 0x5E73,
                0x95BE: 0x5F0A,
                0x95BF: 0x67C4,
                0x95C0: 0x4E26,
                0x95C1: 0x853D,
                0x95C2: 0x9589,
                0x95C3: 0x965B,
                0x95C4: 0x7C73,
                0x95C5: 0x9801,
                0x95C6: 0x50FB,
                0x95C7: 0x58C1,
                0x95C8: 0x7656,
                0x95C9: 0x78A7,
                0x95CA: 0x5225,
                0x95CB: 0x77A5,
                0x95CC: 0x8511,
                0x95CD: 0x7B86,
                0x95CE: 0x504F,
                0x95CF: 0x5909,
                0x95D0: 0x7247,
                0x95D1: 0x7BC7,
                0x95D2: 0x7DE8,
                0x95D3: 0x8FBA,
                0x95D4: 0x8FD4,
                0x95D5: 0x904D,
                0x95D6: 0x4FBF,
                0x95D7: 0x52C9,
                0x95D8: 0x5A29,
                0x95D9: 0x5F01,
                0x95DA: 0x97AD,
                0x95DB: 0x4FDD,
                0x95DC: 0x8217,
                0x95DD: 0x92EA,
                0x95DE: 0x5703,
                0x95DF: 0x6355,
                0x95E0: 0x6B69,
                0x95E1: 0x752B,
                0x95E2: 0x88DC,
                0x95E3: 0x8F14,
                0x95E4: 0x7A42,
                0x95E5: 0x52DF,
                0x95E6: 0x5893,
                0x95E7: 0x6155,
                0x95E8: 0x620A,
                0x95E9: 0x66AE,
                0x95EA: 0x6BCD,
                0x95EB: 0x7C3F,
                0x95EC: 0x83E9,
                0x95ED: 0x5023,
                0x95EE: 0x4FF8,
                0x95EF: 0x5305,
                0x95F0: 0x5446,
                0x95F1: 0x5831,
                0x95F2: 0x5949,
                0x95F3: 0x5B9D,
                0x95F4: 0x5CF0,
                0x95F5: 0x5CEF,
                0x95F6: 0x5D29,
                0x95F7: 0x5E96,
                0x95F8: 0x62B1,
                0x95F9: 0x6367,
                0x95FA: 0x653E,
                0x95FB: 0x65B9,
                0x95FC: 0x670B,
                0x9640: 0x6CD5,
                0x9641: 0x6CE1,
                0x9642: 0x70F9,
                0x9643: 0x7832,
                0x9644: 0x7E2B,
                0x9645: 0x80DE,
                0x9646: 0x82B3,
                0x9647: 0x840C,
                0x9648: 0x84EC,
                0x9649: 0x8702,
                0x964A: 0x8912,
                0x964B: 0x8A2A,
                0x964C: 0x8C4A,
                0x964D: 0x90A6,
                0x964E: 0x92D2,
                0x964F: 0x98FD,
                0x9650: 0x9CF3,
                0x9651: 0x9D6C,
                0x9652: 0x4E4F,
                0x9653: 0x4EA1,
                0x9654: 0x508D,
                0x9655: 0x5256,
                0x9656: 0x574A,
                0x9657: 0x59A8,
                0x9658: 0x5E3D,
                0x9659: 0x5FD8,
                0x965A: 0x5FD9,
                0x965B: 0x623F,
                0x965C: 0x66B4,
                0x965D: 0x671B,
                0x965E: 0x67D0,
                0x965F: 0x68D2,
                0x9660: 0x5192,
                0x9661: 0x7D21,
                0x9662: 0x80AA,
                0x9663: 0x81A8,
                0x9664: 0x8B00,
                0x9665: 0x8C8C,
                0x9666: 0x8CBF,
                0x9667: 0x927E,
                0x9668: 0x9632,
                0x9669: 0x5420,
                0x966A: 0x982C,
                0x966B: 0x5317,
                0x966C: 0x50D5,
                0x966D: 0x535C,
                0x966E: 0x58A8,
                0x966F: 0x64B2,
                0x9670: 0x6734,
                0x9671: 0x7267,
                0x9672: 0x7766,
                0x9673: 0x7A46,
                0x9674: 0x91E6,
                0x9675: 0x52C3,
                0x9676: 0x6CA1,
                0x9677: 0x6B86,
                0x9678: 0x5800,
                0x9679: 0x5E4C,
                0x967A: 0x5954,
                0x967B: 0x672C,
                0x967C: 0x7FFB,
                0x967D: 0x51E1,
                0x967E: 0x76C6,
                0x9680: 0x6469,
                0x9681: 0x78E8,
                0x9682: 0x9B54,
                0x9683: 0x9EBB,
                0x9684: 0x57CB,
                0x9685: 0x59B9,
                0x9686: 0x6627,
                0x9687: 0x679A,
                0x9688: 0x6BCE,
                0x9689: 0x54E9,
                0x968A: 0x69D9,
                0x968B: 0x5E55,
                0x968C: 0x819C,
                0x968D: 0x6795,
                0x968E: 0x9BAA,
                0x968F: 0x67FE,
                0x9690: 0x9C52,
                0x9691: 0x685D,
                0x9692: 0x4EA6,
                0x9693: 0x4FE3,
                0x9694: 0x53C8,
                0x9695: 0x62B9,
                0x9696: 0x672B,
                0x9697: 0x6CAB,
                0x9698: 0x8FC4,
                0x9699: 0x4FAD,
                0x969A: 0x7E6D,
                0x969B: 0x9EBF,
                0x969C: 0x4E07,
                0x969D: 0x6162,
                0x969E: 0x6E80,
                0x969F: 0x6F2B,
                0x96A0: 0x8513,
                0x96A1: 0x5473,
                0x96A2: 0x672A,
                0x96A3: 0x9B45,
                0x96A4: 0x5DF3,
                0x96A5: 0x7B95,
                0x96A6: 0x5CAC,
                0x96A7: 0x5BC6,
                0x96A8: 0x871C,
                0x96A9: 0x6E4A,
                0x96AA: 0x84D1,
                0x96AB: 0x7A14,
                0x96AC: 0x8108,
                0x96AD: 0x5999,
                0x96AE: 0x7C8D,
                0x96AF: 0x6C11,
                0x96B0: 0x7720,
                0x96B1: 0x52D9,
                0x96B2: 0x5922,
                0x96B3: 0x7121,
                0x96B4: 0x725F,
                0x96B5: 0x77DB,
                0x96B6: 0x9727,
                0x96B7: 0x9D61,
                0x96B8: 0x690B,
                0x96B9: 0x5A7F,
                0x96BA: 0x5A18,
                0x96BB: 0x51A5,
                0x96BC: 0x540D,
                0x96BD: 0x547D,
                0x96BE: 0x660E,
                0x96BF: 0x76DF,
                0x96C0: 0x8FF7,
                0x96C1: 0x9298,
                0x96C2: 0x9CF4,
                0x96C3: 0x59EA,
                0x96C4: 0x725D,
                0x96C5: 0x6EC5,
                0x96C6: 0x514D,
                0x96C7: 0x68C9,
                0x96C8: 0x7DBF,
                0x96C9: 0x7DEC,
                0x96CA: 0x9762,
                0x96CB: 0x9EBA,
                0x96CC: 0x6478,
                0x96CD: 0x6A21,
                0x96CE: 0x8302,
                0x96CF: 0x5984,
                0x96D0: 0x5B5F,
                0x96D1: 0x6BDB,
                0x96D2: 0x731B,
                0x96D3: 0x76F2,
                0x96D4: 0x7DB2,
                0x96D5: 0x8017,
                0x96D6: 0x8499,
                0x96D7: 0x5132,
                0x96D8: 0x6728,
                0x96D9: 0x9ED9,
                0x96DA: 0x76EE,
                0x96DB: 0x6762,
                0x96DC: 0x52FF,
                0x96DD: 0x9905,
                0x96DE: 0x5C24,
                0x96DF: 0x623B,
                0x96E0: 0x7C7E,
                0x96E1: 0x8CB0,
                0x96E2: 0x554F,
                0x96E3: 0x60B6,
                0x96E4: 0x7D0B,
                0x96E5: 0x9580,
                0x96E6: 0x5301,
                0x96E7: 0x4E5F,
                0x96E8: 0x51B6,
                0x96E9: 0x591C,
                0x96EA: 0x723A,
                0x96EB: 0x8036,
                0x96EC: 0x91CE,
                0x96ED: 0x5F25,
                0x96EE: 0x77E2,
                0x96EF: 0x5384,
                0x96F0: 0x5F79,
                0x96F1: 0x7D04,
                0x96F2: 0x85AC,
                0x96F3: 0x8A33,
                0x96F4: 0x8E8D,
                0x96F5: 0x9756,
                0x96F6: 0x67F3,
                0x96F7: 0x85AE,
                0x96F8: 0x9453,
                0x96F9: 0x6109,
                0x96FA: 0x6108,
                0x96FB: 0x6CB9,
                0x96FC: 0x7652,
                0x9740: 0x8AED,
                0x9741: 0x8F38,
                0x9742: 0x552F,
                0x9743: 0x4F51,
                0x9744: 0x512A,
                0x9745: 0x52C7,
                0x9746: 0x53CB,
                0x9747: 0x5BA5,
                0x9748: 0x5E7D,
                0x9749: 0x60A0,
                0x974A: 0x6182,
                0x974B: 0x63D6,
                0x974C: 0x6709,
                0x974D: 0x67DA,
                0x974E: 0x6E67,
                0x974F: 0x6D8C,
                0x9750: 0x7336,
                0x9751: 0x7337,
                0x9752: 0x7531,
                0x9753: 0x7950,
                0x9754: 0x88D5,
                0x9755: 0x8A98,
                0x9756: 0x904A,
                0x9757: 0x9091,
                0x9758: 0x90F5,
                0x9759: 0x96C4,
                0x975A: 0x878D,
                0x975B: 0x5915,
                0x975C: 0x4E88,
                0x975D: 0x4F59,
                0x975E: 0x4E0E,
                0x975F: 0x8A89,
                0x9760: 0x8F3F,
                0x9761: 0x9810,
                0x9762: 0x50AD,
                0x9763: 0x5E7C,
                0x9764: 0x5996,
                0x9765: 0x5BB9,
                0x9766: 0x5EB8,
                0x9767: 0x63DA,
                0x9768: 0x63FA,
                0x9769: 0x64C1,
                0x976A: 0x66DC,
                0x976B: 0x694A,
                0x976C: 0x69D8,
                0x976D: 0x6D0B,
                0x976E: 0x6EB6,
                0x976F: 0x7194,
                0x9770: 0x7528,
                0x9771: 0x7AAF,
                0x9772: 0x7F8A,
                0x9773: 0x8000,
                0x9774: 0x8449,
                0x9775: 0x84C9,
                0x9776: 0x8981,
                0x9777: 0x8B21,
                0x9778: 0x8E0A,
                0x9779: 0x9065,
                0x977A: 0x967D,
                0x977B: 0x990A,
                0x977C: 0x617E,
                0x977D: 0x6291,
                0x977E: 0x6B32,
                0x9780: 0x6C83,
                0x9781: 0x6D74,
                0x9782: 0x7FCC,
                0x9783: 0x7FFC,
                0x9784: 0x6DC0,
                0x9785: 0x7F85,
                0x9786: 0x87BA,
                0x9787: 0x88F8,
                0x9788: 0x6765,
                0x9789: 0x83B1,
                0x978A: 0x983C,
                0x978B: 0x96F7,
                0x978C: 0x6D1B,
                0x978D: 0x7D61,
                0x978E: 0x843D,
                0x978F: 0x916A,
                0x9790: 0x4E71,
                0x9791: 0x5375,
                0x9792: 0x5D50,
                0x9793: 0x6B04,
                0x9794: 0x6FEB,
                0x9795: 0x85CD,
                0x9796: 0x862D,
                0x9797: 0x89A7,
                0x9798: 0x5229,
                0x9799: 0x540F,
                0x979A: 0x5C65,
                0x979B: 0x674E,
                0x979C: 0x68A8,
                0x979D: 0x7406,
                0x979E: 0x7483,
                0x979F: 0x75E2,
                0x97A0: 0x88CF,
                0x97A1: 0x88E1,
                0x97A2: 0x91CC,
                0x97A3: 0x96E2,
                0x97A4: 0x9678,
                0x97A5: 0x5F8B,
                0x97A6: 0x7387,
                0x97A7: 0x7ACB,
                0x97A8: 0x844E,
                0x97A9: 0x63A0,
                0x97AA: 0x7565,
                0x97AB: 0x5289,
                0x97AC: 0x6D41,
                0x97AD: 0x6E9C,
                0x97AE: 0x7409,
                0x97AF: 0x7559,
                0x97B0: 0x786B,
                0x97B1: 0x7C92,
                0x97B2: 0x9686,
                0x97B3: 0x7ADC,
                0x97B4: 0x9F8D,
                0x97B5: 0x4FB6,
                0x97B6: 0x616E,
                0x97B7: 0x65C5,
                0x97B8: 0x865C,
                0x97B9: 0x4E86,
                0x97BA: 0x4EAE,
                0x97BB: 0x50DA,
                0x97BC: 0x4E21,
                0x97BD: 0x51CC,
                0x97BE: 0x5BEE,
                0x97BF: 0x6599,
                0x97C0: 0x6881,
                0x97C1: 0x6DBC,
                0x97C2: 0x731F,
                0x97C3: 0x7642,
                0x97C4: 0x77AD,
                0x97C5: 0x7A1C,
                0x97C6: 0x7CE7,
                0x97C7: 0x826F,
                0x97C8: 0x8AD2,
                0x97C9: 0x907C,
                0x97CA: 0x91CF,
                0x97CB: 0x9675,
                0x97CC: 0x9818,
                0x97CD: 0x529B,
                0x97CE: 0x7DD1,
                0x97CF: 0x502B,
                0x97D0: 0x5398,
                0x97D1: 0x6797,
                0x97D2: 0x6DCB,
                0x97D3: 0x71D0,
                0x97D4: 0x7433,
                0x97D5: 0x81E8,
                0x97D6: 0x8F2A,
                0x97D7: 0x96A3,
                0x97D8: 0x9C57,
                0x97D9: 0x9E9F,
                0x97DA: 0x7460,
                0x97DB: 0x5841,
                0x97DC: 0x6D99,
                0x97DD: 0x7D2F,
                0x97DE: 0x985E,
                0x97DF: 0x4EE4,
                0x97E0: 0x4F36,
                0x97E1: 0x4F8B,
                0x97E2: 0x51B7,
                0x97E3: 0x52B1,
                0x97E4: 0x5DBA,
                0x97E5: 0x601C,
                0x97E6: 0x73B2,
                0x97E7: 0x793C,
                0x97E8: 0x82D3,
                0x97E9: 0x9234,
                0x97EA: 0x96B7,
                0x97EB: 0x96F6,
                0x97EC: 0x970A,
                0x97ED: 0x9E97,
                0x97EE: 0x9F62,
                0x97EF: 0x66A6,
                0x97F0: 0x6B74,
                0x97F1: 0x5217,
                0x97F2: 0x52A3,
                0x97F3: 0x70C8,
                0x97F4: 0x88C2,
                0x97F5: 0x5EC9,
                0x97F6: 0x604B,
                0x97F7: 0x6190,
                0x97F8: 0x6F23,
                0x97F9: 0x7149,
                0x97FA: 0x7C3E,
                0x97FB: 0x7DF4,
                0x97FC: 0x806F,
                0x9840: 0x84EE,
                0x9841: 0x9023,
                0x9842: 0x932C,
                0x9843: 0x5442,
                0x9844: 0x9B6F,
                0x9845: 0x6AD3,
                0x9846: 0x7089,
                0x9847: 0x8CC2,
                0x9848: 0x8DEF,
                0x9849: 0x9732,
                0x984A: 0x52B4,
                0x984B: 0x5A41,
                0x984C: 0x5ECA,
                0x984D: 0x5F04,
                0x984E: 0x6717,
                0x984F: 0x697C,
                0x9850: 0x6994,
                0x9851: 0x6D6A,
                0x9852: 0x6F0F,
                0x9853: 0x7262,
                0x9854: 0x72FC,
                0x9855: 0x7BED,
                0x9856: 0x8001,
                0x9857: 0x807E,
                0x9858: 0x874B,
                0x9859: 0x90CE,
                0x985A: 0x516D,
                0x985B: 0x9E93,
                0x985C: 0x7984,
                0x985D: 0x808B,
                0x985E: 0x9332,
                0x985F: 0x8AD6,
                0x9860: 0x502D,
                0x9861: 0x548C,
                0x9862: 0x8A71,
                0x9863: 0x6B6A,
                0x9864: 0x8CC4,
                0x9865: 0x8107,
                0x9866: 0x60D1,
                0x9867: 0x67A0,
                0x9868: 0x9DF2,
                0x9869: 0x4E99,
                0x986A: 0x4E98,
                0x986B: 0x9C10,
                0x986C: 0x8A6B,
                0x986D: 0x85C1,
                0x986E: 0x8568,
                0x986F: 0x6900,
                0x9870: 0x6E7E,
                0x9871: 0x7897,
                0x9872: 0x8155,
                0x989F: 0x5F0C,
                0x98A0: 0x4E10,
                0x98A1: 0x4E15,
                0x98A2: 0x4E2A,
                0x98A3: 0x4E31,
                0x98A4: 0x4E36,
                0x98A5: 0x4E3C,
                0x98A6: 0x4E3F,
                0x98A7: 0x4E42,
                0x98A8: 0x4E56,
                0x98A9: 0x4E58,
                0x98AA: 0x4E82,
                0x98AB: 0x4E85,
                0x98AC: 0x8C6B,
                0x98AD: 0x4E8A,
                0x98AE: 0x8212,
                0x98AF: 0x5F0D,
                0x98B0: 0x4E8E,
                0x98B1: 0x4E9E,
                0x98B2: 0x4E9F,
                0x98B3: 0x4EA0,
                0x98B4: 0x4EA2,
                0x98B5: 0x4EB0,
                0x98B6: 0x4EB3,
                0x98B7: 0x4EB6,
                0x98B8: 0x4ECE,
                0x98B9: 0x4ECD,
                0x98BA: 0x4EC4,
                0x98BB: 0x4EC6,
                0x98BC: 0x4EC2,
                0x98BD: 0x4ED7,
                0x98BE: 0x4EDE,
                0x98BF: 0x4EED,
                0x98C0: 0x4EDF,
                0x98C1: 0x4EF7,
                0x98C2: 0x4F09,
                0x98C3: 0x4F5A,
                0x98C4: 0x4F30,
                0x98C5: 0x4F5B,
                0x98C6: 0x4F5D,
                0x98C7: 0x4F57,
                0x98C8: 0x4F47,
                0x98C9: 0x4F76,
                0x98CA: 0x4F88,
                0x98CB: 0x4F8F,
                0x98CC: 0x4F98,
                0x98CD: 0x4F7B,
                0x98CE: 0x4F69,
                0x98CF: 0x4F70,
                0x98D0: 0x4F91,
                0x98D1: 0x4F6F,
                0x98D2: 0x4F86,
                0x98D3: 0x4F96,
                0x98D4: 0x5118,
                0x98D5: 0x4FD4,
                0x98D6: 0x4FDF,
                0x98D7: 0x4FCE,
                0x98D8: 0x4FD8,
                0x98D9: 0x4FDB,
                0x98DA: 0x4FD1,
                0x98DB: 0x4FDA,
                0x98DC: 0x4FD0,
                0x98DD: 0x4FE4,
                0x98DE: 0x4FE5,
                0x98DF: 0x501A,
                0x98E0: 0x5028,
                0x98E1: 0x5014,
                0x98E2: 0x502A,
                0x98E3: 0x5025,
                0x98E4: 0x5005,
                0x98E5: 0x4F1C,
                0x98E6: 0x4FF6,
                0x98E7: 0x5021,
                0x98E8: 0x5029,
                0x98E9: 0x502C,
                0x98EA: 0x4FFE,
                0x98EB: 0x4FEF,
                0x98EC: 0x5011,
                0x98ED: 0x5006,
                0x98EE: 0x5043,
                0x98EF: 0x5047,
                0x98F0: 0x6703,
                0x98F1: 0x5055,
                0x98F2: 0x5050,
                0x98F3: 0x5048,
                0x98F4: 0x505A,
                0x98F5: 0x5056,
                0x98F6: 0x506C,
                0x98F7: 0x5078,
                0x98F8: 0x5080,
                0x98F9: 0x509A,
                0x98FA: 0x5085,
                0x98FB: 0x50B4,
                0x98FC: 0x50B2,
                0x9940: 0x50C9,
                0x9941: 0x50CA,
                0x9942: 0x50B3,
                0x9943: 0x50C2,
                0x9944: 0x50D6,
                0x9945: 0x50DE,
                0x9946: 0x50E5,
                0x9947: 0x50ED,
                0x9948: 0x50E3,
                0x9949: 0x50EE,
                0x994A: 0x50F9,
                0x994B: 0x50F5,
                0x994C: 0x5109,
                0x994D: 0x5101,
                0x994E: 0x5102,
                0x994F: 0x5116,
                0x9950: 0x5115,
                0x9951: 0x5114,
                0x9952: 0x511A,
                0x9953: 0x5121,
                0x9954: 0x513A,
                0x9955: 0x5137,
                0x9956: 0x513C,
                0x9957: 0x513B,
                0x9958: 0x513F,
                0x9959: 0x5140,
                0x995A: 0x5152,
                0x995B: 0x514C,
                0x995C: 0x5154,
                0x995D: 0x5162,
                0x995E: 0x7AF8,
                0x995F: 0x5169,
                0x9960: 0x516A,
                0x9961: 0x516E,
                0x9962: 0x5180,
                0x9963: 0x5182,
                0x9964: 0x56D8,
                0x9965: 0x518C,
                0x9966: 0x5189,
                0x9967: 0x518F,
                0x9968: 0x5191,
                0x9969: 0x5193,
                0x996A: 0x5195,
                0x996B: 0x5196,
                0x996C: 0x51A4,
                0x996D: 0x51A6,
                0x996E: 0x51A2,
                0x996F: 0x51A9,
                0x9970: 0x51AA,
                0x9971: 0x51AB,
                0x9972: 0x51B3,
                0x9973: 0x51B1,
                0x9974: 0x51B2,
                0x9975: 0x51B0,
                0x9976: 0x51B5,
                0x9977: 0x51BD,
                0x9978: 0x51C5,
                0x9979: 0x51C9,
                0x997A: 0x51DB,
                0x997B: 0x51E0,
                0x997C: 0x8655,
                0x997D: 0x51E9,
                0x997E: 0x51ED,
                0x9980: 0x51F0,
                0x9981: 0x51F5,
                0x9982: 0x51FE,
                0x9983: 0x5204,
                0x9984: 0x520B,
                0x9985: 0x5214,
                0x9986: 0x520E,
                0x9987: 0x5227,
                0x9988: 0x522A,
                0x9989: 0x522E,
                0x998A: 0x5233,
                0x998B: 0x5239,
                0x998C: 0x524F,
                0x998D: 0x5244,
                0x998E: 0x524B,
                0x998F: 0x524C,
                0x9990: 0x525E,
                0x9991: 0x5254,
                0x9992: 0x526A,
                0x9993: 0x5274,
                0x9994: 0x5269,
                0x9995: 0x5273,
                0x9996: 0x527F,
                0x9997: 0x527D,
                0x9998: 0x528D,
                0x9999: 0x5294,
                0x999A: 0x5292,
                0x999B: 0x5271,
                0x999C: 0x5288,
                0x999D: 0x5291,
                0x999E: 0x8FA8,
                0x999F: 0x8FA7,
                0x99A0: 0x52AC,
                0x99A1: 0x52AD,
                0x99A2: 0x52BC,
                0x99A3: 0x52B5,
                0x99A4: 0x52C1,
                0x99A5: 0x52CD,
                0x99A6: 0x52D7,
                0x99A7: 0x52DE,
                0x99A8: 0x52E3,
                0x99A9: 0x52E6,
                0x99AA: 0x98ED,
                0x99AB: 0x52E0,
                0x99AC: 0x52F3,
                0x99AD: 0x52F5,
                0x99AE: 0x52F8,
                0x99AF: 0x52F9,
                0x99B0: 0x5306,
                0x99B1: 0x5308,
                0x99B2: 0x7538,
                0x99B3: 0x530D,
                0x99B4: 0x5310,
                0x99B5: 0x530F,
                0x99B6: 0x5315,
                0x99B7: 0x531A,
                0x99B8: 0x5323,
                0x99B9: 0x532F,
                0x99BA: 0x5331,
                0x99BB: 0x5333,
                0x99BC: 0x5338,
                0x99BD: 0x5340,
                0x99BE: 0x5346,
                0x99BF: 0x5345,
                0x99C0: 0x4E17,
                0x99C1: 0x5349,
                0x99C2: 0x534D,
                0x99C3: 0x51D6,
                0x99C4: 0x535E,
                0x99C5: 0x5369,
                0x99C6: 0x536E,
                0x99C7: 0x5918,
                0x99C8: 0x537B,
                0x99C9: 0x5377,
                0x99CA: 0x5382,
                0x99CB: 0x5396,
                0x99CC: 0x53A0,
                0x99CD: 0x53A6,
                0x99CE: 0x53A5,
                0x99CF: 0x53AE,
                0x99D0: 0x53B0,
                0x99D1: 0x53B6,
                0x99D2: 0x53C3,
                0x99D3: 0x7C12,
                0x99D4: 0x96D9,
                0x99D5: 0x53DF,
                0x99D6: 0x66FC,
                0x99D7: 0x71EE,
                0x99D8: 0x53EE,
                0x99D9: 0x53E8,
                0x99DA: 0x53ED,
                0x99DB: 0x53FA,
                0x99DC: 0x5401,
                0x99DD: 0x543D,
                0x99DE: 0x5440,
                0x99DF: 0x542C,
                0x99E0: 0x542D,
                0x99E1: 0x543C,
                0x99E2: 0x542E,
                0x99E3: 0x5436,
                0x99E4: 0x5429,
                0x99E5: 0x541D,
                0x99E6: 0x544E,
                0x99E7: 0x548F,
                0x99E8: 0x5475,
                0x99E9: 0x548E,
                0x99EA: 0x545F,
                0x99EB: 0x5471,
                0x99EC: 0x5477,
                0x99ED: 0x5470,
                0x99EE: 0x5492,
                0x99EF: 0x547B,
                0x99F0: 0x5480,
                0x99F1: 0x5476,
                0x99F2: 0x5484,
                0x99F3: 0x5490,
                0x99F4: 0x5486,
                0x99F5: 0x54C7,
                0x99F6: 0x54A2,
                0x99F7: 0x54B8,
                0x99F8: 0x54A5,
                0x99F9: 0x54AC,
                0x99FA: 0x54C4,
                0x99FB: 0x54C8,
                0x99FC: 0x54A8,
                0x9A40: 0x54AB,
                0x9A41: 0x54C2,
                0x9A42: 0x54A4,
                0x9A43: 0x54BE,
                0x9A44: 0x54BC,
                0x9A45: 0x54D8,
                0x9A46: 0x54E5,
                0x9A47: 0x54E6,
                0x9A48: 0x550F,
                0x9A49: 0x5514,
                0x9A4A: 0x54FD,
                0x9A4B: 0x54EE,
                0x9A4C: 0x54ED,
                0x9A4D: 0x54FA,
                0x9A4E: 0x54E2,
                0x9A4F: 0x5539,
                0x9A50: 0x5540,
                0x9A51: 0x5563,
                0x9A52: 0x554C,
                0x9A53: 0x552E,
                0x9A54: 0x555C,
                0x9A55: 0x5545,
                0x9A56: 0x5556,
                0x9A57: 0x5557,
                0x9A58: 0x5538,
                0x9A59: 0x5533,
                0x9A5A: 0x555D,
                0x9A5B: 0x5599,
                0x9A5C: 0x5580,
                0x9A5D: 0x54AF,
                0x9A5E: 0x558A,
                0x9A5F: 0x559F,
                0x9A60: 0x557B,
                0x9A61: 0x557E,
                0x9A62: 0x5598,
                0x9A63: 0x559E,
                0x9A64: 0x55AE,
                0x9A65: 0x557C,
                0x9A66: 0x5583,
                0x9A67: 0x55A9,
                0x9A68: 0x5587,
                0x9A69: 0x55A8,
                0x9A6A: 0x55DA,
                0x9A6B: 0x55C5,
                0x9A6C: 0x55DF,
                0x9A6D: 0x55C4,
                0x9A6E: 0x55DC,
                0x9A6F: 0x55E4,
                0x9A70: 0x55D4,
                0x9A71: 0x5614,
                0x9A72: 0x55F7,
                0x9A73: 0x5616,
                0x9A74: 0x55FE,
                0x9A75: 0x55FD,
                0x9A76: 0x561B,
                0x9A77: 0x55F9,
                0x9A78: 0x564E,
                0x9A79: 0x5650,
                0x9A7A: 0x71DF,
                0x9A7B: 0x5634,
                0x9A7C: 0x5636,
                0x9A7D: 0x5632,
                0x9A7E: 0x5638,
                0x9A80: 0x566B,
                0x9A81: 0x5664,
                0x9A82: 0x562F,
                0x9A83: 0x566C,
                0x9A84: 0x566A,
                0x9A85: 0x5686,
                0x9A86: 0x5680,
                0x9A87: 0x568A,
                0x9A88: 0x56A0,
                0x9A89: 0x5694,
                0x9A8A: 0x568F,
                0x9A8B: 0x56A5,
                0x9A8C: 0x56AE,
                0x9A8D: 0x56B6,
                0x9A8E: 0x56B4,
                0x9A8F: 0x56C2,
                0x9A90: 0x56BC,
                0x9A91: 0x56C1,
                0x9A92: 0x56C3,
                0x9A93: 0x56C0,
                0x9A94: 0x56C8,
                0x9A95: 0x56CE,
                0x9A96: 0x56D1,
                0x9A97: 0x56D3,
                0x9A98: 0x56D7,
                0x9A99: 0x56EE,
                0x9A9A: 0x56F9,
                0x9A9B: 0x5700,
                0x9A9C: 0x56FF,
                0x9A9D: 0x5704,
                0x9A9E: 0x5709,
                0x9A9F: 0x5708,
                0x9AA0: 0x570B,
                0x9AA1: 0x570D,
                0x9AA2: 0x5713,
                0x9AA3: 0x5718,
                0x9AA4: 0x5716,
                0x9AA5: 0x55C7,
                0x9AA6: 0x571C,
                0x9AA7: 0x5726,
                0x9AA8: 0x5737,
                0x9AA9: 0x5738,
                0x9AAA: 0x574E,
                0x9AAB: 0x573B,
                0x9AAC: 0x5740,
                0x9AAD: 0x574F,
                0x9AAE: 0x5769,
                0x9AAF: 0x57C0,
                0x9AB0: 0x5788,
                0x9AB1: 0x5761,
                0x9AB2: 0x577F,
                0x9AB3: 0x5789,
                0x9AB4: 0x5793,
                0x9AB5: 0x57A0,
                0x9AB6: 0x57B3,
                0x9AB7: 0x57A4,
                0x9AB8: 0x57AA,
                0x9AB9: 0x57B0,
                0x9ABA: 0x57C3,
                0x9ABB: 0x57C6,
                0x9ABC: 0x57D4,
                0x9ABD: 0x57D2,
                0x9ABE: 0x57D3,
                0x9ABF: 0x580A,
                0x9AC0: 0x57D6,
                0x9AC1: 0x57E3,
                0x9AC2: 0x580B,
                0x9AC3: 0x5819,
                0x9AC4: 0x581D,
                0x9AC5: 0x5872,
                0x9AC6: 0x5821,
                0x9AC7: 0x5862,
                0x9AC8: 0x584B,
                0x9AC9: 0x5870,
                0x9ACA: 0x6BC0,
                0x9ACB: 0x5852,
                0x9ACC: 0x583D,
                0x9ACD: 0x5879,
                0x9ACE: 0x5885,
                0x9ACF: 0x58B9,
                0x9AD0: 0x589F,
                0x9AD1: 0x58AB,
                0x9AD2: 0x58BA,
                0x9AD3: 0x58DE,
                0x9AD4: 0x58BB,
                0x9AD5: 0x58B8,
                0x9AD6: 0x58AE,
                0x9AD7: 0x58C5,
                0x9AD8: 0x58D3,
                0x9AD9: 0x58D1,
                0x9ADA: 0x58D7,
                0x9ADB: 0x58D9,
                0x9ADC: 0x58D8,
                0x9ADD: 0x58E5,
                0x9ADE: 0x58DC,
                0x9ADF: 0x58E4,
                0x9AE0: 0x58DF,
                0x9AE1: 0x58EF,
                0x9AE2: 0x58FA,
                0x9AE3: 0x58F9,
                0x9AE4: 0x58FB,
                0x9AE5: 0x58FC,
                0x9AE6: 0x58FD,
                0x9AE7: 0x5902,
                0x9AE8: 0x590A,
                0x9AE9: 0x5910,
                0x9AEA: 0x591B,
                0x9AEB: 0x68A6,
                0x9AEC: 0x5925,
                0x9AED: 0x592C,
                0x9AEE: 0x592D,
                0x9AEF: 0x5932,
                0x9AF0: 0x5938,
                0x9AF1: 0x593E,
                0x9AF2: 0x7AD2,
                0x9AF3: 0x5955,
                0x9AF4: 0x5950,
                0x9AF5: 0x594E,
                0x9AF6: 0x595A,
                0x9AF7: 0x5958,
                0x9AF8: 0x5962,
                0x9AF9: 0x5960,
                0x9AFA: 0x5967,
                0x9AFB: 0x596C,
                0x9AFC: 0x5969,
                0x9B40: 0x5978,
                0x9B41: 0x5981,
                0x9B42: 0x599D,
                0x9B43: 0x4F5E,
                0x9B44: 0x4FAB,
                0x9B45: 0x59A3,
                0x9B46: 0x59B2,
                0x9B47: 0x59C6,
                0x9B48: 0x59E8,
                0x9B49: 0x59DC,
                0x9B4A: 0x598D,
                0x9B4B: 0x59D9,
                0x9B4C: 0x59DA,
                0x9B4D: 0x5A25,
                0x9B4E: 0x5A1F,
                0x9B4F: 0x5A11,
                0x9B50: 0x5A1C,
                0x9B51: 0x5A09,
                0x9B52: 0x5A1A,
                0x9B53: 0x5A40,
                0x9B54: 0x5A6C,
                0x9B55: 0x5A49,
                0x9B56: 0x5A35,
                0x9B57: 0x5A36,
                0x9B58: 0x5A62,
                0x9B59: 0x5A6A,
                0x9B5A: 0x5A9A,
                0x9B5B: 0x5ABC,
                0x9B5C: 0x5ABE,
                0x9B5D: 0x5ACB,
                0x9B5E: 0x5AC2,
                0x9B5F: 0x5ABD,
                0x9B60: 0x5AE3,
                0x9B61: 0x5AD7,
                0x9B62: 0x5AE6,
                0x9B63: 0x5AE9,
                0x9B64: 0x5AD6,
                0x9B65: 0x5AFA,
                0x9B66: 0x5AFB,
                0x9B67: 0x5B0C,
                0x9B68: 0x5B0B,
                0x9B69: 0x5B16,
                0x9B6A: 0x5B32,
                0x9B6B: 0x5AD0,
                0x9B6C: 0x5B2A,
                0x9B6D: 0x5B36,
                0x9B6E: 0x5B3E,
                0x9B6F: 0x5B43,
                0x9B70: 0x5B45,
                0x9B71: 0x5B40,
                0x9B72: 0x5B51,
                0x9B73: 0x5B55,
                0x9B74: 0x5B5A,
                0x9B75: 0x5B5B,
                0x9B76: 0x5B65,
                0x9B77: 0x5B69,
                0x9B78: 0x5B70,
                0x9B79: 0x5B73,
                0x9B7A: 0x5B75,
                0x9B7B: 0x5B78,
                0x9B7C: 0x6588,
                0x9B7D: 0x5B7A,
                0x9B7E: 0x5B80,
                0x9B80: 0x5B83,
                0x9B81: 0x5BA6,
                0x9B82: 0x5BB8,
                0x9B83: 0x5BC3,
                0x9B84: 0x5BC7,
                0x9B85: 0x5BC9,
                0x9B86: 0x5BD4,
                0x9B87: 0x5BD0,
                0x9B88: 0x5BE4,
                0x9B89: 0x5BE6,
                0x9B8A: 0x5BE2,
                0x9B8B: 0x5BDE,
                0x9B8C: 0x5BE5,
                0x9B8D: 0x5BEB,
                0x9B8E: 0x5BF0,
                0x9B8F: 0x5BF6,
                0x9B90: 0x5BF3,
                0x9B91: 0x5C05,
                0x9B92: 0x5C07,
                0x9B93: 0x5C08,
                0x9B94: 0x5C0D,
                0x9B95: 0x5C13,
                0x9B96: 0x5C20,
                0x9B97: 0x5C22,
                0x9B98: 0x5C28,
                0x9B99: 0x5C38,
                0x9B9A: 0x5C39,
                0x9B9B: 0x5C41,
                0x9B9C: 0x5C46,
                0x9B9D: 0x5C4E,
                0x9B9E: 0x5C53,
                0x9B9F: 0x5C50,
                0x9BA0: 0x5C4F,
                0x9BA1: 0x5B71,
                0x9BA2: 0x5C6C,
                0x9BA3: 0x5C6E,
                0x9BA4: 0x4E62,
                0x9BA5: 0x5C76,
                0x9BA6: 0x5C79,
                0x9BA7: 0x5C8C,
                0x9BA8: 0x5C91,
                0x9BA9: 0x5C94,
                0x9BAA: 0x599B,
                0x9BAB: 0x5CAB,
                0x9BAC: 0x5CBB,
                0x9BAD: 0x5CB6,
                0x9BAE: 0x5CBC,
                0x9BAF: 0x5CB7,
                0x9BB0: 0x5CC5,
                0x9BB1: 0x5CBE,
                0x9BB2: 0x5CC7,
                0x9BB3: 0x5CD9,
                0x9BB4: 0x5CE9,
                0x9BB5: 0x5CFD,
                0x9BB6: 0x5CFA,
                0x9BB7: 0x5CED,
                0x9BB8: 0x5D8C,
                0x9BB9: 0x5CEA,
                0x9BBA: 0x5D0B,
                0x9BBB: 0x5D15,
                0x9BBC: 0x5D17,
                0x9BBD: 0x5D5C,
                0x9BBE: 0x5D1F,
                0x9BBF: 0x5D1B,
                0x9BC0: 0x5D11,
                0x9BC1: 0x5D14,
                0x9BC2: 0x5D22,
                0x9BC3: 0x5D1A,
                0x9BC4: 0x5D19,
                0x9BC5: 0x5D18,
                0x9BC6: 0x5D4C,
                0x9BC7: 0x5D52,
                0x9BC8: 0x5D4E,
                0x9BC9: 0x5D4B,
                0x9BCA: 0x5D6C,
                0x9BCB: 0x5D73,
                0x9BCC: 0x5D76,
                0x9BCD: 0x5D87,
                0x9BCE: 0x5D84,
                0x9BCF: 0x5D82,
                0x9BD0: 0x5DA2,
                0x9BD1: 0x5D9D,
                0x9BD2: 0x5DAC,
                0x9BD3: 0x5DAE,
                0x9BD4: 0x5DBD,
                0x9BD5: 0x5D90,
                0x9BD6: 0x5DB7,
                0x9BD7: 0x5DBC,
                0x9BD8: 0x5DC9,
                0x9BD9: 0x5DCD,
                0x9BDA: 0x5DD3,
                0x9BDB: 0x5DD2,
                0x9BDC: 0x5DD6,
                0x9BDD: 0x5DDB,
                0x9BDE: 0x5DEB,
                0x9BDF: 0x5DF2,
                0x9BE0: 0x5DF5,
                0x9BE1: 0x5E0B,
                0x9BE2: 0x5E1A,
                0x9BE3: 0x5E19,
                0x9BE4: 0x5E11,
                0x9BE5: 0x5E1B,
                0x9BE6: 0x5E36,
                0x9BE7: 0x5E37,
                0x9BE8: 0x5E44,
                0x9BE9: 0x5E43,
                0x9BEA: 0x5E40,
                0x9BEB: 0x5E4E,
                0x9BEC: 0x5E57,
                0x9BED: 0x5E54,
                0x9BEE: 0x5E5F,
                0x9BEF: 0x5E62,
                0x9BF0: 0x5E64,
                0x9BF1: 0x5E47,
                0x9BF2: 0x5E75,
                0x9BF3: 0x5E76,
                0x9BF4: 0x5E7A,
                0x9BF5: 0x9EBC,
                0x9BF6: 0x5E7F,
                0x9BF7: 0x5EA0,
                0x9BF8: 0x5EC1,
                0x9BF9: 0x5EC2,
                0x9BFA: 0x5EC8,
                0x9BFB: 0x5ED0,
                0x9BFC: 0x5ECF,
                0x9C40: 0x5ED6,
                0x9C41: 0x5EE3,
                0x9C42: 0x5EDD,
                0x9C43: 0x5EDA,
                0x9C44: 0x5EDB,
                0x9C45: 0x5EE2,
                0x9C46: 0x5EE1,
                0x9C47: 0x5EE8,
                0x9C48: 0x5EE9,
                0x9C49: 0x5EEC,
                0x9C4A: 0x5EF1,
                0x9C4B: 0x5EF3,
                0x9C4C: 0x5EF0,
                0x9C4D: 0x5EF4,
                0x9C4E: 0x5EF8,
                0x9C4F: 0x5EFE,
                0x9C50: 0x5F03,
                0x9C51: 0x5F09,
                0x9C52: 0x5F5D,
                0x9C53: 0x5F5C,
                0x9C54: 0x5F0B,
                0x9C55: 0x5F11,
                0x9C56: 0x5F16,
                0x9C57: 0x5F29,
                0x9C58: 0x5F2D,
                0x9C59: 0x5F38,
                0x9C5A: 0x5F41,
                0x9C5B: 0x5F48,
                0x9C5C: 0x5F4C,
                0x9C5D: 0x5F4E,
                0x9C5E: 0x5F2F,
                0x9C5F: 0x5F51,
                0x9C60: 0x5F56,
                0x9C61: 0x5F57,
                0x9C62: 0x5F59,
                0x9C63: 0x5F61,
                0x9C64: 0x5F6D,
                0x9C65: 0x5F73,
                0x9C66: 0x5F77,
                0x9C67: 0x5F83,
                0x9C68: 0x5F82,
                0x9C69: 0x5F7F,
                0x9C6A: 0x5F8A,
                0x9C6B: 0x5F88,
                0x9C6C: 0x5F91,
                0x9C6D: 0x5F87,
                0x9C6E: 0x5F9E,
                0x9C6F: 0x5F99,
                0x9C70: 0x5F98,
                0x9C71: 0x5FA0,
                0x9C72: 0x5FA8,
                0x9C73: 0x5FAD,
                0x9C74: 0x5FBC,
                0x9C75: 0x5FD6,
                0x9C76: 0x5FFB,
                0x9C77: 0x5FE4,
                0x9C78: 0x5FF8,
                0x9C79: 0x5FF1,
                0x9C7A: 0x5FDD,
                0x9C7B: 0x60B3,
                0x9C7C: 0x5FFF,
                0x9C7D: 0x6021,
                0x9C7E: 0x6060,
                0x9C80: 0x6019,
                0x9C81: 0x6010,
                0x9C82: 0x6029,
                0x9C83: 0x600E,
                0x9C84: 0x6031,
                0x9C85: 0x601B,
                0x9C86: 0x6015,
                0x9C87: 0x602B,
                0x9C88: 0x6026,
                0x9C89: 0x600F,
                0x9C8A: 0x603A,
                0x9C8B: 0x605A,
                0x9C8C: 0x6041,
                0x9C8D: 0x606A,
                0x9C8E: 0x6077,
                0x9C8F: 0x605F,
                0x9C90: 0x604A,
                0x9C91: 0x6046,
                0x9C92: 0x604D,
                0x9C93: 0x6063,
                0x9C94: 0x6043,
                0x9C95: 0x6064,
                0x9C96: 0x6042,
                0x9C97: 0x606C,
                0x9C98: 0x606B,
                0x9C99: 0x6059,
                0x9C9A: 0x6081,
                0x9C9B: 0x608D,
                0x9C9C: 0x60E7,
                0x9C9D: 0x6083,
                0x9C9E: 0x609A,
                0x9C9F: 0x6084,
                0x9CA0: 0x609B,
                0x9CA1: 0x6096,
                0x9CA2: 0x6097,
                0x9CA3: 0x6092,
                0x9CA4: 0x60A7,
                0x9CA5: 0x608B,
                0x9CA6: 0x60E1,
                0x9CA7: 0x60B8,
                0x9CA8: 0x60E0,
                0x9CA9: 0x60D3,
                0x9CAA: 0x60B4,
                0x9CAB: 0x5FF0,
                0x9CAC: 0x60BD,
                0x9CAD: 0x60C6,
                0x9CAE: 0x60B5,
                0x9CAF: 0x60D8,
                0x9CB0: 0x614D,
                0x9CB1: 0x6115,
                0x9CB2: 0x6106,
                0x9CB3: 0x60F6,
                0x9CB4: 0x60F7,
                0x9CB5: 0x6100,
                0x9CB6: 0x60F4,
                0x9CB7: 0x60FA,
                0x9CB8: 0x6103,
                0x9CB9: 0x6121,
                0x9CBA: 0x60FB,
                0x9CBB: 0x60F1,
                0x9CBC: 0x610D,
                0x9CBD: 0x610E,
                0x9CBE: 0x6147,
                0x9CBF: 0x613E,
                0x9CC0: 0x6128,
                0x9CC1: 0x6127,
                0x9CC2: 0x614A,
                0x9CC3: 0x613F,
                0x9CC4: 0x613C,
                0x9CC5: 0x612C,
                0x9CC6: 0x6134,
                0x9CC7: 0x613D,
                0x9CC8: 0x6142,
                0x9CC9: 0x6144,
                0x9CCA: 0x6173,
                0x9CCB: 0x6177,
                0x9CCC: 0x6158,
                0x9CCD: 0x6159,
                0x9CCE: 0x615A,
                0x9CCF: 0x616B,
                0x9CD0: 0x6174,
                0x9CD1: 0x616F,
                0x9CD2: 0x6165,
                0x9CD3: 0x6171,
                0x9CD4: 0x615F,
                0x9CD5: 0x615D,
                0x9CD6: 0x6153,
                0x9CD7: 0x6175,
                0x9CD8: 0x6199,
                0x9CD9: 0x6196,
                0x9CDA: 0x6187,
                0x9CDB: 0x61AC,
                0x9CDC: 0x6194,
                0x9CDD: 0x619A,
                0x9CDE: 0x618A,
                0x9CDF: 0x6191,
                0x9CE0: 0x61AB,
                0x9CE1: 0x61AE,
                0x9CE2: 0x61CC,
                0x9CE3: 0x61CA,
                0x9CE4: 0x61C9,
                0x9CE5: 0x61F7,
                0x9CE6: 0x61C8,
                0x9CE7: 0x61C3,
                0x9CE8: 0x61C6,
                0x9CE9: 0x61BA,
                0x9CEA: 0x61CB,
                0x9CEB: 0x7F79,
                0x9CEC: 0x61CD,
                0x9CED: 0x61E6,
                0x9CEE: 0x61E3,
                0x9CEF: 0x61F6,
                0x9CF0: 0x61FA,
                0x9CF1: 0x61F4,
                0x9CF2: 0x61FF,
                0x9CF3: 0x61FD,
                0x9CF4: 0x61FC,
                0x9CF5: 0x61FE,
                0x9CF6: 0x6200,
                0x9CF7: 0x6208,
                0x9CF8: 0x6209,
                0x9CF9: 0x620D,
                0x9CFA: 0x620C,
                0x9CFB: 0x6214,
                0x9CFC: 0x621B,
                0x9D40: 0x621E,
                0x9D41: 0x6221,
                0x9D42: 0x622A,
                0x9D43: 0x622E,
                0x9D44: 0x6230,
                0x9D45: 0x6232,
                0x9D46: 0x6233,
                0x9D47: 0x6241,
                0x9D48: 0x624E,
                0x9D49: 0x625E,
                0x9D4A: 0x6263,
                0x9D4B: 0x625B,
                0x9D4C: 0x6260,
                0x9D4D: 0x6268,
                0x9D4E: 0x627C,
                0x9D4F: 0x6282,
                0x9D50: 0x6289,
                0x9D51: 0x627E,
                0x9D52: 0x6292,
                0x9D53: 0x6293,
                0x9D54: 0x6296,
                0x9D55: 0x62D4,
                0x9D56: 0x6283,
                0x9D57: 0x6294,
                0x9D58: 0x62D7,
                0x9D59: 0x62D1,
                0x9D5A: 0x62BB,
                0x9D5B: 0x62CF,
                0x9D5C: 0x62FF,
                0x9D5D: 0x62C6,
                0x9D5E: 0x64D4,
                0x9D5F: 0x62C8,
                0x9D60: 0x62DC,
                0x9D61: 0x62CC,
                0x9D62: 0x62CA,
                0x9D63: 0x62C2,
                0x9D64: 0x62C7,
                0x9D65: 0x629B,
                0x9D66: 0x62C9,
                0x9D67: 0x630C,
                0x9D68: 0x62EE,
                0x9D69: 0x62F1,
                0x9D6A: 0x6327,
                0x9D6B: 0x6302,
                0x9D6C: 0x6308,
                0x9D6D: 0x62EF,
                0x9D6E: 0x62F5,
                0x9D6F: 0x6350,
                0x9D70: 0x633E,
                0x9D71: 0x634D,
                0x9D72: 0x641C,
                0x9D73: 0x634F,
                0x9D74: 0x6396,
                0x9D75: 0x638E,
                0x9D76: 0x6380,
                0x9D77: 0x63AB,
                0x9D78: 0x6376,
                0x9D79: 0x63A3,
                0x9D7A: 0x638F,
                0x9D7B: 0x6389,
                0x9D7C: 0x639F,
                0x9D7D: 0x63B5,
                0x9D7E: 0x636B,
                0x9D80: 0x6369,
                0x9D81: 0x63BE,
                0x9D82: 0x63E9,
                0x9D83: 0x63C0,
                0x9D84: 0x63C6,
                0x9D85: 0x63E3,
                0x9D86: 0x63C9,
                0x9D87: 0x63D2,
                0x9D88: 0x63F6,
                0x9D89: 0x63C4,
                0x9D8A: 0x6416,
                0x9D8B: 0x6434,
                0x9D8C: 0x6406,
                0x9D8D: 0x6413,
                0x9D8E: 0x6426,
                0x9D8F: 0x6436,
                0x9D90: 0x651D,
                0x9D91: 0x6417,
                0x9D92: 0x6428,
                0x9D93: 0x640F,
                0x9D94: 0x6467,
                0x9D95: 0x646F,
                0x9D96: 0x6476,
                0x9D97: 0x644E,
                0x9D98: 0x652A,
                0x9D99: 0x6495,
                0x9D9A: 0x6493,
                0x9D9B: 0x64A5,
                0x9D9C: 0x64A9,
                0x9D9D: 0x6488,
                0x9D9E: 0x64BC,
                0x9D9F: 0x64DA,
                0x9DA0: 0x64D2,
                0x9DA1: 0x64C5,
                0x9DA2: 0x64C7,
                0x9DA3: 0x64BB,
                0x9DA4: 0x64D8,
                0x9DA5: 0x64C2,
                0x9DA6: 0x64F1,
                0x9DA7: 0x64E7,
                0x9DA8: 0x8209,
                0x9DA9: 0x64E0,
                0x9DAA: 0x64E1,
                0x9DAB: 0x62AC,
                0x9DAC: 0x64E3,
                0x9DAD: 0x64EF,
                0x9DAE: 0x652C,
                0x9DAF: 0x64F6,
                0x9DB0: 0x64F4,
                0x9DB1: 0x64F2,
                0x9DB2: 0x64FA,
                0x9DB3: 0x6500,
                0x9DB4: 0x64FD,
                0x9DB5: 0x6518,
                0x9DB6: 0x651C,
                0x9DB7: 0x6505,
                0x9DB8: 0x6524,
                0x9DB9: 0x6523,
                0x9DBA: 0x652B,
                0x9DBB: 0x6534,
                0x9DBC: 0x6535,
                0x9DBD: 0x6537,
                0x9DBE: 0x6536,
                0x9DBF: 0x6538,
                0x9DC0: 0x754B,
                0x9DC1: 0x6548,
                0x9DC2: 0x6556,
                0x9DC3: 0x6555,
                0x9DC4: 0x654D,
                0x9DC5: 0x6558,
                0x9DC6: 0x655E,
                0x9DC7: 0x655D,
                0x9DC8: 0x6572,
                0x9DC9: 0x6578,
                0x9DCA: 0x6582,
                0x9DCB: 0x6583,
                0x9DCC: 0x8B8A,
                0x9DCD: 0x659B,
                0x9DCE: 0x659F,
                0x9DCF: 0x65AB,
                0x9DD0: 0x65B7,
                0x9DD1: 0x65C3,
                0x9DD2: 0x65C6,
                0x9DD3: 0x65C1,
                0x9DD4: 0x65C4,
                0x9DD5: 0x65CC,
                0x9DD6: 0x65D2,
                0x9DD7: 0x65DB,
                0x9DD8: 0x65D9,
                0x9DD9: 0x65E0,
                0x9DDA: 0x65E1,
                0x9DDB: 0x65F1,
                0x9DDC: 0x6772,
                0x9DDD: 0x660A,
                0x9DDE: 0x6603,
                0x9DDF: 0x65FB,
                0x9DE0: 0x6773,
                0x9DE1: 0x6635,
                0x9DE2: 0x6636,
                0x9DE3: 0x6634,
                0x9DE4: 0x661C,
                0x9DE5: 0x664F,
                0x9DE6: 0x6644,
                0x9DE7: 0x6649,
                0x9DE8: 0x6641,
                0x9DE9: 0x665E,
                0x9DEA: 0x665D,
                0x9DEB: 0x6664,
                0x9DEC: 0x6667,
                0x9DED: 0x6668,
                0x9DEE: 0x665F,
                0x9DEF: 0x6662,
                0x9DF0: 0x6670,
                0x9DF1: 0x6683,
                0x9DF2: 0x6688,
                0x9DF3: 0x668E,
                0x9DF4: 0x6689,
                0x9DF5: 0x6684,
                0x9DF6: 0x6698,
                0x9DF7: 0x669D,
                0x9DF8: 0x66C1,
                0x9DF9: 0x66B9,
                0x9DFA: 0x66C9,
                0x9DFB: 0x66BE,
                0x9DFC: 0x66BC,
                0x9E40: 0x66C4,
                0x9E41: 0x66B8,
                0x9E42: 0x66D6,
                0x9E43: 0x66DA,
                0x9E44: 0x66E0,
                0x9E45: 0x663F,
                0x9E46: 0x66E6,
                0x9E47: 0x66E9,
                0x9E48: 0x66F0,
                0x9E49: 0x66F5,
                0x9E4A: 0x66F7,
                0x9E4B: 0x670F,
                0x9E4C: 0x6716,
                0x9E4D: 0x671E,
                0x9E4E: 0x6726,
                0x9E4F: 0x6727,
                0x9E50: 0x9738,
                0x9E51: 0x672E,
                0x9E52: 0x673F,
                0x9E53: 0x6736,
                0x9E54: 0x6741,
                0x9E55: 0x6738,
                0x9E56: 0x6737,
                0x9E57: 0x6746,
                0x9E58: 0x675E,
                0x9E59: 0x6760,
                0x9E5A: 0x6759,
                0x9E5B: 0x6763,
                0x9E5C: 0x6764,
                0x9E5D: 0x6789,
                0x9E5E: 0x6770,
                0x9E5F: 0x67A9,
                0x9E60: 0x677C,
                0x9E61: 0x676A,
                0x9E62: 0x678C,
                0x9E63: 0x678B,
                0x9E64: 0x67A6,
                0x9E65: 0x67A1,
                0x9E66: 0x6785,
                0x9E67: 0x67B7,
                0x9E68: 0x67EF,
                0x9E69: 0x67B4,
                0x9E6A: 0x67EC,
                0x9E6B: 0x67B3,
                0x9E6C: 0x67E9,
                0x9E6D: 0x67B8,
                0x9E6E: 0x67E4,
                0x9E6F: 0x67DE,
                0x9E70: 0x67DD,
                0x9E71: 0x67E2,
                0x9E72: 0x67EE,
                0x9E73: 0x67B9,
                0x9E74: 0x67CE,
                0x9E75: 0x67C6,
                0x9E76: 0x67E7,
                0x9E77: 0x6A9C,
                0x9E78: 0x681E,
                0x9E79: 0x6846,
                0x9E7A: 0x6829,
                0x9E7B: 0x6840,
                0x9E7C: 0x684D,
                0x9E7D: 0x6832,
                0x9E7E: 0x684E,
                0x9E80: 0x68B3,
                0x9E81: 0x682B,
                0x9E82: 0x6859,
                0x9E83: 0x6863,
                0x9E84: 0x6877,
                0x9E85: 0x687F,
                0x9E86: 0x689F,
                0x9E87: 0x688F,
                0x9E88: 0x68AD,
                0x9E89: 0x6894,
                0x9E8A: 0x689D,
                0x9E8B: 0x689B,
                0x9E8C: 0x6883,
                0x9E8D: 0x6AAE,
                0x9E8E: 0x68B9,
                0x9E8F: 0x6874,
                0x9E90: 0x68B5,
                0x9E91: 0x68A0,
                0x9E92: 0x68BA,
                0x9E93: 0x690F,
                0x9E94: 0x688D,
                0x9E95: 0x687E,
                0x9E96: 0x6901,
                0x9E97: 0x68CA,
                0x9E98: 0x6908,
                0x9E99: 0x68D8,
                0x9E9A: 0x6922,
                0x9E9B: 0x6926,
                0x9E9C: 0x68E1,
                0x9E9D: 0x690C,
                0x9E9E: 0x68CD,
                0x9E9F: 0x68D4,
                0x9EA0: 0x68E7,
                0x9EA1: 0x68D5,
                0x9EA2: 0x6936,
                0x9EA3: 0x6912,
                0x9EA4: 0x6904,
                0x9EA5: 0x68D7,
                0x9EA6: 0x68E3,
                0x9EA7: 0x6925,
                0x9EA8: 0x68F9,
                0x9EA9: 0x68E0,
                0x9EAA: 0x68EF,
                0x9EAB: 0x6928,
                0x9EAC: 0x692A,
                0x9EAD: 0x691A,
                0x9EAE: 0x6923,
                0x9EAF: 0x6921,
                0x9EB0: 0x68C6,
                0x9EB1: 0x6979,
                0x9EB2: 0x6977,
                0x9EB3: 0x695C,
                0x9EB4: 0x6978,
                0x9EB5: 0x696B,
                0x9EB6: 0x6954,
                0x9EB7: 0x697E,
                0x9EB8: 0x696E,
                0x9EB9: 0x6939,
                0x9EBA: 0x6974,
                0x9EBB: 0x693D,
                0x9EBC: 0x6959,
                0x9EBD: 0x6930,
                0x9EBE: 0x6961,
                0x9EBF: 0x695E,
                0x9EC0: 0x695D,
                0x9EC1: 0x6981,
                0x9EC2: 0x696A,
                0x9EC3: 0x69B2,
                0x9EC4: 0x69AE,
                0x9EC5: 0x69D0,
                0x9EC6: 0x69BF,
                0x9EC7: 0x69C1,
                0x9EC8: 0x69D3,
                0x9EC9: 0x69BE,
                0x9ECA: 0x69CE,
                0x9ECB: 0x5BE8,
                0x9ECC: 0x69CA,
                0x9ECD: 0x69DD,
                0x9ECE: 0x69BB,
                0x9ECF: 0x69C3,
                0x9ED0: 0x69A7,
                0x9ED1: 0x6A2E,
                0x9ED2: 0x6991,
                0x9ED3: 0x69A0,
                0x9ED4: 0x699C,
                0x9ED5: 0x6995,
                0x9ED6: 0x69B4,
                0x9ED7: 0x69DE,
                0x9ED8: 0x69E8,
                0x9ED9: 0x6A02,
                0x9EDA: 0x6A1B,
                0x9EDB: 0x69FF,
                0x9EDC: 0x6B0A,
                0x9EDD: 0x69F9,
                0x9EDE: 0x69F2,
                0x9EDF: 0x69E7,
                0x9EE0: 0x6A05,
                0x9EE1: 0x69B1,
                0x9EE2: 0x6A1E,
                0x9EE3: 0x69ED,
                0x9EE4: 0x6A14,
                0x9EE5: 0x69EB,
                0x9EE6: 0x6A0A,
                0x9EE7: 0x6A12,
                0x9EE8: 0x6AC1,
                0x9EE9: 0x6A23,
                0x9EEA: 0x6A13,
                0x9EEB: 0x6A44,
                0x9EEC: 0x6A0C,
                0x9EED: 0x6A72,
                0x9EEE: 0x6A36,
                0x9EEF: 0x6A78,
                0x9EF0: 0x6A47,
                0x9EF1: 0x6A62,
                0x9EF2: 0x6A59,
                0x9EF3: 0x6A66,
                0x9EF4: 0x6A48,
                0x9EF5: 0x6A38,
                0x9EF6: 0x6A22,
                0x9EF7: 0x6A90,
                0x9EF8: 0x6A8D,
                0x9EF9: 0x6AA0,
                0x9EFA: 0x6A84,
                0x9EFB: 0x6AA2,
                0x9EFC: 0x6AA3,
                0x9F40: 0x6A97,
                0x9F41: 0x8617,
                0x9F42: 0x6ABB,
                0x9F43: 0x6AC3,
                0x9F44: 0x6AC2,
                0x9F45: 0x6AB8,
                0x9F46: 0x6AB3,
                0x9F47: 0x6AAC,
                0x9F48: 0x6ADE,
                0x9F49: 0x6AD1,
                0x9F4A: 0x6ADF,
                0x9F4B: 0x6AAA,
                0x9F4C: 0x6ADA,
                0x9F4D: 0x6AEA,
                0x9F4E: 0x6AFB,
                0x9F4F: 0x6B05,
                0x9F50: 0x8616,
                0x9F51: 0x6AFA,
                0x9F52: 0x6B12,
                0x9F53: 0x6B16,
                0x9F54: 0x9B31,
                0x9F55: 0x6B1F,
                0x9F56: 0x6B38,
                0x9F57: 0x6B37,
                0x9F58: 0x76DC,
                0x9F59: 0x6B39,
                0x9F5A: 0x98EE,
                0x9F5B: 0x6B47,
                0x9F5C: 0x6B43,
                0x9F5D: 0x6B49,
                0x9F5E: 0x6B50,
                0x9F5F: 0x6B59,
                0x9F60: 0x6B54,
                0x9F61: 0x6B5B,
                0x9F62: 0x6B5F,
                0x9F63: 0x6B61,
                0x9F64: 0x6B78,
                0x9F65: 0x6B79,
                0x9F66: 0x6B7F,
                0x9F67: 0x6B80,
                0x9F68: 0x6B84,
                0x9F69: 0x6B83,
                0x9F6A: 0x6B8D,
                0x9F6B: 0x6B98,
                0x9F6C: 0x6B95,
                0x9F6D: 0x6B9E,
                0x9F6E: 0x6BA4,
                0x9F6F: 0x6BAA,
                0x9F70: 0x6BAB,
                0x9F71: 0x6BAF,
                0x9F72: 0x6BB2,
                0x9F73: 0x6BB1,
                0x9F74: 0x6BB3,
                0x9F75: 0x6BB7,
                0x9F76: 0x6BBC,
                0x9F77: 0x6BC6,
                0x9F78: 0x6BCB,
                0x9F79: 0x6BD3,
                0x9F7A: 0x6BDF,
                0x9F7B: 0x6BEC,
                0x9F7C: 0x6BEB,
                0x9F7D: 0x6BF3,
                0x9F7E: 0x6BEF,
                0x9F80: 0x9EBE,
                0x9F81: 0x6C08,
                0x9F82: 0x6C13,
                0x9F83: 0x6C14,
                0x9F84: 0x6C1B,
                0x9F85: 0x6C24,
                0x9F86: 0x6C23,
                0x9F87: 0x6C5E,
                0x9F88: 0x6C55,
                0x9F89: 0x6C62,
                0x9F8A: 0x6C6A,
                0x9F8B: 0x6C82,
                0x9F8C: 0x6C8D,
                0x9F8D: 0x6C9A,
                0x9F8E: 0x6C81,
                0x9F8F: 0x6C9B,
                0x9F90: 0x6C7E,
                0x9F91: 0x6C68,
                0x9F92: 0x6C73,
                0x9F93: 0x6C92,
                0x9F94: 0x6C90,
                0x9F95: 0x6CC4,
                0x9F96: 0x6CF1,
                0x9F97: 0x6CD3,
                0x9F98: 0x6CBD,
                0x9F99: 0x6CD7,
                0x9F9A: 0x6CC5,
                0x9F9B: 0x6CDD,
                0x9F9C: 0x6CAE,
                0x9F9D: 0x6CB1,
                0x9F9E: 0x6CBE,
                0x9F9F: 0x6CBA,
                0x9FA0: 0x6CDB,
                0x9FA1: 0x6CEF,
                0x9FA2: 0x6CD9,
                0x9FA3: 0x6CEA,
                0x9FA4: 0x6D1F,
                0x9FA5: 0x884D,
                0x9FA6: 0x6D36,
                0x9FA7: 0x6D2B,
                0x9FA8: 0x6D3D,
                0x9FA9: 0x6D38,
                0x9FAA: 0x6D19,
                0x9FAB: 0x6D35,
                0x9FAC: 0x6D33,
                0x9FAD: 0x6D12,
                0x9FAE: 0x6D0C,
                0x9FAF: 0x6D63,
                0x9FB0: 0x6D93,
                0x9FB1: 0x6D64,
                0x9FB2: 0x6D5A,
                0x9FB3: 0x6D79,
                0x9FB4: 0x6D59,
                0x9FB5: 0x6D8E,
                0x9FB6: 0x6D95,
                0x9FB7: 0x6FE4,
                0x9FB8: 0x6D85,
                0x9FB9: 0x6DF9,
                0x9FBA: 0x6E15,
                0x9FBB: 0x6E0A,
                0x9FBC: 0x6DB5,
                0x9FBD: 0x6DC7,
                0x9FBE: 0x6DE6,
                0x9FBF: 0x6DB8,
                0x9FC0: 0x6DC6,
                0x9FC1: 0x6DEC,
                0x9FC2: 0x6DDE,
                0x9FC3: 0x6DCC,
                0x9FC4: 0x6DE8,
                0x9FC5: 0x6DD2,
                0x9FC6: 0x6DC5,
                0x9FC7: 0x6DFA,
                0x9FC8: 0x6DD9,
                0x9FC9: 0x6DE4,
                0x9FCA: 0x6DD5,
                0x9FCB: 0x6DEA,
                0x9FCC: 0x6DEE,
                0x9FCD: 0x6E2D,
                0x9FCE: 0x6E6E,
                0x9FCF: 0x6E2E,
                0x9FD0: 0x6E19,
                0x9FD1: 0x6E72,
                0x9FD2: 0x6E5F,
                0x9FD3: 0x6E3E,
                0x9FD4: 0x6E23,
                0x9FD5: 0x6E6B,
                0x9FD6: 0x6E2B,
                0x9FD7: 0x6E76,
                0x9FD8: 0x6E4D,
                0x9FD9: 0x6E1F,
                0x9FDA: 0x6E43,
                0x9FDB: 0x6E3A,
                0x9FDC: 0x6E4E,
                0x9FDD: 0x6E24,
                0x9FDE: 0x6EFF,
                0x9FDF: 0x6E1D,
                0x9FE0: 0x6E38,
                0x9FE1: 0x6E82,
                0x9FE2: 0x6EAA,
                0x9FE3: 0x6E98,
                0x9FE4: 0x6EC9,
                0x9FE5: 0x6EB7,
                0x9FE6: 0x6ED3,
                0x9FE7: 0x6EBD,
                0x9FE8: 0x6EAF,
                0x9FE9: 0x6EC4,
                0x9FEA: 0x6EB2,
                0x9FEB: 0x6ED4,
                0x9FEC: 0x6ED5,
                0x9FED: 0x6E8F,
                0x9FEE: 0x6EA5,
                0x9FEF: 0x6EC2,
                0x9FF0: 0x6E9F,
                0x9FF1: 0x6F41,
                0x9FF2: 0x6F11,
                0x9FF3: 0x704C,
                0x9FF4: 0x6EEC,
                0x9FF5: 0x6EF8,
                0x9FF6: 0x6EFE,
                0x9FF7: 0x6F3F,
                0x9FF8: 0x6EF2,
                0x9FF9: 0x6F31,
                0x9FFA: 0x6EEF,
                0x9FFB: 0x6F32,
                0x9FFC: 0x6ECC,
                0xA1: 0xFF61,
                0xA2: 0xFF62,
                0xA3: 0xFF63,
                0xA4: 0xFF64,
                0xA5: 0xFF65,
                0xA6: 0xFF66,
                0xA7: 0xFF67,
                0xA8: 0xFF68,
                0xA9: 0xFF69,
                0xAA: 0xFF6A,
                0xAB: 0xFF6B,
                0xAC: 0xFF6C,
                0xAD: 0xFF6D,
                0xAE: 0xFF6E,
                0xAF: 0xFF6F,
                0xB0: 0xFF70,
                0xB1: 0xFF71,
                0xB2: 0xFF72,
                0xB3: 0xFF73,
                0xB4: 0xFF74,
                0xB5: 0xFF75,
                0xB6: 0xFF76,
                0xB7: 0xFF77,
                0xB8: 0xFF78,
                0xB9: 0xFF79,
                0xBA: 0xFF7A,
                0xBB: 0xFF7B,
                0xBC: 0xFF7C,
                0xBD: 0xFF7D,
                0xBE: 0xFF7E,
                0xBF: 0xFF7F,
                0xC0: 0xFF80,
                0xC1: 0xFF81,
                0xC2: 0xFF82,
                0xC3: 0xFF83,
                0xC4: 0xFF84,
                0xC5: 0xFF85,
                0xC6: 0xFF86,
                0xC7: 0xFF87,
                0xC8: 0xFF88,
                0xC9: 0xFF89,
                0xCA: 0xFF8A,
                0xCB: 0xFF8B,
                0xCC: 0xFF8C,
                0xCD: 0xFF8D,
                0xCE: 0xFF8E,
                0xCF: 0xFF8F,
                0xD0: 0xFF90,
                0xD1: 0xFF91,
                0xD2: 0xFF92,
                0xD3: 0xFF93,
                0xD4: 0xFF94,
                0xD5: 0xFF95,
                0xD6: 0xFF96,
                0xD7: 0xFF97,
                0xD8: 0xFF98,
                0xD9: 0xFF99,
                0xDA: 0xFF9A,
                0xDB: 0xFF9B,
                0xDC: 0xFF9C,
                0xDD: 0xFF9D,
                0xDE: 0xFF9E,
                0xDF: 0xFF9F,
                0xE040: 0x6F3E,
                0xE041: 0x6F13,
                0xE042: 0x6EF7,
                0xE043: 0x6F86,
                0xE044: 0x6F7A,
                0xE045: 0x6F78,
                0xE046: 0x6F81,
                0xE047: 0x6F80,
                0xE048: 0x6F6F,
                0xE049: 0x6F5B,
                0xE04A: 0x6FF3,
                0xE04B: 0x6F6D,
                0xE04C: 0x6F82,
                0xE04D: 0x6F7C,
                0xE04E: 0x6F58,
                0xE04F: 0x6F8E,
                0xE050: 0x6F91,
                0xE051: 0x6FC2,
                0xE052: 0x6F66,
                0xE053: 0x6FB3,
                0xE054: 0x6FA3,
                0xE055: 0x6FA1,
                0xE056: 0x6FA4,
                0xE057: 0x6FB9,
                0xE058: 0x6FC6,
                0xE059: 0x6FAA,
                0xE05A: 0x6FDF,
                0xE05B: 0x6FD5,
                0xE05C: 0x6FEC,
                0xE05D: 0x6FD4,
                0xE05E: 0x6FD8,
                0xE05F: 0x6FF1,
                0xE060: 0x6FEE,
                0xE061: 0x6FDB,
                0xE062: 0x7009,
                0xE063: 0x700B,
                0xE064: 0x6FFA,
                0xE065: 0x7011,
                0xE066: 0x7001,
                0xE067: 0x700F,
                0xE068: 0x6FFE,
                0xE069: 0x701B,
                0xE06A: 0x701A,
                0xE06B: 0x6F74,
                0xE06C: 0x701D,
                0xE06D: 0x7018,
                0xE06E: 0x701F,
                0xE06F: 0x7030,
                0xE070: 0x703E,
                0xE071: 0x7032,
                0xE072: 0x7051,
                0xE073: 0x7063,
                0xE074: 0x7099,
                0xE075: 0x7092,
                0xE076: 0x70AF,
                0xE077: 0x70F1,
                0xE078: 0x70AC,
                0xE079: 0x70B8,
                0xE07A: 0x70B3,
                0xE07B: 0x70AE,
                0xE07C: 0x70DF,
                0xE07D: 0x70CB,
                0xE07E: 0x70DD,
                0xE080: 0x70D9,
                0xE081: 0x7109,
                0xE082: 0x70FD,
                0xE083: 0x711C,
                0xE084: 0x7119,
                0xE085: 0x7165,
                0xE086: 0x7155,
                0xE087: 0x7188,
                0xE088: 0x7166,
                0xE089: 0x7162,
                0xE08A: 0x714C,
                0xE08B: 0x7156,
                0xE08C: 0x716C,
                0xE08D: 0x718F,
                0xE08E: 0x71FB,
                0xE08F: 0x7184,
                0xE090: 0x7195,
                0xE091: 0x71A8,
                0xE092: 0x71AC,
                0xE093: 0x71D7,
                0xE094: 0x71B9,
                0xE095: 0x71BE,
                0xE096: 0x71D2,
                0xE097: 0x71C9,
                0xE098: 0x71D4,
                0xE099: 0x71CE,
                0xE09A: 0x71E0,
                0xE09B: 0x71EC,
                0xE09C: 0x71E7,
                0xE09D: 0x71F5,
                0xE09E: 0x71FC,
                0xE09F: 0x71F9,
                0xE0A0: 0x71FF,
                0xE0A1: 0x720D,
                0xE0A2: 0x7210,
                0xE0A3: 0x721B,
                0xE0A4: 0x7228,
                0xE0A5: 0x722D,
                0xE0A6: 0x722C,
                0xE0A7: 0x7230,
                0xE0A8: 0x7232,
                0xE0A9: 0x723B,
                0xE0AA: 0x723C,
                0xE0AB: 0x723F,
                0xE0AC: 0x7240,
                0xE0AD: 0x7246,
                0xE0AE: 0x724B,
                0xE0AF: 0x7258,
                0xE0B0: 0x7274,
                0xE0B1: 0x727E,
                0xE0B2: 0x7282,
                0xE0B3: 0x7281,
                0xE0B4: 0x7287,
                0xE0B5: 0x7292,
                0xE0B6: 0x7296,
                0xE0B7: 0x72A2,
                0xE0B8: 0x72A7,
                0xE0B9: 0x72B9,
                0xE0BA: 0x72B2,
                0xE0BB: 0x72C3,
                0xE0BC: 0x72C6,
                0xE0BD: 0x72C4,
                0xE0BE: 0x72CE,
                0xE0BF: 0x72D2,
                0xE0C0: 0x72E2,
                0xE0C1: 0x72E0,
                0xE0C2: 0x72E1,
                0xE0C3: 0x72F9,
                0xE0C4: 0x72F7,
                0xE0C5: 0x500F,
                0xE0C6: 0x7317,
                0xE0C7: 0x730A,
                0xE0C8: 0x731C,
                0xE0C9: 0x7316,
                0xE0CA: 0x731D,
                0xE0CB: 0x7334,
                0xE0CC: 0x732F,
                0xE0CD: 0x7329,
                0xE0CE: 0x7325,
                0xE0CF: 0x733E,
                0xE0D0: 0x734E,
                0xE0D1: 0x734F,
                0xE0D2: 0x9ED8,
                0xE0D3: 0x7357,
                0xE0D4: 0x736A,
                0xE0D5: 0x7368,
                0xE0D6: 0x7370,
                0xE0D7: 0x7378,
                0xE0D8: 0x7375,
                0xE0D9: 0x737B,
                0xE0DA: 0x737A,
                0xE0DB: 0x73C8,
                0xE0DC: 0x73B3,
                0xE0DD: 0x73CE,
                0xE0DE: 0x73BB,
                0xE0DF: 0x73C0,
                0xE0E0: 0x73E5,
                0xE0E1: 0x73EE,
                0xE0E2: 0x73DE,
                0xE0E3: 0x74A2,
                0xE0E4: 0x7405,
                0xE0E5: 0x746F,
                0xE0E6: 0x7425,
                0xE0E7: 0x73F8,
                0xE0E8: 0x7432,
                0xE0E9: 0x743A,
                0xE0EA: 0x7455,
                0xE0EB: 0x743F,
                0xE0EC: 0x745F,
                0xE0ED: 0x7459,
                0xE0EE: 0x7441,
                0xE0EF: 0x745C,
                0xE0F0: 0x7469,
                0xE0F1: 0x7470,
                0xE0F2: 0x7463,
                0xE0F3: 0x746A,
                0xE0F4: 0x7476,
                0xE0F5: 0x747E,
                0xE0F6: 0x748B,
                0xE0F7: 0x749E,
                0xE0F8: 0x74A7,
                0xE0F9: 0x74CA,
                0xE0FA: 0x74CF,
                0xE0FB: 0x74D4,
                0xE0FC: 0x73F1,
                0xE140: 0x74E0,
                0xE141: 0x74E3,
                0xE142: 0x74E7,
                0xE143: 0x74E9,
                0xE144: 0x74EE,
                0xE145: 0x74F2,
                0xE146: 0x74F0,
                0xE147: 0x74F1,
                0xE148: 0x74F8,
                0xE149: 0x74F7,
                0xE14A: 0x7504,
                0xE14B: 0x7503,
                0xE14C: 0x7505,
                0xE14D: 0x750C,
                0xE14E: 0x750E,
                0xE14F: 0x750D,
                0xE150: 0x7515,
                0xE151: 0x7513,
                0xE152: 0x751E,
                0xE153: 0x7526,
                0xE154: 0x752C,
                0xE155: 0x753C,
                0xE156: 0x7544,
                0xE157: 0x754D,
                0xE158: 0x754A,
                0xE159: 0x7549,
                0xE15A: 0x755B,
                0xE15B: 0x7546,
                0xE15C: 0x755A,
                0xE15D: 0x7569,
                0xE15E: 0x7564,
                0xE15F: 0x7567,
                0xE160: 0x756B,
                0xE161: 0x756D,
                0xE162: 0x7578,
                0xE163: 0x7576,
                0xE164: 0x7586,
                0xE165: 0x7587,
                0xE166: 0x7574,
                0xE167: 0x758A,
                0xE168: 0x7589,
                0xE169: 0x7582,
                0xE16A: 0x7594,
                0xE16B: 0x759A,
                0xE16C: 0x759D,
                0xE16D: 0x75A5,
                0xE16E: 0x75A3,
                0xE16F: 0x75C2,
                0xE170: 0x75B3,
                0xE171: 0x75C3,
                0xE172: 0x75B5,
                0xE173: 0x75BD,
                0xE174: 0x75B8,
                0xE175: 0x75BC,
                0xE176: 0x75B1,
                0xE177: 0x75CD,
                0xE178: 0x75CA,
                0xE179: 0x75D2,
                0xE17A: 0x75D9,
                0xE17B: 0x75E3,
                0xE17C: 0x75DE,
                0xE17D: 0x75FE,
                0xE17E: 0x75FF,
                0xE180: 0x75FC,
                0xE181: 0x7601,
                0xE182: 0x75F0,
                0xE183: 0x75FA,
                0xE184: 0x75F2,
                0xE185: 0x75F3,
                0xE186: 0x760B,
                0xE187: 0x760D,
                0xE188: 0x7609,
                0xE189: 0x761F,
                0xE18A: 0x7627,
                0xE18B: 0x7620,
                0xE18C: 0x7621,
                0xE18D: 0x7622,
                0xE18E: 0x7624,
                0xE18F: 0x7634,
                0xE190: 0x7630,
                0xE191: 0x763B,
                0xE192: 0x7647,
                0xE193: 0x7648,
                0xE194: 0x7646,
                0xE195: 0x765C,
                0xE196: 0x7658,
                0xE197: 0x7661,
                0xE198: 0x7662,
                0xE199: 0x7668,
                0xE19A: 0x7669,
                0xE19B: 0x766A,
                0xE19C: 0x7667,
                0xE19D: 0x766C,
                0xE19E: 0x7670,
                0xE19F: 0x7672,
                0xE1A0: 0x7676,
                0xE1A1: 0x7678,
                0xE1A2: 0x767C,
                0xE1A3: 0x7680,
                0xE1A4: 0x7683,
                0xE1A5: 0x7688,
                0xE1A6: 0x768B,
                0xE1A7: 0x768E,
                0xE1A8: 0x7696,
                0xE1A9: 0x7693,
                0xE1AA: 0x7699,
                0xE1AB: 0x769A,
                0xE1AC: 0x76B0,
                0xE1AD: 0x76B4,
                0xE1AE: 0x76B8,
                0xE1AF: 0x76B9,
                0xE1B0: 0x76BA,
                0xE1B1: 0x76C2,
                0xE1B2: 0x76CD,
                0xE1B3: 0x76D6,
                0xE1B4: 0x76D2,
                0xE1B5: 0x76DE,
                0xE1B6: 0x76E1,
                0xE1B7: 0x76E5,
                0xE1B8: 0x76E7,
                0xE1B9: 0x76EA,
                0xE1BA: 0x862F,
                0xE1BB: 0x76FB,
                0xE1BC: 0x7708,
                0xE1BD: 0x7707,
                0xE1BE: 0x7704,
                0xE1BF: 0x7729,
                0xE1C0: 0x7724,
                0xE1C1: 0x771E,
                0xE1C2: 0x7725,
                0xE1C3: 0x7726,
                0xE1C4: 0x771B,
                0xE1C5: 0x7737,
                0xE1C6: 0x7738,
                0xE1C7: 0x7747,
                0xE1C8: 0x775A,
                0xE1C9: 0x7768,
                0xE1CA: 0x776B,
                0xE1CB: 0x775B,
                0xE1CC: 0x7765,
                0xE1CD: 0x777F,
                0xE1CE: 0x777E,
                0xE1CF: 0x7779,
                0xE1D0: 0x778E,
                0xE1D1: 0x778B,
                0xE1D2: 0x7791,
                0xE1D3: 0x77A0,
                0xE1D4: 0x779E,
                0xE1D5: 0x77B0,
                0xE1D6: 0x77B6,
                0xE1D7: 0x77B9,
                0xE1D8: 0x77BF,
                0xE1D9: 0x77BC,
                0xE1DA: 0x77BD,
                0xE1DB: 0x77BB,
                0xE1DC: 0x77C7,
                0xE1DD: 0x77CD,
                0xE1DE: 0x77D7,
                0xE1DF: 0x77DA,
                0xE1E0: 0x77DC,
                0xE1E1: 0x77E3,
                0xE1E2: 0x77EE,
                0xE1E3: 0x77FC,
                0xE1E4: 0x780C,
                0xE1E5: 0x7812,
                0xE1E6: 0x7926,
                0xE1E7: 0x7820,
                0xE1E8: 0x792A,
                0xE1E9: 0x7845,
                0xE1EA: 0x788E,
                0xE1EB: 0x7874,
                0xE1EC: 0x7886,
                0xE1ED: 0x787C,
                0xE1EE: 0x789A,
                0xE1EF: 0x788C,
                0xE1F0: 0x78A3,
                0xE1F1: 0x78B5,
                0xE1F2: 0x78AA,
                0xE1F3: 0x78AF,
                0xE1F4: 0x78D1,
                0xE1F5: 0x78C6,
                0xE1F6: 0x78CB,
                0xE1F7: 0x78D4,
                0xE1F8: 0x78BE,
                0xE1F9: 0x78BC,
                0xE1FA: 0x78C5,
                0xE1FB: 0x78CA,
                0xE1FC: 0x78EC,
                0xE240: 0x78E7,
                0xE241: 0x78DA,
                0xE242: 0x78FD,
                0xE243: 0x78F4,
                0xE244: 0x7907,
                0xE245: 0x7912,
                0xE246: 0x7911,
                0xE247: 0x7919,
                0xE248: 0x792C,
                0xE249: 0x792B,
                0xE24A: 0x7940,
                0xE24B: 0x7960,
                0xE24C: 0x7957,
                0xE24D: 0x795F,
                0xE24E: 0x795A,
                0xE24F: 0x7955,
                0xE250: 0x7953,
                0xE251: 0x797A,
                0xE252: 0x797F,
                0xE253: 0x798A,
                0xE254: 0x799D,
                0xE255: 0x79A7,
                0xE256: 0x9F4B,
                0xE257: 0x79AA,
                0xE258: 0x79AE,
                0xE259: 0x79B3,
                0xE25A: 0x79B9,
                0xE25B: 0x79BA,
                0xE25C: 0x79C9,
                0xE25D: 0x79D5,
                0xE25E: 0x79E7,
                0xE25F: 0x79EC,
                0xE260: 0x79E1,
                0xE261: 0x79E3,
                0xE262: 0x7A08,
                0xE263: 0x7A0D,
                0xE264: 0x7A18,
                0xE265: 0x7A19,
                0xE266: 0x7A20,
                0xE267: 0x7A1F,
                0xE268: 0x7980,
                0xE269: 0x7A31,
                0xE26A: 0x7A3B,
                0xE26B: 0x7A3E,
                0xE26C: 0x7A37,
                0xE26D: 0x7A43,
                0xE26E: 0x7A57,
                0xE26F: 0x7A49,
                0xE270: 0x7A61,
                0xE271: 0x7A62,
                0xE272: 0x7A69,
                0xE273: 0x9F9D,
                0xE274: 0x7A70,
                0xE275: 0x7A79,
                0xE276: 0x7A7D,
                0xE277: 0x7A88,
                0xE278: 0x7A97,
                0xE279: 0x7A95,
                0xE27A: 0x7A98,
                0xE27B: 0x7A96,
                0xE27C: 0x7AA9,
                0xE27D: 0x7AC8,
                0xE27E: 0x7AB0,
                0xE280: 0x7AB6,
                0xE281: 0x7AC5,
                0xE282: 0x7AC4,
                0xE283: 0x7ABF,
                0xE284: 0x9083,
                0xE285: 0x7AC7,
                0xE286: 0x7ACA,
                0xE287: 0x7ACD,
                0xE288: 0x7ACF,
                0xE289: 0x7AD5,
                0xE28A: 0x7AD3,
                0xE28B: 0x7AD9,
                0xE28C: 0x7ADA,
                0xE28D: 0x7ADD,
                0xE28E: 0x7AE1,
                0xE28F: 0x7AE2,
                0xE290: 0x7AE6,
                0xE291: 0x7AED,
                0xE292: 0x7AF0,
                0xE293: 0x7B02,
                0xE294: 0x7B0F,
                0xE295: 0x7B0A,
                0xE296: 0x7B06,
                0xE297: 0x7B33,
                0xE298: 0x7B18,
                0xE299: 0x7B19,
                0xE29A: 0x7B1E,
                0xE29B: 0x7B35,
                0xE29C: 0x7B28,
                0xE29D: 0x7B36,
                0xE29E: 0x7B50,
                0xE29F: 0x7B7A,
                0xE2A0: 0x7B04,
                0xE2A1: 0x7B4D,
                0xE2A2: 0x7B0B,
                0xE2A3: 0x7B4C,
                0xE2A4: 0x7B45,
                0xE2A5: 0x7B75,
                0xE2A6: 0x7B65,
                0xE2A7: 0x7B74,
                0xE2A8: 0x7B67,
                0xE2A9: 0x7B70,
                0xE2AA: 0x7B71,
                0xE2AB: 0x7B6C,
                0xE2AC: 0x7B6E,
                0xE2AD: 0x7B9D,
                0xE2AE: 0x7B98,
                0xE2AF: 0x7B9F,
                0xE2B0: 0x7B8D,
                0xE2B1: 0x7B9C,
                0xE2B2: 0x7B9A,
                0xE2B3: 0x7B8B,
                0xE2B4: 0x7B92,
                0xE2B5: 0x7B8F,
                0xE2B6: 0x7B5D,
                0xE2B7: 0x7B99,
                0xE2B8: 0x7BCB,
                0xE2B9: 0x7BC1,
                0xE2BA: 0x7BCC,
                0xE2BB: 0x7BCF,
                0xE2BC: 0x7BB4,
                0xE2BD: 0x7BC6,
                0xE2BE: 0x7BDD,
                0xE2BF: 0x7BE9,
                0xE2C0: 0x7C11,
                0xE2C1: 0x7C14,
                0xE2C2: 0x7BE6,
                0xE2C3: 0x7BE5,
                0xE2C4: 0x7C60,
                0xE2C5: 0x7C00,
                0xE2C6: 0x7C07,
                0xE2C7: 0x7C13,
                0xE2C8: 0x7BF3,
                0xE2C9: 0x7BF7,
                0xE2CA: 0x7C17,
                0xE2CB: 0x7C0D,
                0xE2CC: 0x7BF6,
                0xE2CD: 0x7C23,
                0xE2CE: 0x7C27,
                0xE2CF: 0x7C2A,
                0xE2D0: 0x7C1F,
                0xE2D1: 0x7C37,
                0xE2D2: 0x7C2B,
                0xE2D3: 0x7C3D,
                0xE2D4: 0x7C4C,
                0xE2D5: 0x7C43,
                0xE2D6: 0x7C54,
                0xE2D7: 0x7C4F,
                0xE2D8: 0x7C40,
                0xE2D9: 0x7C50,
                0xE2DA: 0x7C58,
                0xE2DB: 0x7C5F,
                0xE2DC: 0x7C64,
                0xE2DD: 0x7C56,
                0xE2DE: 0x7C65,
                0xE2DF: 0x7C6C,
                0xE2E0: 0x7C75,
                0xE2E1: 0x7C83,
                0xE2E2: 0x7C90,
                0xE2E3: 0x7CA4,
                0xE2E4: 0x7CAD,
                0xE2E5: 0x7CA2,
                0xE2E6: 0x7CAB,
                0xE2E7: 0x7CA1,
                0xE2E8: 0x7CA8,
                0xE2E9: 0x7CB3,
                0xE2EA: 0x7CB2,
                0xE2EB: 0x7CB1,
                0xE2EC: 0x7CAE,
                0xE2ED: 0x7CB9,
                0xE2EE: 0x7CBD,
                0xE2EF: 0x7CC0,
                0xE2F0: 0x7CC5,
                0xE2F1: 0x7CC2,
                0xE2F2: 0x7CD8,
                0xE2F3: 0x7CD2,
                0xE2F4: 0x7CDC,
                0xE2F5: 0x7CE2,
                0xE2F6: 0x9B3B,
                0xE2F7: 0x7CEF,
                0xE2F8: 0x7CF2,
                0xE2F9: 0x7CF4,
                0xE2FA: 0x7CF6,
                0xE2FB: 0x7CFA,
                0xE2FC: 0x7D06,
                0xE340: 0x7D02,
                0xE341: 0x7D1C,
                0xE342: 0x7D15,
                0xE343: 0x7D0A,
                0xE344: 0x7D45,
                0xE345: 0x7D4B,
                0xE346: 0x7D2E,
                0xE347: 0x7D32,
                0xE348: 0x7D3F,
                0xE349: 0x7D35,
                0xE34A: 0x7D46,
                0xE34B: 0x7D73,
                0xE34C: 0x7D56,
                0xE34D: 0x7D4E,
                0xE34E: 0x7D72,
                0xE34F: 0x7D68,
                0xE350: 0x7D6E,
                0xE351: 0x7D4F,
                0xE352: 0x7D63,
                0xE353: 0x7D93,
                0xE354: 0x7D89,
                0xE355: 0x7D5B,
                0xE356: 0x7D8F,
                0xE357: 0x7D7D,
                0xE358: 0x7D9B,
                0xE359: 0x7DBA,
                0xE35A: 0x7DAE,
                0xE35B: 0x7DA3,
                0xE35C: 0x7DB5,
                0xE35D: 0x7DC7,
                0xE35E: 0x7DBD,
                0xE35F: 0x7DAB,
                0xE360: 0x7E3D,
                0xE361: 0x7DA2,
                0xE362: 0x7DAF,
                0xE363: 0x7DDC,
                0xE364: 0x7DB8,
                0xE365: 0x7D9F,
                0xE366: 0x7DB0,
                0xE367: 0x7DD8,
                0xE368: 0x7DDD,
                0xE369: 0x7DE4,
                0xE36A: 0x7DDE,
                0xE36B: 0x7DFB,
                0xE36C: 0x7DF2,
                0xE36D: 0x7DE1,
                0xE36E: 0x7E05,
                0xE36F: 0x7E0A,
                0xE370: 0x7E23,
                0xE371: 0x7E21,
                0xE372: 0x7E12,
                0xE373: 0x7E31,
                0xE374: 0x7E1F,
                0xE375: 0x7E09,
                0xE376: 0x7E0B,
                0xE377: 0x7E22,
                0xE378: 0x7E46,
                0xE379: 0x7E66,
                0xE37A: 0x7E3B,
                0xE37B: 0x7E35,
                0xE37C: 0x7E39,
                0xE37D: 0x7E43,
                0xE37E: 0x7E37,
                0xE380: 0x7E32,
                0xE381: 0x7E3A,
                0xE382: 0x7E67,
                0xE383: 0x7E5D,
                0xE384: 0x7E56,
                0xE385: 0x7E5E,
                0xE386: 0x7E59,
                0xE387: 0x7E5A,
                0xE388: 0x7E79,
                0xE389: 0x7E6A,
                0xE38A: 0x7E69,
                0xE38B: 0x7E7C,
                0xE38C: 0x7E7B,
                0xE38D: 0x7E83,
                0xE38E: 0x7DD5,
                0xE38F: 0x7E7D,
                0xE390: 0x8FAE,
                0xE391: 0x7E7F,
                0xE392: 0x7E88,
                0xE393: 0x7E89,
                0xE394: 0x7E8C,
                0xE395: 0x7E92,
                0xE396: 0x7E90,
                0xE397: 0x7E93,
                0xE398: 0x7E94,
                0xE399: 0x7E96,
                0xE39A: 0x7E8E,
                0xE39B: 0x7E9B,
                0xE39C: 0x7E9C,
                0xE39D: 0x7F38,
                0xE39E: 0x7F3A,
                0xE39F: 0x7F45,
                0xE3A0: 0x7F4C,
                0xE3A1: 0x7F4D,
                0xE3A2: 0x7F4E,
                0xE3A3: 0x7F50,
                0xE3A4: 0x7F51,
                0xE3A5: 0x7F55,
                0xE3A6: 0x7F54,
                0xE3A7: 0x7F58,
                0xE3A8: 0x7F5F,
                0xE3A9: 0x7F60,
                0xE3AA: 0x7F68,
                0xE3AB: 0x7F69,
                0xE3AC: 0x7F67,
                0xE3AD: 0x7F78,
                0xE3AE: 0x7F82,
                0xE3AF: 0x7F86,
                0xE3B0: 0x7F83,
                0xE3B1: 0x7F88,
                0xE3B2: 0x7F87,
                0xE3B3: 0x7F8C,
                0xE3B4: 0x7F94,
                0xE3B5: 0x7F9E,
                0xE3B6: 0x7F9D,
                0xE3B7: 0x7F9A,
                0xE3B8: 0x7FA3,
                0xE3B9: 0x7FAF,
                0xE3BA: 0x7FB2,
                0xE3BB: 0x7FB9,
                0xE3BC: 0x7FAE,
                0xE3BD: 0x7FB6,
                0xE3BE: 0x7FB8,
                0xE3BF: 0x8B71,
                0xE3C0: 0x7FC5,
                0xE3C1: 0x7FC6,
                0xE3C2: 0x7FCA,
                0xE3C3: 0x7FD5,
                0xE3C4: 0x7FD4,
                0xE3C5: 0x7FE1,
                0xE3C6: 0x7FE6,
                0xE3C7: 0x7FE9,
                0xE3C8: 0x7FF3,
                0xE3C9: 0x7FF9,
                0xE3CA: 0x98DC,
                0xE3CB: 0x8006,
                0xE3CC: 0x8004,
                0xE3CD: 0x800B,
                0xE3CE: 0x8012,
                0xE3CF: 0x8018,
                0xE3D0: 0x8019,
                0xE3D1: 0x801C,
                0xE3D2: 0x8021,
                0xE3D3: 0x8028,
                0xE3D4: 0x803F,
                0xE3D5: 0x803B,
                0xE3D6: 0x804A,
                0xE3D7: 0x8046,
                0xE3D8: 0x8052,
                0xE3D9: 0x8058,
                0xE3DA: 0x805A,
                0xE3DB: 0x805F,
                0xE3DC: 0x8062,
                0xE3DD: 0x8068,
                0xE3DE: 0x8073,
                0xE3DF: 0x8072,
                0xE3E0: 0x8070,
                0xE3E1: 0x8076,
                0xE3E2: 0x8079,
                0xE3E3: 0x807D,
                0xE3E4: 0x807F,
                0xE3E5: 0x8084,
                0xE3E6: 0x8086,
                0xE3E7: 0x8085,
                0xE3E8: 0x809B,
                0xE3E9: 0x8093,
                0xE3EA: 0x809A,
                0xE3EB: 0x80AD,
                0xE3EC: 0x5190,
                0xE3ED: 0x80AC,
                0xE3EE: 0x80DB,
                0xE3EF: 0x80E5,
                0xE3F0: 0x80D9,
                0xE3F1: 0x80DD,
                0xE3F2: 0x80C4,
                0xE3F3: 0x80DA,
                0xE3F4: 0x80D6,
                0xE3F5: 0x8109,
                0xE3F6: 0x80EF,
                0xE3F7: 0x80F1,
                0xE3F8: 0x811B,
                0xE3F9: 0x8129,
                0xE3FA: 0x8123,
                0xE3FB: 0x812F,
                0xE3FC: 0x814B,
                0xE440: 0x968B,
                0xE441: 0x8146,
                0xE442: 0x813E,
                0xE443: 0x8153,
                0xE444: 0x8151,
                0xE445: 0x80FC,
                0xE446: 0x8171,
                0xE447: 0x816E,
                0xE448: 0x8165,
                0xE449: 0x8166,
                0xE44A: 0x8174,
                0xE44B: 0x8183,
                0xE44C: 0x8188,
                0xE44D: 0x818A,
                0xE44E: 0x8180,
                0xE44F: 0x8182,
                0xE450: 0x81A0,
                0xE451: 0x8195,
                0xE452: 0x81A4,
                0xE453: 0x81A3,
                0xE454: 0x815F,
                0xE455: 0x8193,
                0xE456: 0x81A9,
                0xE457: 0x81B0,
                0xE458: 0x81B5,
                0xE459: 0x81BE,
                0xE45A: 0x81B8,
                0xE45B: 0x81BD,
                0xE45C: 0x81C0,
                0xE45D: 0x81C2,
                0xE45E: 0x81BA,
                0xE45F: 0x81C9,
                0xE460: 0x81CD,
                0xE461: 0x81D1,
                0xE462: 0x81D9,
                0xE463: 0x81D8,
                0xE464: 0x81C8,
                0xE465: 0x81DA,
                0xE466: 0x81DF,
                0xE467: 0x81E0,
                0xE468: 0x81E7,
                0xE469: 0x81FA,
                0xE46A: 0x81FB,
                0xE46B: 0x81FE,
                0xE46C: 0x8201,
                0xE46D: 0x8202,
                0xE46E: 0x8205,
                0xE46F: 0x8207,
                0xE470: 0x820A,
                0xE471: 0x820D,
                0xE472: 0x8210,
                0xE473: 0x8216,
                0xE474: 0x8229,
                0xE475: 0x822B,
                0xE476: 0x8238,
                0xE477: 0x8233,
                0xE478: 0x8240,
                0xE479: 0x8259,
                0xE47A: 0x8258,
                0xE47B: 0x825D,
                0xE47C: 0x825A,
                0xE47D: 0x825F,
                0xE47E: 0x8264,
                0xE480: 0x8262,
                0xE481: 0x8268,
                0xE482: 0x826A,
                0xE483: 0x826B,
                0xE484: 0x822E,
                0xE485: 0x8271,
                0xE486: 0x8277,
                0xE487: 0x8278,
                0xE488: 0x827E,
                0xE489: 0x828D,
                0xE48A: 0x8292,
                0xE48B: 0x82AB,
                0xE48C: 0x829F,
                0xE48D: 0x82BB,
                0xE48E: 0x82AC,
                0xE48F: 0x82E1,
                0xE490: 0x82E3,
                0xE491: 0x82DF,
                0xE492: 0x82D2,
                0xE493: 0x82F4,
                0xE494: 0x82F3,
                0xE495: 0x82FA,
                0xE496: 0x8393,
                0xE497: 0x8303,
                0xE498: 0x82FB,
                0xE499: 0x82F9,
                0xE49A: 0x82DE,
                0xE49B: 0x8306,
                0xE49C: 0x82DC,
                0xE49D: 0x8309,
                0xE49E: 0x82D9,
                0xE49F: 0x8335,
                0xE4A0: 0x8334,
                0xE4A1: 0x8316,
                0xE4A2: 0x8332,
                0xE4A3: 0x8331,
                0xE4A4: 0x8340,
                0xE4A5: 0x8339,
                0xE4A6: 0x8350,
                0xE4A7: 0x8345,
                0xE4A8: 0x832F,
                0xE4A9: 0x832B,
                0xE4AA: 0x8317,
                0xE4AB: 0x8318,
                0xE4AC: 0x8385,
                0xE4AD: 0x839A,
                0xE4AE: 0x83AA,
                0xE4AF: 0x839F,
                0xE4B0: 0x83A2,
                0xE4B1: 0x8396,
                0xE4B2: 0x8323,
                0xE4B3: 0x838E,
                0xE4B4: 0x8387,
                0xE4B5: 0x838A,
                0xE4B6: 0x837C,
                0xE4B7: 0x83B5,
                0xE4B8: 0x8373,
                0xE4B9: 0x8375,
                0xE4BA: 0x83A0,
                0xE4BB: 0x8389,
                0xE4BC: 0x83A8,
                0xE4BD: 0x83F4,
                0xE4BE: 0x8413,
                0xE4BF: 0x83EB,
                0xE4C0: 0x83CE,
                0xE4C1: 0x83FD,
                0xE4C2: 0x8403,
                0xE4C3: 0x83D8,
                0xE4C4: 0x840B,
                0xE4C5: 0x83C1,
                0xE4C6: 0x83F7,
                0xE4C7: 0x8407,
                0xE4C8: 0x83E0,
                0xE4C9: 0x83F2,
                0xE4CA: 0x840D,
                0xE4CB: 0x8422,
                0xE4CC: 0x8420,
                0xE4CD: 0x83BD,
                0xE4CE: 0x8438,
                0xE4CF: 0x8506,
                0xE4D0: 0x83FB,
                0xE4D1: 0x846D,
                0xE4D2: 0x842A,
                0xE4D3: 0x843C,
                0xE4D4: 0x855A,
                0xE4D5: 0x8484,
                0xE4D6: 0x8477,
                0xE4D7: 0x846B,
                0xE4D8: 0x84AD,
                0xE4D9: 0x846E,
                0xE4DA: 0x8482,
                0xE4DB: 0x8469,
                0xE4DC: 0x8446,
                0xE4DD: 0x842C,
                0xE4DE: 0x846F,
                0xE4DF: 0x8479,
                0xE4E0: 0x8435,
                0xE4E1: 0x84CA,
                0xE4E2: 0x8462,
                0xE4E3: 0x84B9,
                0xE4E4: 0x84BF,
                0xE4E5: 0x849F,
                0xE4E6: 0x84D9,
                0xE4E7: 0x84CD,
                0xE4E8: 0x84BB,
                0xE4E9: 0x84DA,
                0xE4EA: 0x84D0,
                0xE4EB: 0x84C1,
                0xE4EC: 0x84C6,
                0xE4ED: 0x84D6,
                0xE4EE: 0x84A1,
                0xE4EF: 0x8521,
                0xE4F0: 0x84FF,
                0xE4F1: 0x84F4,
                0xE4F2: 0x8517,
                0xE4F3: 0x8518,
                0xE4F4: 0x852C,
                0xE4F5: 0x851F,
                0xE4F6: 0x8515,
                0xE4F7: 0x8514,
                0xE4F8: 0x84FC,
                0xE4F9: 0x8540,
                0xE4FA: 0x8563,
                0xE4FB: 0x8558,
                0xE4FC: 0x8548,
                0xE540: 0x8541,
                0xE541: 0x8602,
                0xE542: 0x854B,
                0xE543: 0x8555,
                0xE544: 0x8580,
                0xE545: 0x85A4,
                0xE546: 0x8588,
                0xE547: 0x8591,
                0xE548: 0x858A,
                0xE549: 0x85A8,
                0xE54A: 0x856D,
                0xE54B: 0x8594,
                0xE54C: 0x859B,
                0xE54D: 0x85EA,
                0xE54E: 0x8587,
                0xE54F: 0x859C,
                0xE550: 0x8577,
                0xE551: 0x857E,
                0xE552: 0x8590,
                0xE553: 0x85C9,
                0xE554: 0x85BA,
                0xE555: 0x85CF,
                0xE556: 0x85B9,
                0xE557: 0x85D0,
                0xE558: 0x85D5,
                0xE559: 0x85DD,
                0xE55A: 0x85E5,
                0xE55B: 0x85DC,
                0xE55C: 0x85F9,
                0xE55D: 0x860A,
                0xE55E: 0x8613,
                0xE55F: 0x860B,
                0xE560: 0x85FE,
                0xE561: 0x85FA,
                0xE562: 0x8606,
                0xE563: 0x8622,
                0xE564: 0x861A,
                0xE565: 0x8630,
                0xE566: 0x863F,
                0xE567: 0x864D,
                0xE568: 0x4E55,
                0xE569: 0x8654,
                0xE56A: 0x865F,
                0xE56B: 0x8667,
                0xE56C: 0x8671,
                0xE56D: 0x8693,
                0xE56E: 0x86A3,
                0xE56F: 0x86A9,
                0xE570: 0x86AA,
                0xE571: 0x868B,
                0xE572: 0x868C,
                0xE573: 0x86B6,
                0xE574: 0x86AF,
                0xE575: 0x86C4,
                0xE576: 0x86C6,
                0xE577: 0x86B0,
                0xE578: 0x86C9,
                0xE579: 0x8823,
                0xE57A: 0x86AB,
                0xE57B: 0x86D4,
                0xE57C: 0x86DE,
                0xE57D: 0x86E9,
                0xE57E: 0x86EC,
                0xE580: 0x86DF,
                0xE581: 0x86DB,
                0xE582: 0x86EF,
                0xE583: 0x8712,
                0xE584: 0x8706,
                0xE585: 0x8708,
                0xE586: 0x8700,
                0xE587: 0x8703,
                0xE588: 0x86FB,
                0xE589: 0x8711,
                0xE58A: 0x8709,
                0xE58B: 0x870D,
                0xE58C: 0x86F9,
                0xE58D: 0x870A,
                0xE58E: 0x8734,
                0xE58F: 0x873F,
                0xE590: 0x8737,
                0xE591: 0x873B,
                0xE592: 0x8725,
                0xE593: 0x8729,
                0xE594: 0x871A,
                0xE595: 0x8760,
                0xE596: 0x875F,
                0xE597: 0x8778,
                0xE598: 0x874C,
                0xE599: 0x874E,
                0xE59A: 0x8774,
                0xE59B: 0x8757,
                0xE59C: 0x8768,
                0xE59D: 0x876E,
                0xE59E: 0x8759,
                0xE59F: 0x8753,
                0xE5A0: 0x8763,
                0xE5A1: 0x876A,
                0xE5A2: 0x8805,
                0xE5A3: 0x87A2,
                0xE5A4: 0x879F,
                0xE5A5: 0x8782,
                0xE5A6: 0x87AF,
                0xE5A7: 0x87CB,
                0xE5A8: 0x87BD,
                0xE5A9: 0x87C0,
                0xE5AA: 0x87D0,
                0xE5AB: 0x96D6,
                0xE5AC: 0x87AB,
                0xE5AD: 0x87C4,
                0xE5AE: 0x87B3,
                0xE5AF: 0x87C7,
                0xE5B0: 0x87C6,
                0xE5B1: 0x87BB,
                0xE5B2: 0x87EF,
                0xE5B3: 0x87F2,
                0xE5B4: 0x87E0,
                0xE5B5: 0x880F,
                0xE5B6: 0x880D,
                0xE5B7: 0x87FE,
                0xE5B8: 0x87F6,
                0xE5B9: 0x87F7,
                0xE5BA: 0x880E,
                0xE5BB: 0x87D2,
                0xE5BC: 0x8811,
                0xE5BD: 0x8816,
                0xE5BE: 0x8815,
                0xE5BF: 0x8822,
                0xE5C0: 0x8821,
                0xE5C1: 0x8831,
                0xE5C2: 0x8836,
                0xE5C3: 0x8839,
                0xE5C4: 0x8827,
                0xE5C5: 0x883B,
                0xE5C6: 0x8844,
                0xE5C7: 0x8842,
                0xE5C8: 0x8852,
                0xE5C9: 0x8859,
                0xE5CA: 0x885E,
                0xE5CB: 0x8862,
                0xE5CC: 0x886B,
                0xE5CD: 0x8881,
                0xE5CE: 0x887E,
                0xE5CF: 0x889E,
                0xE5D0: 0x8875,
                0xE5D1: 0x887D,
                0xE5D2: 0x88B5,
                0xE5D3: 0x8872,
                0xE5D4: 0x8882,
                0xE5D5: 0x8897,
                0xE5D6: 0x8892,
                0xE5D7: 0x88AE,
                0xE5D8: 0x8899,
                0xE5D9: 0x88A2,
                0xE5DA: 0x888D,
                0xE5DB: 0x88A4,
                0xE5DC: 0x88B0,
                0xE5DD: 0x88BF,
                0xE5DE: 0x88B1,
                0xE5DF: 0x88C3,
                0xE5E0: 0x88C4,
                0xE5E1: 0x88D4,
                0xE5E2: 0x88D8,
                0xE5E3: 0x88D9,
                0xE5E4: 0x88DD,
                0xE5E5: 0x88F9,
                0xE5E6: 0x8902,
                0xE5E7: 0x88FC,
                0xE5E8: 0x88F4,
                0xE5E9: 0x88E8,
                0xE5EA: 0x88F2,
                0xE5EB: 0x8904,
                0xE5EC: 0x890C,
                0xE5ED: 0x890A,
                0xE5EE: 0x8913,
                0xE5EF: 0x8943,
                0xE5F0: 0x891E,
                0xE5F1: 0x8925,
                0xE5F2: 0x892A,
                0xE5F3: 0x892B,
                0xE5F4: 0x8941,
                0xE5F5: 0x8944,
                0xE5F6: 0x893B,
                0xE5F7: 0x8936,
                0xE5F8: 0x8938,
                0xE5F9: 0x894C,
                0xE5FA: 0x891D,
                0xE5FB: 0x8960,
                0xE5FC: 0x895E,
                0xE640: 0x8966,
                0xE641: 0x8964,
                0xE642: 0x896D,
                0xE643: 0x896A,
                0xE644: 0x896F,
                0xE645: 0x8974,
                0xE646: 0x8977,
                0xE647: 0x897E,
                0xE648: 0x8983,
                0xE649: 0x8988,
                0xE64A: 0x898A,
                0xE64B: 0x8993,
                0xE64C: 0x8998,
                0xE64D: 0x89A1,
                0xE64E: 0x89A9,
                0xE64F: 0x89A6,
                0xE650: 0x89AC,
                0xE651: 0x89AF,
                0xE652: 0x89B2,
                0xE653: 0x89BA,
                0xE654: 0x89BD,
                0xE655: 0x89BF,
                0xE656: 0x89C0,
                0xE657: 0x89DA,
                0xE658: 0x89DC,
                0xE659: 0x89DD,
                0xE65A: 0x89E7,
                0xE65B: 0x89F4,
                0xE65C: 0x89F8,
                0xE65D: 0x8A03,
                0xE65E: 0x8A16,
                0xE65F: 0x8A10,
                0xE660: 0x8A0C,
                0xE661: 0x8A1B,
                0xE662: 0x8A1D,
                0xE663: 0x8A25,
                0xE664: 0x8A36,
                0xE665: 0x8A41,
                0xE666: 0x8A5B,
                0xE667: 0x8A52,
                0xE668: 0x8A46,
                0xE669: 0x8A48,
                0xE66A: 0x8A7C,
                0xE66B: 0x8A6D,
                0xE66C: 0x8A6C,
                0xE66D: 0x8A62,
                0xE66E: 0x8A85,
                0xE66F: 0x8A82,
                0xE670: 0x8A84,
                0xE671: 0x8AA8,
                0xE672: 0x8AA1,
                0xE673: 0x8A91,
                0xE674: 0x8AA5,
                0xE675: 0x8AA6,
                0xE676: 0x8A9A,
                0xE677: 0x8AA3,
                0xE678: 0x8AC4,
                0xE679: 0x8ACD,
                0xE67A: 0x8AC2,
                0xE67B: 0x8ADA,
                0xE67C: 0x8AEB,
                0xE67D: 0x8AF3,
                0xE67E: 0x8AE7,
                0xE680: 0x8AE4,
                0xE681: 0x8AF1,
                0xE682: 0x8B14,
                0xE683: 0x8AE0,
                0xE684: 0x8AE2,
                0xE685: 0x8AF7,
                0xE686: 0x8ADE,
                0xE687: 0x8ADB,
                0xE688: 0x8B0C,
                0xE689: 0x8B07,
                0xE68A: 0x8B1A,
                0xE68B: 0x8AE1,
                0xE68C: 0x8B16,
                0xE68D: 0x8B10,
                0xE68E: 0x8B17,
                0xE68F: 0x8B20,
                0xE690: 0x8B33,
                0xE691: 0x97AB,
                0xE692: 0x8B26,
                0xE693: 0x8B2B,
                0xE694: 0x8B3E,
                0xE695: 0x8B28,
                0xE696: 0x8B41,
                0xE697: 0x8B4C,
                0xE698: 0x8B4F,
                0xE699: 0x8B4E,
                0xE69A: 0x8B49,
                0xE69B: 0x8B56,
                0xE69C: 0x8B5B,
                0xE69D: 0x8B5A,
                0xE69E: 0x8B6B,
                0xE69F: 0x8B5F,
                0xE6A0: 0x8B6C,
                0xE6A1: 0x8B6F,
                0xE6A2: 0x8B74,
                0xE6A3: 0x8B7D,
                0xE6A4: 0x8B80,
                0xE6A5: 0x8B8C,
                0xE6A6: 0x8B8E,
                0xE6A7: 0x8B92,
                0xE6A8: 0x8B93,
                0xE6A9: 0x8B96,
                0xE6AA: 0x8B99,
                0xE6AB: 0x8B9A,
                0xE6AC: 0x8C3A,
                0xE6AD: 0x8C41,
                0xE6AE: 0x8C3F,
                0xE6AF: 0x8C48,
                0xE6B0: 0x8C4C,
                0xE6B1: 0x8C4E,
                0xE6B2: 0x8C50,
                0xE6B3: 0x8C55,
                0xE6B4: 0x8C62,
                0xE6B5: 0x8C6C,
                0xE6B6: 0x8C78,
                0xE6B7: 0x8C7A,
                0xE6B8: 0x8C82,
                0xE6B9: 0x8C89,
                0xE6BA: 0x8C85,
                0xE6BB: 0x8C8A,
                0xE6BC: 0x8C8D,
                0xE6BD: 0x8C8E,
                0xE6BE: 0x8C94,
                0xE6BF: 0x8C7C,
                0xE6C0: 0x8C98,
                0xE6C1: 0x621D,
                0xE6C2: 0x8CAD,
                0xE6C3: 0x8CAA,
                0xE6C4: 0x8CBD,
                0xE6C5: 0x8CB2,
                0xE6C6: 0x8CB3,
                0xE6C7: 0x8CAE,
                0xE6C8: 0x8CB6,
                0xE6C9: 0x8CC8,
                0xE6CA: 0x8CC1,
                0xE6CB: 0x8CE4,
                0xE6CC: 0x8CE3,
                0xE6CD: 0x8CDA,
                0xE6CE: 0x8CFD,
                0xE6CF: 0x8CFA,
                0xE6D0: 0x8CFB,
                0xE6D1: 0x8D04,
                0xE6D2: 0x8D05,
                0xE6D3: 0x8D0A,
                0xE6D4: 0x8D07,
                0xE6D5: 0x8D0F,
                0xE6D6: 0x8D0D,
                0xE6D7: 0x8D10,
                0xE6D8: 0x9F4E,
                0xE6D9: 0x8D13,
                0xE6DA: 0x8CCD,
                0xE6DB: 0x8D14,
                0xE6DC: 0x8D16,
                0xE6DD: 0x8D67,
                0xE6DE: 0x8D6D,
                0xE6DF: 0x8D71,
                0xE6E0: 0x8D73,
                0xE6E1: 0x8D81,
                0xE6E2: 0x8D99,
                0xE6E3: 0x8DC2,
                0xE6E4: 0x8DBE,
                0xE6E5: 0x8DBA,
                0xE6E6: 0x8DCF,
                0xE6E7: 0x8DDA,
                0xE6E8: 0x8DD6,
                0xE6E9: 0x8DCC,
                0xE6EA: 0x8DDB,
                0xE6EB: 0x8DCB,
                0xE6EC: 0x8DEA,
                0xE6ED: 0x8DEB,
                0xE6EE: 0x8DDF,
                0xE6EF: 0x8DE3,
                0xE6F0: 0x8DFC,
                0xE6F1: 0x8E08,
                0xE6F2: 0x8E09,
                0xE6F3: 0x8DFF,
                0xE6F4: 0x8E1D,
                0xE6F5: 0x8E1E,
                0xE6F6: 0x8E10,
                0xE6F7: 0x8E1F,
                0xE6F8: 0x8E42,
                0xE6F9: 0x8E35,
                0xE6FA: 0x8E30,
                0xE6FB: 0x8E34,
                0xE6FC: 0x8E4A,
                0xE740: 0x8E47,
                0xE741: 0x8E49,
                0xE742: 0x8E4C,
                0xE743: 0x8E50,
                0xE744: 0x8E48,
                0xE745: 0x8E59,
                0xE746: 0x8E64,
                0xE747: 0x8E60,
                0xE748: 0x8E2A,
                0xE749: 0x8E63,
                0xE74A: 0x8E55,
                0xE74B: 0x8E76,
                0xE74C: 0x8E72,
                0xE74D: 0x8E7C,
                0xE74E: 0x8E81,
                0xE74F: 0x8E87,
                0xE750: 0x8E85,
                0xE751: 0x8E84,
                0xE752: 0x8E8B,
                0xE753: 0x8E8A,
                0xE754: 0x8E93,
                0xE755: 0x8E91,
                0xE756: 0x8E94,
                0xE757: 0x8E99,
                0xE758: 0x8EAA,
                0xE759: 0x8EA1,
                0xE75A: 0x8EAC,
                0xE75B: 0x8EB0,
                0xE75C: 0x8EC6,
                0xE75D: 0x8EB1,
                0xE75E: 0x8EBE,
                0xE75F: 0x8EC5,
                0xE760: 0x8EC8,
                0xE761: 0x8ECB,
                0xE762: 0x8EDB,
                0xE763: 0x8EE3,
                0xE764: 0x8EFC,
                0xE765: 0x8EFB,
                0xE766: 0x8EEB,
                0xE767: 0x8EFE,
                0xE768: 0x8F0A,
                0xE769: 0x8F05,
                0xE76A: 0x8F15,
                0xE76B: 0x8F12,
                0xE76C: 0x8F19,
                0xE76D: 0x8F13,
                0xE76E: 0x8F1C,
                0xE76F: 0x8F1F,
                0xE770: 0x8F1B,
                0xE771: 0x8F0C,
                0xE772: 0x8F26,
                0xE773: 0x8F33,
                0xE774: 0x8F3B,
                0xE775: 0x8F39,
                0xE776: 0x8F45,
                0xE777: 0x8F42,
                0xE778: 0x8F3E,
                0xE779: 0x8F4C,
                0xE77A: 0x8F49,
                0xE77B: 0x8F46,
                0xE77C: 0x8F4E,
                0xE77D: 0x8F57,
                0xE77E: 0x8F5C,
                0xE780: 0x8F62,
                0xE781: 0x8F63,
                0xE782: 0x8F64,
                0xE783: 0x8F9C,
                0xE784: 0x8F9F,
                0xE785: 0x8FA3,
                0xE786: 0x8FAD,
                0xE787: 0x8FAF,
                0xE788: 0x8FB7,
                0xE789: 0x8FDA,
                0xE78A: 0x8FE5,
                0xE78B: 0x8FE2,
                0xE78C: 0x8FEA,
                0xE78D: 0x8FEF,
                0xE78E: 0x9087,
                0xE78F: 0x8FF4,
                0xE790: 0x9005,
                0xE791: 0x8FF9,
                0xE792: 0x8FFA,
                0xE793: 0x9011,
                0xE794: 0x9015,
                0xE795: 0x9021,
                0xE796: 0x900D,
                0xE797: 0x901E,
                0xE798: 0x9016,
                0xE799: 0x900B,
                0xE79A: 0x9027,
                0xE79B: 0x9036,
                0xE79C: 0x9035,
                0xE79D: 0x9039,
                0xE79E: 0x8FF8,
                0xE79F: 0x904F,
                0xE7A0: 0x9050,
                0xE7A1: 0x9051,
                0xE7A2: 0x9052,
                0xE7A3: 0x900E,
                0xE7A4: 0x9049,
                0xE7A5: 0x903E,
                0xE7A6: 0x9056,
                0xE7A7: 0x9058,
                0xE7A8: 0x905E,
                0xE7A9: 0x9068,
                0xE7AA: 0x906F,
                0xE7AB: 0x9076,
                0xE7AC: 0x96A8,
                0xE7AD: 0x9072,
                0xE7AE: 0x9082,
                0xE7AF: 0x907D,
                0xE7B0: 0x9081,
                0xE7B1: 0x9080,
                0xE7B2: 0x908A,
                0xE7B3: 0x9089,
                0xE7B4: 0x908F,
                0xE7B5: 0x90A8,
                0xE7B6: 0x90AF,
                0xE7B7: 0x90B1,
                0xE7B8: 0x90B5,
                0xE7B9: 0x90E2,
                0xE7BA: 0x90E4,
                0xE7BB: 0x6248,
                0xE7BC: 0x90DB,
                0xE7BD: 0x9102,
                0xE7BE: 0x9112,
                0xE7BF: 0x9119,
                0xE7C0: 0x9132,
                0xE7C1: 0x9130,
                0xE7C2: 0x914A,
                0xE7C3: 0x9156,
                0xE7C4: 0x9158,
                0xE7C5: 0x9163,
                0xE7C6: 0x9165,
                0xE7C7: 0x9169,
                0xE7C8: 0x9173,
                0xE7C9: 0x9172,
                0xE7CA: 0x918B,
                0xE7CB: 0x9189,
                0xE7CC: 0x9182,
                0xE7CD: 0x91A2,
                0xE7CE: 0x91AB,
                0xE7CF: 0x91AF,
                0xE7D0: 0x91AA,
                0xE7D1: 0x91B5,
                0xE7D2: 0x91B4,
                0xE7D3: 0x91BA,
                0xE7D4: 0x91C0,
                0xE7D5: 0x91C1,
                0xE7D6: 0x91C9,
                0xE7D7: 0x91CB,
                0xE7D8: 0x91D0,
                0xE7D9: 0x91D6,
                0xE7DA: 0x91DF,
                0xE7DB: 0x91E1,
                0xE7DC: 0x91DB,
                0xE7DD: 0x91FC,
                0xE7DE: 0x91F5,
                0xE7DF: 0x91F6,
                0xE7E0: 0x921E,
                0xE7E1: 0x91FF,
                0xE7E2: 0x9214,
                0xE7E3: 0x922C,
                0xE7E4: 0x9215,
                0xE7E5: 0x9211,
                0xE7E6: 0x925E,
                0xE7E7: 0x9257,
                0xE7E8: 0x9245,
                0xE7E9: 0x9249,
                0xE7EA: 0x9264,
                0xE7EB: 0x9248,
                0xE7EC: 0x9295,
                0xE7ED: 0x923F,
                0xE7EE: 0x924B,
                0xE7EF: 0x9250,
                0xE7F0: 0x929C,
                0xE7F1: 0x9296,
                0xE7F2: 0x9293,
                0xE7F3: 0x929B,
                0xE7F4: 0x925A,
                0xE7F5: 0x92CF,
                0xE7F6: 0x92B9,
                0xE7F7: 0x92B7,
                0xE7F8: 0x92E9,
                0xE7F9: 0x930F,
                0xE7FA: 0x92FA,
                0xE7FB: 0x9344,
                0xE7FC: 0x932E,
                0xE840: 0x9319,
                0xE841: 0x9322,
                0xE842: 0x931A,
                0xE843: 0x9323,
                0xE844: 0x933A,
                0xE845: 0x9335,
                0xE846: 0x933B,
                0xE847: 0x935C,
                0xE848: 0x9360,
                0xE849: 0x937C,
                0xE84A: 0x936E,
                0xE84B: 0x9356,
                0xE84C: 0x93B0,
                0xE84D: 0x93AC,
                0xE84E: 0x93AD,
                0xE84F: 0x9394,
                0xE850: 0x93B9,
                0xE851: 0x93D6,
                0xE852: 0x93D7,
                0xE853: 0x93E8,
                0xE854: 0x93E5,
                0xE855: 0x93D8,
                0xE856: 0x93C3,
                0xE857: 0x93DD,
                0xE858: 0x93D0,
                0xE859: 0x93C8,
                0xE85A: 0x93E4,
                0xE85B: 0x941A,
                0xE85C: 0x9414,
                0xE85D: 0x9413,
                0xE85E: 0x9403,
                0xE85F: 0x9407,
                0xE860: 0x9410,
                0xE861: 0x9436,
                0xE862: 0x942B,
                0xE863: 0x9435,
                0xE864: 0x9421,
                0xE865: 0x943A,
                0xE866: 0x9441,
                0xE867: 0x9452,
                0xE868: 0x9444,
                0xE869: 0x945B,
                0xE86A: 0x9460,
                0xE86B: 0x9462,
                0xE86C: 0x945E,
                0xE86D: 0x946A,
                0xE86E: 0x9229,
                0xE86F: 0x9470,
                0xE870: 0x9475,
                0xE871: 0x9477,
                0xE872: 0x947D,
                0xE873: 0x945A,
                0xE874: 0x947C,
                0xE875: 0x947E,
                0xE876: 0x9481,
                0xE877: 0x947F,
                0xE878: 0x9582,
                0xE879: 0x9587,
                0xE87A: 0x958A,
                0xE87B: 0x9594,
                0xE87C: 0x9596,
                0xE87D: 0x9598,
                0xE87E: 0x9599,
                0xE880: 0x95A0,
                0xE881: 0x95A8,
                0xE882: 0x95A7,
                0xE883: 0x95AD,
                0xE884: 0x95BC,
                0xE885: 0x95BB,
                0xE886: 0x95B9,
                0xE887: 0x95BE,
                0xE888: 0x95CA,
                0xE889: 0x6FF6,
                0xE88A: 0x95C3,
                0xE88B: 0x95CD,
                0xE88C: 0x95CC,
                0xE88D: 0x95D5,
                0xE88E: 0x95D4,
                0xE88F: 0x95D6,
                0xE890: 0x95DC,
                0xE891: 0x95E1,
                0xE892: 0x95E5,
                0xE893: 0x95E2,
                0xE894: 0x9621,
                0xE895: 0x9628,
                0xE896: 0x962E,
                0xE897: 0x962F,
                0xE898: 0x9642,
                0xE899: 0x964C,
                0xE89A: 0x964F,
                0xE89B: 0x964B,
                0xE89C: 0x9677,
                0xE89D: 0x965C,
                0xE89E: 0x965E,
                0xE89F: 0x965D,
                0xE8A0: 0x965F,
                0xE8A1: 0x9666,
                0xE8A2: 0x9672,
                0xE8A3: 0x966C,
                0xE8A4: 0x968D,
                0xE8A5: 0x9698,
                0xE8A6: 0x9695,
                0xE8A7: 0x9697,
                0xE8A8: 0x96AA,
                0xE8A9: 0x96A7,
                0xE8AA: 0x96B1,
                0xE8AB: 0x96B2,
                0xE8AC: 0x96B0,
                0xE8AD: 0x96B4,
                0xE8AE: 0x96B6,
                0xE8AF: 0x96B8,
                0xE8B0: 0x96B9,
                0xE8B1: 0x96CE,
                0xE8B2: 0x96CB,
                0xE8B3: 0x96C9,
                0xE8B4: 0x96CD,
                0xE8B5: 0x894D,
                0xE8B6: 0x96DC,
                0xE8B7: 0x970D,
                0xE8B8: 0x96D5,
                0xE8B9: 0x96F9,
                0xE8BA: 0x9704,
                0xE8BB: 0x9706,
                0xE8BC: 0x9708,
                0xE8BD: 0x9713,
                0xE8BE: 0x970E,
                0xE8BF: 0x9711,
                0xE8C0: 0x970F,
                0xE8C1: 0x9716,
                0xE8C2: 0x9719,
                0xE8C3: 0x9724,
                0xE8C4: 0x972A,
                0xE8C5: 0x9730,
                0xE8C6: 0x9739,
                0xE8C7: 0x973D,
                0xE8C8: 0x973E,
                0xE8C9: 0x9744,
                0xE8CA: 0x9746,
                0xE8CB: 0x9748,
                0xE8CC: 0x9742,
                0xE8CD: 0x9749,
                0xE8CE: 0x975C,
                0xE8CF: 0x9760,
                0xE8D0: 0x9764,
                0xE8D1: 0x9766,
                0xE8D2: 0x9768,
                0xE8D3: 0x52D2,
                0xE8D4: 0x976B,
                0xE8D5: 0x9771,
                0xE8D6: 0x9779,
                0xE8D7: 0x9785,
                0xE8D8: 0x977C,
                0xE8D9: 0x9781,
                0xE8DA: 0x977A,
                0xE8DB: 0x9786,
                0xE8DC: 0x978B,
                0xE8DD: 0x978F,
                0xE8DE: 0x9790,
                0xE8DF: 0x979C,
                0xE8E0: 0x97A8,
                0xE8E1: 0x97A6,
                0xE8E2: 0x97A3,
                0xE8E3: 0x97B3,
                0xE8E4: 0x97B4,
                0xE8E5: 0x97C3,
                0xE8E6: 0x97C6,
                0xE8E7: 0x97C8,
                0xE8E8: 0x97CB,
                0xE8E9: 0x97DC,
                0xE8EA: 0x97ED,
                0xE8EB: 0x9F4F,
                0xE8EC: 0x97F2,
                0xE8ED: 0x7ADF,
                0xE8EE: 0x97F6,
                0xE8EF: 0x97F5,
                0xE8F0: 0x980F,
                0xE8F1: 0x980C,
                0xE8F2: 0x9838,
                0xE8F3: 0x9824,
                0xE8F4: 0x9821,
                0xE8F5: 0x9837,
                0xE8F6: 0x983D,
                0xE8F7: 0x9846,
                0xE8F8: 0x984F,
                0xE8F9: 0x984B,
                0xE8FA: 0x986B,
                0xE8FB: 0x986F,
                0xE8FC: 0x9870,
                0xE940: 0x9871,
                0xE941: 0x9874,
                0xE942: 0x9873,
                0xE943: 0x98AA,
                0xE944: 0x98AF,
                0xE945: 0x98B1,
                0xE946: 0x98B6,
                0xE947: 0x98C4,
                0xE948: 0x98C3,
                0xE949: 0x98C6,
                0xE94A: 0x98E9,
                0xE94B: 0x98EB,
                0xE94C: 0x9903,
                0xE94D: 0x9909,
                0xE94E: 0x9912,
                0xE94F: 0x9914,
                0xE950: 0x9918,
                0xE951: 0x9921,
                0xE952: 0x991D,
                0xE953: 0x991E,
                0xE954: 0x9924,
                0xE955: 0x9920,
                0xE956: 0x992C,
                0xE957: 0x992E,
                0xE958: 0x993D,
                0xE959: 0x993E,
                0xE95A: 0x9942,
                0xE95B: 0x9949,
                0xE95C: 0x9945,
                0xE95D: 0x9950,
                0xE95E: 0x994B,
                0xE95F: 0x9951,
                0xE960: 0x9952,
                0xE961: 0x994C,
                0xE962: 0x9955,
                0xE963: 0x9997,
                0xE964: 0x9998,
                0xE965: 0x99A5,
                0xE966: 0x99AD,
                0xE967: 0x99AE,
                0xE968: 0x99BC,
                0xE969: 0x99DF,
                0xE96A: 0x99DB,
                0xE96B: 0x99DD,
                0xE96C: 0x99D8,
                0xE96D: 0x99D1,
                0xE96E: 0x99ED,
                0xE96F: 0x99EE,
                0xE970: 0x99F1,
                0xE971: 0x99F2,
                0xE972: 0x99FB,
                0xE973: 0x99F8,
                0xE974: 0x9A01,
                0xE975: 0x9A0F,
                0xE976: 0x9A05,
                0xE977: 0x99E2,
                0xE978: 0x9A19,
                0xE979: 0x9A2B,
                0xE97A: 0x9A37,
                0xE97B: 0x9A45,
                0xE97C: 0x9A42,
                0xE97D: 0x9A40,
                0xE97E: 0x9A43,
                0xE980: 0x9A3E,
                0xE981: 0x9A55,
                0xE982: 0x9A4D,
                0xE983: 0x9A5B,
                0xE984: 0x9A57,
                0xE985: 0x9A5F,
                0xE986: 0x9A62,
                0xE987: 0x9A65,
                0xE988: 0x9A64,
                0xE989: 0x9A69,
                0xE98A: 0x9A6B,
                0xE98B: 0x9A6A,
                0xE98C: 0x9AAD,
                0xE98D: 0x9AB0,
                0xE98E: 0x9ABC,
                0xE98F: 0x9AC0,
                0xE990: 0x9ACF,
                0xE991: 0x9AD1,
                0xE992: 0x9AD3,
                0xE993: 0x9AD4,
                0xE994: 0x9ADE,
                0xE995: 0x9ADF,
                0xE996: 0x9AE2,
                0xE997: 0x9AE3,
                0xE998: 0x9AE6,
                0xE999: 0x9AEF,
                0xE99A: 0x9AEB,
                0xE99B: 0x9AEE,
                0xE99C: 0x9AF4,
                0xE99D: 0x9AF1,
                0xE99E: 0x9AF7,
                0xE99F: 0x9AFB,
                0xE9A0: 0x9B06,
                0xE9A1: 0x9B18,
                0xE9A2: 0x9B1A,
                0xE9A3: 0x9B1F,
                0xE9A4: 0x9B22,
                0xE9A5: 0x9B23,
                0xE9A6: 0x9B25,
                0xE9A7: 0x9B27,
                0xE9A8: 0x9B28,
                0xE9A9: 0x9B29,
                0xE9AA: 0x9B2A,
                0xE9AB: 0x9B2E,
                0xE9AC: 0x9B2F,
                0xE9AD: 0x9B32,
                0xE9AE: 0x9B44,
                0xE9AF: 0x9B43,
                0xE9B0: 0x9B4F,
                0xE9B1: 0x9B4D,
                0xE9B2: 0x9B4E,
                0xE9B3: 0x9B51,
                0xE9B4: 0x9B58,
                0xE9B5: 0x9B74,
                0xE9B6: 0x9B93,
                0xE9B7: 0x9B83,
                0xE9B8: 0x9B91,
                0xE9B9: 0x9B96,
                0xE9BA: 0x9B97,
                0xE9BB: 0x9B9F,
                0xE9BC: 0x9BA0,
                0xE9BD: 0x9BA8,
                0xE9BE: 0x9BB4,
                0xE9BF: 0x9BC0,
                0xE9C0: 0x9BCA,
                0xE9C1: 0x9BB9,
                0xE9C2: 0x9BC6,
                0xE9C3: 0x9BCF,
                0xE9C4: 0x9BD1,
                0xE9C5: 0x9BD2,
                0xE9C6: 0x9BE3,
                0xE9C7: 0x9BE2,
                0xE9C8: 0x9BE4,
                0xE9C9: 0x9BD4,
                0xE9CA: 0x9BE1,
                0xE9CB: 0x9C3A,
                0xE9CC: 0x9BF2,
                0xE9CD: 0x9BF1,
                0xE9CE: 0x9BF0,
                0xE9CF: 0x9C15,
                0xE9D0: 0x9C14,
                0xE9D1: 0x9C09,
                0xE9D2: 0x9C13,
                0xE9D3: 0x9C0C,
                0xE9D4: 0x9C06,
                0xE9D5: 0x9C08,
                0xE9D6: 0x9C12,
                0xE9D7: 0x9C0A,
                0xE9D8: 0x9C04,
                0xE9D9: 0x9C2E,
                0xE9DA: 0x9C1B,
                0xE9DB: 0x9C25,
                0xE9DC: 0x9C24,
                0xE9DD: 0x9C21,
                0xE9DE: 0x9C30,
                0xE9DF: 0x9C47,
                0xE9E0: 0x9C32,
                0xE9E1: 0x9C46,
                0xE9E2: 0x9C3E,
                0xE9E3: 0x9C5A,
                0xE9E4: 0x9C60,
                0xE9E5: 0x9C67,
                0xE9E6: 0x9C76,
                0xE9E7: 0x9C78,
                0xE9E8: 0x9CE7,
                0xE9E9: 0x9CEC,
                0xE9EA: 0x9CF0,
                0xE9EB: 0x9D09,
                0xE9EC: 0x9D08,
                0xE9ED: 0x9CEB,
                0xE9EE: 0x9D03,
                0xE9EF: 0x9D06,
                0xE9F0: 0x9D2A,
                0xE9F1: 0x9D26,
                0xE9F2: 0x9DAF,
                0xE9F3: 0x9D23,
                0xE9F4: 0x9D1F,
                0xE9F5: 0x9D44,
                0xE9F6: 0x9D15,
                0xE9F7: 0x9D12,
                0xE9F8: 0x9D41,
                0xE9F9: 0x9D3F,
                0xE9FA: 0x9D3E,
                0xE9FB: 0x9D46,
                0xE9FC: 0x9D48,
                0xEA40: 0x9D5D,
                0xEA41: 0x9D5E,
                0xEA42: 0x9D64,
                0xEA43: 0x9D51,
                0xEA44: 0x9D50,
                0xEA45: 0x9D59,
                0xEA46: 0x9D72,
                0xEA47: 0x9D89,
                0xEA48: 0x9D87,
                0xEA49: 0x9DAB,
                0xEA4A: 0x9D6F,
                0xEA4B: 0x9D7A,
                0xEA4C: 0x9D9A,
                0xEA4D: 0x9DA4,
                0xEA4E: 0x9DA9,
                0xEA4F: 0x9DB2,
                0xEA50: 0x9DC4,
                0xEA51: 0x9DC1,
                0xEA52: 0x9DBB,
                0xEA53: 0x9DB8,
                0xEA54: 0x9DBA,
                0xEA55: 0x9DC6,
                0xEA56: 0x9DCF,
                0xEA57: 0x9DC2,
                0xEA58: 0x9DD9,
                0xEA59: 0x9DD3,
                0xEA5A: 0x9DF8,
                0xEA5B: 0x9DE6,
                0xEA5C: 0x9DED,
                0xEA5D: 0x9DEF,
                0xEA5E: 0x9DFD,
                0xEA5F: 0x9E1A,
                0xEA60: 0x9E1B,
                0xEA61: 0x9E1E,
                0xEA62: 0x9E75,
                0xEA63: 0x9E79,
                0xEA64: 0x9E7D,
                0xEA65: 0x9E81,
                0xEA66: 0x9E88,
                0xEA67: 0x9E8B,
                0xEA68: 0x9E8C,
                0xEA69: 0x9E92,
                0xEA6A: 0x9E95,
                0xEA6B: 0x9E91,
                0xEA6C: 0x9E9D,
                0xEA6D: 0x9EA5,
                0xEA6E: 0x9EA9,
                0xEA6F: 0x9EB8,
                0xEA70: 0x9EAA,
                0xEA71: 0x9EAD,
                0xEA72: 0x9761,
                0xEA73: 0x9ECC,
                0xEA74: 0x9ECE,
                0xEA75: 0x9ECF,
                0xEA76: 0x9ED0,
                0xEA77: 0x9ED4,
                0xEA78: 0x9EDC,
                0xEA79: 0x9EDE,
                0xEA7A: 0x9EDD,
                0xEA7B: 0x9EE0,
                0xEA7C: 0x9EE5,
                0xEA7D: 0x9EE8,
                0xEA7E: 0x9EEF,
                0xEA80: 0x9EF4,
                0xEA81: 0x9EF6,
                0xEA82: 0x9EF7,
                0xEA83: 0x9EF9,
                0xEA84: 0x9EFB,
                0xEA85: 0x9EFC,
                0xEA86: 0x9EFD,
                0xEA87: 0x9F07,
                0xEA88: 0x9F08,
                0xEA89: 0x76B7,
                0xEA8A: 0x9F15,
                0xEA8B: 0x9F21,
                0xEA8C: 0x9F2C,
                0xEA8D: 0x9F3E,
                0xEA8E: 0x9F4A,
                0xEA8F: 0x9F52,
                0xEA90: 0x9F54,
                0xEA91: 0x9F63,
                0xEA92: 0x9F5F,
                0xEA93: 0x9F60,
                0xEA94: 0x9F61,
                0xEA95: 0x9F66,
                0xEA96: 0x9F67,
                0xEA97: 0x9F6C,
                0xEA98: 0x9F6A,
                0xEA99: 0x9F77,
                0xEA9A: 0x9F72,
                0xEA9B: 0x9F76,
                0xEA9C: 0x9F95,
                0xEA9D: 0x9F9C,
                0xEA9E: 0x9FA0,
                0xEA9F: 0x582F,
                0xEAA0: 0x69C7,
                0xEAA1: 0x9059,
                0xEAA2: 0x7464,
                0xEAA3: 0x51DC,
                0xEAA4: 0x7199
            };
        /***/ },
        /* 9 */ /***/ function(module, exports, __webpack_require__) {
            "use strict";
            Object.defineProperty(exports, "__esModule", {
                value: true
            });
            var GenericGF_1 = __webpack_require__(1);
            var GenericGFPoly_1 = __webpack_require__(2);
            function runEuclideanAlgorithm(field, a, b, R) {
                var _a;
                // Assume a's degree is >= b's
                if (a.degree() < b.degree()) _a = [
                    b,
                    a
                ], a = _a[0], b = _a[1];
                var rLast = a;
                var r = b;
                var tLast = field.zero;
                var t = field.one;
                // Run Euclidean algorithm until r's degree is less than R/2
                while(r.degree() >= R / 2){
                    var rLastLast = rLast;
                    var tLastLast = tLast;
                    rLast = r;
                    tLast = t;
                    // Divide rLastLast by rLast, with quotient in q and remainder in r
                    if (rLast.isZero()) // Euclidean algorithm already terminated?
                    return null;
                    r = rLastLast;
                    var q = field.zero;
                    var denominatorLeadingTerm = rLast.getCoefficient(rLast.degree());
                    var dltInverse = field.inverse(denominatorLeadingTerm);
                    while(r.degree() >= rLast.degree() && !r.isZero()){
                        var degreeDiff = r.degree() - rLast.degree();
                        var scale = field.multiply(r.getCoefficient(r.degree()), dltInverse);
                        q = q.addOrSubtract(field.buildMonomial(degreeDiff, scale));
                        r = r.addOrSubtract(rLast.multiplyByMonomial(degreeDiff, scale));
                    }
                    t = q.multiplyPoly(tLast).addOrSubtract(tLastLast);
                    if (r.degree() >= rLast.degree()) return null;
                }
                var sigmaTildeAtZero = t.getCoefficient(0);
                if (sigmaTildeAtZero === 0) return null;
                var inverse = field.inverse(sigmaTildeAtZero);
                return [
                    t.multiply(inverse),
                    r.multiply(inverse)
                ];
            }
            function findErrorLocations(field, errorLocator) {
                // This is a direct application of Chien's search
                var numErrors = errorLocator.degree();
                if (numErrors === 1) return [
                    errorLocator.getCoefficient(1)
                ];
                var result = new Array(numErrors);
                var errorCount = 0;
                for(var i = 1; i < field.size && errorCount < numErrors; i++)if (errorLocator.evaluateAt(i) === 0) {
                    result[errorCount] = field.inverse(i);
                    errorCount++;
                }
                if (errorCount !== numErrors) return null;
                return result;
            }
            function findErrorMagnitudes(field, errorEvaluator, errorLocations) {
                // This is directly applying Forney's Formula
                var s = errorLocations.length;
                var result = new Array(s);
                for(var i = 0; i < s; i++){
                    var xiInverse = field.inverse(errorLocations[i]);
                    var denominator = 1;
                    for(var j = 0; j < s; j++)if (i !== j) denominator = field.multiply(denominator, GenericGF_1.addOrSubtractGF(1, field.multiply(errorLocations[j], xiInverse)));
                    result[i] = field.multiply(errorEvaluator.evaluateAt(xiInverse), field.inverse(denominator));
                    if (field.generatorBase !== 0) result[i] = field.multiply(result[i], xiInverse);
                }
                return result;
            }
            function decode(bytes, twoS) {
                var outputBytes = new Uint8ClampedArray(bytes.length);
                outputBytes.set(bytes);
                var field = new GenericGF_1.default(0x011D, 256, 0); // x^8 + x^4 + x^3 + x^2 + 1
                var poly = new GenericGFPoly_1.default(field, outputBytes);
                var syndromeCoefficients = new Uint8ClampedArray(twoS);
                var error = false;
                for(var s = 0; s < twoS; s++){
                    var evaluation = poly.evaluateAt(field.exp(s + field.generatorBase));
                    syndromeCoefficients[syndromeCoefficients.length - 1 - s] = evaluation;
                    if (evaluation !== 0) error = true;
                }
                if (!error) return outputBytes;
                var syndrome = new GenericGFPoly_1.default(field, syndromeCoefficients);
                var sigmaOmega = runEuclideanAlgorithm(field, field.buildMonomial(twoS, 1), syndrome, twoS);
                if (sigmaOmega === null) return null;
                var errorLocations = findErrorLocations(field, sigmaOmega[0]);
                if (errorLocations == null) return null;
                var errorMagnitudes = findErrorMagnitudes(field, sigmaOmega[1], errorLocations);
                for(var i = 0; i < errorLocations.length; i++){
                    var position = outputBytes.length - 1 - field.log(errorLocations[i]);
                    if (position < 0) return null;
                    outputBytes[position] = GenericGF_1.addOrSubtractGF(outputBytes[position], errorMagnitudes[i]);
                }
                return outputBytes;
            }
            exports.decode = decode;
        /***/ },
        /* 10 */ /***/ function(module, exports, __webpack_require__) {
            "use strict";
            Object.defineProperty(exports, "__esModule", {
                value: true
            });
            exports.VERSIONS = [
                {
                    infoBits: null,
                    versionNumber: 1,
                    alignmentPatternCenters: [],
                    errorCorrectionLevels: [
                        {
                            ecCodewordsPerBlock: 7,
                            ecBlocks: [
                                {
                                    numBlocks: 1,
                                    dataCodewordsPerBlock: 19
                                }
                            ]
                        },
                        {
                            ecCodewordsPerBlock: 10,
                            ecBlocks: [
                                {
                                    numBlocks: 1,
                                    dataCodewordsPerBlock: 16
                                }
                            ]
                        },
                        {
                            ecCodewordsPerBlock: 13,
                            ecBlocks: [
                                {
                                    numBlocks: 1,
                                    dataCodewordsPerBlock: 13
                                }
                            ]
                        },
                        {
                            ecCodewordsPerBlock: 17,
                            ecBlocks: [
                                {
                                    numBlocks: 1,
                                    dataCodewordsPerBlock: 9
                                }
                            ]
                        }, 
                    ]
                },
                {
                    infoBits: null,
                    versionNumber: 2,
                    alignmentPatternCenters: [
                        6,
                        18
                    ],
                    errorCorrectionLevels: [
                        {
                            ecCodewordsPerBlock: 10,
                            ecBlocks: [
                                {
                                    numBlocks: 1,
                                    dataCodewordsPerBlock: 34
                                }
                            ]
                        },
                        {
                            ecCodewordsPerBlock: 16,
                            ecBlocks: [
                                {
                                    numBlocks: 1,
                                    dataCodewordsPerBlock: 28
                                }
                            ]
                        },
                        {
                            ecCodewordsPerBlock: 22,
                            ecBlocks: [
                                {
                                    numBlocks: 1,
                                    dataCodewordsPerBlock: 22
                                }
                            ]
                        },
                        {
                            ecCodewordsPerBlock: 28,
                            ecBlocks: [
                                {
                                    numBlocks: 1,
                                    dataCodewordsPerBlock: 16
                                }
                            ]
                        }, 
                    ]
                },
                {
                    infoBits: null,
                    versionNumber: 3,
                    alignmentPatternCenters: [
                        6,
                        22
                    ],
                    errorCorrectionLevels: [
                        {
                            ecCodewordsPerBlock: 15,
                            ecBlocks: [
                                {
                                    numBlocks: 1,
                                    dataCodewordsPerBlock: 55
                                }
                            ]
                        },
                        {
                            ecCodewordsPerBlock: 26,
                            ecBlocks: [
                                {
                                    numBlocks: 1,
                                    dataCodewordsPerBlock: 44
                                }
                            ]
                        },
                        {
                            ecCodewordsPerBlock: 18,
                            ecBlocks: [
                                {
                                    numBlocks: 2,
                                    dataCodewordsPerBlock: 17
                                }
                            ]
                        },
                        {
                            ecCodewordsPerBlock: 22,
                            ecBlocks: [
                                {
                                    numBlocks: 2,
                                    dataCodewordsPerBlock: 13
                                }
                            ]
                        }, 
                    ]
                },
                {
                    infoBits: null,
                    versionNumber: 4,
                    alignmentPatternCenters: [
                        6,
                        26
                    ],
                    errorCorrectionLevels: [
                        {
                            ecCodewordsPerBlock: 20,
                            ecBlocks: [
                                {
                                    numBlocks: 1,
                                    dataCodewordsPerBlock: 80
                                }
                            ]
                        },
                        {
                            ecCodewordsPerBlock: 18,
                            ecBlocks: [
                                {
                                    numBlocks: 2,
                                    dataCodewordsPerBlock: 32
                                }
                            ]
                        },
                        {
                            ecCodewordsPerBlock: 26,
                            ecBlocks: [
                                {
                                    numBlocks: 2,
                                    dataCodewordsPerBlock: 24
                                }
                            ]
                        },
                        {
                            ecCodewordsPerBlock: 16,
                            ecBlocks: [
                                {
                                    numBlocks: 4,
                                    dataCodewordsPerBlock: 9
                                }
                            ]
                        }, 
                    ]
                },
                {
                    infoBits: null,
                    versionNumber: 5,
                    alignmentPatternCenters: [
                        6,
                        30
                    ],
                    errorCorrectionLevels: [
                        {
                            ecCodewordsPerBlock: 26,
                            ecBlocks: [
                                {
                                    numBlocks: 1,
                                    dataCodewordsPerBlock: 108
                                }
                            ]
                        },
                        {
                            ecCodewordsPerBlock: 24,
                            ecBlocks: [
                                {
                                    numBlocks: 2,
                                    dataCodewordsPerBlock: 43
                                }
                            ]
                        },
                        {
                            ecCodewordsPerBlock: 18,
                            ecBlocks: [
                                {
                                    numBlocks: 2,
                                    dataCodewordsPerBlock: 15
                                },
                                {
                                    numBlocks: 2,
                                    dataCodewordsPerBlock: 16
                                }, 
                            ]
                        },
                        {
                            ecCodewordsPerBlock: 22,
                            ecBlocks: [
                                {
                                    numBlocks: 2,
                                    dataCodewordsPerBlock: 11
                                },
                                {
                                    numBlocks: 2,
                                    dataCodewordsPerBlock: 12
                                }, 
                            ]
                        }, 
                    ]
                },
                {
                    infoBits: null,
                    versionNumber: 6,
                    alignmentPatternCenters: [
                        6,
                        34
                    ],
                    errorCorrectionLevels: [
                        {
                            ecCodewordsPerBlock: 18,
                            ecBlocks: [
                                {
                                    numBlocks: 2,
                                    dataCodewordsPerBlock: 68
                                }
                            ]
                        },
                        {
                            ecCodewordsPerBlock: 16,
                            ecBlocks: [
                                {
                                    numBlocks: 4,
                                    dataCodewordsPerBlock: 27
                                }
                            ]
                        },
                        {
                            ecCodewordsPerBlock: 24,
                            ecBlocks: [
                                {
                                    numBlocks: 4,
                                    dataCodewordsPerBlock: 19
                                }
                            ]
                        },
                        {
                            ecCodewordsPerBlock: 28,
                            ecBlocks: [
                                {
                                    numBlocks: 4,
                                    dataCodewordsPerBlock: 15
                                }
                            ]
                        }, 
                    ]
                },
                {
                    infoBits: 0x07C94,
                    versionNumber: 7,
                    alignmentPatternCenters: [
                        6,
                        22,
                        38
                    ],
                    errorCorrectionLevels: [
                        {
                            ecCodewordsPerBlock: 20,
                            ecBlocks: [
                                {
                                    numBlocks: 2,
                                    dataCodewordsPerBlock: 78
                                }
                            ]
                        },
                        {
                            ecCodewordsPerBlock: 18,
                            ecBlocks: [
                                {
                                    numBlocks: 4,
                                    dataCodewordsPerBlock: 31
                                }
                            ]
                        },
                        {
                            ecCodewordsPerBlock: 18,
                            ecBlocks: [
                                {
                                    numBlocks: 2,
                                    dataCodewordsPerBlock: 14
                                },
                                {
                                    numBlocks: 4,
                                    dataCodewordsPerBlock: 15
                                }, 
                            ]
                        },
                        {
                            ecCodewordsPerBlock: 26,
                            ecBlocks: [
                                {
                                    numBlocks: 4,
                                    dataCodewordsPerBlock: 13
                                },
                                {
                                    numBlocks: 1,
                                    dataCodewordsPerBlock: 14
                                }, 
                            ]
                        }, 
                    ]
                },
                {
                    infoBits: 0x085BC,
                    versionNumber: 8,
                    alignmentPatternCenters: [
                        6,
                        24,
                        42
                    ],
                    errorCorrectionLevels: [
                        {
                            ecCodewordsPerBlock: 24,
                            ecBlocks: [
                                {
                                    numBlocks: 2,
                                    dataCodewordsPerBlock: 97
                                }
                            ]
                        },
                        {
                            ecCodewordsPerBlock: 22,
                            ecBlocks: [
                                {
                                    numBlocks: 2,
                                    dataCodewordsPerBlock: 38
                                },
                                {
                                    numBlocks: 2,
                                    dataCodewordsPerBlock: 39
                                }, 
                            ]
                        },
                        {
                            ecCodewordsPerBlock: 22,
                            ecBlocks: [
                                {
                                    numBlocks: 4,
                                    dataCodewordsPerBlock: 18
                                },
                                {
                                    numBlocks: 2,
                                    dataCodewordsPerBlock: 19
                                }, 
                            ]
                        },
                        {
                            ecCodewordsPerBlock: 26,
                            ecBlocks: [
                                {
                                    numBlocks: 4,
                                    dataCodewordsPerBlock: 14
                                },
                                {
                                    numBlocks: 2,
                                    dataCodewordsPerBlock: 15
                                }, 
                            ]
                        }, 
                    ]
                },
                {
                    infoBits: 0x09A99,
                    versionNumber: 9,
                    alignmentPatternCenters: [
                        6,
                        26,
                        46
                    ],
                    errorCorrectionLevels: [
                        {
                            ecCodewordsPerBlock: 30,
                            ecBlocks: [
                                {
                                    numBlocks: 2,
                                    dataCodewordsPerBlock: 116
                                }
                            ]
                        },
                        {
                            ecCodewordsPerBlock: 22,
                            ecBlocks: [
                                {
                                    numBlocks: 3,
                                    dataCodewordsPerBlock: 36
                                },
                                {
                                    numBlocks: 2,
                                    dataCodewordsPerBlock: 37
                                }, 
                            ]
                        },
                        {
                            ecCodewordsPerBlock: 20,
                            ecBlocks: [
                                {
                                    numBlocks: 4,
                                    dataCodewordsPerBlock: 16
                                },
                                {
                                    numBlocks: 4,
                                    dataCodewordsPerBlock: 17
                                }, 
                            ]
                        },
                        {
                            ecCodewordsPerBlock: 24,
                            ecBlocks: [
                                {
                                    numBlocks: 4,
                                    dataCodewordsPerBlock: 12
                                },
                                {
                                    numBlocks: 4,
                                    dataCodewordsPerBlock: 13
                                }, 
                            ]
                        }, 
                    ]
                },
                {
                    infoBits: 0x0A4D3,
                    versionNumber: 10,
                    alignmentPatternCenters: [
                        6,
                        28,
                        50
                    ],
                    errorCorrectionLevels: [
                        {
                            ecCodewordsPerBlock: 18,
                            ecBlocks: [
                                {
                                    numBlocks: 2,
                                    dataCodewordsPerBlock: 68
                                },
                                {
                                    numBlocks: 2,
                                    dataCodewordsPerBlock: 69
                                }, 
                            ]
                        },
                        {
                            ecCodewordsPerBlock: 26,
                            ecBlocks: [
                                {
                                    numBlocks: 4,
                                    dataCodewordsPerBlock: 43
                                },
                                {
                                    numBlocks: 1,
                                    dataCodewordsPerBlock: 44
                                }, 
                            ]
                        },
                        {
                            ecCodewordsPerBlock: 24,
                            ecBlocks: [
                                {
                                    numBlocks: 6,
                                    dataCodewordsPerBlock: 19
                                },
                                {
                                    numBlocks: 2,
                                    dataCodewordsPerBlock: 20
                                }, 
                            ]
                        },
                        {
                            ecCodewordsPerBlock: 28,
                            ecBlocks: [
                                {
                                    numBlocks: 6,
                                    dataCodewordsPerBlock: 15
                                },
                                {
                                    numBlocks: 2,
                                    dataCodewordsPerBlock: 16
                                }, 
                            ]
                        }, 
                    ]
                },
                {
                    infoBits: 0x0BBF6,
                    versionNumber: 11,
                    alignmentPatternCenters: [
                        6,
                        30,
                        54
                    ],
                    errorCorrectionLevels: [
                        {
                            ecCodewordsPerBlock: 20,
                            ecBlocks: [
                                {
                                    numBlocks: 4,
                                    dataCodewordsPerBlock: 81
                                }
                            ]
                        },
                        {
                            ecCodewordsPerBlock: 30,
                            ecBlocks: [
                                {
                                    numBlocks: 1,
                                    dataCodewordsPerBlock: 50
                                },
                                {
                                    numBlocks: 4,
                                    dataCodewordsPerBlock: 51
                                }, 
                            ]
                        },
                        {
                            ecCodewordsPerBlock: 28,
                            ecBlocks: [
                                {
                                    numBlocks: 4,
                                    dataCodewordsPerBlock: 22
                                },
                                {
                                    numBlocks: 4,
                                    dataCodewordsPerBlock: 23
                                }, 
                            ]
                        },
                        {
                            ecCodewordsPerBlock: 24,
                            ecBlocks: [
                                {
                                    numBlocks: 3,
                                    dataCodewordsPerBlock: 12
                                },
                                {
                                    numBlocks: 8,
                                    dataCodewordsPerBlock: 13
                                }, 
                            ]
                        }, 
                    ]
                },
                {
                    infoBits: 0x0C762,
                    versionNumber: 12,
                    alignmentPatternCenters: [
                        6,
                        32,
                        58
                    ],
                    errorCorrectionLevels: [
                        {
                            ecCodewordsPerBlock: 24,
                            ecBlocks: [
                                {
                                    numBlocks: 2,
                                    dataCodewordsPerBlock: 92
                                },
                                {
                                    numBlocks: 2,
                                    dataCodewordsPerBlock: 93
                                }, 
                            ]
                        },
                        {
                            ecCodewordsPerBlock: 22,
                            ecBlocks: [
                                {
                                    numBlocks: 6,
                                    dataCodewordsPerBlock: 36
                                },
                                {
                                    numBlocks: 2,
                                    dataCodewordsPerBlock: 37
                                }, 
                            ]
                        },
                        {
                            ecCodewordsPerBlock: 26,
                            ecBlocks: [
                                {
                                    numBlocks: 4,
                                    dataCodewordsPerBlock: 20
                                },
                                {
                                    numBlocks: 6,
                                    dataCodewordsPerBlock: 21
                                }, 
                            ]
                        },
                        {
                            ecCodewordsPerBlock: 28,
                            ecBlocks: [
                                {
                                    numBlocks: 7,
                                    dataCodewordsPerBlock: 14
                                },
                                {
                                    numBlocks: 4,
                                    dataCodewordsPerBlock: 15
                                }, 
                            ]
                        }, 
                    ]
                },
                {
                    infoBits: 0x0D847,
                    versionNumber: 13,
                    alignmentPatternCenters: [
                        6,
                        34,
                        62
                    ],
                    errorCorrectionLevels: [
                        {
                            ecCodewordsPerBlock: 26,
                            ecBlocks: [
                                {
                                    numBlocks: 4,
                                    dataCodewordsPerBlock: 107
                                }
                            ]
                        },
                        {
                            ecCodewordsPerBlock: 22,
                            ecBlocks: [
                                {
                                    numBlocks: 8,
                                    dataCodewordsPerBlock: 37
                                },
                                {
                                    numBlocks: 1,
                                    dataCodewordsPerBlock: 38
                                }, 
                            ]
                        },
                        {
                            ecCodewordsPerBlock: 24,
                            ecBlocks: [
                                {
                                    numBlocks: 8,
                                    dataCodewordsPerBlock: 20
                                },
                                {
                                    numBlocks: 4,
                                    dataCodewordsPerBlock: 21
                                }, 
                            ]
                        },
                        {
                            ecCodewordsPerBlock: 22,
                            ecBlocks: [
                                {
                                    numBlocks: 12,
                                    dataCodewordsPerBlock: 11
                                },
                                {
                                    numBlocks: 4,
                                    dataCodewordsPerBlock: 12
                                }, 
                            ]
                        }, 
                    ]
                },
                {
                    infoBits: 0x0E60D,
                    versionNumber: 14,
                    alignmentPatternCenters: [
                        6,
                        26,
                        46,
                        66
                    ],
                    errorCorrectionLevels: [
                        {
                            ecCodewordsPerBlock: 30,
                            ecBlocks: [
                                {
                                    numBlocks: 3,
                                    dataCodewordsPerBlock: 115
                                },
                                {
                                    numBlocks: 1,
                                    dataCodewordsPerBlock: 116
                                }, 
                            ]
                        },
                        {
                            ecCodewordsPerBlock: 24,
                            ecBlocks: [
                                {
                                    numBlocks: 4,
                                    dataCodewordsPerBlock: 40
                                },
                                {
                                    numBlocks: 5,
                                    dataCodewordsPerBlock: 41
                                }, 
                            ]
                        },
                        {
                            ecCodewordsPerBlock: 20,
                            ecBlocks: [
                                {
                                    numBlocks: 11,
                                    dataCodewordsPerBlock: 16
                                },
                                {
                                    numBlocks: 5,
                                    dataCodewordsPerBlock: 17
                                }, 
                            ]
                        },
                        {
                            ecCodewordsPerBlock: 24,
                            ecBlocks: [
                                {
                                    numBlocks: 11,
                                    dataCodewordsPerBlock: 12
                                },
                                {
                                    numBlocks: 5,
                                    dataCodewordsPerBlock: 13
                                }, 
                            ]
                        }, 
                    ]
                },
                {
                    infoBits: 0x0F928,
                    versionNumber: 15,
                    alignmentPatternCenters: [
                        6,
                        26,
                        48,
                        70
                    ],
                    errorCorrectionLevels: [
                        {
                            ecCodewordsPerBlock: 22,
                            ecBlocks: [
                                {
                                    numBlocks: 5,
                                    dataCodewordsPerBlock: 87
                                },
                                {
                                    numBlocks: 1,
                                    dataCodewordsPerBlock: 88
                                }, 
                            ]
                        },
                        {
                            ecCodewordsPerBlock: 24,
                            ecBlocks: [
                                {
                                    numBlocks: 5,
                                    dataCodewordsPerBlock: 41
                                },
                                {
                                    numBlocks: 5,
                                    dataCodewordsPerBlock: 42
                                }, 
                            ]
                        },
                        {
                            ecCodewordsPerBlock: 30,
                            ecBlocks: [
                                {
                                    numBlocks: 5,
                                    dataCodewordsPerBlock: 24
                                },
                                {
                                    numBlocks: 7,
                                    dataCodewordsPerBlock: 25
                                }, 
                            ]
                        },
                        {
                            ecCodewordsPerBlock: 24,
                            ecBlocks: [
                                {
                                    numBlocks: 11,
                                    dataCodewordsPerBlock: 12
                                },
                                {
                                    numBlocks: 7,
                                    dataCodewordsPerBlock: 13
                                }, 
                            ]
                        }, 
                    ]
                },
                {
                    infoBits: 0x10B78,
                    versionNumber: 16,
                    alignmentPatternCenters: [
                        6,
                        26,
                        50,
                        74
                    ],
                    errorCorrectionLevels: [
                        {
                            ecCodewordsPerBlock: 24,
                            ecBlocks: [
                                {
                                    numBlocks: 5,
                                    dataCodewordsPerBlock: 98
                                },
                                {
                                    numBlocks: 1,
                                    dataCodewordsPerBlock: 99
                                }, 
                            ]
                        },
                        {
                            ecCodewordsPerBlock: 28,
                            ecBlocks: [
                                {
                                    numBlocks: 7,
                                    dataCodewordsPerBlock: 45
                                },
                                {
                                    numBlocks: 3,
                                    dataCodewordsPerBlock: 46
                                }, 
                            ]
                        },
                        {
                            ecCodewordsPerBlock: 24,
                            ecBlocks: [
                                {
                                    numBlocks: 15,
                                    dataCodewordsPerBlock: 19
                                },
                                {
                                    numBlocks: 2,
                                    dataCodewordsPerBlock: 20
                                }, 
                            ]
                        },
                        {
                            ecCodewordsPerBlock: 30,
                            ecBlocks: [
                                {
                                    numBlocks: 3,
                                    dataCodewordsPerBlock: 15
                                },
                                {
                                    numBlocks: 13,
                                    dataCodewordsPerBlock: 16
                                }, 
                            ]
                        }, 
                    ]
                },
                {
                    infoBits: 0x1145D,
                    versionNumber: 17,
                    alignmentPatternCenters: [
                        6,
                        30,
                        54,
                        78
                    ],
                    errorCorrectionLevels: [
                        {
                            ecCodewordsPerBlock: 28,
                            ecBlocks: [
                                {
                                    numBlocks: 1,
                                    dataCodewordsPerBlock: 107
                                },
                                {
                                    numBlocks: 5,
                                    dataCodewordsPerBlock: 108
                                }, 
                            ]
                        },
                        {
                            ecCodewordsPerBlock: 28,
                            ecBlocks: [
                                {
                                    numBlocks: 10,
                                    dataCodewordsPerBlock: 46
                                },
                                {
                                    numBlocks: 1,
                                    dataCodewordsPerBlock: 47
                                }, 
                            ]
                        },
                        {
                            ecCodewordsPerBlock: 28,
                            ecBlocks: [
                                {
                                    numBlocks: 1,
                                    dataCodewordsPerBlock: 22
                                },
                                {
                                    numBlocks: 15,
                                    dataCodewordsPerBlock: 23
                                }, 
                            ]
                        },
                        {
                            ecCodewordsPerBlock: 28,
                            ecBlocks: [
                                {
                                    numBlocks: 2,
                                    dataCodewordsPerBlock: 14
                                },
                                {
                                    numBlocks: 17,
                                    dataCodewordsPerBlock: 15
                                }, 
                            ]
                        }, 
                    ]
                },
                {
                    infoBits: 0x12A17,
                    versionNumber: 18,
                    alignmentPatternCenters: [
                        6,
                        30,
                        56,
                        82
                    ],
                    errorCorrectionLevels: [
                        {
                            ecCodewordsPerBlock: 30,
                            ecBlocks: [
                                {
                                    numBlocks: 5,
                                    dataCodewordsPerBlock: 120
                                },
                                {
                                    numBlocks: 1,
                                    dataCodewordsPerBlock: 121
                                }, 
                            ]
                        },
                        {
                            ecCodewordsPerBlock: 26,
                            ecBlocks: [
                                {
                                    numBlocks: 9,
                                    dataCodewordsPerBlock: 43
                                },
                                {
                                    numBlocks: 4,
                                    dataCodewordsPerBlock: 44
                                }, 
                            ]
                        },
                        {
                            ecCodewordsPerBlock: 28,
                            ecBlocks: [
                                {
                                    numBlocks: 17,
                                    dataCodewordsPerBlock: 22
                                },
                                {
                                    numBlocks: 1,
                                    dataCodewordsPerBlock: 23
                                }, 
                            ]
                        },
                        {
                            ecCodewordsPerBlock: 28,
                            ecBlocks: [
                                {
                                    numBlocks: 2,
                                    dataCodewordsPerBlock: 14
                                },
                                {
                                    numBlocks: 19,
                                    dataCodewordsPerBlock: 15
                                }, 
                            ]
                        }, 
                    ]
                },
                {
                    infoBits: 0x13532,
                    versionNumber: 19,
                    alignmentPatternCenters: [
                        6,
                        30,
                        58,
                        86
                    ],
                    errorCorrectionLevels: [
                        {
                            ecCodewordsPerBlock: 28,
                            ecBlocks: [
                                {
                                    numBlocks: 3,
                                    dataCodewordsPerBlock: 113
                                },
                                {
                                    numBlocks: 4,
                                    dataCodewordsPerBlock: 114
                                }, 
                            ]
                        },
                        {
                            ecCodewordsPerBlock: 26,
                            ecBlocks: [
                                {
                                    numBlocks: 3,
                                    dataCodewordsPerBlock: 44
                                },
                                {
                                    numBlocks: 11,
                                    dataCodewordsPerBlock: 45
                                }, 
                            ]
                        },
                        {
                            ecCodewordsPerBlock: 26,
                            ecBlocks: [
                                {
                                    numBlocks: 17,
                                    dataCodewordsPerBlock: 21
                                },
                                {
                                    numBlocks: 4,
                                    dataCodewordsPerBlock: 22
                                }, 
                            ]
                        },
                        {
                            ecCodewordsPerBlock: 26,
                            ecBlocks: [
                                {
                                    numBlocks: 9,
                                    dataCodewordsPerBlock: 13
                                },
                                {
                                    numBlocks: 16,
                                    dataCodewordsPerBlock: 14
                                }, 
                            ]
                        }, 
                    ]
                },
                {
                    infoBits: 0x149A6,
                    versionNumber: 20,
                    alignmentPatternCenters: [
                        6,
                        34,
                        62,
                        90
                    ],
                    errorCorrectionLevels: [
                        {
                            ecCodewordsPerBlock: 28,
                            ecBlocks: [
                                {
                                    numBlocks: 3,
                                    dataCodewordsPerBlock: 107
                                },
                                {
                                    numBlocks: 5,
                                    dataCodewordsPerBlock: 108
                                }, 
                            ]
                        },
                        {
                            ecCodewordsPerBlock: 26,
                            ecBlocks: [
                                {
                                    numBlocks: 3,
                                    dataCodewordsPerBlock: 41
                                },
                                {
                                    numBlocks: 13,
                                    dataCodewordsPerBlock: 42
                                }, 
                            ]
                        },
                        {
                            ecCodewordsPerBlock: 30,
                            ecBlocks: [
                                {
                                    numBlocks: 15,
                                    dataCodewordsPerBlock: 24
                                },
                                {
                                    numBlocks: 5,
                                    dataCodewordsPerBlock: 25
                                }, 
                            ]
                        },
                        {
                            ecCodewordsPerBlock: 28,
                            ecBlocks: [
                                {
                                    numBlocks: 15,
                                    dataCodewordsPerBlock: 15
                                },
                                {
                                    numBlocks: 10,
                                    dataCodewordsPerBlock: 16
                                }, 
                            ]
                        }, 
                    ]
                },
                {
                    infoBits: 0x15683,
                    versionNumber: 21,
                    alignmentPatternCenters: [
                        6,
                        28,
                        50,
                        72,
                        94
                    ],
                    errorCorrectionLevels: [
                        {
                            ecCodewordsPerBlock: 28,
                            ecBlocks: [
                                {
                                    numBlocks: 4,
                                    dataCodewordsPerBlock: 116
                                },
                                {
                                    numBlocks: 4,
                                    dataCodewordsPerBlock: 117
                                }, 
                            ]
                        },
                        {
                            ecCodewordsPerBlock: 26,
                            ecBlocks: [
                                {
                                    numBlocks: 17,
                                    dataCodewordsPerBlock: 42
                                }
                            ]
                        },
                        {
                            ecCodewordsPerBlock: 28,
                            ecBlocks: [
                                {
                                    numBlocks: 17,
                                    dataCodewordsPerBlock: 22
                                },
                                {
                                    numBlocks: 6,
                                    dataCodewordsPerBlock: 23
                                }, 
                            ]
                        },
                        {
                            ecCodewordsPerBlock: 30,
                            ecBlocks: [
                                {
                                    numBlocks: 19,
                                    dataCodewordsPerBlock: 16
                                },
                                {
                                    numBlocks: 6,
                                    dataCodewordsPerBlock: 17
                                }, 
                            ]
                        }, 
                    ]
                },
                {
                    infoBits: 0x168C9,
                    versionNumber: 22,
                    alignmentPatternCenters: [
                        6,
                        26,
                        50,
                        74,
                        98
                    ],
                    errorCorrectionLevels: [
                        {
                            ecCodewordsPerBlock: 28,
                            ecBlocks: [
                                {
                                    numBlocks: 2,
                                    dataCodewordsPerBlock: 111
                                },
                                {
                                    numBlocks: 7,
                                    dataCodewordsPerBlock: 112
                                }, 
                            ]
                        },
                        {
                            ecCodewordsPerBlock: 28,
                            ecBlocks: [
                                {
                                    numBlocks: 17,
                                    dataCodewordsPerBlock: 46
                                }
                            ]
                        },
                        {
                            ecCodewordsPerBlock: 30,
                            ecBlocks: [
                                {
                                    numBlocks: 7,
                                    dataCodewordsPerBlock: 24
                                },
                                {
                                    numBlocks: 16,
                                    dataCodewordsPerBlock: 25
                                }, 
                            ]
                        },
                        {
                            ecCodewordsPerBlock: 24,
                            ecBlocks: [
                                {
                                    numBlocks: 34,
                                    dataCodewordsPerBlock: 13
                                }
                            ]
                        }, 
                    ]
                },
                {
                    infoBits: 0x177EC,
                    versionNumber: 23,
                    alignmentPatternCenters: [
                        6,
                        30,
                        54,
                        74,
                        102
                    ],
                    errorCorrectionLevels: [
                        {
                            ecCodewordsPerBlock: 30,
                            ecBlocks: [
                                {
                                    numBlocks: 4,
                                    dataCodewordsPerBlock: 121
                                },
                                {
                                    numBlocks: 5,
                                    dataCodewordsPerBlock: 122
                                }, 
                            ]
                        },
                        {
                            ecCodewordsPerBlock: 28,
                            ecBlocks: [
                                {
                                    numBlocks: 4,
                                    dataCodewordsPerBlock: 47
                                },
                                {
                                    numBlocks: 14,
                                    dataCodewordsPerBlock: 48
                                }, 
                            ]
                        },
                        {
                            ecCodewordsPerBlock: 30,
                            ecBlocks: [
                                {
                                    numBlocks: 11,
                                    dataCodewordsPerBlock: 24
                                },
                                {
                                    numBlocks: 14,
                                    dataCodewordsPerBlock: 25
                                }, 
                            ]
                        },
                        {
                            ecCodewordsPerBlock: 30,
                            ecBlocks: [
                                {
                                    numBlocks: 16,
                                    dataCodewordsPerBlock: 15
                                },
                                {
                                    numBlocks: 14,
                                    dataCodewordsPerBlock: 16
                                }, 
                            ]
                        }, 
                    ]
                },
                {
                    infoBits: 0x18EC4,
                    versionNumber: 24,
                    alignmentPatternCenters: [
                        6,
                        28,
                        54,
                        80,
                        106
                    ],
                    errorCorrectionLevels: [
                        {
                            ecCodewordsPerBlock: 30,
                            ecBlocks: [
                                {
                                    numBlocks: 6,
                                    dataCodewordsPerBlock: 117
                                },
                                {
                                    numBlocks: 4,
                                    dataCodewordsPerBlock: 118
                                }, 
                            ]
                        },
                        {
                            ecCodewordsPerBlock: 28,
                            ecBlocks: [
                                {
                                    numBlocks: 6,
                                    dataCodewordsPerBlock: 45
                                },
                                {
                                    numBlocks: 14,
                                    dataCodewordsPerBlock: 46
                                }, 
                            ]
                        },
                        {
                            ecCodewordsPerBlock: 30,
                            ecBlocks: [
                                {
                                    numBlocks: 11,
                                    dataCodewordsPerBlock: 24
                                },
                                {
                                    numBlocks: 16,
                                    dataCodewordsPerBlock: 25
                                }, 
                            ]
                        },
                        {
                            ecCodewordsPerBlock: 30,
                            ecBlocks: [
                                {
                                    numBlocks: 30,
                                    dataCodewordsPerBlock: 16
                                },
                                {
                                    numBlocks: 2,
                                    dataCodewordsPerBlock: 17
                                }, 
                            ]
                        }, 
                    ]
                },
                {
                    infoBits: 0x191E1,
                    versionNumber: 25,
                    alignmentPatternCenters: [
                        6,
                        32,
                        58,
                        84,
                        110
                    ],
                    errorCorrectionLevels: [
                        {
                            ecCodewordsPerBlock: 26,
                            ecBlocks: [
                                {
                                    numBlocks: 8,
                                    dataCodewordsPerBlock: 106
                                },
                                {
                                    numBlocks: 4,
                                    dataCodewordsPerBlock: 107
                                }, 
                            ]
                        },
                        {
                            ecCodewordsPerBlock: 28,
                            ecBlocks: [
                                {
                                    numBlocks: 8,
                                    dataCodewordsPerBlock: 47
                                },
                                {
                                    numBlocks: 13,
                                    dataCodewordsPerBlock: 48
                                }, 
                            ]
                        },
                        {
                            ecCodewordsPerBlock: 30,
                            ecBlocks: [
                                {
                                    numBlocks: 7,
                                    dataCodewordsPerBlock: 24
                                },
                                {
                                    numBlocks: 22,
                                    dataCodewordsPerBlock: 25
                                }, 
                            ]
                        },
                        {
                            ecCodewordsPerBlock: 30,
                            ecBlocks: [
                                {
                                    numBlocks: 22,
                                    dataCodewordsPerBlock: 15
                                },
                                {
                                    numBlocks: 13,
                                    dataCodewordsPerBlock: 16
                                }, 
                            ]
                        }, 
                    ]
                },
                {
                    infoBits: 0x1AFAB,
                    versionNumber: 26,
                    alignmentPatternCenters: [
                        6,
                        30,
                        58,
                        86,
                        114
                    ],
                    errorCorrectionLevels: [
                        {
                            ecCodewordsPerBlock: 28,
                            ecBlocks: [
                                {
                                    numBlocks: 10,
                                    dataCodewordsPerBlock: 114
                                },
                                {
                                    numBlocks: 2,
                                    dataCodewordsPerBlock: 115
                                }, 
                            ]
                        },
                        {
                            ecCodewordsPerBlock: 28,
                            ecBlocks: [
                                {
                                    numBlocks: 19,
                                    dataCodewordsPerBlock: 46
                                },
                                {
                                    numBlocks: 4,
                                    dataCodewordsPerBlock: 47
                                }, 
                            ]
                        },
                        {
                            ecCodewordsPerBlock: 28,
                            ecBlocks: [
                                {
                                    numBlocks: 28,
                                    dataCodewordsPerBlock: 22
                                },
                                {
                                    numBlocks: 6,
                                    dataCodewordsPerBlock: 23
                                }, 
                            ]
                        },
                        {
                            ecCodewordsPerBlock: 30,
                            ecBlocks: [
                                {
                                    numBlocks: 33,
                                    dataCodewordsPerBlock: 16
                                },
                                {
                                    numBlocks: 4,
                                    dataCodewordsPerBlock: 17
                                }, 
                            ]
                        }, 
                    ]
                },
                {
                    infoBits: 0x1B08E,
                    versionNumber: 27,
                    alignmentPatternCenters: [
                        6,
                        34,
                        62,
                        90,
                        118
                    ],
                    errorCorrectionLevels: [
                        {
                            ecCodewordsPerBlock: 30,
                            ecBlocks: [
                                {
                                    numBlocks: 8,
                                    dataCodewordsPerBlock: 122
                                },
                                {
                                    numBlocks: 4,
                                    dataCodewordsPerBlock: 123
                                }, 
                            ]
                        },
                        {
                            ecCodewordsPerBlock: 28,
                            ecBlocks: [
                                {
                                    numBlocks: 22,
                                    dataCodewordsPerBlock: 45
                                },
                                {
                                    numBlocks: 3,
                                    dataCodewordsPerBlock: 46
                                }, 
                            ]
                        },
                        {
                            ecCodewordsPerBlock: 30,
                            ecBlocks: [
                                {
                                    numBlocks: 8,
                                    dataCodewordsPerBlock: 23
                                },
                                {
                                    numBlocks: 26,
                                    dataCodewordsPerBlock: 24
                                }, 
                            ]
                        },
                        {
                            ecCodewordsPerBlock: 30,
                            ecBlocks: [
                                {
                                    numBlocks: 12,
                                    dataCodewordsPerBlock: 15
                                },
                                {
                                    numBlocks: 28,
                                    dataCodewordsPerBlock: 16
                                }, 
                            ]
                        }, 
                    ]
                },
                {
                    infoBits: 0x1CC1A,
                    versionNumber: 28,
                    alignmentPatternCenters: [
                        6,
                        26,
                        50,
                        74,
                        98,
                        122
                    ],
                    errorCorrectionLevels: [
                        {
                            ecCodewordsPerBlock: 30,
                            ecBlocks: [
                                {
                                    numBlocks: 3,
                                    dataCodewordsPerBlock: 117
                                },
                                {
                                    numBlocks: 10,
                                    dataCodewordsPerBlock: 118
                                }, 
                            ]
                        },
                        {
                            ecCodewordsPerBlock: 28,
                            ecBlocks: [
                                {
                                    numBlocks: 3,
                                    dataCodewordsPerBlock: 45
                                },
                                {
                                    numBlocks: 23,
                                    dataCodewordsPerBlock: 46
                                }, 
                            ]
                        },
                        {
                            ecCodewordsPerBlock: 30,
                            ecBlocks: [
                                {
                                    numBlocks: 4,
                                    dataCodewordsPerBlock: 24
                                },
                                {
                                    numBlocks: 31,
                                    dataCodewordsPerBlock: 25
                                }, 
                            ]
                        },
                        {
                            ecCodewordsPerBlock: 30,
                            ecBlocks: [
                                {
                                    numBlocks: 11,
                                    dataCodewordsPerBlock: 15
                                },
                                {
                                    numBlocks: 31,
                                    dataCodewordsPerBlock: 16
                                }, 
                            ]
                        }, 
                    ]
                },
                {
                    infoBits: 0x1D33F,
                    versionNumber: 29,
                    alignmentPatternCenters: [
                        6,
                        30,
                        54,
                        78,
                        102,
                        126
                    ],
                    errorCorrectionLevels: [
                        {
                            ecCodewordsPerBlock: 30,
                            ecBlocks: [
                                {
                                    numBlocks: 7,
                                    dataCodewordsPerBlock: 116
                                },
                                {
                                    numBlocks: 7,
                                    dataCodewordsPerBlock: 117
                                }, 
                            ]
                        },
                        {
                            ecCodewordsPerBlock: 28,
                            ecBlocks: [
                                {
                                    numBlocks: 21,
                                    dataCodewordsPerBlock: 45
                                },
                                {
                                    numBlocks: 7,
                                    dataCodewordsPerBlock: 46
                                }, 
                            ]
                        },
                        {
                            ecCodewordsPerBlock: 30,
                            ecBlocks: [
                                {
                                    numBlocks: 1,
                                    dataCodewordsPerBlock: 23
                                },
                                {
                                    numBlocks: 37,
                                    dataCodewordsPerBlock: 24
                                }, 
                            ]
                        },
                        {
                            ecCodewordsPerBlock: 30,
                            ecBlocks: [
                                {
                                    numBlocks: 19,
                                    dataCodewordsPerBlock: 15
                                },
                                {
                                    numBlocks: 26,
                                    dataCodewordsPerBlock: 16
                                }, 
                            ]
                        }, 
                    ]
                },
                {
                    infoBits: 0x1ED75,
                    versionNumber: 30,
                    alignmentPatternCenters: [
                        6,
                        26,
                        52,
                        78,
                        104,
                        130
                    ],
                    errorCorrectionLevels: [
                        {
                            ecCodewordsPerBlock: 30,
                            ecBlocks: [
                                {
                                    numBlocks: 5,
                                    dataCodewordsPerBlock: 115
                                },
                                {
                                    numBlocks: 10,
                                    dataCodewordsPerBlock: 116
                                }, 
                            ]
                        },
                        {
                            ecCodewordsPerBlock: 28,
                            ecBlocks: [
                                {
                                    numBlocks: 19,
                                    dataCodewordsPerBlock: 47
                                },
                                {
                                    numBlocks: 10,
                                    dataCodewordsPerBlock: 48
                                }, 
                            ]
                        },
                        {
                            ecCodewordsPerBlock: 30,
                            ecBlocks: [
                                {
                                    numBlocks: 15,
                                    dataCodewordsPerBlock: 24
                                },
                                {
                                    numBlocks: 25,
                                    dataCodewordsPerBlock: 25
                                }, 
                            ]
                        },
                        {
                            ecCodewordsPerBlock: 30,
                            ecBlocks: [
                                {
                                    numBlocks: 23,
                                    dataCodewordsPerBlock: 15
                                },
                                {
                                    numBlocks: 25,
                                    dataCodewordsPerBlock: 16
                                }, 
                            ]
                        }, 
                    ]
                },
                {
                    infoBits: 0x1F250,
                    versionNumber: 31,
                    alignmentPatternCenters: [
                        6,
                        30,
                        56,
                        82,
                        108,
                        134
                    ],
                    errorCorrectionLevels: [
                        {
                            ecCodewordsPerBlock: 30,
                            ecBlocks: [
                                {
                                    numBlocks: 13,
                                    dataCodewordsPerBlock: 115
                                },
                                {
                                    numBlocks: 3,
                                    dataCodewordsPerBlock: 116
                                }, 
                            ]
                        },
                        {
                            ecCodewordsPerBlock: 28,
                            ecBlocks: [
                                {
                                    numBlocks: 2,
                                    dataCodewordsPerBlock: 46
                                },
                                {
                                    numBlocks: 29,
                                    dataCodewordsPerBlock: 47
                                }, 
                            ]
                        },
                        {
                            ecCodewordsPerBlock: 30,
                            ecBlocks: [
                                {
                                    numBlocks: 42,
                                    dataCodewordsPerBlock: 24
                                },
                                {
                                    numBlocks: 1,
                                    dataCodewordsPerBlock: 25
                                }, 
                            ]
                        },
                        {
                            ecCodewordsPerBlock: 30,
                            ecBlocks: [
                                {
                                    numBlocks: 23,
                                    dataCodewordsPerBlock: 15
                                },
                                {
                                    numBlocks: 28,
                                    dataCodewordsPerBlock: 16
                                }, 
                            ]
                        }, 
                    ]
                },
                {
                    infoBits: 0x209D5,
                    versionNumber: 32,
                    alignmentPatternCenters: [
                        6,
                        34,
                        60,
                        86,
                        112,
                        138
                    ],
                    errorCorrectionLevels: [
                        {
                            ecCodewordsPerBlock: 30,
                            ecBlocks: [
                                {
                                    numBlocks: 17,
                                    dataCodewordsPerBlock: 115
                                }
                            ]
                        },
                        {
                            ecCodewordsPerBlock: 28,
                            ecBlocks: [
                                {
                                    numBlocks: 10,
                                    dataCodewordsPerBlock: 46
                                },
                                {
                                    numBlocks: 23,
                                    dataCodewordsPerBlock: 47
                                }, 
                            ]
                        },
                        {
                            ecCodewordsPerBlock: 30,
                            ecBlocks: [
                                {
                                    numBlocks: 10,
                                    dataCodewordsPerBlock: 24
                                },
                                {
                                    numBlocks: 35,
                                    dataCodewordsPerBlock: 25
                                }, 
                            ]
                        },
                        {
                            ecCodewordsPerBlock: 30,
                            ecBlocks: [
                                {
                                    numBlocks: 19,
                                    dataCodewordsPerBlock: 15
                                },
                                {
                                    numBlocks: 35,
                                    dataCodewordsPerBlock: 16
                                }, 
                            ]
                        }, 
                    ]
                },
                {
                    infoBits: 0x216F0,
                    versionNumber: 33,
                    alignmentPatternCenters: [
                        6,
                        30,
                        58,
                        86,
                        114,
                        142
                    ],
                    errorCorrectionLevels: [
                        {
                            ecCodewordsPerBlock: 30,
                            ecBlocks: [
                                {
                                    numBlocks: 17,
                                    dataCodewordsPerBlock: 115
                                },
                                {
                                    numBlocks: 1,
                                    dataCodewordsPerBlock: 116
                                }, 
                            ]
                        },
                        {
                            ecCodewordsPerBlock: 28,
                            ecBlocks: [
                                {
                                    numBlocks: 14,
                                    dataCodewordsPerBlock: 46
                                },
                                {
                                    numBlocks: 21,
                                    dataCodewordsPerBlock: 47
                                }, 
                            ]
                        },
                        {
                            ecCodewordsPerBlock: 30,
                            ecBlocks: [
                                {
                                    numBlocks: 29,
                                    dataCodewordsPerBlock: 24
                                },
                                {
                                    numBlocks: 19,
                                    dataCodewordsPerBlock: 25
                                }, 
                            ]
                        },
                        {
                            ecCodewordsPerBlock: 30,
                            ecBlocks: [
                                {
                                    numBlocks: 11,
                                    dataCodewordsPerBlock: 15
                                },
                                {
                                    numBlocks: 46,
                                    dataCodewordsPerBlock: 16
                                }, 
                            ]
                        }, 
                    ]
                },
                {
                    infoBits: 0x228BA,
                    versionNumber: 34,
                    alignmentPatternCenters: [
                        6,
                        34,
                        62,
                        90,
                        118,
                        146
                    ],
                    errorCorrectionLevels: [
                        {
                            ecCodewordsPerBlock: 30,
                            ecBlocks: [
                                {
                                    numBlocks: 13,
                                    dataCodewordsPerBlock: 115
                                },
                                {
                                    numBlocks: 6,
                                    dataCodewordsPerBlock: 116
                                }, 
                            ]
                        },
                        {
                            ecCodewordsPerBlock: 28,
                            ecBlocks: [
                                {
                                    numBlocks: 14,
                                    dataCodewordsPerBlock: 46
                                },
                                {
                                    numBlocks: 23,
                                    dataCodewordsPerBlock: 47
                                }, 
                            ]
                        },
                        {
                            ecCodewordsPerBlock: 30,
                            ecBlocks: [
                                {
                                    numBlocks: 44,
                                    dataCodewordsPerBlock: 24
                                },
                                {
                                    numBlocks: 7,
                                    dataCodewordsPerBlock: 25
                                }, 
                            ]
                        },
                        {
                            ecCodewordsPerBlock: 30,
                            ecBlocks: [
                                {
                                    numBlocks: 59,
                                    dataCodewordsPerBlock: 16
                                },
                                {
                                    numBlocks: 1,
                                    dataCodewordsPerBlock: 17
                                }, 
                            ]
                        }, 
                    ]
                },
                {
                    infoBits: 0x2379F,
                    versionNumber: 35,
                    alignmentPatternCenters: [
                        6,
                        30,
                        54,
                        78,
                        102,
                        126,
                        150
                    ],
                    errorCorrectionLevels: [
                        {
                            ecCodewordsPerBlock: 30,
                            ecBlocks: [
                                {
                                    numBlocks: 12,
                                    dataCodewordsPerBlock: 121
                                },
                                {
                                    numBlocks: 7,
                                    dataCodewordsPerBlock: 122
                                }, 
                            ]
                        },
                        {
                            ecCodewordsPerBlock: 28,
                            ecBlocks: [
                                {
                                    numBlocks: 12,
                                    dataCodewordsPerBlock: 47
                                },
                                {
                                    numBlocks: 26,
                                    dataCodewordsPerBlock: 48
                                }, 
                            ]
                        },
                        {
                            ecCodewordsPerBlock: 30,
                            ecBlocks: [
                                {
                                    numBlocks: 39,
                                    dataCodewordsPerBlock: 24
                                },
                                {
                                    numBlocks: 14,
                                    dataCodewordsPerBlock: 25
                                }, 
                            ]
                        },
                        {
                            ecCodewordsPerBlock: 30,
                            ecBlocks: [
                                {
                                    numBlocks: 22,
                                    dataCodewordsPerBlock: 15
                                },
                                {
                                    numBlocks: 41,
                                    dataCodewordsPerBlock: 16
                                }, 
                            ]
                        }, 
                    ]
                },
                {
                    infoBits: 0x24B0B,
                    versionNumber: 36,
                    alignmentPatternCenters: [
                        6,
                        24,
                        50,
                        76,
                        102,
                        128,
                        154
                    ],
                    errorCorrectionLevels: [
                        {
                            ecCodewordsPerBlock: 30,
                            ecBlocks: [
                                {
                                    numBlocks: 6,
                                    dataCodewordsPerBlock: 121
                                },
                                {
                                    numBlocks: 14,
                                    dataCodewordsPerBlock: 122
                                }, 
                            ]
                        },
                        {
                            ecCodewordsPerBlock: 28,
                            ecBlocks: [
                                {
                                    numBlocks: 6,
                                    dataCodewordsPerBlock: 47
                                },
                                {
                                    numBlocks: 34,
                                    dataCodewordsPerBlock: 48
                                }, 
                            ]
                        },
                        {
                            ecCodewordsPerBlock: 30,
                            ecBlocks: [
                                {
                                    numBlocks: 46,
                                    dataCodewordsPerBlock: 24
                                },
                                {
                                    numBlocks: 10,
                                    dataCodewordsPerBlock: 25
                                }, 
                            ]
                        },
                        {
                            ecCodewordsPerBlock: 30,
                            ecBlocks: [
                                {
                                    numBlocks: 2,
                                    dataCodewordsPerBlock: 15
                                },
                                {
                                    numBlocks: 64,
                                    dataCodewordsPerBlock: 16
                                }, 
                            ]
                        }, 
                    ]
                },
                {
                    infoBits: 0x2542E,
                    versionNumber: 37,
                    alignmentPatternCenters: [
                        6,
                        28,
                        54,
                        80,
                        106,
                        132,
                        158
                    ],
                    errorCorrectionLevels: [
                        {
                            ecCodewordsPerBlock: 30,
                            ecBlocks: [
                                {
                                    numBlocks: 17,
                                    dataCodewordsPerBlock: 122
                                },
                                {
                                    numBlocks: 4,
                                    dataCodewordsPerBlock: 123
                                }, 
                            ]
                        },
                        {
                            ecCodewordsPerBlock: 28,
                            ecBlocks: [
                                {
                                    numBlocks: 29,
                                    dataCodewordsPerBlock: 46
                                },
                                {
                                    numBlocks: 14,
                                    dataCodewordsPerBlock: 47
                                }, 
                            ]
                        },
                        {
                            ecCodewordsPerBlock: 30,
                            ecBlocks: [
                                {
                                    numBlocks: 49,
                                    dataCodewordsPerBlock: 24
                                },
                                {
                                    numBlocks: 10,
                                    dataCodewordsPerBlock: 25
                                }, 
                            ]
                        },
                        {
                            ecCodewordsPerBlock: 30,
                            ecBlocks: [
                                {
                                    numBlocks: 24,
                                    dataCodewordsPerBlock: 15
                                },
                                {
                                    numBlocks: 46,
                                    dataCodewordsPerBlock: 16
                                }, 
                            ]
                        }, 
                    ]
                },
                {
                    infoBits: 0x26A64,
                    versionNumber: 38,
                    alignmentPatternCenters: [
                        6,
                        32,
                        58,
                        84,
                        110,
                        136,
                        162
                    ],
                    errorCorrectionLevels: [
                        {
                            ecCodewordsPerBlock: 30,
                            ecBlocks: [
                                {
                                    numBlocks: 4,
                                    dataCodewordsPerBlock: 122
                                },
                                {
                                    numBlocks: 18,
                                    dataCodewordsPerBlock: 123
                                }, 
                            ]
                        },
                        {
                            ecCodewordsPerBlock: 28,
                            ecBlocks: [
                                {
                                    numBlocks: 13,
                                    dataCodewordsPerBlock: 46
                                },
                                {
                                    numBlocks: 32,
                                    dataCodewordsPerBlock: 47
                                }, 
                            ]
                        },
                        {
                            ecCodewordsPerBlock: 30,
                            ecBlocks: [
                                {
                                    numBlocks: 48,
                                    dataCodewordsPerBlock: 24
                                },
                                {
                                    numBlocks: 14,
                                    dataCodewordsPerBlock: 25
                                }, 
                            ]
                        },
                        {
                            ecCodewordsPerBlock: 30,
                            ecBlocks: [
                                {
                                    numBlocks: 42,
                                    dataCodewordsPerBlock: 15
                                },
                                {
                                    numBlocks: 32,
                                    dataCodewordsPerBlock: 16
                                }, 
                            ]
                        }, 
                    ]
                },
                {
                    infoBits: 0x27541,
                    versionNumber: 39,
                    alignmentPatternCenters: [
                        6,
                        26,
                        54,
                        82,
                        110,
                        138,
                        166
                    ],
                    errorCorrectionLevels: [
                        {
                            ecCodewordsPerBlock: 30,
                            ecBlocks: [
                                {
                                    numBlocks: 20,
                                    dataCodewordsPerBlock: 117
                                },
                                {
                                    numBlocks: 4,
                                    dataCodewordsPerBlock: 118
                                }, 
                            ]
                        },
                        {
                            ecCodewordsPerBlock: 28,
                            ecBlocks: [
                                {
                                    numBlocks: 40,
                                    dataCodewordsPerBlock: 47
                                },
                                {
                                    numBlocks: 7,
                                    dataCodewordsPerBlock: 48
                                }, 
                            ]
                        },
                        {
                            ecCodewordsPerBlock: 30,
                            ecBlocks: [
                                {
                                    numBlocks: 43,
                                    dataCodewordsPerBlock: 24
                                },
                                {
                                    numBlocks: 22,
                                    dataCodewordsPerBlock: 25
                                }, 
                            ]
                        },
                        {
                            ecCodewordsPerBlock: 30,
                            ecBlocks: [
                                {
                                    numBlocks: 10,
                                    dataCodewordsPerBlock: 15
                                },
                                {
                                    numBlocks: 67,
                                    dataCodewordsPerBlock: 16
                                }, 
                            ]
                        }, 
                    ]
                },
                {
                    infoBits: 0x28C69,
                    versionNumber: 40,
                    alignmentPatternCenters: [
                        6,
                        30,
                        58,
                        86,
                        114,
                        142,
                        170
                    ],
                    errorCorrectionLevels: [
                        {
                            ecCodewordsPerBlock: 30,
                            ecBlocks: [
                                {
                                    numBlocks: 19,
                                    dataCodewordsPerBlock: 118
                                },
                                {
                                    numBlocks: 6,
                                    dataCodewordsPerBlock: 119
                                }, 
                            ]
                        },
                        {
                            ecCodewordsPerBlock: 28,
                            ecBlocks: [
                                {
                                    numBlocks: 18,
                                    dataCodewordsPerBlock: 47
                                },
                                {
                                    numBlocks: 31,
                                    dataCodewordsPerBlock: 48
                                }, 
                            ]
                        },
                        {
                            ecCodewordsPerBlock: 30,
                            ecBlocks: [
                                {
                                    numBlocks: 34,
                                    dataCodewordsPerBlock: 24
                                },
                                {
                                    numBlocks: 34,
                                    dataCodewordsPerBlock: 25
                                }, 
                            ]
                        },
                        {
                            ecCodewordsPerBlock: 30,
                            ecBlocks: [
                                {
                                    numBlocks: 20,
                                    dataCodewordsPerBlock: 15
                                },
                                {
                                    numBlocks: 61,
                                    dataCodewordsPerBlock: 16
                                }, 
                            ]
                        }, 
                    ]
                }, 
            ];
        /***/ },
        /* 11 */ /***/ function(module, exports, __webpack_require__) {
            "use strict";
            Object.defineProperty(exports, "__esModule", {
                value: true
            });
            var BitMatrix_1 = __webpack_require__(0);
            function squareToQuadrilateral(p1, p2, p3, p4) {
                var dx3 = p1.x - p2.x + p3.x - p4.x;
                var dy3 = p1.y - p2.y + p3.y - p4.y;
                if (dx3 === 0 && dy3 === 0) return {
                    a11: p2.x - p1.x,
                    a12: p2.y - p1.y,
                    a13: 0,
                    a21: p3.x - p2.x,
                    a22: p3.y - p2.y,
                    a23: 0,
                    a31: p1.x,
                    a32: p1.y,
                    a33: 1
                };
                else {
                    var dx1 = p2.x - p3.x;
                    var dx2 = p4.x - p3.x;
                    var dy1 = p2.y - p3.y;
                    var dy2 = p4.y - p3.y;
                    var denominator = dx1 * dy2 - dx2 * dy1;
                    var a13 = (dx3 * dy2 - dx2 * dy3) / denominator;
                    var a23 = (dx1 * dy3 - dx3 * dy1) / denominator;
                    return {
                        a11: p2.x - p1.x + a13 * p2.x,
                        a12: p2.y - p1.y + a13 * p2.y,
                        a13: a13,
                        a21: p4.x - p1.x + a23 * p4.x,
                        a22: p4.y - p1.y + a23 * p4.y,
                        a23: a23,
                        a31: p1.x,
                        a32: p1.y,
                        a33: 1
                    };
                }
            }
            function quadrilateralToSquare(p1, p2, p3, p4) {
                // Here, the adjoint serves as the inverse:
                var sToQ = squareToQuadrilateral(p1, p2, p3, p4);
                return {
                    a11: sToQ.a22 * sToQ.a33 - sToQ.a23 * sToQ.a32,
                    a12: sToQ.a13 * sToQ.a32 - sToQ.a12 * sToQ.a33,
                    a13: sToQ.a12 * sToQ.a23 - sToQ.a13 * sToQ.a22,
                    a21: sToQ.a23 * sToQ.a31 - sToQ.a21 * sToQ.a33,
                    a22: sToQ.a11 * sToQ.a33 - sToQ.a13 * sToQ.a31,
                    a23: sToQ.a13 * sToQ.a21 - sToQ.a11 * sToQ.a23,
                    a31: sToQ.a21 * sToQ.a32 - sToQ.a22 * sToQ.a31,
                    a32: sToQ.a12 * sToQ.a31 - sToQ.a11 * sToQ.a32,
                    a33: sToQ.a11 * sToQ.a22 - sToQ.a12 * sToQ.a21
                };
            }
            function times(a, b) {
                return {
                    a11: a.a11 * b.a11 + a.a21 * b.a12 + a.a31 * b.a13,
                    a12: a.a12 * b.a11 + a.a22 * b.a12 + a.a32 * b.a13,
                    a13: a.a13 * b.a11 + a.a23 * b.a12 + a.a33 * b.a13,
                    a21: a.a11 * b.a21 + a.a21 * b.a22 + a.a31 * b.a23,
                    a22: a.a12 * b.a21 + a.a22 * b.a22 + a.a32 * b.a23,
                    a23: a.a13 * b.a21 + a.a23 * b.a22 + a.a33 * b.a23,
                    a31: a.a11 * b.a31 + a.a21 * b.a32 + a.a31 * b.a33,
                    a32: a.a12 * b.a31 + a.a22 * b.a32 + a.a32 * b.a33,
                    a33: a.a13 * b.a31 + a.a23 * b.a32 + a.a33 * b.a33
                };
            }
            function extract(image, location) {
                var qToS = quadrilateralToSquare({
                    x: 3.5,
                    y: 3.5
                }, {
                    x: location.dimension - 3.5,
                    y: 3.5
                }, {
                    x: location.dimension - 6.5,
                    y: location.dimension - 6.5
                }, {
                    x: 3.5,
                    y: location.dimension - 3.5
                });
                var sToQ = squareToQuadrilateral(location.topLeft, location.topRight, location.alignmentPattern, location.bottomLeft);
                var transform = times(sToQ, qToS);
                var matrix = BitMatrix_1.BitMatrix.createEmpty(location.dimension, location.dimension);
                var mappingFunction = function(x, y) {
                    var denominator = transform.a13 * x + transform.a23 * y + transform.a33;
                    return {
                        x: (transform.a11 * x + transform.a21 * y + transform.a31) / denominator,
                        y: (transform.a12 * x + transform.a22 * y + transform.a32) / denominator
                    };
                };
                for(var y1 = 0; y1 < location.dimension; y1++)for(var x1 = 0; x1 < location.dimension; x1++){
                    var xValue = x1 + 0.5;
                    var yValue = y1 + 0.5;
                    var sourcePixel = mappingFunction(xValue, yValue);
                    matrix.set(x1, y1, image.get(Math.floor(sourcePixel.x), Math.floor(sourcePixel.y)));
                }
                return {
                    matrix: matrix,
                    mappingFunction: mappingFunction
                };
            }
            exports.extract = extract;
        /***/ },
        /* 12 */ /***/ function(module, exports, __webpack_require__) {
            "use strict";
            Object.defineProperty(exports, "__esModule", {
                value: true
            });
            var MAX_FINDERPATTERNS_TO_SEARCH = 4;
            var MIN_QUAD_RATIO = 0.5;
            var MAX_QUAD_RATIO = 1.5;
            var distance = function(a, b) {
                return Math.sqrt(Math.pow(b.x - a.x, 2) + Math.pow(b.y - a.y, 2));
            };
            function sum(values) {
                return values.reduce(function(a, b) {
                    return a + b;
                });
            }
            // Takes three finder patterns and organizes them into topLeft, topRight, etc
            function reorderFinderPatterns(pattern1, pattern2, pattern3) {
                var _a, _b, _c, _d;
                // Find distances between pattern centers
                var oneTwoDistance = distance(pattern1, pattern2);
                var twoThreeDistance = distance(pattern2, pattern3);
                var oneThreeDistance = distance(pattern1, pattern3);
                var bottomLeft;
                var topLeft;
                var topRight;
                // Assume one closest to other two is B; A and C will just be guesses at first
                if (twoThreeDistance >= oneTwoDistance && twoThreeDistance >= oneThreeDistance) _a = [
                    pattern2,
                    pattern1,
                    pattern3
                ], bottomLeft = _a[0], topLeft = _a[1], topRight = _a[2];
                else if (oneThreeDistance >= twoThreeDistance && oneThreeDistance >= oneTwoDistance) _b = [
                    pattern1,
                    pattern2,
                    pattern3
                ], bottomLeft = _b[0], topLeft = _b[1], topRight = _b[2];
                else _c = [
                    pattern1,
                    pattern3,
                    pattern2
                ], bottomLeft = _c[0], topLeft = _c[1], topRight = _c[2];
                // Use cross product to figure out whether bottomLeft (A) and topRight (C) are correct or flipped in relation to topLeft (B)
                // This asks whether BC x BA has a positive z component, which is the arrangement we want. If it's negative, then
                // we've got it flipped around and should swap topRight and bottomLeft.
                if ((topRight.x - topLeft.x) * (bottomLeft.y - topLeft.y) - (topRight.y - topLeft.y) * (bottomLeft.x - topLeft.x) < 0) _d = [
                    topRight,
                    bottomLeft
                ], bottomLeft = _d[0], topRight = _d[1];
                return {
                    bottomLeft: bottomLeft,
                    topLeft: topLeft,
                    topRight: topRight
                };
            }
            // Computes the dimension (number of modules on a side) of the QR Code based on the position of the finder patterns
            function computeDimension(topLeft, topRight, bottomLeft, matrix) {
                var moduleSize = (sum(countBlackWhiteRun(topLeft, bottomLeft, matrix, 5)) / 7 + sum(countBlackWhiteRun(topLeft, topRight, matrix, 5)) / 7 + sum(countBlackWhiteRun(bottomLeft, topLeft, matrix, 5)) / 7 + sum(countBlackWhiteRun(topRight, topLeft, matrix, 5)) / 7) / 4;
                if (moduleSize < 1) throw new Error("Invalid module size");
                var topDimension = Math.round(distance(topLeft, topRight) / moduleSize);
                var sideDimension = Math.round(distance(topLeft, bottomLeft) / moduleSize);
                var dimension = Math.floor((topDimension + sideDimension) / 2) + 7;
                switch(dimension % 4){
                    case 0:
                        dimension++;
                        break;
                    case 2:
                        dimension--;
                        break;
                }
                return {
                    dimension: dimension,
                    moduleSize: moduleSize
                };
            }
            // Takes an origin point and an end point and counts the sizes of the black white run from the origin towards the end point.
            // Returns an array of elements, representing the pixel size of the black white run.
            // Uses a variant of http://en.wikipedia.org/wiki/Bresenham's_line_algorithm
            function countBlackWhiteRunTowardsPoint(origin, end, matrix, length) {
                var switchPoints = [
                    {
                        x: Math.floor(origin.x),
                        y: Math.floor(origin.y)
                    }
                ];
                var steep = Math.abs(end.y - origin.y) > Math.abs(end.x - origin.x);
                var fromX;
                var fromY;
                var toX;
                var toY;
                if (steep) {
                    fromX = Math.floor(origin.y);
                    fromY = Math.floor(origin.x);
                    toX = Math.floor(end.y);
                    toY = Math.floor(end.x);
                } else {
                    fromX = Math.floor(origin.x);
                    fromY = Math.floor(origin.y);
                    toX = Math.floor(end.x);
                    toY = Math.floor(end.y);
                }
                var dx = Math.abs(toX - fromX);
                var dy = Math.abs(toY - fromY);
                var error = Math.floor(-dx / 2);
                var xStep = fromX < toX ? 1 : -1;
                var yStep = fromY < toY ? 1 : -1;
                var currentPixel = true;
                // Loop up until x == toX, but not beyond
                for(var x = fromX, y = fromY; x !== toX + xStep; x += xStep){
                    // Does current pixel mean we have moved white to black or vice versa?
                    // Scanning black in state 0,2 and white in state 1, so if we find the wrong
                    // color, advance to next state or end if we are in state 2 already
                    var realX = steep ? y : x;
                    var realY = steep ? x : y;
                    if (matrix.get(realX, realY) !== currentPixel) {
                        currentPixel = !currentPixel;
                        switchPoints.push({
                            x: realX,
                            y: realY
                        });
                        if (switchPoints.length === length + 1) break;
                    }
                    error += dy;
                    if (error > 0) {
                        if (y === toY) break;
                        y += yStep;
                        error -= dx;
                    }
                }
                var distances = [];
                for(var i = 0; i < length; i++)if (switchPoints[i] && switchPoints[i + 1]) distances.push(distance(switchPoints[i], switchPoints[i + 1]));
                else distances.push(0);
                return distances;
            }
            // Takes an origin point and an end point and counts the sizes of the black white run in the origin point
            // along the line that intersects with the end point. Returns an array of elements, representing the pixel sizes
            // of the black white run. Takes a length which represents the number of switches from black to white to look for.
            function countBlackWhiteRun(origin, end, matrix, length) {
                var _a;
                var rise = end.y - origin.y;
                var run = end.x - origin.x;
                var towardsEnd = countBlackWhiteRunTowardsPoint(origin, end, matrix, Math.ceil(length / 2));
                var awayFromEnd = countBlackWhiteRunTowardsPoint(origin, {
                    x: origin.x - run,
                    y: origin.y - rise
                }, matrix, Math.ceil(length / 2));
                var middleValue = towardsEnd.shift() + awayFromEnd.shift() - 1; // Substract one so we don't double count a pixel
                return (_a = awayFromEnd.concat(middleValue)).concat.apply(_a, towardsEnd);
            }
            // Takes in a black white run and an array of expected ratios. Returns the average size of the run as well as the "error" -
            // that is the amount the run diverges from the expected ratio
            function scoreBlackWhiteRun(sequence, ratios) {
                var averageSize = sum(sequence) / sum(ratios);
                var error = 0;
                ratios.forEach(function(ratio, i) {
                    error += Math.pow(sequence[i] - ratio * averageSize, 2);
                });
                return {
                    averageSize: averageSize,
                    error: error
                };
            }
            // Takes an X,Y point and an array of sizes and scores the point against those ratios.
            // For example for a finder pattern takes the ratio list of 1:1:3:1:1 and checks horizontal, vertical and diagonal ratios
            // against that.
            function scorePattern(point, ratios, matrix) {
                try {
                    var horizontalRun = countBlackWhiteRun(point, {
                        x: -1,
                        y: point.y
                    }, matrix, ratios.length);
                    var verticalRun = countBlackWhiteRun(point, {
                        x: point.x,
                        y: -1
                    }, matrix, ratios.length);
                    var topLeftPoint = {
                        x: Math.max(0, point.x - point.y) - 1,
                        y: Math.max(0, point.y - point.x) - 1
                    };
                    var topLeftBottomRightRun = countBlackWhiteRun(point, topLeftPoint, matrix, ratios.length);
                    var bottomLeftPoint = {
                        x: Math.min(matrix.width, point.x + point.y) + 1,
                        y: Math.min(matrix.height, point.y + point.x) + 1
                    };
                    var bottomLeftTopRightRun = countBlackWhiteRun(point, bottomLeftPoint, matrix, ratios.length);
                    var horzError = scoreBlackWhiteRun(horizontalRun, ratios);
                    var vertError = scoreBlackWhiteRun(verticalRun, ratios);
                    var diagDownError = scoreBlackWhiteRun(topLeftBottomRightRun, ratios);
                    var diagUpError = scoreBlackWhiteRun(bottomLeftTopRightRun, ratios);
                    var ratioError = Math.sqrt(horzError.error * horzError.error + vertError.error * vertError.error + diagDownError.error * diagDownError.error + diagUpError.error * diagUpError.error);
                    var avgSize = (horzError.averageSize + vertError.averageSize + diagDownError.averageSize + diagUpError.averageSize) / 4;
                    var sizeError = (Math.pow(horzError.averageSize - avgSize, 2) + Math.pow(vertError.averageSize - avgSize, 2) + Math.pow(diagDownError.averageSize - avgSize, 2) + Math.pow(diagUpError.averageSize - avgSize, 2)) / avgSize;
                    return ratioError + sizeError;
                } catch (_a) {
                    return Infinity;
                }
            }
            function recenterLocation(matrix, p) {
                var leftX = Math.round(p.x);
                while(matrix.get(leftX, Math.round(p.y)))leftX--;
                var rightX = Math.round(p.x);
                while(matrix.get(rightX, Math.round(p.y)))rightX++;
                var x = (leftX + rightX) / 2;
                var topY = Math.round(p.y);
                while(matrix.get(Math.round(x), topY))topY--;
                var bottomY = Math.round(p.y);
                while(matrix.get(Math.round(x), bottomY))bottomY++;
                var y = (topY + bottomY) / 2;
                return {
                    x: x,
                    y: y
                };
            }
            function locate(matrix) {
                var finderPatternQuads = [];
                var activeFinderPatternQuads = [];
                var alignmentPatternQuads = [];
                var activeAlignmentPatternQuads = [];
                var _loop_1 = function(y) {
                    var length_1 = 0;
                    var lastBit = false;
                    var scans = [
                        0,
                        0,
                        0,
                        0,
                        0
                    ];
                    var _loop_2 = function(x) {
                        var v = matrix.get(x, y);
                        if (v === lastBit) length_1++;
                        else {
                            scans = [
                                scans[1],
                                scans[2],
                                scans[3],
                                scans[4],
                                length_1
                            ];
                            length_1 = 1;
                            lastBit = v;
                            // Do the last 5 color changes ~ match the expected ratio for a finder pattern? 1:1:3:1:1 of b:w:b:w:b
                            var averageFinderPatternBlocksize = sum(scans) / 7;
                            var validFinderPattern = Math.abs(scans[0] - averageFinderPatternBlocksize) < averageFinderPatternBlocksize && Math.abs(scans[1] - averageFinderPatternBlocksize) < averageFinderPatternBlocksize && Math.abs(scans[2] - 3 * averageFinderPatternBlocksize) < 3 * averageFinderPatternBlocksize && Math.abs(scans[3] - averageFinderPatternBlocksize) < averageFinderPatternBlocksize && Math.abs(scans[4] - averageFinderPatternBlocksize) < averageFinderPatternBlocksize && !v; // And make sure the current pixel is white since finder patterns are bordered in white
                            // Do the last 3 color changes ~ match the expected ratio for an alignment pattern? 1:1:1 of w:b:w
                            var averageAlignmentPatternBlocksize = sum(scans.slice(-3)) / 3;
                            var validAlignmentPattern = Math.abs(scans[2] - averageAlignmentPatternBlocksize) < averageAlignmentPatternBlocksize && Math.abs(scans[3] - averageAlignmentPatternBlocksize) < averageAlignmentPatternBlocksize && Math.abs(scans[4] - averageAlignmentPatternBlocksize) < averageAlignmentPatternBlocksize && v; // Is the current pixel black since alignment patterns are bordered in black
                            if (validFinderPattern) {
                                // Compute the start and end x values of the large center black square
                                var endX_1 = x - scans[3] - scans[4];
                                var startX_1 = endX_1 - scans[2];
                                var line = {
                                    startX: startX_1,
                                    endX: endX_1,
                                    y: y
                                };
                                // Is there a quad directly above the current spot? If so, extend it with the new line. Otherwise, create a new quad with
                                // that line as the starting point.
                                var matchingQuads = activeFinderPatternQuads.filter(function(q) {
                                    return startX_1 >= q.bottom.startX && startX_1 <= q.bottom.endX || endX_1 >= q.bottom.startX && startX_1 <= q.bottom.endX || startX_1 <= q.bottom.startX && endX_1 >= q.bottom.endX && scans[2] / (q.bottom.endX - q.bottom.startX) < MAX_QUAD_RATIO && scans[2] / (q.bottom.endX - q.bottom.startX) > MIN_QUAD_RATIO;
                                });
                                if (matchingQuads.length > 0) matchingQuads[0].bottom = line;
                                else activeFinderPatternQuads.push({
                                    top: line,
                                    bottom: line
                                });
                            }
                            if (validAlignmentPattern) {
                                // Compute the start and end x values of the center black square
                                var endX_2 = x - scans[4];
                                var startX_2 = endX_2 - scans[3];
                                var line = {
                                    startX: startX_2,
                                    y: y,
                                    endX: endX_2
                                };
                                // Is there a quad directly above the current spot? If so, extend it with the new line. Otherwise, create a new quad with
                                // that line as the starting point.
                                var matchingQuads = activeAlignmentPatternQuads.filter(function(q) {
                                    return startX_2 >= q.bottom.startX && startX_2 <= q.bottom.endX || endX_2 >= q.bottom.startX && startX_2 <= q.bottom.endX || startX_2 <= q.bottom.startX && endX_2 >= q.bottom.endX && scans[2] / (q.bottom.endX - q.bottom.startX) < MAX_QUAD_RATIO && scans[2] / (q.bottom.endX - q.bottom.startX) > MIN_QUAD_RATIO;
                                });
                                if (matchingQuads.length > 0) matchingQuads[0].bottom = line;
                                else activeAlignmentPatternQuads.push({
                                    top: line,
                                    bottom: line
                                });
                            }
                        }
                    };
                    for(var x2 = -1; x2 <= matrix.width; x2++)_loop_2(x2);
                    finderPatternQuads.push.apply(finderPatternQuads, activeFinderPatternQuads.filter(function(q) {
                        return q.bottom.y !== y && q.bottom.y - q.top.y >= 2;
                    }));
                    activeFinderPatternQuads = activeFinderPatternQuads.filter(function(q) {
                        return q.bottom.y === y;
                    });
                    alignmentPatternQuads.push.apply(alignmentPatternQuads, activeAlignmentPatternQuads.filter(function(q) {
                        return q.bottom.y !== y;
                    }));
                    activeAlignmentPatternQuads = activeAlignmentPatternQuads.filter(function(q) {
                        return q.bottom.y === y;
                    });
                };
                for(var y2 = 0; y2 <= matrix.height; y2++)_loop_1(y2);
                finderPatternQuads.push.apply(finderPatternQuads, activeFinderPatternQuads.filter(function(q) {
                    return q.bottom.y - q.top.y >= 2;
                }));
                alignmentPatternQuads.push.apply(alignmentPatternQuads, activeAlignmentPatternQuads);
                var finderPatternGroups = finderPatternQuads.filter(function(q) {
                    return q.bottom.y - q.top.y >= 2;
                }) // All quads must be at least 2px tall since the center square is larger than a block
                .map(function(q) {
                    var x = (q.top.startX + q.top.endX + q.bottom.startX + q.bottom.endX) / 4;
                    var y = (q.top.y + q.bottom.y + 1) / 2;
                    if (!matrix.get(Math.round(x), Math.round(y))) return;
                    var lengths = [
                        q.top.endX - q.top.startX,
                        q.bottom.endX - q.bottom.startX,
                        q.bottom.y - q.top.y + 1
                    ];
                    var size = sum(lengths) / lengths.length;
                    var score = scorePattern({
                        x: Math.round(x),
                        y: Math.round(y)
                    }, [
                        1,
                        1,
                        3,
                        1,
                        1
                    ], matrix);
                    return {
                        score: score,
                        x: x,
                        y: y,
                        size: size
                    };
                }).filter(function(q) {
                    return !!q;
                }) // Filter out any rejected quads from above
                .sort(function(a, b) {
                    return a.score - b.score;
                })// Now take the top finder pattern options and try to find 2 other options with a similar size.
                .map(function(point, i, finderPatterns) {
                    if (i > MAX_FINDERPATTERNS_TO_SEARCH) return null;
                    var otherPoints = finderPatterns.filter(function(p, ii) {
                        return i !== ii;
                    }).map(function(p) {
                        return {
                            x: p.x,
                            y: p.y,
                            score: p.score + Math.pow(p.size - point.size, 2) / point.size,
                            size: p.size
                        };
                    }).sort(function(a, b) {
                        return a.score - b.score;
                    });
                    if (otherPoints.length < 2) return null;
                    var score = point.score + otherPoints[0].score + otherPoints[1].score;
                    return {
                        points: [
                            point
                        ].concat(otherPoints.slice(0, 2)),
                        score: score
                    };
                }).filter(function(q) {
                    return !!q;
                }) // Filter out any rejected finder patterns from above
                .sort(function(a, b) {
                    return a.score - b.score;
                });
                if (finderPatternGroups.length === 0) return null;
                var _a = reorderFinderPatterns(finderPatternGroups[0].points[0], finderPatternGroups[0].points[1], finderPatternGroups[0].points[2]), topRight = _a.topRight, topLeft = _a.topLeft, bottomLeft = _a.bottomLeft;
                var alignment = findAlignmentPattern(matrix, alignmentPatternQuads, topRight, topLeft, bottomLeft);
                var result = [];
                if (alignment) result.push({
                    alignmentPattern: {
                        x: alignment.alignmentPattern.x,
                        y: alignment.alignmentPattern.y
                    },
                    bottomLeft: {
                        x: bottomLeft.x,
                        y: bottomLeft.y
                    },
                    dimension: alignment.dimension,
                    topLeft: {
                        x: topLeft.x,
                        y: topLeft.y
                    },
                    topRight: {
                        x: topRight.x,
                        y: topRight.y
                    }
                });
                // We normally use the center of the quads as the location of the tracking points, which is optimal for most cases and will account
                // for a skew in the image. However, In some cases, a slight skew might not be real and instead be caused by image compression
                // errors and/or low resolution. For those cases, we'd be better off centering the point exactly in the middle of the black area. We
                // compute and return the location data for the naively centered points as it is little additional work and allows for multiple
                // attempts at decoding harder images.
                var midTopRight = recenterLocation(matrix, topRight);
                var midTopLeft = recenterLocation(matrix, topLeft);
                var midBottomLeft = recenterLocation(matrix, bottomLeft);
                var centeredAlignment = findAlignmentPattern(matrix, alignmentPatternQuads, midTopRight, midTopLeft, midBottomLeft);
                if (centeredAlignment) result.push({
                    alignmentPattern: {
                        x: centeredAlignment.alignmentPattern.x,
                        y: centeredAlignment.alignmentPattern.y
                    },
                    bottomLeft: {
                        x: midBottomLeft.x,
                        y: midBottomLeft.y
                    },
                    topLeft: {
                        x: midTopLeft.x,
                        y: midTopLeft.y
                    },
                    topRight: {
                        x: midTopRight.x,
                        y: midTopRight.y
                    },
                    dimension: centeredAlignment.dimension
                });
                if (result.length === 0) return null;
                return result;
            }
            exports.locate = locate;
            function findAlignmentPattern(matrix, alignmentPatternQuads, topRight, topLeft, bottomLeft) {
                var _a;
                // Now that we've found the three finder patterns we can determine the blockSize and the size of the QR code.
                // We'll use these to help find the alignment pattern but also later when we do the extraction.
                var dimension;
                var moduleSize;
                try {
                    _a = computeDimension(topLeft, topRight, bottomLeft, matrix), dimension = _a.dimension, moduleSize = _a.moduleSize;
                } catch (e) {
                    return null;
                }
                // Now find the alignment pattern
                var bottomRightFinderPattern = {
                    x: topRight.x - topLeft.x + bottomLeft.x,
                    y: topRight.y - topLeft.y + bottomLeft.y
                };
                var modulesBetweenFinderPatterns = (distance(topLeft, bottomLeft) + distance(topLeft, topRight)) / 2 / moduleSize;
                var correctionToTopLeft = 1 - 3 / modulesBetweenFinderPatterns;
                var expectedAlignmentPattern = {
                    x: topLeft.x + correctionToTopLeft * (bottomRightFinderPattern.x - topLeft.x),
                    y: topLeft.y + correctionToTopLeft * (bottomRightFinderPattern.y - topLeft.y)
                };
                var alignmentPatterns = alignmentPatternQuads.map(function(q) {
                    var x = (q.top.startX + q.top.endX + q.bottom.startX + q.bottom.endX) / 4;
                    var y = (q.top.y + q.bottom.y + 1) / 2;
                    if (!matrix.get(Math.floor(x), Math.floor(y))) return;
                    var lengths = [
                        q.top.endX - q.top.startX,
                        q.bottom.endX - q.bottom.startX,
                        q.bottom.y - q.top.y + 1
                    ];
                    var size = sum(lengths) / lengths.length;
                    var sizeScore = scorePattern({
                        x: Math.floor(x),
                        y: Math.floor(y)
                    }, [
                        1,
                        1,
                        1
                    ], matrix);
                    var score = sizeScore + distance({
                        x: x,
                        y: y
                    }, expectedAlignmentPattern);
                    return {
                        x: x,
                        y: y,
                        score: score
                    };
                }).filter(function(v) {
                    return !!v;
                }).sort(function(a, b) {
                    return a.score - b.score;
                });
                // If there are less than 15 modules between finder patterns it's a version 1 QR code and as such has no alignmemnt pattern
                // so we can only use our best guess.
                var alignmentPattern = modulesBetweenFinderPatterns >= 15 && alignmentPatterns.length ? alignmentPatterns[0] : expectedAlignmentPattern;
                return {
                    alignmentPattern: alignmentPattern,
                    dimension: dimension
                };
            }
        /***/ }
    ])["default"];
});

},{}],"05eVJ":[function(require,module,exports) {
"use strict";
var hyperscript = require("./hyperscript");
var request = require("./request");
var mountRedraw = require("./mount-redraw");
var domFor = require("./render/domFor");
var m = function m() {
    return hyperscript.apply(this, arguments);
};
m.m = hyperscript;
m.trust = hyperscript.trust;
m.fragment = hyperscript.fragment;
m.Fragment = "[";
m.mount = mountRedraw.mount;
m.route = require("./route");
m.render = require("./render");
m.redraw = mountRedraw.redraw;
m.request = request.request;
m.parseQueryString = require("./querystring/parse");
m.buildQueryString = require("./querystring/build");
m.parsePathname = require("./pathname/parse");
m.buildPathname = require("./pathname/build");
m.vnode = require("./render/vnode");
m.censor = require("./util/censor");
m.domFor = domFor.domFor;
module.exports = m;

},{"./hyperscript":"aVriM","./request":"ljSDe","./mount-redraw":"dvp1x","./render/domFor":"bjZmw","./route":"8HVTZ","./render":"88EoG","./querystring/parse":"1Bqsf","./querystring/build":"dJUE4","./pathname/parse":"jciPb","./pathname/build":"lXNwO","./render/vnode":"egGtB","./util/censor":"9jEja"}],"aVriM":[function(require,module,exports) {
"use strict";
var hyperscript = require("./render/hyperscript");
hyperscript.trust = require("./render/trust");
hyperscript.fragment = require("./render/fragment");
module.exports = hyperscript;

},{"./render/hyperscript":"5oIm8","./render/trust":"7nvWj","./render/fragment":"5IQLU"}],"5oIm8":[function(require,module,exports) {
"use strict";
var Vnode = require("../render/vnode");
var hyperscriptVnode = require("./hyperscriptVnode");
var hasOwn = require("../util/hasOwn");
var selectorParser = /(?:(^|#|\.)([^#\.\[\]]+))|(\[(.+?)(?:\s*=\s*("|'|)((?:\\["'\]]|.)*?)\5)?\])/g;
var selectorCache = {};
function isEmpty(object) {
    for(var key in object)if (hasOwn.call(object, key)) return false;
    return true;
}
function compileSelector(selector) {
    var match, tag = "div", classes = [], attrs = {};
    while(match = selectorParser.exec(selector)){
        var type = match[1], value = match[2];
        if (type === "" && value !== "") tag = value;
        else if (type === "#") attrs.id = value;
        else if (type === ".") classes.push(value);
        else if (match[3][0] === "[") {
            var attrValue = match[6];
            if (attrValue) attrValue = attrValue.replace(/\\(["'])/g, "$1").replace(/\\\\/g, "\\");
            if (match[4] === "class") classes.push(attrValue);
            else attrs[match[4]] = attrValue === "" ? attrValue : attrValue || true;
        }
    }
    if (classes.length > 0) attrs.className = classes.join(" ");
    return selectorCache[selector] = {
        tag: tag,
        attrs: attrs
    };
}
function execSelector(state, vnode) {
    var attrs = vnode.attrs;
    var hasClass = hasOwn.call(attrs, "class");
    var className = hasClass ? attrs.class : attrs.className;
    vnode.tag = state.tag;
    vnode.attrs = {};
    if (!isEmpty(state.attrs) && !isEmpty(attrs)) {
        var newAttrs = {};
        for(var key in attrs)if (hasOwn.call(attrs, key)) newAttrs[key] = attrs[key];
        attrs = newAttrs;
    }
    for(var key in state.attrs)if (hasOwn.call(state.attrs, key) && key !== "className" && !hasOwn.call(attrs, key)) attrs[key] = state.attrs[key];
    if (className != null || state.attrs.className != null) attrs.className = className != null ? state.attrs.className != null ? String(state.attrs.className) + " " + String(className) : className : state.attrs.className != null ? state.attrs.className : null;
    if (hasClass) attrs.class = null;
    for(var key in attrs)if (hasOwn.call(attrs, key) && key !== "key") {
        vnode.attrs = attrs;
        break;
    }
    return vnode;
}
function hyperscript(selector) {
    if (selector == null || typeof selector !== "string" && typeof selector !== "function" && typeof selector.view !== "function") throw Error("The selector must be either a string or a component.");
    var vnode = hyperscriptVnode.apply(1, arguments);
    if (typeof selector === "string") {
        vnode.children = Vnode.normalizeChildren(vnode.children);
        if (selector !== "[") return execSelector(selectorCache[selector] || compileSelector(selector), vnode);
    }
    vnode.tag = selector;
    return vnode;
}
module.exports = hyperscript;

},{"../render/vnode":"egGtB","./hyperscriptVnode":"iRFFB","../util/hasOwn":"94qwS"}],"egGtB":[function(require,module,exports) {
"use strict";
function Vnode(tag, key, attrs, children, text, dom) {
    return {
        tag: tag,
        key: key,
        attrs: attrs,
        children: children,
        text: text,
        dom: dom,
        domSize: undefined,
        state: undefined,
        events: undefined,
        instance: undefined
    };
}
Vnode.normalize = function(node) {
    if (Array.isArray(node)) return Vnode("[", undefined, undefined, Vnode.normalizeChildren(node), undefined, undefined);
    if (node == null || typeof node === "boolean") return null;
    if (typeof node === "object") return node;
    return Vnode("#", undefined, undefined, String(node), undefined, undefined);
};
Vnode.normalizeChildren = function(input) {
    var children = [];
    if (input.length) {
        var isKeyed = input[0] != null && input[0].key != null;
        // Note: this is a *very* perf-sensitive check.
        // Fun fact: merging the loop like this is somehow faster than splitting
        // it, noticeably so.
        for(var i = 1; i < input.length; i++){
            if ((input[i] != null && input[i].key != null) !== isKeyed) throw new TypeError(isKeyed && (input[i] != null || typeof input[i] === "boolean") ? "In fragments, vnodes must either all have keys or none have keys. You may wish to consider using an explicit keyed empty fragment, m.fragment({key: ...}), instead of a hole." : "In fragments, vnodes must either all have keys or none have keys.");
        }
        for(var i = 0; i < input.length; i++)children[i] = Vnode.normalize(input[i]);
    }
    return children;
};
module.exports = Vnode;

},{}],"iRFFB":[function(require,module,exports) {
"use strict";
var Vnode = require("../render/vnode");
// Call via `hyperscriptVnode.apply(startOffset, arguments)`
//
// The reason I do it this way, forwarding the arguments and passing the start
// offset in `this`, is so I don't have to create a temporary array in a
// performance-critical path.
//
// In native ES6, I'd instead add a final `...args` parameter to the
// `hyperscript` and `fragment` factories and define this as
// `hyperscriptVnode(...args)`, since modern engines do optimize that away. But
// ES5 (what Mithril.js requires thanks to IE support) doesn't give me that luxury,
// and engines aren't nearly intelligent enough to do either of these:
//
// 1. Elide the allocation for `[].slice.call(arguments, 1)` when it's passed to
//    another function only to be indexed.
// 2. Elide an `arguments` allocation when it's passed to any function other
//    than `Function.prototype.apply` or `Reflect.apply`.
//
// In ES6, it'd probably look closer to this (I'd need to profile it, though):
// module.exports = function(attrs, ...children) {
//     if (attrs == null || typeof attrs === "object" && attrs.tag == null && !Array.isArray(attrs)) {
//         if (children.length === 1 && Array.isArray(children[0])) children = children[0]
//     } else {
//         children = children.length === 0 && Array.isArray(attrs) ? attrs : [attrs, ...children]
//         attrs = undefined
//     }
//
//     if (attrs == null) attrs = {}
//     return Vnode("", attrs.key, attrs, children)
// }
module.exports = function() {
    var attrs = arguments[this], start = this + 1, children;
    if (attrs == null) attrs = {};
    else if (typeof attrs !== "object" || attrs.tag != null || Array.isArray(attrs)) {
        attrs = {};
        start = this;
    }
    if (arguments.length === start + 1) {
        children = arguments[start];
        if (!Array.isArray(children)) children = [
            children
        ];
    } else {
        children = [];
        while(start < arguments.length)children.push(arguments[start++]);
    }
    return Vnode("", attrs.key, attrs, children);
};

},{"../render/vnode":"egGtB"}],"94qwS":[function(require,module,exports) {
// This exists so I'm only saving it once.
"use strict";
module.exports = ({}).hasOwnProperty;

},{}],"7nvWj":[function(require,module,exports) {
"use strict";
var Vnode = require("../render/vnode");
module.exports = function(html) {
    if (html == null) html = "";
    return Vnode("<", undefined, undefined, html, undefined, undefined);
};

},{"../render/vnode":"egGtB"}],"5IQLU":[function(require,module,exports) {
"use strict";
var Vnode = require("../render/vnode");
var hyperscriptVnode = require("./hyperscriptVnode");
module.exports = function() {
    var vnode = hyperscriptVnode.apply(0, arguments);
    vnode.tag = "[";
    vnode.children = Vnode.normalizeChildren(vnode.children);
    return vnode;
};

},{"../render/vnode":"egGtB","./hyperscriptVnode":"iRFFB"}],"ljSDe":[function(require,module,exports) {
"use strict";
var mountRedraw = require("./mount-redraw");
module.exports = require("./request/request")(typeof window !== "undefined" ? window : null, mountRedraw.redraw);

},{"./mount-redraw":"dvp1x","./request/request":"7XXSl"}],"dvp1x":[function(require,module,exports) {
"use strict";
var render = require("./render");
module.exports = require("./api/mount-redraw")(render, typeof requestAnimationFrame !== "undefined" ? requestAnimationFrame : null, typeof console !== "undefined" ? console : null);

},{"./render":"88EoG","./api/mount-redraw":"hNjwY"}],"88EoG":[function(require,module,exports) {
"use strict";
module.exports = require("./render/render")(typeof window !== "undefined" ? window : null);

},{"./render/render":"7G4HF"}],"7G4HF":[function(require,module,exports) {
"use strict";
var Vnode = require("../render/vnode");
var df = require("../render/domFor");
var delayedRemoval = df.delayedRemoval;
var domFor = df.domFor;
module.exports = function($window) {
    var $doc = $window && $window.document;
    var nameSpace = {
        svg: "http://www.w3.org/2000/svg",
        math: "http://www.w3.org/1998/Math/MathML"
    };
    var currentRedraw;
    var currentRender;
    function getNameSpace(vnode) {
        return vnode.attrs && vnode.attrs.xmlns || nameSpace[vnode.tag];
    }
    //sanity check to discourage people from doing `vnode.state = ...`
    function checkState(vnode, original) {
        if (vnode.state !== original) throw new Error("'vnode.state' must not be modified.");
    }
    //Note: the hook is passed as the `this` argument to allow proxying the
    //arguments without requiring a full array allocation to do so. It also
    //takes advantage of the fact the current `vnode` is the first argument in
    //all lifecycle methods.
    function callHook(vnode) {
        var original = vnode.state;
        try {
            return this.apply(original, arguments);
        } finally{
            checkState(vnode, original);
        }
    }
    // IE11 (at least) throws an UnspecifiedError when accessing document.activeElement when
    // inside an iframe. Catch and swallow this error, and heavy-handidly return null.
    function activeElement() {
        try {
            return $doc.activeElement;
        } catch (e) {
            return null;
        }
    }
    //create
    function createNodes(parent, vnodes, start, end, hooks, nextSibling, ns) {
        for(var i = start; i < end; i++){
            var vnode = vnodes[i];
            if (vnode != null) createNode(parent, vnode, hooks, ns, nextSibling);
        }
    }
    function createNode(parent, vnode, hooks, ns, nextSibling) {
        var tag = vnode.tag;
        if (typeof tag === "string") {
            vnode.state = {};
            if (vnode.attrs != null) initLifecycle(vnode.attrs, vnode, hooks);
            switch(tag){
                case "#":
                    createText(parent, vnode, nextSibling);
                    break;
                case "<":
                    createHTML(parent, vnode, ns, nextSibling);
                    break;
                case "[":
                    createFragment(parent, vnode, hooks, ns, nextSibling);
                    break;
                default:
                    createElement(parent, vnode, hooks, ns, nextSibling);
            }
        } else createComponent(parent, vnode, hooks, ns, nextSibling);
    }
    function createText(parent, vnode, nextSibling) {
        vnode.dom = $doc.createTextNode(vnode.children);
        insertDOM(parent, vnode.dom, nextSibling);
    }
    var possibleParents = {
        caption: "table",
        thead: "table",
        tbody: "table",
        tfoot: "table",
        tr: "tbody",
        th: "tr",
        td: "tr",
        colgroup: "table",
        col: "colgroup"
    };
    function createHTML(parent, vnode, ns, nextSibling) {
        var match = vnode.children.match(/^\s*?<(\w+)/im) || [];
        // not using the proper parent makes the child element(s) vanish.
        //     var div = document.createElement("div")
        //     div.innerHTML = "<td>i</td><td>j</td>"
        //     console.log(div.innerHTML)
        // --> "ij", no <td> in sight.
        var temp = $doc.createElement(possibleParents[match[1]] || "div");
        if (ns === "http://www.w3.org/2000/svg") {
            temp.innerHTML = '<svg xmlns="http://www.w3.org/2000/svg">' + vnode.children + "</svg>";
            temp = temp.firstChild;
        } else temp.innerHTML = vnode.children;
        vnode.dom = temp.firstChild;
        vnode.domSize = temp.childNodes.length;
        // Capture nodes to remove, so we don't confuse them.
        var fragment = $doc.createDocumentFragment();
        var child;
        while(child = temp.firstChild)fragment.appendChild(child);
        insertDOM(parent, fragment, nextSibling);
    }
    function createFragment(parent, vnode, hooks, ns, nextSibling) {
        var fragment = $doc.createDocumentFragment();
        if (vnode.children != null) {
            var children = vnode.children;
            createNodes(fragment, children, 0, children.length, hooks, null, ns);
        }
        vnode.dom = fragment.firstChild;
        vnode.domSize = fragment.childNodes.length;
        insertDOM(parent, fragment, nextSibling);
    }
    function createElement(parent, vnode, hooks, ns, nextSibling) {
        var tag = vnode.tag;
        var attrs = vnode.attrs;
        var is = attrs && attrs.is;
        ns = getNameSpace(vnode) || ns;
        var element = ns ? is ? $doc.createElementNS(ns, tag, {
            is: is
        }) : $doc.createElementNS(ns, tag) : is ? $doc.createElement(tag, {
            is: is
        }) : $doc.createElement(tag);
        vnode.dom = element;
        if (attrs != null) setAttrs(vnode, attrs, ns);
        insertDOM(parent, element, nextSibling);
        if (!maybeSetContentEditable(vnode)) {
            if (vnode.children != null) {
                var children = vnode.children;
                createNodes(element, children, 0, children.length, hooks, null, ns);
                if (vnode.tag === "select" && attrs != null) setLateSelectAttrs(vnode, attrs);
            }
        }
    }
    function initComponent(vnode, hooks) {
        var sentinel;
        if (typeof vnode.tag.view === "function") {
            vnode.state = Object.create(vnode.tag);
            sentinel = vnode.state.view;
            if (sentinel.$$reentrantLock$$ != null) return;
            sentinel.$$reentrantLock$$ = true;
        } else {
            vnode.state = void 0;
            sentinel = vnode.tag;
            if (sentinel.$$reentrantLock$$ != null) return;
            sentinel.$$reentrantLock$$ = true;
            vnode.state = vnode.tag.prototype != null && typeof vnode.tag.prototype.view === "function" ? new vnode.tag(vnode) : vnode.tag(vnode);
        }
        initLifecycle(vnode.state, vnode, hooks);
        if (vnode.attrs != null) initLifecycle(vnode.attrs, vnode, hooks);
        vnode.instance = Vnode.normalize(callHook.call(vnode.state.view, vnode));
        if (vnode.instance === vnode) throw Error("A view cannot return the vnode it received as argument");
        sentinel.$$reentrantLock$$ = null;
    }
    function createComponent(parent, vnode, hooks, ns, nextSibling) {
        initComponent(vnode, hooks);
        if (vnode.instance != null) {
            createNode(parent, vnode.instance, hooks, ns, nextSibling);
            vnode.dom = vnode.instance.dom;
            vnode.domSize = vnode.dom != null ? vnode.instance.domSize : 0;
        } else vnode.domSize = 0;
    }
    //update
    /**
	 * @param {Element|Fragment} parent - the parent element
	 * @param {Vnode[] | null} old - the list of vnodes of the last `render()` call for
	 *                               this part of the tree
	 * @param {Vnode[] | null} vnodes - as above, but for the current `render()` call.
	 * @param {Function[]} hooks - an accumulator of post-render hooks (oncreate/onupdate)
	 * @param {Element | null} nextSibling - the next DOM node if we're dealing with a
	 *                                       fragment that is not the last item in its
	 *                                       parent
	 * @param {'svg' | 'math' | String | null} ns) - the current XML namespace, if any
	 * @returns void
	 */ // This function diffs and patches lists of vnodes, both keyed and unkeyed.
    //
    // We will:
    //
    // 1. describe its general structure
    // 2. focus on the diff algorithm optimizations
    // 3. discuss DOM node operations.
    // ## Overview:
    //
    // The updateNodes() function:
    // - deals with trivial cases
    // - determines whether the lists are keyed or unkeyed based on the first non-null node
    //   of each list.
    // - diffs them and patches the DOM if needed (that's the brunt of the code)
    // - manages the leftovers: after diffing, are there:
    //   - old nodes left to remove?
    // 	 - new nodes to insert?
    // 	 deal with them!
    //
    // The lists are only iterated over once, with an exception for the nodes in `old` that
    // are visited in the fourth part of the diff and in the `removeNodes` loop.
    // ## Diffing
    //
    // Reading https://github.com/localvoid/ivi/blob/ddc09d06abaef45248e6133f7040d00d3c6be853/packages/ivi/src/vdom/implementation.ts#L617-L837
    // may be good for context on longest increasing subsequence-based logic for moving nodes.
    //
    // In order to diff keyed lists, one has to
    //
    // 1) match nodes in both lists, per key, and update them accordingly
    // 2) create the nodes present in the new list, but absent in the old one
    // 3) remove the nodes present in the old list, but absent in the new one
    // 4) figure out what nodes in 1) to move in order to minimize the DOM operations.
    //
    // To achieve 1) one can create a dictionary of keys => index (for the old list), then iterate
    // over the new list and for each new vnode, find the corresponding vnode in the old list using
    // the map.
    // 2) is achieved in the same step: if a new node has no corresponding entry in the map, it is new
    // and must be created.
    // For the removals, we actually remove the nodes that have been updated from the old list.
    // The nodes that remain in that list after 1) and 2) have been performed can be safely removed.
    // The fourth step is a bit more complex and relies on the longest increasing subsequence (LIS)
    // algorithm.
    //
    // the longest increasing subsequence is the list of nodes that can remain in place. Imagine going
    // from `1,2,3,4,5` to `4,5,1,2,3` where the numbers are not necessarily the keys, but the indices
    // corresponding to the keyed nodes in the old list (keyed nodes `e,d,c,b,a` => `b,a,e,d,c` would
    //  match the above lists, for example).
    //
    // In there are two increasing subsequences: `4,5` and `1,2,3`, the latter being the longest. We
    // can update those nodes without moving them, and only call `insertNode` on `4` and `5`.
    //
    // @localvoid adapted the algo to also support node deletions and insertions (the `lis` is actually
    // the longest increasing subsequence *of old nodes still present in the new list*).
    //
    // It is a general algorithm that is fireproof in all circumstances, but it requires the allocation
    // and the construction of a `key => oldIndex` map, and three arrays (one with `newIndex => oldIndex`,
    // the `LIS` and a temporary one to create the LIS).
    //
    // So we cheat where we can: if the tails of the lists are identical, they are guaranteed to be part of
    // the LIS and can be updated without moving them.
    //
    // If two nodes are swapped, they are guaranteed not to be part of the LIS, and must be moved (with
    // the exception of the last node if the list is fully reversed).
    //
    // ## Finding the next sibling.
    //
    // `updateNode()` and `createNode()` expect a nextSibling parameter to perform DOM operations.
    // When the list is being traversed top-down, at any index, the DOM nodes up to the previous
    // vnode reflect the content of the new list, whereas the rest of the DOM nodes reflect the old
    // list. The next sibling must be looked for in the old list using `getNextSibling(... oldStart + 1 ...)`.
    //
    // In the other scenarios (swaps, upwards traversal, map-based diff),
    // the new vnodes list is traversed upwards. The DOM nodes at the bottom of the list reflect the
    // bottom part of the new vnodes list, and we can use the `v.dom`  value of the previous node
    // as the next sibling (cached in the `nextSibling` variable).
    // ## DOM node moves
    //
    // In most scenarios `updateNode()` and `createNode()` perform the DOM operations. However,
    // this is not the case if the node moved (second and fourth part of the diff algo). We move
    // the old DOM nodes before updateNode runs because it enables us to use the cached `nextSibling`
    // variable rather than fetching it using `getNextSibling()`.
    function updateNodes(parent, old, vnodes, hooks, nextSibling, ns) {
        if (old === vnodes || old == null && vnodes == null) return;
        else if (old == null || old.length === 0) createNodes(parent, vnodes, 0, vnodes.length, hooks, nextSibling, ns);
        else if (vnodes == null || vnodes.length === 0) removeNodes(parent, old, 0, old.length);
        else {
            var isOldKeyed = old[0] != null && old[0].key != null;
            var isKeyed = vnodes[0] != null && vnodes[0].key != null;
            var start = 0, oldStart = 0;
            if (!isOldKeyed) while(oldStart < old.length && old[oldStart] == null)oldStart++;
            if (!isKeyed) while(start < vnodes.length && vnodes[start] == null)start++;
            if (isOldKeyed !== isKeyed) {
                removeNodes(parent, old, oldStart, old.length);
                createNodes(parent, vnodes, start, vnodes.length, hooks, nextSibling, ns);
            } else if (!isKeyed) {
                // Don't index past the end of either list (causes deopts).
                var commonLength = old.length < vnodes.length ? old.length : vnodes.length;
                // Rewind if necessary to the first non-null index on either side.
                // We could alternatively either explicitly create or remove nodes when `start !== oldStart`
                // but that would be optimizing for sparse lists which are more rare than dense ones.
                start = start < oldStart ? start : oldStart;
                for(; start < commonLength; start++){
                    o = old[start];
                    v = vnodes[start];
                    if (o === v || o == null && v == null) continue;
                    else if (o == null) createNode(parent, v, hooks, ns, getNextSibling(old, start + 1, nextSibling));
                    else if (v == null) removeNode(parent, o);
                    else updateNode(parent, o, v, hooks, getNextSibling(old, start + 1, nextSibling), ns);
                }
                if (old.length > commonLength) removeNodes(parent, old, start, old.length);
                if (vnodes.length > commonLength) createNodes(parent, vnodes, start, vnodes.length, hooks, nextSibling, ns);
            } else {
                // keyed diff
                var oldEnd = old.length - 1, end = vnodes.length - 1, map, o, v, oe, ve, topSibling;
                // bottom-up
                while(oldEnd >= oldStart && end >= start){
                    oe = old[oldEnd];
                    ve = vnodes[end];
                    if (oe.key !== ve.key) break;
                    if (oe !== ve) updateNode(parent, oe, ve, hooks, nextSibling, ns);
                    if (ve.dom != null) nextSibling = ve.dom;
                    oldEnd--, end--;
                }
                // top-down
                while(oldEnd >= oldStart && end >= start){
                    o = old[oldStart];
                    v = vnodes[start];
                    if (o.key !== v.key) break;
                    oldStart++, start++;
                    if (o !== v) updateNode(parent, o, v, hooks, getNextSibling(old, oldStart, nextSibling), ns);
                }
                // swaps and list reversals
                while(oldEnd >= oldStart && end >= start){
                    if (start === end) break;
                    if (o.key !== ve.key || oe.key !== v.key) break;
                    topSibling = getNextSibling(old, oldStart, nextSibling);
                    moveDOM(parent, oe, topSibling);
                    if (oe !== v) updateNode(parent, oe, v, hooks, topSibling, ns);
                    if (++start <= --end) moveDOM(parent, o, nextSibling);
                    if (o !== ve) updateNode(parent, o, ve, hooks, nextSibling, ns);
                    if (ve.dom != null) nextSibling = ve.dom;
                    oldStart++;
                    oldEnd--;
                    oe = old[oldEnd];
                    ve = vnodes[end];
                    o = old[oldStart];
                    v = vnodes[start];
                }
                // bottom up once again
                while(oldEnd >= oldStart && end >= start){
                    if (oe.key !== ve.key) break;
                    if (oe !== ve) updateNode(parent, oe, ve, hooks, nextSibling, ns);
                    if (ve.dom != null) nextSibling = ve.dom;
                    oldEnd--, end--;
                    oe = old[oldEnd];
                    ve = vnodes[end];
                }
                if (start > end) removeNodes(parent, old, oldStart, oldEnd + 1);
                else if (oldStart > oldEnd) createNodes(parent, vnodes, start, end + 1, hooks, nextSibling, ns);
                else {
                    // inspired by ivi https://github.com/ivijs/ivi/ by Boris Kaul
                    var originalNextSibling = nextSibling, vnodesLength = end - start + 1, oldIndices = new Array(vnodesLength), li = 0, i = 0, pos = 2147483647, matched = 0, map, lisIndices;
                    for(i = 0; i < vnodesLength; i++)oldIndices[i] = -1;
                    for(i = end; i >= start; i--){
                        if (map == null) map = getKeyMap(old, oldStart, oldEnd + 1);
                        ve = vnodes[i];
                        var oldIndex = map[ve.key];
                        if (oldIndex != null) {
                            pos = oldIndex < pos ? oldIndex : -1 // becomes -1 if nodes were re-ordered
                            ;
                            oldIndices[i - start] = oldIndex;
                            oe = old[oldIndex];
                            old[oldIndex] = null;
                            if (oe !== ve) updateNode(parent, oe, ve, hooks, nextSibling, ns);
                            if (ve.dom != null) nextSibling = ve.dom;
                            matched++;
                        }
                    }
                    nextSibling = originalNextSibling;
                    if (matched !== oldEnd - oldStart + 1) removeNodes(parent, old, oldStart, oldEnd + 1);
                    if (matched === 0) createNodes(parent, vnodes, start, end + 1, hooks, nextSibling, ns);
                    else {
                        if (pos === -1) {
                            // the indices of the indices of the items that are part of the
                            // longest increasing subsequence in the oldIndices list
                            lisIndices = makeLisIndices(oldIndices);
                            li = lisIndices.length - 1;
                            for(i = end; i >= start; i--){
                                v = vnodes[i];
                                if (oldIndices[i - start] === -1) createNode(parent, v, hooks, ns, nextSibling);
                                else if (lisIndices[li] === i - start) li--;
                                else moveDOM(parent, v, nextSibling);
                                if (v.dom != null) nextSibling = vnodes[i].dom;
                            }
                        } else for(i = end; i >= start; i--){
                            v = vnodes[i];
                            if (oldIndices[i - start] === -1) createNode(parent, v, hooks, ns, nextSibling);
                            if (v.dom != null) nextSibling = vnodes[i].dom;
                        }
                    }
                }
            }
        }
    }
    function updateNode(parent, old, vnode, hooks, nextSibling, ns) {
        var oldTag = old.tag, tag = vnode.tag;
        if (oldTag === tag) {
            vnode.state = old.state;
            vnode.events = old.events;
            if (shouldNotUpdate(vnode, old)) return;
            if (typeof oldTag === "string") {
                if (vnode.attrs != null) updateLifecycle(vnode.attrs, vnode, hooks);
                switch(oldTag){
                    case "#":
                        updateText(old, vnode);
                        break;
                    case "<":
                        updateHTML(parent, old, vnode, ns, nextSibling);
                        break;
                    case "[":
                        updateFragment(parent, old, vnode, hooks, nextSibling, ns);
                        break;
                    default:
                        updateElement(old, vnode, hooks, ns);
                }
            } else updateComponent(parent, old, vnode, hooks, nextSibling, ns);
        } else {
            removeNode(parent, old);
            createNode(parent, vnode, hooks, ns, nextSibling);
        }
    }
    function updateText(old, vnode) {
        if (old.children.toString() !== vnode.children.toString()) old.dom.nodeValue = vnode.children;
        vnode.dom = old.dom;
    }
    function updateHTML(parent, old, vnode, ns, nextSibling) {
        if (old.children !== vnode.children) {
            removeDOM(parent, old, undefined);
            createHTML(parent, vnode, ns, nextSibling);
        } else {
            vnode.dom = old.dom;
            vnode.domSize = old.domSize;
        }
    }
    function updateFragment(parent, old, vnode, hooks, nextSibling, ns) {
        updateNodes(parent, old.children, vnode.children, hooks, nextSibling, ns);
        var domSize = 0, children = vnode.children;
        vnode.dom = null;
        if (children != null) {
            for(var i = 0; i < children.length; i++){
                var child = children[i];
                if (child != null && child.dom != null) {
                    if (vnode.dom == null) vnode.dom = child.dom;
                    domSize += child.domSize || 1;
                }
            }
            if (domSize !== 1) vnode.domSize = domSize;
        }
    }
    function updateElement(old, vnode, hooks, ns) {
        var element = vnode.dom = old.dom;
        ns = getNameSpace(vnode) || ns;
        if (vnode.tag === "textarea") {
            if (vnode.attrs == null) vnode.attrs = {};
        }
        updateAttrs(vnode, old.attrs, vnode.attrs, ns);
        if (!maybeSetContentEditable(vnode)) updateNodes(element, old.children, vnode.children, hooks, null, ns);
    }
    function updateComponent(parent, old, vnode, hooks, nextSibling, ns) {
        vnode.instance = Vnode.normalize(callHook.call(vnode.state.view, vnode));
        if (vnode.instance === vnode) throw Error("A view cannot return the vnode it received as argument");
        updateLifecycle(vnode.state, vnode, hooks);
        if (vnode.attrs != null) updateLifecycle(vnode.attrs, vnode, hooks);
        if (vnode.instance != null) {
            if (old.instance == null) createNode(parent, vnode.instance, hooks, ns, nextSibling);
            else updateNode(parent, old.instance, vnode.instance, hooks, nextSibling, ns);
            vnode.dom = vnode.instance.dom;
            vnode.domSize = vnode.instance.domSize;
        } else if (old.instance != null) {
            removeNode(parent, old.instance);
            vnode.dom = undefined;
            vnode.domSize = 0;
        } else {
            vnode.dom = old.dom;
            vnode.domSize = old.domSize;
        }
    }
    function getKeyMap(vnodes, start, end) {
        var map = Object.create(null);
        for(; start < end; start++){
            var vnode = vnodes[start];
            if (vnode != null) {
                var key = vnode.key;
                if (key != null) map[key] = start;
            }
        }
        return map;
    }
    // Lifted from ivi https://github.com/ivijs/ivi/
    // takes a list of unique numbers (-1 is special and can
    // occur multiple times) and returns an array with the indices
    // of the items that are part of the longest increasing
    // subsequence
    var lisTemp = [];
    function makeLisIndices(a) {
        var result = [
            0
        ];
        var u = 0, v = 0, i = 0;
        var il = lisTemp.length = a.length;
        for(var i = 0; i < il; i++)lisTemp[i] = a[i];
        for(var i = 0; i < il; ++i){
            if (a[i] === -1) continue;
            var j = result[result.length - 1];
            if (a[j] < a[i]) {
                lisTemp[i] = j;
                result.push(i);
                continue;
            }
            u = 0;
            v = result.length - 1;
            while(u < v){
                // Fast integer average without overflow.
                // eslint-disable-next-line no-bitwise
                var c = (u >>> 1) + (v >>> 1) + (u & v & 1);
                if (a[result[c]] < a[i]) u = c + 1;
                else v = c;
            }
            if (a[i] < a[result[u]]) {
                if (u > 0) lisTemp[i] = result[u - 1];
                result[u] = i;
            }
        }
        u = result.length;
        v = result[u - 1];
        while(u-- > 0){
            result[u] = v;
            v = lisTemp[v];
        }
        lisTemp.length = 0;
        return result;
    }
    function getNextSibling(vnodes, i, nextSibling) {
        for(; i < vnodes.length; i++){
            if (vnodes[i] != null && vnodes[i].dom != null) return vnodes[i].dom;
        }
        return nextSibling;
    }
    // This handles fragments with zombie children (removed from vdom, but persisted in DOM through onbeforeremove)
    function moveDOM(parent, vnode, nextSibling) {
        if (vnode.dom != null) {
            var target;
            if (vnode.domSize == null) // don't allocate for the common case
            target = vnode.dom;
            else {
                target = $doc.createDocumentFragment();
                for (var dom of domFor(vnode))target.appendChild(dom);
            }
            insertDOM(parent, target, nextSibling);
        }
    }
    function insertDOM(parent, dom, nextSibling) {
        if (nextSibling != null) parent.insertBefore(dom, nextSibling);
        else parent.appendChild(dom);
    }
    function maybeSetContentEditable(vnode) {
        if (vnode.attrs == null || vnode.attrs.contenteditable == null && vnode.attrs.contentEditable == null // property
        ) return false;
        var children = vnode.children;
        if (children != null && children.length === 1 && children[0].tag === "<") {
            var content = children[0].children;
            if (vnode.dom.innerHTML !== content) vnode.dom.innerHTML = content;
        } else if (children != null && children.length !== 0) throw new Error("Child node of a contenteditable must be trusted.");
        return true;
    }
    //remove
    function removeNodes(parent, vnodes, start, end) {
        for(var i = start; i < end; i++){
            var vnode = vnodes[i];
            if (vnode != null) removeNode(parent, vnode);
        }
    }
    function removeNode(parent, vnode) {
        var mask = 0;
        var original = vnode.state;
        var stateResult, attrsResult;
        if (typeof vnode.tag !== "string" && typeof vnode.state.onbeforeremove === "function") {
            var result = callHook.call(vnode.state.onbeforeremove, vnode);
            if (result != null && typeof result.then === "function") {
                mask = 1;
                stateResult = result;
            }
        }
        if (vnode.attrs && typeof vnode.attrs.onbeforeremove === "function") {
            var result = callHook.call(vnode.attrs.onbeforeremove, vnode);
            if (result != null && typeof result.then === "function") {
                // eslint-disable-next-line no-bitwise
                mask |= 2;
                attrsResult = result;
            }
        }
        checkState(vnode, original);
        var generation;
        // If we can, try to fast-path it and avoid all the overhead of awaiting
        if (!mask) {
            onremove(vnode);
            removeDOM(parent, vnode, generation);
        } else {
            generation = currentRender;
            for (var dom of domFor(vnode))delayedRemoval.set(dom, generation);
            if (stateResult != null) stateResult.finally(function() {
                // eslint-disable-next-line no-bitwise
                if (mask & 1) {
                    // eslint-disable-next-line no-bitwise
                    mask &= 2;
                    if (!mask) {
                        checkState(vnode, original);
                        onremove(vnode);
                        removeDOM(parent, vnode, generation);
                    }
                }
            });
            if (attrsResult != null) attrsResult.finally(function() {
                // eslint-disable-next-line no-bitwise
                if (mask & 2) {
                    // eslint-disable-next-line no-bitwise
                    mask &= 1;
                    if (!mask) {
                        checkState(vnode, original);
                        onremove(vnode);
                        removeDOM(parent, vnode, generation);
                    }
                }
            });
        }
    }
    function removeDOM(parent, vnode, generation) {
        if (vnode.dom == null) return;
        if (vnode.domSize == null) // don't allocate for the common case
        {
            if (delayedRemoval.get(vnode.dom) === generation) parent.removeChild(vnode.dom);
        } else for (var dom of domFor(vnode, {
            generation
        }))parent.removeChild(dom);
    }
    function onremove(vnode) {
        if (typeof vnode.tag !== "string" && typeof vnode.state.onremove === "function") callHook.call(vnode.state.onremove, vnode);
        if (vnode.attrs && typeof vnode.attrs.onremove === "function") callHook.call(vnode.attrs.onremove, vnode);
        if (typeof vnode.tag !== "string") {
            if (vnode.instance != null) onremove(vnode.instance);
        } else {
            var children = vnode.children;
            if (Array.isArray(children)) for(var i = 0; i < children.length; i++){
                var child = children[i];
                if (child != null) onremove(child);
            }
        }
    }
    //attrs
    function setAttrs(vnode, attrs, ns) {
        // If you assign an input type that is not supported by IE 11 with an assignment expression, an error will occur.
        //
        // Also, the DOM does things to inputs based on the value, so it needs set first.
        // See: https://github.com/MithrilJS/mithril.js/issues/2622
        if (vnode.tag === "input" && attrs.type != null) vnode.dom.setAttribute("type", attrs.type);
        var isFileInput = attrs != null && vnode.tag === "input" && attrs.type === "file";
        for(var key in attrs)setAttr(vnode, key, null, attrs[key], ns, isFileInput);
    }
    function setAttr(vnode, key, old, value, ns, isFileInput) {
        if (key === "key" || key === "is" || value == null || isLifecycleMethod(key) || old === value && !isFormAttribute(vnode, key) && typeof value !== "object" || key === "type" && vnode.tag === "input") return;
        if (key[0] === "o" && key[1] === "n") return updateEvent(vnode, key, value);
        if (key.slice(0, 6) === "xlink:") vnode.dom.setAttributeNS("http://www.w3.org/1999/xlink", key.slice(6), value);
        else if (key === "style") updateStyle(vnode.dom, old, value);
        else if (hasPropertyKey(vnode, key, ns)) {
            if (key === "value") {
                // Only do the coercion if we're actually going to check the value.
                /* eslint-disable no-implicit-coercion */ //setting input[value] to same value by typing on focused element moves cursor to end in Chrome
                //setting input[type=file][value] to same value causes an error to be generated if it's non-empty
                if ((vnode.tag === "input" || vnode.tag === "textarea") && vnode.dom.value === "" + value && (isFileInput || vnode.dom === activeElement())) return;
                //setting select[value] to same value while having select open blinks select dropdown in Chrome
                if (vnode.tag === "select" && old !== null && vnode.dom.value === "" + value) return;
                //setting option[value] to same value while having select open blinks select dropdown in Chrome
                if (vnode.tag === "option" && old !== null && vnode.dom.value === "" + value) return;
                //setting input[type=file][value] to different value is an error if it's non-empty
                // Not ideal, but it at least works around the most common source of uncaught exceptions for now.
                if (isFileInput && "" + value !== "") {
                    console.error("`value` is read-only on file inputs!");
                    return;
                }
            /* eslint-enable no-implicit-coercion */ }
            vnode.dom[key] = value;
        } else if (typeof value === "boolean") {
            if (value) vnode.dom.setAttribute(key, "");
            else vnode.dom.removeAttribute(key);
        } else vnode.dom.setAttribute(key === "className" ? "class" : key, value);
    }
    function removeAttr(vnode, key, old, ns) {
        if (key === "key" || key === "is" || old == null || isLifecycleMethod(key)) return;
        if (key[0] === "o" && key[1] === "n") updateEvent(vnode, key, undefined);
        else if (key === "style") updateStyle(vnode.dom, old, null);
        else if (hasPropertyKey(vnode, key, ns) && key !== "className" && key !== "title" // creates "null" as title
         && !(key === "value" && (vnode.tag === "option" || vnode.tag === "select" && vnode.dom.selectedIndex === -1 && vnode.dom === activeElement())) && !(vnode.tag === "input" && key === "type")) vnode.dom[key] = null;
        else {
            var nsLastIndex = key.indexOf(":");
            if (nsLastIndex !== -1) key = key.slice(nsLastIndex + 1);
            if (old !== false) vnode.dom.removeAttribute(key === "className" ? "class" : key);
        }
    }
    function setLateSelectAttrs(vnode, attrs) {
        if ("value" in attrs) {
            if (attrs.value === null) {
                if (vnode.dom.selectedIndex !== -1) vnode.dom.value = null;
            } else {
                var normalized = "" + attrs.value // eslint-disable-line no-implicit-coercion
                ;
                if (vnode.dom.value !== normalized || vnode.dom.selectedIndex === -1) vnode.dom.value = normalized;
            }
        }
        if ("selectedIndex" in attrs) setAttr(vnode, "selectedIndex", null, attrs.selectedIndex, undefined);
    }
    function updateAttrs(vnode, old, attrs, ns) {
        if (old && old === attrs) console.warn("Don't reuse attrs object, use new object for every redraw, this will throw in next major");
        if (attrs != null) {
            // If you assign an input type that is not supported by IE 11 with an assignment expression, an error will occur.
            //
            // Also, the DOM does things to inputs based on the value, so it needs set first.
            // See: https://github.com/MithrilJS/mithril.js/issues/2622
            if (vnode.tag === "input" && attrs.type != null) vnode.dom.setAttribute("type", attrs.type);
            var isFileInput = vnode.tag === "input" && attrs.type === "file";
            for(var key in attrs)setAttr(vnode, key, old && old[key], attrs[key], ns, isFileInput);
        }
        var val;
        if (old != null) {
            for(var key in old)if ((val = old[key]) != null && (attrs == null || attrs[key] == null)) removeAttr(vnode, key, val, ns);
        }
    }
    function isFormAttribute(vnode, attr) {
        return attr === "value" || attr === "checked" || attr === "selectedIndex" || attr === "selected" && vnode.dom === activeElement() || vnode.tag === "option" && vnode.dom.parentNode === $doc.activeElement;
    }
    function isLifecycleMethod(attr) {
        return attr === "oninit" || attr === "oncreate" || attr === "onupdate" || attr === "onremove" || attr === "onbeforeremove" || attr === "onbeforeupdate";
    }
    function hasPropertyKey(vnode, key, ns) {
        // Filter out namespaced keys
        return ns === undefined && // If it's a custom element, just keep it.
        (vnode.tag.indexOf("-") > -1 || vnode.attrs != null && vnode.attrs.is || // If it's a normal element, let's try to avoid a few browser bugs.
        key !== "href" && key !== "list" && key !== "form" && key !== "width" && key !== "height" // && key !== "type"
        ) && key in vnode.dom;
    }
    //style
    var uppercaseRegex = /[A-Z]/g;
    function toLowerCase(capital) {
        return "-" + capital.toLowerCase();
    }
    function normalizeKey(key) {
        return key[0] === "-" && key[1] === "-" ? key : key === "cssFloat" ? "float" : key.replace(uppercaseRegex, toLowerCase);
    }
    function updateStyle(element, old, style) {
        if (old === style) ;
        else if (style == null) // New style is missing, just clear it.
        element.style.cssText = "";
        else if (typeof style !== "object") // New style is a string, let engine deal with patching.
        element.style.cssText = style;
        else if (old == null || typeof old !== "object") {
            // `old` is missing or a string, `style` is an object.
            element.style.cssText = "";
            // Add new style properties
            for(var key in style){
                var value = style[key];
                if (value != null) element.style.setProperty(normalizeKey(key), String(value));
            }
        } else {
            // Both old & new are (different) objects.
            // Update style properties that have changed
            for(var key in style){
                var value = style[key];
                if (value != null && (value = String(value)) !== String(old[key])) element.style.setProperty(normalizeKey(key), value);
            }
            // Remove style properties that no longer exist
            for(var key in old)if (old[key] != null && style[key] == null) element.style.removeProperty(normalizeKey(key));
        }
    }
    // Here's an explanation of how this works:
    // 1. The event names are always (by design) prefixed by `on`.
    // 2. The EventListener interface accepts either a function or an object
    //    with a `handleEvent` method.
    // 3. The object does not inherit from `Object.prototype`, to avoid
    //    any potential interference with that (e.g. setters).
    // 4. The event name is remapped to the handler before calling it.
    // 5. In function-based event handlers, `ev.target === this`. We replicate
    //    that below.
    // 6. In function-based event handlers, `return false` prevents the default
    //    action and stops event propagation. We replicate that below.
    function EventDict() {
        // Save this, so the current redraw is correctly tracked.
        this._ = currentRedraw;
    }
    EventDict.prototype = Object.create(null);
    EventDict.prototype.handleEvent = function(ev) {
        var handler = this["on" + ev.type];
        var result;
        if (typeof handler === "function") result = handler.call(ev.currentTarget, ev);
        else if (typeof handler.handleEvent === "function") handler.handleEvent(ev);
        if (this._ && ev.redraw !== false) (0, this._)();
        if (result === false) {
            ev.preventDefault();
            ev.stopPropagation();
        }
    };
    //event
    function updateEvent(vnode, key, value) {
        if (vnode.events != null) {
            vnode.events._ = currentRedraw;
            if (vnode.events[key] === value) return;
            if (value != null && (typeof value === "function" || typeof value === "object")) {
                if (vnode.events[key] == null) vnode.dom.addEventListener(key.slice(2), vnode.events, false);
                vnode.events[key] = value;
            } else {
                if (vnode.events[key] != null) vnode.dom.removeEventListener(key.slice(2), vnode.events, false);
                vnode.events[key] = undefined;
            }
        } else if (value != null && (typeof value === "function" || typeof value === "object")) {
            vnode.events = new EventDict();
            vnode.dom.addEventListener(key.slice(2), vnode.events, false);
            vnode.events[key] = value;
        }
    }
    //lifecycle
    function initLifecycle(source, vnode, hooks) {
        if (typeof source.oninit === "function") callHook.call(source.oninit, vnode);
        if (typeof source.oncreate === "function") hooks.push(callHook.bind(source.oncreate, vnode));
    }
    function updateLifecycle(source, vnode, hooks) {
        if (typeof source.onupdate === "function") hooks.push(callHook.bind(source.onupdate, vnode));
    }
    function shouldNotUpdate(vnode, old) {
        do {
            if (vnode.attrs != null && typeof vnode.attrs.onbeforeupdate === "function") {
                var force = callHook.call(vnode.attrs.onbeforeupdate, vnode, old);
                if (force !== undefined && !force) break;
            }
            if (typeof vnode.tag !== "string" && typeof vnode.state.onbeforeupdate === "function") {
                var force = callHook.call(vnode.state.onbeforeupdate, vnode, old);
                if (force !== undefined && !force) break;
            }
            return false;
        }while (false); // eslint-disable-line no-constant-condition
        vnode.dom = old.dom;
        vnode.domSize = old.domSize;
        vnode.instance = old.instance;
        // One would think having the actual latest attributes would be ideal,
        // but it doesn't let us properly diff based on our current internal
        // representation. We have to save not only the old DOM info, but also
        // the attributes used to create it, as we diff *that*, not against the
        // DOM directly (with a few exceptions in `setAttr`). And, of course, we
        // need to save the children and text as they are conceptually not
        // unlike special "attributes" internally.
        vnode.attrs = old.attrs;
        vnode.children = old.children;
        vnode.text = old.text;
        return true;
    }
    var currentDOM;
    return function(dom, vnodes, redraw) {
        if (!dom) throw new TypeError("DOM element being rendered to does not exist.");
        if (currentDOM != null && dom.contains(currentDOM)) throw new TypeError("Node is currently being rendered to and thus is locked.");
        var prevRedraw = currentRedraw;
        var prevDOM = currentDOM;
        var hooks = [];
        var active = activeElement();
        var namespace = dom.namespaceURI;
        currentDOM = dom;
        currentRedraw = typeof redraw === "function" ? redraw : undefined;
        currentRender = {};
        try {
            // First time rendering into a node clears it out
            if (dom.vnodes == null) dom.textContent = "";
            vnodes = Vnode.normalizeChildren(Array.isArray(vnodes) ? vnodes : [
                vnodes
            ]);
            updateNodes(dom, dom.vnodes, vnodes, hooks, null, namespace === "http://www.w3.org/1999/xhtml" ? undefined : namespace);
            dom.vnodes = vnodes;
            // `document.activeElement` can return null: https://html.spec.whatwg.org/multipage/interaction.html#dom-document-activeelement
            if (active != null && activeElement() !== active && typeof active.focus === "function") active.focus();
            for(var i = 0; i < hooks.length; i++)hooks[i]();
        } finally{
            currentRedraw = prevRedraw;
            currentDOM = prevDOM;
        }
    };
};

},{"../render/vnode":"egGtB","../render/domFor":"bjZmw"}],"bjZmw":[function(require,module,exports) {
"use strict";
var delayedRemoval = new WeakMap;
module.exports.delayedRemoval = delayedRemoval;
module.exports.domFor = function* domFor({ dom , domSize  }, { generation  } = {}) {
    if (dom != null) do {
        const { nextSibling  } = dom;
        if (delayedRemoval.get(dom) === generation) {
            yield dom;
            domSize--;
        }
        dom = nextSibling;
    }while (domSize);
};

},{}],"hNjwY":[function(require,module,exports) {
"use strict";
var Vnode = require("../render/vnode");
module.exports = function(render, schedule, console) {
    var subscriptions = [];
    var pending = false;
    var offset = -1;
    function sync() {
        for(offset = 0; offset < subscriptions.length; offset += 2)try {
            render(subscriptions[offset], Vnode(subscriptions[offset + 1]), redraw);
        } catch (e) {
            console.error(e);
        }
        offset = -1;
    }
    function redraw() {
        if (!pending) {
            pending = true;
            schedule(function() {
                pending = false;
                sync();
            });
        }
    }
    redraw.sync = sync;
    function mount(root, component) {
        if (component != null && component.view == null && typeof component !== "function") throw new TypeError("m.mount expects a component, not a vnode.");
        var index = subscriptions.indexOf(root);
        if (index >= 0) {
            subscriptions.splice(index, 2);
            if (index <= offset) offset -= 2;
            render(root, []);
        }
        if (component != null) {
            subscriptions.push(root, component);
            render(root, Vnode(component), redraw);
        }
    }
    return {
        mount: mount,
        redraw: redraw
    };
};

},{"../render/vnode":"egGtB"}],"7XXSl":[function(require,module,exports) {
"use strict";
var buildPathname = require("../pathname/build");
var hasOwn = require("../util/hasOwn");
module.exports = function($window, oncompletion) {
    function PromiseProxy(executor) {
        return new Promise(executor);
    }
    function makeRequest(url, args) {
        return new Promise(function(resolve, reject) {
            url = buildPathname(url, args.params);
            var method = args.method != null ? args.method.toUpperCase() : "GET";
            var body = args.body;
            var assumeJSON = (args.serialize == null || args.serialize === JSON.serialize) && !(body instanceof $window.FormData || body instanceof $window.URLSearchParams);
            var responseType = args.responseType || (typeof args.extract === "function" ? "" : "json");
            var xhr = new $window.XMLHttpRequest(), aborted = false, isTimeout = false;
            var original = xhr, replacedAbort;
            var abort = xhr.abort;
            xhr.abort = function() {
                aborted = true;
                abort.call(this);
            };
            xhr.open(method, url, args.async !== false, typeof args.user === "string" ? args.user : undefined, typeof args.password === "string" ? args.password : undefined);
            if (assumeJSON && body != null && !hasHeader(args, "content-type")) xhr.setRequestHeader("Content-Type", "application/json; charset=utf-8");
            if (typeof args.deserialize !== "function" && !hasHeader(args, "accept")) xhr.setRequestHeader("Accept", "application/json, text/*");
            if (args.withCredentials) xhr.withCredentials = args.withCredentials;
            if (args.timeout) xhr.timeout = args.timeout;
            xhr.responseType = responseType;
            for(var key in args.headers)if (hasOwn.call(args.headers, key)) xhr.setRequestHeader(key, args.headers[key]);
            xhr.onreadystatechange = function(ev) {
                // Don't throw errors on xhr.abort().
                if (aborted) return;
                if (ev.target.readyState === 4) try {
                    var success = ev.target.status >= 200 && ev.target.status < 300 || ev.target.status === 304 || /^file:\/\//i.test(url);
                    // When the response type isn't "" or "text",
                    // `xhr.responseText` is the wrong thing to use.
                    // Browsers do the right thing and throw here, and we
                    // should honor that and do the right thing by
                    // preferring `xhr.response` where possible/practical.
                    var response = ev.target.response, message;
                    if (responseType === "json") {
                        // For IE and Edge, which don't implement
                        // `responseType: "json"`.
                        if (!ev.target.responseType && typeof args.extract !== "function") // Handle no-content which will not parse.
                        try {
                            response = JSON.parse(ev.target.responseText);
                        } catch (e) {
                            response = null;
                        }
                    } else if (!responseType || responseType === "text") // Only use this default if it's text. If a parsed
                    // document is needed on old IE and friends (all
                    // unsupported), the user should use a custom
                    // `config` instead. They're already using this at
                    // their own risk.
                    {
                        if (response == null) response = ev.target.responseText;
                    }
                    if (typeof args.extract === "function") {
                        response = args.extract(ev.target, args);
                        success = true;
                    } else if (typeof args.deserialize === "function") response = args.deserialize(response);
                    if (success) {
                        if (typeof args.type === "function") {
                            if (Array.isArray(response)) for(var i = 0; i < response.length; i++)response[i] = new args.type(response[i]);
                            else response = new args.type(response);
                        }
                        resolve(response);
                    } else {
                        var completeErrorResponse = function() {
                            try {
                                message = ev.target.responseText;
                            } catch (e) {
                                message = response;
                            }
                            var error = new Error(message);
                            error.code = ev.target.status;
                            error.response = response;
                            reject(error);
                        };
                        if (xhr.status === 0) // Use setTimeout to push this code block onto the event queue
                        // This allows `xhr.ontimeout` to run in the case that there is a timeout
                        // Without this setTimeout, `xhr.ontimeout` doesn't have a chance to reject
                        // as `xhr.onreadystatechange` will run before it
                        setTimeout(function() {
                            if (isTimeout) return;
                            completeErrorResponse();
                        });
                        else completeErrorResponse();
                    }
                } catch (e) {
                    reject(e);
                }
            };
            xhr.ontimeout = function(ev) {
                isTimeout = true;
                var error = new Error("Request timed out");
                error.code = ev.target.status;
                reject(error);
            };
            if (typeof args.config === "function") {
                xhr = args.config(xhr, args, url) || xhr;
                // Propagate the `abort` to any replacement XHR as well.
                if (xhr !== original) {
                    replacedAbort = xhr.abort;
                    xhr.abort = function() {
                        aborted = true;
                        replacedAbort.call(this);
                    };
                }
            }
            if (body == null) xhr.send();
            else if (typeof args.serialize === "function") xhr.send(args.serialize(body));
            else if (body instanceof $window.FormData || body instanceof $window.URLSearchParams) xhr.send(body);
            else xhr.send(JSON.stringify(body));
        });
    }
    // In case the global Promise is some userland library's where they rely on
    // `foo instanceof this.constructor`, `this.constructor.resolve(value)`, or
    // similar. Let's *not* break them.
    PromiseProxy.prototype = Promise.prototype;
    PromiseProxy.__proto__ = Promise // eslint-disable-line no-proto
    ;
    function hasHeader(args, name) {
        for(var key in args.headers){
            if (hasOwn.call(args.headers, key) && key.toLowerCase() === name) return true;
        }
        return false;
    }
    return {
        request: function(url, args) {
            if (typeof url !== "string") {
                args = url;
                url = url.url;
            } else if (args == null) args = {};
            var promise1 = makeRequest(url, args);
            if (args.background === true) return promise1;
            var count = 0;
            function complete() {
                if (--count === 0 && typeof oncompletion === "function") oncompletion();
            }
            return wrap(promise1);
            function wrap(promise) {
                var then = promise.then;
                // Set the constructor, so engines know to not await or resolve
                // this as a native promise. At the time of writing, this is
                // only necessary for V8, but their behavior is the correct
                // behavior per spec. See this spec issue for more details:
                // https://github.com/tc39/ecma262/issues/1577. Also, see the
                // corresponding comment in `request/tests/test-request.js` for
                // a bit more background on the issue at hand.
                promise.constructor = PromiseProxy;
                promise.then = function() {
                    count++;
                    var next = then.apply(promise, arguments);
                    next.then(complete, function(e) {
                        complete();
                        if (count === 0) throw e;
                    });
                    return wrap(next);
                };
                return promise;
            }
        }
    };
};

},{"../pathname/build":"lXNwO","../util/hasOwn":"94qwS"}],"lXNwO":[function(require,module,exports) {
"use strict";
var buildQueryString = require("../querystring/build");
var assign = require("../util/assign");
// Returns `path` from `template` + `params`
module.exports = function(template, params) {
    if (/:([^\/\.-]+)(\.{3})?:/.test(template)) throw new SyntaxError("Template parameter names must be separated by either a '/', '-', or '.'.");
    if (params == null) return template;
    var queryIndex = template.indexOf("?");
    var hashIndex = template.indexOf("#");
    var queryEnd = hashIndex < 0 ? template.length : hashIndex;
    var pathEnd = queryIndex < 0 ? queryEnd : queryIndex;
    var path = template.slice(0, pathEnd);
    var query = {};
    assign(query, params);
    var resolved = path.replace(/:([^\/\.-]+)(\.{3})?/g, function(m, key, variadic) {
        delete query[key];
        // If no such parameter exists, don't interpolate it.
        if (params[key] == null) return m;
        // Escape normal parameters, but not variadic ones.
        return variadic ? params[key] : encodeURIComponent(String(params[key]));
    });
    // In case the template substitution adds new query/hash parameters.
    var newQueryIndex = resolved.indexOf("?");
    var newHashIndex = resolved.indexOf("#");
    var newQueryEnd = newHashIndex < 0 ? resolved.length : newHashIndex;
    var newPathEnd = newQueryIndex < 0 ? newQueryEnd : newQueryIndex;
    var result = resolved.slice(0, newPathEnd);
    if (queryIndex >= 0) result += template.slice(queryIndex, queryEnd);
    if (newQueryIndex >= 0) result += (queryIndex < 0 ? "?" : "&") + resolved.slice(newQueryIndex, newQueryEnd);
    var querystring = buildQueryString(query);
    if (querystring) result += (queryIndex < 0 && newQueryIndex < 0 ? "?" : "&") + querystring;
    if (hashIndex >= 0) result += template.slice(hashIndex);
    if (newHashIndex >= 0) result += (hashIndex < 0 ? "" : "&") + resolved.slice(newHashIndex);
    return result;
};

},{"../querystring/build":"dJUE4","../util/assign":"3fHzt"}],"dJUE4":[function(require,module,exports) {
"use strict";
module.exports = function(object) {
    if (Object.prototype.toString.call(object) !== "[object Object]") return "";
    var args = [];
    for(var key1 in object)destructure(key1, object[key1]);
    return args.join("&");
    function destructure(key, value) {
        if (Array.isArray(value)) {
            for(var i = 0; i < value.length; i++){
                destructure(key + "[" + i + "]", value[i]);
            }
        } else if (Object.prototype.toString.call(value) === "[object Object]") {
            for(var i in value){
                destructure(key + "[" + i + "]", value[i]);
            }
        } else args.push(encodeURIComponent(key) + (value != null && value !== "" ? "=" + encodeURIComponent(value) : ""));
    }
};

},{}],"3fHzt":[function(require,module,exports) {
// This exists so I'm only saving it once.
"use strict";
var hasOwn = require("./hasOwn");
module.exports = Object.assign || function(target, source) {
    for(var key in source)if (hasOwn.call(source, key)) target[key] = source[key];
};

},{"./hasOwn":"94qwS"}],"8HVTZ":[function(require,module,exports) {
"use strict";
var mountRedraw = require("./mount-redraw");
module.exports = require("./api/router")(typeof window !== "undefined" ? window : null, mountRedraw);

},{"./mount-redraw":"dvp1x","./api/router":"4yJlG"}],"4yJlG":[function(require,module,exports) {
"use strict";
var Vnode = require("../render/vnode");
var m = require("../render/hyperscript");
var buildPathname = require("../pathname/build");
var parsePathname = require("../pathname/parse");
var compileTemplate = require("../pathname/compileTemplate");
var assign = require("../util/assign");
var censor = require("../util/censor");
var sentinel = {};
function decodeURIComponentSave(component) {
    try {
        return decodeURIComponent(component);
    } catch (e) {
        return component;
    }
}
module.exports = function($window, mountRedraw) {
    var callAsync = $window == null ? null : typeof $window.setImmediate === "function" ? $window.setImmediate : $window.setTimeout;
    var p = Promise.resolve();
    var scheduled = false;
    // state === 0: init
    // state === 1: scheduled
    // state === 2: done
    var ready = false;
    var state1 = 0;
    var compiled, fallbackRoute;
    var currentResolver = sentinel, component, attrs, currentPath, lastUpdate;
    var RouterRoot = {
        onbeforeupdate: function() {
            state1 = state1 ? 2 : 1;
            return !(!state1 || sentinel === currentResolver);
        },
        onremove: function() {
            $window.removeEventListener("popstate", fireAsync, false);
            $window.removeEventListener("hashchange", resolveRoute, false);
        },
        view: function() {
            if (!state1 || sentinel === currentResolver) return;
            // Wrap in a fragment to preserve existing key semantics
            var vnode = [
                Vnode(component, attrs.key, attrs)
            ];
            if (currentResolver) vnode = currentResolver.render(vnode[0]);
            return vnode;
        }
    };
    var SKIP = route1.SKIP = {};
    function resolveRoute() {
        scheduled = false;
        // Consider the pathname holistically. The prefix might even be invalid,
        // but that's not our problem.
        var prefix = $window.location.hash;
        if (route1.prefix[0] !== "#") {
            prefix = $window.location.search + prefix;
            if (route1.prefix[0] !== "?") {
                prefix = $window.location.pathname + prefix;
                if (prefix[0] !== "/") prefix = "/" + prefix;
            }
        }
        // This seemingly useless `.concat()` speeds up the tests quite a bit,
        // since the representation is consistently a relatively poorly
        // optimized cons string.
        var path = prefix.concat().replace(/(?:%[a-f89][a-f0-9])+/gim, decodeURIComponentSave).slice(route1.prefix.length);
        var data = parsePathname(path);
        assign(data.params, $window.history.state);
        function reject(e) {
            console.error(e);
            setPath(fallbackRoute, null, {
                replace: true
            });
        }
        loop(0);
        function loop(i) {
            // state === 0: init
            // state === 1: scheduled
            // state === 2: done
            for(; i < compiled.length; i++)if (compiled[i].check(data)) {
                var payload = compiled[i].component;
                var matchedRoute = compiled[i].route;
                var localComp = payload;
                var update = lastUpdate = function(comp) {
                    if (update !== lastUpdate) return;
                    if (comp === SKIP) return loop(i + 1);
                    component = comp != null && (typeof comp.view === "function" || typeof comp === "function") ? comp : "div";
                    attrs = data.params, currentPath = path, lastUpdate = null;
                    currentResolver = payload.render ? payload : null;
                    if (state1 === 2) mountRedraw.redraw();
                    else {
                        state1 = 2;
                        mountRedraw.redraw.sync();
                    }
                };
                // There's no understating how much I *wish* I could
                // use `async`/`await` here...
                if (payload.view || typeof payload === "function") {
                    payload = {};
                    update(localComp);
                } else if (payload.onmatch) p.then(function() {
                    return payload.onmatch(data.params, path, matchedRoute);
                }).then(update, path === fallbackRoute ? null : reject);
                else update("div");
                return;
            }
            if (path === fallbackRoute) throw new Error("Could not resolve default route " + fallbackRoute + ".");
            setPath(fallbackRoute, null, {
                replace: true
            });
        }
    }
    // Set it unconditionally so `m.route.set` and `m.route.Link` both work,
    // even if neither `pushState` nor `hashchange` are supported. It's
    // cleared if `hashchange` is used, since that makes it automatically
    // async.
    function fireAsync() {
        if (!scheduled) {
            scheduled = true;
            // TODO: just do `mountRedraw.redraw()` here and elide the timer
            // dependency. Note that this will muck with tests a *lot*, so it's
            // not as easy of a change as it sounds.
            callAsync(resolveRoute);
        }
    }
    function setPath(path, data, options) {
        path = buildPathname(path, data);
        if (ready) {
            fireAsync();
            var state = options ? options.state : null;
            var title = options ? options.title : null;
            if (options && options.replace) $window.history.replaceState(state, title, route1.prefix + path);
            else $window.history.pushState(state, title, route1.prefix + path);
        } else $window.location.href = route1.prefix + path;
    }
    function route1(root, defaultRoute, routes) {
        if (!root) throw new TypeError("DOM element being rendered to does not exist.");
        compiled = Object.keys(routes).map(function(route) {
            if (route[0] !== "/") throw new SyntaxError("Routes must start with a '/'.");
            if (/:([^\/\.-]+)(\.{3})?:/.test(route)) throw new SyntaxError("Route parameter names must be separated with either '/', '.', or '-'.");
            return {
                route: route,
                component: routes[route],
                check: compileTemplate(route)
            };
        });
        fallbackRoute = defaultRoute;
        if (defaultRoute != null) {
            var defaultData = parsePathname(defaultRoute);
            if (!compiled.some(function(i) {
                return i.check(defaultData);
            })) throw new ReferenceError("Default route doesn't match any known routes.");
        }
        if (typeof $window.history.pushState === "function") $window.addEventListener("popstate", fireAsync, false);
        else if (route1.prefix[0] === "#") $window.addEventListener("hashchange", resolveRoute, false);
        ready = true;
        mountRedraw.mount(root, RouterRoot);
        resolveRoute();
    }
    route1.set = function(path, data, options) {
        if (lastUpdate != null) {
            options = options || {};
            options.replace = true;
        }
        lastUpdate = null;
        setPath(path, data, options);
    };
    route1.get = function() {
        return currentPath;
    };
    route1.prefix = "#!";
    route1.Link = {
        view: function(vnode) {
            // Omit the used parameters from the rendered element - they are
            // internal. Also, censor the various lifecycle methods.
            //
            // We don't strip the other parameters because for convenience we
            // let them be specified in the selector as well.
            var child = m(vnode.attrs.selector || "a", censor(vnode.attrs, [
                "options",
                "params",
                "selector",
                "onclick"
            ]), vnode.children);
            var options, onclick, href;
            // Let's provide a *right* way to disable a route link, rather than
            // letting people screw up accessibility on accident.
            //
            // The attribute is coerced so users don't get surprised over
            // `disabled: 0` resulting in a button that's somehow routable
            // despite being visibly disabled.
            if (child.attrs.disabled = Boolean(child.attrs.disabled)) {
                child.attrs.href = null;
                child.attrs["aria-disabled"] = "true";
            // If you *really* do want add `onclick` on a disabled link, use
            // an `oncreate` hook to add it.
            } else {
                options = vnode.attrs.options;
                onclick = vnode.attrs.onclick;
                // Easier to build it now to keep it isomorphic.
                href = buildPathname(child.attrs.href, vnode.attrs.params);
                child.attrs.href = route1.prefix + href;
                child.attrs.onclick = function(e) {
                    var result;
                    if (typeof onclick === "function") result = onclick.call(e.currentTarget, e);
                    else if (onclick == null || typeof onclick !== "object") ;
                    else if (typeof onclick.handleEvent === "function") onclick.handleEvent(e);
                    // Adapted from React Router's implementation:
                    // https://github.com/ReactTraining/react-router/blob/520a0acd48ae1b066eb0b07d6d4d1790a1d02482/packages/react-router-dom/modules/Link.js
                    //
                    // Try to be flexible and intuitive in how we handle links.
                    // Fun fact: links aren't as obvious to get right as you
                    // would expect. There's a lot more valid ways to click a
                    // link than this, and one might want to not simply click a
                    // link, but right click or command-click it to copy the
                    // link target, etc. Nope, this isn't just for blind people.
                    if (// Skip if `onclick` prevented default
                    result !== false && !e.defaultPrevented && (e.button === 0 || e.which === 0 || e.which === 1) && (!e.currentTarget.target || e.currentTarget.target === "_self") && // No modifier keys
                    !e.ctrlKey && !e.metaKey && !e.shiftKey && !e.altKey) {
                        e.preventDefault();
                        e.redraw = false;
                        route1.set(href, null, options);
                    }
                };
            }
            return child;
        }
    };
    route1.param = function(key) {
        return attrs && key != null ? attrs[key] : attrs;
    };
    return route1;
};

},{"../render/vnode":"egGtB","../render/hyperscript":"5oIm8","../pathname/build":"lXNwO","../pathname/parse":"jciPb","../pathname/compileTemplate":"dZhtQ","../util/assign":"3fHzt","../util/censor":"9jEja"}],"jciPb":[function(require,module,exports) {
"use strict";
var parseQueryString = require("../querystring/parse");
// Returns `{path, params}` from `url`
module.exports = function(url) {
    var queryIndex = url.indexOf("?");
    var hashIndex = url.indexOf("#");
    var queryEnd = hashIndex < 0 ? url.length : hashIndex;
    var pathEnd = queryIndex < 0 ? queryEnd : queryIndex;
    var path = url.slice(0, pathEnd).replace(/\/{2,}/g, "/");
    if (!path) path = "/";
    else if (path[0] !== "/") path = "/" + path;
    return {
        path: path,
        params: queryIndex < 0 ? {} : parseQueryString(url.slice(queryIndex + 1, queryEnd))
    };
};

},{"../querystring/parse":"1Bqsf"}],"1Bqsf":[function(require,module,exports) {
"use strict";
function decodeURIComponentSave(str) {
    try {
        return decodeURIComponent(str);
    } catch (err) {
        return str;
    }
}
module.exports = function(string) {
    if (string === "" || string == null) return {};
    if (string.charAt(0) === "?") string = string.slice(1);
    var entries = string.split("&"), counters = {}, data = {};
    for(var i = 0; i < entries.length; i++){
        var entry = entries[i].split("=");
        var key = decodeURIComponentSave(entry[0]);
        var value = entry.length === 2 ? decodeURIComponentSave(entry[1]) : "";
        if (value === "true") value = true;
        else if (value === "false") value = false;
        var levels = key.split(/\]\[?|\[/);
        var cursor = data;
        if (key.indexOf("[") > -1) levels.pop();
        for(var j = 0; j < levels.length; j++){
            var level = levels[j], nextLevel = levels[j + 1];
            var isNumber = nextLevel == "" || !isNaN(parseInt(nextLevel, 10));
            if (level === "") {
                var key = levels.slice(0, j).join();
                if (counters[key] == null) counters[key] = Array.isArray(cursor) ? cursor.length : 0;
                level = counters[key]++;
            } else if (level === "__proto__") break;
            if (j === levels.length - 1) cursor[level] = value;
            else {
                // Read own properties exclusively to disallow indirect
                // prototype pollution
                var desc = Object.getOwnPropertyDescriptor(cursor, level);
                if (desc != null) desc = desc.value;
                if (desc == null) cursor[level] = desc = isNumber ? [] : {};
                cursor = desc;
            }
        }
    }
    return data;
};

},{}],"dZhtQ":[function(require,module,exports) {
"use strict";
var parsePathname = require("./parse");
// Compiles a template into a function that takes a resolved path (without query
// strings) and returns an object containing the template parameters with their
// parsed values. This expects the input of the compiled template to be the
// output of `parsePathname`. Note that it does *not* remove query parameters
// specified in the template.
module.exports = function(template) {
    var templateData = parsePathname(template);
    var templateKeys = Object.keys(templateData.params);
    var keys = [];
    var regexp = new RegExp("^" + templateData.path.replace(// I escape literal text so people can use things like `:file.:ext` or
    // `:lang-:locale` in routes. This is all merged into one pass so I
    // don't also accidentally escape `-` and make it harder to detect it to
    // ban it from template parameters.
    /:([^\/.-]+)(\.{3}|\.(?!\.)|-)?|[\\^$*+.()|\[\]{}]/g, function(m, key, extra) {
        if (key == null) return "\\" + m;
        keys.push({
            k: key,
            r: extra === "..."
        });
        if (extra === "...") return "(.*)";
        if (extra === ".") return "([^/]+)\\.";
        return "([^/]+)" + (extra || "");
    }) + "$");
    return function(data) {
        // First, check the params. Usually, there isn't any, and it's just
        // checking a static set.
        for(var i = 0; i < templateKeys.length; i++){
            if (templateData.params[templateKeys[i]] !== data.params[templateKeys[i]]) return false;
        }
        // If no interpolations exist, let's skip all the ceremony
        if (!keys.length) return regexp.test(data.path);
        var values = regexp.exec(data.path);
        if (values == null) return false;
        for(var i = 0; i < keys.length; i++)data.params[keys[i].k] = keys[i].r ? values[i + 1] : decodeURIComponent(values[i + 1]);
        return true;
    };
};

},{"./parse":"jciPb"}],"9jEja":[function(require,module,exports) {
"use strict";
// Note: this is mildly perf-sensitive.
//
// It does *not* use `delete` - dynamic `delete`s usually cause objects to bail
// out into dictionary mode and just generally cause a bunch of optimization
// issues within engines.
//
// Ideally, I would've preferred to do this, if it weren't for the optimization
// issues:
//
// ```js
// const hasOwn = require("./hasOwn")
// const magic = [
//     "key", "oninit", "oncreate", "onbeforeupdate", "onupdate",
//     "onbeforeremove", "onremove",
// ]
// module.exports = (attrs, extras) => {
//     const result = Object.assign(Object.create(null), attrs)
//     for (const key of magic) delete result[key]
//     if (extras != null) for (const key of extras) delete result[key]
//     return result
// }
// ```
var hasOwn = require("./hasOwn");
// Words in RegExp literals are sometimes mangled incorrectly by the internal bundler, so use RegExp().
var magic = new RegExp("^(?:key|oninit|oncreate|onbeforeupdate|onupdate|onbeforeremove|onremove)$");
module.exports = function(attrs, extras) {
    var result = {};
    if (extras != null) {
        for(var key in attrs)if (hasOwn.call(attrs, key) && !magic.test(key) && extras.indexOf(key) < 0) result[key] = attrs[key];
    } else {
        for(var key in attrs)if (hasOwn.call(attrs, key) && !magic.test(key)) result[key] = attrs[key];
    }
    return result;
};

},{"./hasOwn":"94qwS"}],"14ZM6":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "DAVAttributeMap", ()=>DAVAttributeMap);
parcelHelpers.export(exports, "DAVClient", ()=>DAVClient);
parcelHelpers.export(exports, "DAVNamespace", ()=>DAVNamespace);
parcelHelpers.export(exports, "DAVNamespaceShort", ()=>DAVNamespaceShort);
parcelHelpers.export(exports, "addressBookQuery", ()=>addressBookQuery);
parcelHelpers.export(exports, "calendarMultiGet", ()=>calendarMultiGet);
parcelHelpers.export(exports, "calendarQuery", ()=>calendarQuery);
parcelHelpers.export(exports, "cleanupFalsy", ()=>cleanupFalsy);
parcelHelpers.export(exports, "collectionQuery", ()=>collectionQuery);
parcelHelpers.export(exports, "createAccount", ()=>createAccount);
parcelHelpers.export(exports, "createCalendarObject", ()=>createCalendarObject);
parcelHelpers.export(exports, "createDAVClient", ()=>createDAVClient);
parcelHelpers.export(exports, "createObject", ()=>createObject);
parcelHelpers.export(exports, "createVCard", ()=>createVCard);
parcelHelpers.export(exports, "davRequest", ()=>davRequest);
parcelHelpers.export(exports, "default", ()=>index);
parcelHelpers.export(exports, "deleteCalendarObject", ()=>deleteCalendarObject);
parcelHelpers.export(exports, "deleteObject", ()=>deleteObject);
parcelHelpers.export(exports, "deleteVCard", ()=>deleteVCard);
parcelHelpers.export(exports, "fetchAddressBooks", ()=>fetchAddressBooks);
parcelHelpers.export(exports, "fetchCalendarObjects", ()=>fetchCalendarObjects);
parcelHelpers.export(exports, "fetchCalendars", ()=>fetchCalendars);
parcelHelpers.export(exports, "fetchOauthTokens", ()=>fetchOauthTokens);
parcelHelpers.export(exports, "fetchVCards", ()=>fetchVCards);
parcelHelpers.export(exports, "freeBusyQuery", ()=>freeBusyQuery);
parcelHelpers.export(exports, "getBasicAuthHeaders", ()=>getBasicAuthHeaders);
parcelHelpers.export(exports, "getDAVAttribute", ()=>getDAVAttribute);
parcelHelpers.export(exports, "getOauthHeaders", ()=>getOauthHeaders);
parcelHelpers.export(exports, "isCollectionDirty", ()=>isCollectionDirty);
parcelHelpers.export(exports, "makeCalendar", ()=>makeCalendar);
parcelHelpers.export(exports, "propfind", ()=>propfind);
parcelHelpers.export(exports, "refreshAccessToken", ()=>refreshAccessToken);
parcelHelpers.export(exports, "smartCollectionSync", ()=>smartCollectionSync);
parcelHelpers.export(exports, "supportedReportSet", ()=>supportedReportSet);
parcelHelpers.export(exports, "syncCalendars", ()=>syncCalendars);
parcelHelpers.export(exports, "syncCollection", ()=>syncCollection);
parcelHelpers.export(exports, "updateCalendarObject", ()=>updateCalendarObject);
parcelHelpers.export(exports, "updateObject", ()=>updateObject);
parcelHelpers.export(exports, "updateVCard", ()=>updateVCard);
parcelHelpers.export(exports, "urlContains", ()=>urlContains);
parcelHelpers.export(exports, "urlEquals", ()=>urlEquals);
var _inherits = require("@babel/runtime/helpers/esm/inherits");
var _inheritsDefault = parcelHelpers.interopDefault(_inherits);
var _setPrototypeOf = require("@babel/runtime/helpers/esm/setPrototypeOf");
var _setPrototypeOfDefault = parcelHelpers.interopDefault(_setPrototypeOf);
var global = arguments[3];
function _wrapRegExp() {
    _wrapRegExp = function(re, groups) {
        return new BabelRegExp(re, void 0, groups);
    };
    var _super = RegExp.prototype, _groups = new WeakMap();
    function BabelRegExp(re, flags, groups) {
        var _this = new RegExp(re, flags);
        return _groups.set(_this, groups || _groups.get(re)), (0, _setPrototypeOfDefault.default)(_this, BabelRegExp.prototype);
    }
    function buildGroups(result, re) {
        var g = _groups.get(re);
        return Object.keys(g).reduce(function(groups, name) {
            return groups[name] = result[g[name]], groups;
        }, Object.create(null));
    }
    return (0, _inheritsDefault.default)(BabelRegExp, RegExp), BabelRegExp.prototype.exec = function(str) {
        var result = _super.exec.call(this, str);
        return result && (result.groups = buildGroups(result, this)), result;
    }, BabelRegExp.prototype[Symbol.replace] = function(str, substitution) {
        if ("string" == typeof substitution) {
            var groups = _groups.get(this);
            return _super[Symbol.replace].call(this, str, substitution.replace(/\$<([^>]+)>/g, function(_, name) {
                return "$" + groups[name];
            }));
        }
        if ("function" == typeof substitution) {
            var _this = this;
            return _super[Symbol.replace].call(this, str, function() {
                var args = arguments;
                return "object" != typeof args[args.length - 1] && (args = [].slice.call(args)).push(buildGroups(args, _this)), substitution.apply(this, args);
            });
        }
        return _super[Symbol.replace].call(this, str, substitution);
    }, _wrapRegExp.apply(this, arguments);
}
/*! *****************************************************************************
Copyright (c) Microsoft Corporation.

Permission to use, copy, modify, and/or distribute this software for any
purpose with or without fee is hereby granted.

THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
PERFORMANCE OF THIS SOFTWARE.
***************************************************************************** */ function __rest(s1, e) {
    var t = {};
    for(var p in s1)if (Object.prototype.hasOwnProperty.call(s1, p) && e.indexOf(p) < 0) t[p] = s1[p];
    if (s1 != null && typeof Object.getOwnPropertySymbols === "function") {
        for(var i = 0, p = Object.getOwnPropertySymbols(s1); i < p.length; i++)if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s1, p[i])) t[p[i]] = s1[p[i]];
    }
    return t;
}
function __awaiter(thisArg, _arguments, P, generator) {
    function adopt(value) {
        return value instanceof P ? value : new P(function(resolve) {
            resolve(value);
        });
    }
    return new (P || (P = Promise))(function(resolve, reject) {
        function fulfilled(value) {
            try {
                step(generator.next(value));
            } catch (e) {
                reject(e);
            }
        }
        function rejected(value) {
            try {
                step(generator["throw"](value));
            } catch (e) {
                reject(e);
            }
        }
        function step(result) {
            result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
}
var commonjsGlobal = typeof globalThis !== "undefined" ? globalThis : typeof window !== "undefined" ? window : typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : {};
function getAugmentedNamespace(n) {
    if (n.__esModule) return n;
    var a = Object.defineProperty({}, "__esModule", {
        value: true
    });
    Object.keys(n).forEach(function(k) {
        var d1 = Object.getOwnPropertyDescriptor(n, k);
        Object.defineProperty(a, k, d1.get ? d1 : {
            enumerable: true,
            get: function() {
                return n[k];
            }
        });
    });
    return a;
}
var browserPonyfill = {
    exports: {}
};
(function(module, exports1) {
    var global1 = typeof self !== "undefined" ? self : commonjsGlobal;
    var __self__ = function() {
        function F() {
            this.fetch = false;
            this.DOMException = global1.DOMException;
        }
        F.prototype = global1;
        return new F();
    }();
    (function(self) {
        (function(exports) {
            var support = {
                searchParams: "URLSearchParams" in self,
                iterable: "Symbol" in self && "iterator" in Symbol,
                blob: "FileReader" in self && "Blob" in self && function() {
                    try {
                        new Blob();
                        return true;
                    } catch (e) {
                        return false;
                    }
                }(),
                formData: "FormData" in self,
                arrayBuffer: "ArrayBuffer" in self
            };
            function isDataView(obj) {
                return obj && DataView.prototype.isPrototypeOf(obj);
            }
            if (support.arrayBuffer) {
                var viewClasses = [
                    "[object Int8Array]",
                    "[object Uint8Array]",
                    "[object Uint8ClampedArray]",
                    "[object Int16Array]",
                    "[object Uint16Array]",
                    "[object Int32Array]",
                    "[object Uint32Array]",
                    "[object Float32Array]",
                    "[object Float64Array]"
                ];
                var isArrayBufferView = ArrayBuffer.isView || function(obj) {
                    return obj && viewClasses.indexOf(Object.prototype.toString.call(obj)) > -1;
                };
            }
            function normalizeName(name) {
                if (typeof name !== "string") name = String(name);
                /[^a-z0-9\-#$%&'*+.^_`|~]/i.test(name);
                return name.toLowerCase();
            }
            function normalizeValue(value) {
                if (typeof value !== "string") value = String(value);
                return value;
            } // Build a destructive iterator for the value list
            function iteratorFor(items) {
                var iterator = {
                    next: function() {
                        var value = items.shift();
                        return {
                            done: value === undefined,
                            value: value
                        };
                    }
                };
                if (support.iterable) iterator[Symbol.iterator] = function() {
                    return iterator;
                };
                return iterator;
            }
            function Headers(headers) {
                this.map = {};
                if (headers instanceof Headers) headers.forEach(function(value, name) {
                    this.append(name, value);
                }, this);
                else if (Array.isArray(headers)) headers.forEach(function(header) {
                    this.append(header[0], header[1]);
                }, this);
                else if (headers) Object.getOwnPropertyNames(headers).forEach(function(name) {
                    this.append(name, headers[name]);
                }, this);
            }
            Headers.prototype.append = function(name, value) {
                name = normalizeName(name);
                value = normalizeValue(value);
                var oldValue = this.map[name];
                this.map[name] = oldValue ? oldValue + ", " + value : value;
            };
            Headers.prototype["delete"] = function(name) {
                delete this.map[normalizeName(name)];
            };
            Headers.prototype.get = function(name) {
                name = normalizeName(name);
                return this.has(name) ? this.map[name] : null;
            };
            Headers.prototype.has = function(name) {
                return this.map.hasOwnProperty(normalizeName(name));
            };
            Headers.prototype.set = function(name, value) {
                this.map[normalizeName(name)] = normalizeValue(value);
            };
            Headers.prototype.forEach = function(callback, thisArg) {
                for(var name in this.map)if (this.map.hasOwnProperty(name)) callback.call(thisArg, this.map[name], name, this);
            };
            Headers.prototype.keys = function() {
                var items = [];
                this.forEach(function(value, name) {
                    items.push(name);
                });
                return iteratorFor(items);
            };
            Headers.prototype.values = function() {
                var items = [];
                this.forEach(function(value) {
                    items.push(value);
                });
                return iteratorFor(items);
            };
            Headers.prototype.entries = function() {
                var items = [];
                this.forEach(function(value, name) {
                    items.push([
                        name,
                        value
                    ]);
                });
                return iteratorFor(items);
            };
            if (support.iterable) Headers.prototype[Symbol.iterator] = Headers.prototype.entries;
            function consumed(body) {
                if (body.bodyUsed) return Promise.reject(new TypeError("Already read"));
                body.bodyUsed = true;
            }
            function fileReaderReady(reader) {
                return new Promise(function(resolve, reject) {
                    reader.onload = function() {
                        resolve(reader.result);
                    };
                    reader.onerror = function() {
                        reject(reader.error);
                    };
                });
            }
            function readBlobAsArrayBuffer(blob) {
                var reader = new FileReader();
                var promise = fileReaderReady(reader);
                reader.readAsArrayBuffer(blob);
                return promise;
            }
            function readBlobAsText(blob) {
                var reader = new FileReader();
                var promise = fileReaderReady(reader);
                reader.readAsText(blob);
                return promise;
            }
            function readArrayBufferAsText(buf) {
                var view = new Uint8Array(buf);
                var chars = new Array(view.length);
                for(var i = 0; i < view.length; i++)chars[i] = String.fromCharCode(view[i]);
                return chars.join("");
            }
            function bufferClone(buf) {
                if (buf.slice) return buf.slice(0);
                else {
                    var view = new Uint8Array(buf.byteLength);
                    view.set(new Uint8Array(buf));
                    return view.buffer;
                }
            }
            function Body() {
                this.bodyUsed = false;
                this._initBody = function(body) {
                    this._bodyInit = body;
                    if (!body) this._bodyText = "";
                    else if (typeof body === "string") this._bodyText = body;
                    else if (support.blob && Blob.prototype.isPrototypeOf(body)) this._bodyBlob = body;
                    else if (support.formData && FormData.prototype.isPrototypeOf(body)) this._bodyFormData = body;
                    else if (support.searchParams && URLSearchParams.prototype.isPrototypeOf(body)) this._bodyText = body.toString();
                    else if (support.arrayBuffer && support.blob && isDataView(body)) {
                        this._bodyArrayBuffer = bufferClone(body.buffer); // IE 10-11 can't handle a DataView body.
                        this._bodyInit = new Blob([
                            this._bodyArrayBuffer
                        ]);
                    } else if (support.arrayBuffer && (ArrayBuffer.prototype.isPrototypeOf(body) || isArrayBufferView(body))) this._bodyArrayBuffer = bufferClone(body);
                    else this._bodyText = body = Object.prototype.toString.call(body);
                    if (!this.headers.get("content-type")) {
                        if (typeof body === "string") this.headers.set("content-type", "text/plain;charset=UTF-8");
                        else if (this._bodyBlob && this._bodyBlob.type) this.headers.set("content-type", this._bodyBlob.type);
                        else if (support.searchParams && URLSearchParams.prototype.isPrototypeOf(body)) this.headers.set("content-type", "application/x-www-form-urlencoded;charset=UTF-8");
                    }
                };
                if (support.blob) {
                    this.blob = function() {
                        var rejected = consumed(this);
                        if (rejected) return rejected;
                        if (this._bodyBlob) return Promise.resolve(this._bodyBlob);
                        else if (this._bodyArrayBuffer) return Promise.resolve(new Blob([
                            this._bodyArrayBuffer
                        ]));
                        else if (this._bodyFormData) throw new Error("could not read FormData body as blob");
                        else return Promise.resolve(new Blob([
                            this._bodyText
                        ]));
                    };
                    this.arrayBuffer = function() {
                        if (this._bodyArrayBuffer) return consumed(this) || Promise.resolve(this._bodyArrayBuffer);
                        else return this.blob().then(readBlobAsArrayBuffer);
                    };
                }
                this.text = function() {
                    var rejected = consumed(this);
                    if (rejected) return rejected;
                    if (this._bodyBlob) return readBlobAsText(this._bodyBlob);
                    else if (this._bodyArrayBuffer) return Promise.resolve(readArrayBufferAsText(this._bodyArrayBuffer));
                    else if (this._bodyFormData) throw new Error("could not read FormData body as text");
                    else return Promise.resolve(this._bodyText);
                };
                if (support.formData) this.formData = function() {
                    return this.text().then(decode);
                };
                this.json = function() {
                    return this.text().then(JSON.parse);
                };
                return this;
            } // HTTP methods whose capitalization should be normalized
            var methods = [
                "DELETE",
                "GET",
                "HEAD",
                "OPTIONS",
                "POST",
                "PUT"
            ];
            function normalizeMethod(method) {
                var upcased = method.toUpperCase();
                return methods.indexOf(upcased) > -1 ? upcased : method;
            }
            function Request(input, options1) {
                options1 = options1 || {};
                var body = options1.body;
                if (input instanceof Request) {
                    if (input.bodyUsed) throw new TypeError("Already read");
                    this.url = input.url;
                    this.credentials = input.credentials;
                    if (!options1.headers) this.headers = new Headers(input.headers);
                    this.method = input.method;
                    this.mode = input.mode;
                    this.signal = input.signal;
                    if (!body && input._bodyInit != null) {
                        body = input._bodyInit;
                        input.bodyUsed = true;
                    }
                } else this.url = String(input);
                this.credentials = options1.credentials || this.credentials || "same-origin";
                if (options1.headers || !this.headers) this.headers = new Headers(options1.headers);
                this.method = normalizeMethod(options1.method || this.method || "GET");
                this.mode = options1.mode || this.mode || null;
                this.signal = options1.signal || this.signal;
                this.referrer = null;
                if ((this.method === "GET" || this.method === "HEAD") && body) throw new TypeError("Body not allowed for GET or HEAD requests");
                this._initBody(body);
            }
            Request.prototype.clone = function() {
                return new Request(this, {
                    body: this._bodyInit
                });
            };
            function decode(body) {
                var form = new FormData();
                body.trim().split("&").forEach(function(bytes) {
                    if (bytes) {
                        var split = bytes.split("=");
                        var name = split.shift().replace(/\+/g, " ");
                        var value = split.join("=").replace(/\+/g, " ");
                        form.append(decodeURIComponent(name), decodeURIComponent(value));
                    }
                });
                return form;
            }
            function parseHeaders(rawHeaders) {
                var headers = new Headers(); // Replace instances of \r\n and \n followed by at least one space or horizontal tab with a space
                // https://tools.ietf.org/html/rfc7230#section-3.2
                var preProcessedHeaders = rawHeaders.replace(/\r?\n[\t ]+/g, " ");
                preProcessedHeaders.split(/\r?\n/).forEach(function(line) {
                    var parts = line.split(":");
                    var key = parts.shift().trim();
                    if (key) {
                        var value = parts.join(":").trim();
                        headers.append(key, value);
                    }
                });
                return headers;
            }
            Body.call(Request.prototype);
            function Response(bodyInit, options2) {
                if (!options2) options2 = {};
                this.type = "default";
                this.status = options2.status === undefined ? 200 : options2.status;
                this.ok = this.status >= 200 && this.status < 300;
                this.statusText = "statusText" in options2 ? options2.statusText : "OK";
                this.headers = new Headers(options2.headers);
                this.url = options2.url || "";
                this._initBody(bodyInit);
            }
            Body.call(Response.prototype);
            Response.prototype.clone = function() {
                return new Response(this._bodyInit, {
                    status: this.status,
                    statusText: this.statusText,
                    headers: new Headers(this.headers),
                    url: this.url
                });
            };
            Response.error = function() {
                var response = new Response(null, {
                    status: 0,
                    statusText: ""
                });
                response.type = "error";
                return response;
            };
            var redirectStatuses = [
                301,
                302,
                303,
                307,
                308
            ];
            Response.redirect = function(url, status) {
                if (redirectStatuses.indexOf(status) === -1) throw new RangeError("Invalid status code");
                return new Response(null, {
                    status: status,
                    headers: {
                        location: url
                    }
                });
            };
            exports.DOMException = self.DOMException;
            try {
                new exports.DOMException();
            } catch (err) {
                exports.DOMException = function(message, name) {
                    this.message = message;
                    this.name = name;
                    var error = Error(message);
                    this.stack = error.stack;
                };
                exports.DOMException.prototype = Object.create(Error.prototype);
                exports.DOMException.prototype.constructor = exports.DOMException;
            }
            function fetch(input, init1) {
                return new Promise(function(resolve, reject) {
                    var request1 = new Request(input, init1);
                    if (request1.signal && request1.signal.aborted) return reject(new exports.DOMException("Aborted", "AbortError"));
                    var xhr = new XMLHttpRequest({
                        mozSystem: true
                    });
                    function abortXhr() {
                        xhr.abort();
                    }
                    xhr.onload = function() {
                        var options3 = {
                            status: xhr.status,
                            statusText: xhr.statusText,
                            headers: parseHeaders(xhr.getAllResponseHeaders() || "")
                        };
                        options3.url = "responseURL" in xhr ? xhr.responseURL : options3.headers.get("X-Request-URL");
                        var body = "response" in xhr ? xhr.response : xhr.responseText;
                        resolve(new Response(body, options3));
                    };
                    xhr.onerror = function() {
                        reject(new TypeError("Network request failed"));
                    };
                    xhr.ontimeout = function() {
                        reject(new TypeError("Network request failed"));
                    };
                    xhr.onabort = function() {
                        reject(new exports.DOMException("Aborted", "AbortError"));
                    };
                    xhr.open(request1.method, request1.url, true);
                    if (request1.credentials === "include") xhr.withCredentials = true;
                    else if (request1.credentials === "omit") xhr.withCredentials = false;
                    if ("responseType" in xhr && support.blob) xhr.responseType = "blob";
                    request1.headers.forEach(function(value, name) {
                        xhr.setRequestHeader(name, value);
                    });
                    if (request1.signal) {
                        request1.signal.addEventListener("abort", abortXhr);
                        xhr.onreadystatechange = function() {
                            // DONE (success or failure)
                            if (xhr.readyState === 4) request1.signal.removeEventListener("abort", abortXhr);
                        };
                    }
                    xhr.send(typeof request1._bodyInit === "undefined" ? null : request1._bodyInit);
                });
            }
            fetch.polyfill = true;
            if (!self.fetch) {
                self.fetch = fetch;
                self.Headers = Headers;
                self.Request = Request;
                self.Response = Response;
            }
            exports.Headers = Headers;
            exports.Request = Request;
            exports.Response = Response;
            exports.fetch = fetch;
            Object.defineProperty(exports, "__esModule", {
                value: true
            });
            return exports;
        })({});
    })(__self__);
    __self__.fetch.ponyfill = true; // Remove "polyfill" property added by whatwg-fetch
    delete __self__.fetch.polyfill; // Choose between native implementation (global) or custom implementation (__self__)
    // var ctx = global.fetch ? global : __self__;
    var ctx = __self__; // this line disable service worker support temporarily
    exports1 = ctx.fetch; // To enable: import fetch from 'cross-fetch'
    exports1.default = ctx.fetch; // For TypeScript consumers without esModuleInterop.
    exports1.fetch = ctx.fetch; // To enable: import {fetch} from 'cross-fetch'
    exports1.Headers = ctx.Headers;
    exports1.Request = ctx.Request;
    exports1.Response = ctx.Response;
    module.exports = exports1;
})(browserPonyfill, browserPonyfill.exports);
var global$1 = typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {}; // shim for using process in browser
// based off https://github.com/defunctzombie/node-process/blob/master/browser.js
function defaultSetTimout() {
    throw new Error("setTimeout has not been defined");
}
function defaultClearTimeout() {
    throw new Error("clearTimeout has not been defined");
}
var cachedSetTimeout = defaultSetTimout;
var cachedClearTimeout = defaultClearTimeout;
if (typeof global$1.setTimeout === "function") cachedSetTimeout = setTimeout;
if (typeof global$1.clearTimeout === "function") cachedClearTimeout = clearTimeout;
function runTimeout(fun) {
    if (cachedSetTimeout === setTimeout) //normal enviroments in sane situations
    return setTimeout(fun, 0);
     // if setTimeout wasn't available but was latter defined
    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {
        cachedSetTimeout = setTimeout;
        return setTimeout(fun, 0);
    }
    try {
        // when when somebody has screwed with setTimeout but no I.E. maddness
        return cachedSetTimeout(fun, 0);
    } catch (e) {
        try {
            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally
            return cachedSetTimeout.call(null, fun, 0);
        } catch (e) {
            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error
            return cachedSetTimeout.call(this, fun, 0);
        }
    }
}
function runClearTimeout(marker) {
    if (cachedClearTimeout === clearTimeout) //normal enviroments in sane situations
    return clearTimeout(marker);
     // if clearTimeout wasn't available but was latter defined
    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {
        cachedClearTimeout = clearTimeout;
        return clearTimeout(marker);
    }
    try {
        // when when somebody has screwed with setTimeout but no I.E. maddness
        return cachedClearTimeout(marker);
    } catch (e) {
        try {
            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally
            return cachedClearTimeout.call(null, marker);
        } catch (e) {
            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.
            // Some versions of I.E. have different rules for clearTimeout vs setTimeout
            return cachedClearTimeout.call(this, marker);
        }
    }
}
var queue = [];
var draining = false;
var currentQueue;
var queueIndex = -1;
function cleanUpNextTick() {
    if (!draining || !currentQueue) return;
    draining = false;
    if (currentQueue.length) queue = currentQueue.concat(queue);
    else queueIndex = -1;
    if (queue.length) drainQueue();
}
function drainQueue() {
    if (draining) return;
    var timeout = runTimeout(cleanUpNextTick);
    draining = true;
    var len = queue.length;
    while(len){
        currentQueue = queue;
        queue = [];
        while(++queueIndex < len)if (currentQueue) currentQueue[queueIndex].run();
        queueIndex = -1;
        len = queue.length;
    }
    currentQueue = null;
    draining = false;
    runClearTimeout(timeout);
}
function nextTick(fun) {
    var args = new Array(arguments.length - 1);
    if (arguments.length > 1) for(var i = 1; i < arguments.length; i++)args[i - 1] = arguments[i];
    queue.push(new Item(fun, args));
    if (queue.length === 1 && !draining) runTimeout(drainQueue);
} // v8 likes predictible objects
function Item(fun, array) {
    this.fun = fun;
    this.array = array;
}
Item.prototype.run = function() {
    this.fun.apply(null, this.array);
};
var title = "browser";
var platform = "browser";
var browser$1 = true;
var env = {};
var argv = [];
var version = ""; // empty string to avoid regexp issues
var versions = {};
var release = {};
var config = {};
function noop() {}
var on = noop;
var addListener = noop;
var once = noop;
var off = noop;
var removeListener = noop;
var removeAllListeners = noop;
var emit = noop;
function binding(name) {
    throw new Error("process.binding is not supported");
}
function cwd() {
    return "/";
}
function chdir(dir) {
    throw new Error("process.chdir is not supported");
}
function umask() {
    return 0;
} // from https://github.com/kumavis/browser-process-hrtime/blob/master/index.js
var performance = global$1.performance || {};
var performanceNow = performance.now || performance.mozNow || performance.msNow || performance.oNow || performance.webkitNow || function() {
    return new Date().getTime();
}; // generate timestamp or delta
// see http://nodejs.org/api/process.html#process_process_hrtime
function hrtime(previousTimestamp) {
    var clocktime = performanceNow.call(performance) * 1e-3;
    var seconds = Math.floor(clocktime);
    var nanoseconds = Math.floor(clocktime % 1 * 1e9);
    if (previousTimestamp) {
        seconds = seconds - previousTimestamp[0];
        nanoseconds = nanoseconds - previousTimestamp[1];
        if (nanoseconds < 0) {
            seconds--;
            nanoseconds += 1e9;
        }
    }
    return [
        seconds,
        nanoseconds
    ];
}
var startTime = new Date();
function uptime() {
    var currentTime = new Date();
    var dif = currentTime - startTime;
    return dif / 1000;
}
var browser$1$1 = {
    nextTick: nextTick,
    title: title,
    browser: browser$1,
    env: env,
    argv: argv,
    version: version,
    versions: versions,
    on: on,
    addListener: addListener,
    once: once,
    off: off,
    removeListener: removeListener,
    removeAllListeners: removeAllListeners,
    emit: emit,
    binding: binding,
    cwd: cwd,
    chdir: chdir,
    umask: umask,
    hrtime: hrtime,
    platform: platform,
    release: release,
    config: config,
    uptime: uptime
};
var browser = {
    exports: {}
};
/**
 * Helpers.
 */ var s = 1000;
var m = s * 60;
var h = m * 60;
var d = h * 24;
var w = d * 7;
var y = d * 365.25;
/**
 * Parse or format the given `val`.
 *
 * Options:
 *
 *  - `long` verbose formatting [false]
 *
 * @param {String|Number} val
 * @param {Object} [options]
 * @throws {Error} throw an error if val is not a non-empty string or a number
 * @return {String|Number}
 * @api public
 */ var ms = function(val, options4) {
    options4 = options4 || {};
    var type = typeof val;
    if (type === "string" && val.length > 0) return parse(val);
    else if (type === "number" && isFinite(val)) return options4.long ? fmtLong(val) : fmtShort(val);
    throw new Error("val is not a non-empty string or a valid number. val=" + JSON.stringify(val));
};
/**
 * Parse the given `str` and return milliseconds.
 *
 * @param {String} str
 * @return {Number}
 * @api private
 */ function parse(str) {
    str = String(str);
    if (str.length > 100) return;
    var match = /^(-?(?:\d+)?\.?\d+) *(milliseconds?|msecs?|ms|seconds?|secs?|s|minutes?|mins?|m|hours?|hrs?|h|days?|d|weeks?|w|years?|yrs?|y)?$/i.exec(str);
    if (!match) return;
    var n = parseFloat(match[1]);
    var type = (match[2] || "ms").toLowerCase();
    switch(type){
        case "years":
        case "year":
        case "yrs":
        case "yr":
        case "y":
            return n * y;
        case "weeks":
        case "week":
        case "w":
            return n * w;
        case "days":
        case "day":
        case "d":
            return n * d;
        case "hours":
        case "hour":
        case "hrs":
        case "hr":
        case "h":
            return n * h;
        case "minutes":
        case "minute":
        case "mins":
        case "min":
        case "m":
            return n * m;
        case "seconds":
        case "second":
        case "secs":
        case "sec":
        case "s":
            return n * s;
        case "milliseconds":
        case "millisecond":
        case "msecs":
        case "msec":
        case "ms":
            return n;
        default:
            return undefined;
    }
}
/**
 * Short format for `ms`.
 *
 * @param {Number} ms
 * @return {String}
 * @api private
 */ function fmtShort(ms1) {
    var msAbs = Math.abs(ms1);
    if (msAbs >= d) return Math.round(ms1 / d) + "d";
    if (msAbs >= h) return Math.round(ms1 / h) + "h";
    if (msAbs >= m) return Math.round(ms1 / m) + "m";
    if (msAbs >= s) return Math.round(ms1 / s) + "s";
    return ms1 + "ms";
}
/**
 * Long format for `ms`.
 *
 * @param {Number} ms
 * @return {String}
 * @api private
 */ function fmtLong(ms2) {
    var msAbs = Math.abs(ms2);
    if (msAbs >= d) return plural(ms2, msAbs, d, "day");
    if (msAbs >= h) return plural(ms2, msAbs, h, "hour");
    if (msAbs >= m) return plural(ms2, msAbs, m, "minute");
    if (msAbs >= s) return plural(ms2, msAbs, s, "second");
    return ms2 + " ms";
}
/**
 * Pluralization helper.
 */ function plural(ms3, msAbs, n, name) {
    var isPlural = msAbs >= n * 1.5;
    return Math.round(ms3 / n) + " " + name + (isPlural ? "s" : "");
}
/**
 * This is the common logic for both the Node.js and web browser
 * implementations of `debug()`.
 */ function setup(env1) {
    createDebug.debug = createDebug;
    createDebug.default = createDebug;
    createDebug.coerce = coerce;
    createDebug.disable = disable;
    createDebug.enable = enable;
    createDebug.enabled = enabled;
    createDebug.humanize = ms;
    createDebug.destroy = destroy;
    Object.keys(env1).forEach((key)=>{
        createDebug[key] = env1[key];
    });
    /**
   * The currently active debug mode names, and names to skip.
   */ createDebug.names = [];
    createDebug.skips = [];
    /**
   * Map of special "%n" handling functions, for the debug "format" argument.
   *
   * Valid key names are a single, lower or upper-case letter, i.e. "n" and "N".
   */ createDebug.formatters = {};
    /**
   * Selects a color for a debug namespace
   * @param {String} namespace The namespace string for the debug instance to be colored
   * @return {Number|String} An ANSI color code for the given namespace
   * @api private
   */ function selectColor(namespace) {
        let hash = 0;
        for(let i = 0; i < namespace.length; i++){
            hash = (hash << 5) - hash + namespace.charCodeAt(i);
            hash |= 0; // Convert to 32bit integer
        }
        return createDebug.colors[Math.abs(hash) % createDebug.colors.length];
    }
    createDebug.selectColor = selectColor;
    /**
   * Create a debugger with the given `namespace`.
   *
   * @param {String} namespace
   * @return {Function}
   * @api public
   */ function createDebug(namespace) {
        let prevTime;
        let enableOverride = null;
        let namespacesCache;
        let enabledCache;
        function debug1(...args) {
            // Disabled?
            if (!debug1.enabled) return;
            const self = debug1; // Set `diff` timestamp
            const curr = Number(new Date());
            const ms4 = curr - (prevTime || curr);
            self.diff = ms4;
            self.prev = prevTime;
            self.curr = curr;
            prevTime = curr;
            args[0] = createDebug.coerce(args[0]);
            if (typeof args[0] !== "string") // Anything else let's inspect with %O
            args.unshift("%O");
             // Apply any `formatters` transformations
            let index1 = 0;
            args[0] = args[0].replace(/%([a-zA-Z%])/g, (match, format)=>{
                // If we encounter an escaped % then don't increase the array index
                if (match === "%%") return "%";
                index1++;
                const formatter = createDebug.formatters[format];
                if (typeof formatter === "function") {
                    const val = args[index1];
                    match = formatter.call(self, val); // Now we need to remove `args[index]` since it's inlined in the `format`
                    args.splice(index1, 1);
                    index1--;
                }
                return match;
            }); // Apply env-specific formatting (colors, etc.)
            createDebug.formatArgs.call(self, args);
            const logFn = self.log || createDebug.log;
            logFn.apply(self, args);
        }
        debug1.namespace = namespace;
        debug1.useColors = createDebug.useColors();
        debug1.color = createDebug.selectColor(namespace);
        debug1.extend = extend;
        debug1.destroy = createDebug.destroy; // XXX Temporary. Will be removed in the next major release.
        Object.defineProperty(debug1, "enabled", {
            enumerable: true,
            configurable: false,
            get: ()=>{
                if (enableOverride !== null) return enableOverride;
                if (namespacesCache !== createDebug.namespaces) {
                    namespacesCache = createDebug.namespaces;
                    enabledCache = createDebug.enabled(namespace);
                }
                return enabledCache;
            },
            set: (v)=>{
                enableOverride = v;
            }
        }); // Env-specific initialization logic for debug instances
        if (typeof createDebug.init === "function") createDebug.init(debug1);
        return debug1;
    }
    function extend(namespace, delimiter) {
        const newDebug = createDebug(this.namespace + (typeof delimiter === "undefined" ? ":" : delimiter) + namespace);
        newDebug.log = this.log;
        return newDebug;
    }
    /**
   * Enables a debug mode by namespaces. This can include modes
   * separated by a colon and wildcards.
   *
   * @param {String} namespaces
   * @api public
   */ function enable(namespaces) {
        createDebug.save(namespaces);
        createDebug.namespaces = namespaces;
        createDebug.names = [];
        createDebug.skips = [];
        let i;
        const split = (typeof namespaces === "string" ? namespaces : "").split(/[\s,]+/);
        const len = split.length;
        for(i = 0; i < len; i++){
            if (!split[i]) continue;
            namespaces = split[i].replace(/\*/g, ".*?");
            if (namespaces[0] === "-") createDebug.skips.push(new RegExp("^" + namespaces.slice(1) + "$"));
            else createDebug.names.push(new RegExp("^" + namespaces + "$"));
        }
    }
    /**
   * Disable debug output.
   *
   * @return {String} namespaces
   * @api public
   */ function disable() {
        const namespaces = [
            ...createDebug.names.map(toNamespace),
            ...createDebug.skips.map(toNamespace).map((namespace)=>"-" + namespace)
        ].join(",");
        createDebug.enable("");
        return namespaces;
    }
    /**
   * Returns true if the given mode name is enabled, false otherwise.
   *
   * @param {String} name
   * @return {Boolean}
   * @api public
   */ function enabled(name) {
        if (name[name.length - 1] === "*") return true;
        let i;
        let len;
        for(i = 0, len = createDebug.skips.length; i < len; i++){
            if (createDebug.skips[i].test(name)) return false;
        }
        for(i = 0, len = createDebug.names.length; i < len; i++){
            if (createDebug.names[i].test(name)) return true;
        }
        return false;
    }
    /**
   * Convert regexp to namespace
   *
   * @param {RegExp} regxep
   * @return {String} namespace
   * @api private
   */ function toNamespace(regexp) {
        return regexp.toString().substring(2, regexp.toString().length - 2).replace(/\.\*\?$/, "*");
    }
    /**
   * Coerce `val`.
   *
   * @param {Mixed} val
   * @return {Mixed}
   * @api private
   */ function coerce(val) {
        if (val instanceof Error) return val.stack || val.message;
        return val;
    }
    /**
   * XXX DO NOT USE. This is a temporary stub function.
   * XXX It WILL be removed in the next major release.
   */ function destroy() {
        console.warn("Instance method `debug.destroy()` is deprecated and no longer does anything. It will be removed in the next major version of `debug`.");
    }
    createDebug.enable(createDebug.load());
    return createDebug;
}
var common = setup;
(function(module, exports) {
    /**
   * This is the web browser implementation of `debug()`.
   */ exports.formatArgs = formatArgs;
    exports.save = save;
    exports.load = load;
    exports.useColors = useColors;
    exports.storage = localstorage();
    exports.destroy = (()=>{
        let warned = false;
        return ()=>{
            if (!warned) {
                warned = true;
                console.warn("Instance method `debug.destroy()` is deprecated and no longer does anything. It will be removed in the next major version of `debug`.");
            }
        };
    })();
    /**
   * Colors.
   */ exports.colors = [
        "#0000CC",
        "#0000FF",
        "#0033CC",
        "#0033FF",
        "#0066CC",
        "#0066FF",
        "#0099CC",
        "#0099FF",
        "#00CC00",
        "#00CC33",
        "#00CC66",
        "#00CC99",
        "#00CCCC",
        "#00CCFF",
        "#3300CC",
        "#3300FF",
        "#3333CC",
        "#3333FF",
        "#3366CC",
        "#3366FF",
        "#3399CC",
        "#3399FF",
        "#33CC00",
        "#33CC33",
        "#33CC66",
        "#33CC99",
        "#33CCCC",
        "#33CCFF",
        "#6600CC",
        "#6600FF",
        "#6633CC",
        "#6633FF",
        "#66CC00",
        "#66CC33",
        "#9900CC",
        "#9900FF",
        "#9933CC",
        "#9933FF",
        "#99CC00",
        "#99CC33",
        "#CC0000",
        "#CC0033",
        "#CC0066",
        "#CC0099",
        "#CC00CC",
        "#CC00FF",
        "#CC3300",
        "#CC3333",
        "#CC3366",
        "#CC3399",
        "#CC33CC",
        "#CC33FF",
        "#CC6600",
        "#CC6633",
        "#CC9900",
        "#CC9933",
        "#CCCC00",
        "#CCCC33",
        "#FF0000",
        "#FF0033",
        "#FF0066",
        "#FF0099",
        "#FF00CC",
        "#FF00FF",
        "#FF3300",
        "#FF3333",
        "#FF3366",
        "#FF3399",
        "#FF33CC",
        "#FF33FF",
        "#FF6600",
        "#FF6633",
        "#FF9900",
        "#FF9933",
        "#FFCC00",
        "#FFCC33"
    ];
    /**
   * Currently only WebKit-based Web Inspectors, Firefox >= v31,
   * and the Firebug extension (any Firefox version) are known
   * to support "%c" CSS customizations.
   *
   * TODO: add a `localStorage` variable to explicitly enable/disable colors
   */ // eslint-disable-next-line complexity
    function useColors() {
        // NB: In an Electron preload script, document will be defined but not fully
        // initialized. Since we know we're in Chrome, we'll just detect this case
        // explicitly
        if (typeof window !== "undefined" && window.process && (window.process.type === "renderer" || window.process.__nwjs)) return true;
         // Internet Explorer and Edge do not support colors.
        if (typeof navigator !== "undefined" && navigator.userAgent && navigator.userAgent.toLowerCase().match(/(edge|trident)\/(\d+)/)) return false;
         // Is webkit? http://stackoverflow.com/a/16459606/376773
        // document is undefined in react-native: https://github.com/facebook/react-native/pull/1632
        return typeof document !== "undefined" && document.documentElement && document.documentElement.style && document.documentElement.style.WebkitAppearance || typeof window !== "undefined" && window.console && (window.console.firebug || window.console.exception && window.console.table) || // https://developer.mozilla.org/en-US/docs/Tools/Web_Console#Styling_messages
        typeof navigator !== "undefined" && navigator.userAgent && navigator.userAgent.toLowerCase().match(/firefox\/(\d+)/) && parseInt(RegExp.$1, 10) >= 31 || typeof navigator !== "undefined" && navigator.userAgent && navigator.userAgent.toLowerCase().match(/applewebkit\/(\d+)/);
    }
    /**
   * Colorize log arguments if enabled.
   *
   * @api public
   */ function formatArgs(args) {
        args[0] = (this.useColors ? "%c" : "") + this.namespace + (this.useColors ? " %c" : " ") + args[0] + (this.useColors ? "%c " : " ") + "+" + module.exports.humanize(this.diff);
        if (!this.useColors) return;
        const c = "color: " + this.color;
        args.splice(1, 0, c, "color: inherit"); // The final "%c" is somewhat tricky, because there could be other
        // arguments passed either before or after the %c, so we need to
        // figure out the correct index to insert the CSS into
        let index2 = 0;
        let lastC = 0;
        args[0].replace(/%[a-zA-Z%]/g, (match)=>{
            if (match === "%%") return;
            index2++;
            if (match === "%c") // We only are interested in the *last* %c
            // (the user may have provided their own)
            lastC = index2;
        });
        args.splice(lastC, 0, c);
    }
    /**
   * Invokes `console.debug()` when available.
   * No-op when `console.debug` is not a "function".
   * If `console.debug` is not available, falls back
   * to `console.log`.
   *
   * @api public
   */ exports.log = console.debug || console.log || (()=>{});
    /**
   * Save `namespaces`.
   *
   * @param {String} namespaces
   * @api private
   */ function save(namespaces) {
        try {
            if (namespaces) exports.storage.setItem("debug", namespaces);
            else exports.storage.removeItem("debug");
        } catch (error) {
        // XXX (@Qix-) should we be logging these?
        }
    }
    /**
   * Load `namespaces`.
   *
   * @return {String} returns the previously persisted debug modes
   * @api private
   */ function load() {
        let r;
        try {
            r = exports.storage.getItem("debug");
        } catch (error) {
        // XXX (@Qix-) should we be logging these?
        } // If debug isn't set in LS, and we're in Electron, try to load $DEBUG
        if (!r && typeof browser$1$1 !== "undefined" && "env" in browser$1$1) r = browser$1$1.env.DEBUG;
        return r;
    }
    /**
   * Localstorage attempts to return the localstorage.
   *
   * This is necessary because safari throws
   * when a user disables cookies/localstorage
   * and you attempt to access it.
   *
   * @return {LocalStorage}
   * @api private
   */ function localstorage() {
        try {
            // TVMLKit (Apple TV JS Runtime) does not have a window object, just localStorage in the global context
            // The Browser also has localStorage in the global context.
            return localStorage;
        } catch (error) {
        // XXX (@Qix-) should we be logging these?
        }
    }
    module.exports = common(exports);
    const { formatters  } = module.exports;
    /**
   * Map %j to `JSON.stringify()`, since no Web Inspectors do that by default.
   */ formatters.j = function(v) {
        try {
            return JSON.stringify(v);
        } catch (error) {
            return "[UnexpectedJSONParseError]: " + error.message;
        }
    };
})(browser, browser.exports);
var getLogger = browser.exports;
var DAVNamespace;
(function(DAVNamespace1) {
    DAVNamespace1["CALENDAR_SERVER"] = "http://calendarserver.org/ns/";
    DAVNamespace1["CALDAV_APPLE"] = "http://apple.com/ns/ical/";
    DAVNamespace1["CALDAV"] = "urn:ietf:params:xml:ns:caldav";
    DAVNamespace1["CARDDAV"] = "urn:ietf:params:xml:ns:carddav";
    DAVNamespace1["DAV"] = "DAV:";
})(DAVNamespace || (DAVNamespace = {}));
const DAVAttributeMap = {
    [DAVNamespace.CALDAV]: "xmlns:c",
    [DAVNamespace.CARDDAV]: "xmlns:card",
    [DAVNamespace.CALENDAR_SERVER]: "xmlns:cs",
    [DAVNamespace.CALDAV_APPLE]: "xmlns:ca",
    [DAVNamespace.DAV]: "xmlns:d"
};
var DAVNamespaceShort;
(function(DAVNamespaceShort1) {
    DAVNamespaceShort1["CALDAV"] = "c";
    DAVNamespaceShort1["CARDDAV"] = "card";
    DAVNamespaceShort1["CALENDAR_SERVER"] = "cs";
    DAVNamespaceShort1["CALDAV_APPLE"] = "ca";
    DAVNamespaceShort1["DAV"] = "d";
})(DAVNamespaceShort || (DAVNamespaceShort = {}));
var ICALObjects;
(function(ICALObjects1) {
    ICALObjects1["VEVENT"] = "VEVENT";
    ICALObjects1["VTODO"] = "VTODO";
    ICALObjects1["VJOURNAL"] = "VJOURNAL";
    ICALObjects1["VFREEBUSY"] = "VFREEBUSY";
    ICALObjects1["VTIMEZONE"] = "VTIMEZONE";
    ICALObjects1["VALARM"] = "VALARM";
})(ICALObjects || (ICALObjects = {}));
var lookup = [];
var revLookup = [];
var Arr = typeof Uint8Array !== "undefined" ? Uint8Array : Array;
var inited = false;
function init() {
    inited = true;
    var code = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/";
    for(var i = 0, len = code.length; i < len; ++i){
        lookup[i] = code[i];
        revLookup[code.charCodeAt(i)] = i;
    }
    revLookup["-".charCodeAt(0)] = 62;
    revLookup["_".charCodeAt(0)] = 63;
}
function toByteArray(b64) {
    if (!inited) init();
    var i, j, l, tmp, placeHolders, arr;
    var len = b64.length;
    if (len % 4 > 0) throw new Error("Invalid string. Length must be a multiple of 4");
     // the number of equal signs (place holders)
    // if there are two placeholders, than the two characters before it
    // represent one byte
    // if there is only one, then the three characters before it represent 2 bytes
    // this is just a cheap hack to not do indexOf twice
    placeHolders = b64[len - 2] === "=" ? 2 : b64[len - 1] === "=" ? 1 : 0; // base64 is 4/3 + up to two characters of the original data
    arr = new Arr(len * 3 / 4 - placeHolders); // if there are placeholders, only get up to the last complete 4 chars
    l = placeHolders > 0 ? len - 4 : len;
    var L = 0;
    for(i = 0, j = 0; i < l; i += 4, j += 3){
        tmp = revLookup[b64.charCodeAt(i)] << 18 | revLookup[b64.charCodeAt(i + 1)] << 12 | revLookup[b64.charCodeAt(i + 2)] << 6 | revLookup[b64.charCodeAt(i + 3)];
        arr[L++] = tmp >> 16 & 0xff;
        arr[L++] = tmp >> 8 & 0xff;
        arr[L++] = tmp & 0xff;
    }
    if (placeHolders === 2) {
        tmp = revLookup[b64.charCodeAt(i)] << 2 | revLookup[b64.charCodeAt(i + 1)] >> 4;
        arr[L++] = tmp & 0xff;
    } else if (placeHolders === 1) {
        tmp = revLookup[b64.charCodeAt(i)] << 10 | revLookup[b64.charCodeAt(i + 1)] << 4 | revLookup[b64.charCodeAt(i + 2)] >> 2;
        arr[L++] = tmp >> 8 & 0xff;
        arr[L++] = tmp & 0xff;
    }
    return arr;
}
function tripletToBase64(num) {
    return lookup[num >> 18 & 0x3f] + lookup[num >> 12 & 0x3f] + lookup[num >> 6 & 0x3f] + lookup[num & 0x3f];
}
function encodeChunk(uint8, start, end) {
    var tmp;
    var output = [];
    for(var i = start; i < end; i += 3){
        tmp = (uint8[i] << 16) + (uint8[i + 1] << 8) + uint8[i + 2];
        output.push(tripletToBase64(tmp));
    }
    return output.join("");
}
function fromByteArray(uint8) {
    if (!inited) init();
    var tmp;
    var len = uint8.length;
    var extraBytes = len % 3; // if we have 1 byte left, pad 2 bytes
    var output = "";
    var parts = [];
    var maxChunkLength = 16383; // must be multiple of 3
    // go through the array every three bytes, we'll deal with trailing stuff later
    for(var i = 0, len2 = len - extraBytes; i < len2; i += maxChunkLength)parts.push(encodeChunk(uint8, i, i + maxChunkLength > len2 ? len2 : i + maxChunkLength));
     // pad the end with zeros, but make sure to not forget the extra bytes
    if (extraBytes === 1) {
        tmp = uint8[len - 1];
        output += lookup[tmp >> 2];
        output += lookup[tmp << 4 & 0x3f];
        output += "==";
    } else if (extraBytes === 2) {
        tmp = (uint8[len - 2] << 8) + uint8[len - 1];
        output += lookup[tmp >> 10];
        output += lookup[tmp >> 4 & 0x3f];
        output += lookup[tmp << 2 & 0x3f];
        output += "=";
    }
    parts.push(output);
    return parts.join("");
}
function read(buffer, offset, isLE, mLen, nBytes) {
    var e, m1;
    var eLen = nBytes * 8 - mLen - 1;
    var eMax = (1 << eLen) - 1;
    var eBias = eMax >> 1;
    var nBits = -7;
    var i = isLE ? nBytes - 1 : 0;
    var d2 = isLE ? -1 : 1;
    var s2 = buffer[offset + i];
    i += d2;
    e = s2 & (1 << -nBits) - 1;
    s2 >>= -nBits;
    nBits += eLen;
    for(; nBits > 0; e = e * 256 + buffer[offset + i], i += d2, nBits -= 8);
    m1 = e & (1 << -nBits) - 1;
    e >>= -nBits;
    nBits += mLen;
    for(; nBits > 0; m1 = m1 * 256 + buffer[offset + i], i += d2, nBits -= 8);
    if (e === 0) e = 1 - eBias;
    else if (e === eMax) return m1 ? NaN : (s2 ? -1 : 1) * Infinity;
    else {
        m1 = m1 + Math.pow(2, mLen);
        e = e - eBias;
    }
    return (s2 ? -1 : 1) * m1 * Math.pow(2, e - mLen);
}
function write(buffer, value, offset, isLE, mLen, nBytes) {
    var e, m2, c;
    var eLen = nBytes * 8 - mLen - 1;
    var eMax = (1 << eLen) - 1;
    var eBias = eMax >> 1;
    var rt = mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0;
    var i = isLE ? 0 : nBytes - 1;
    var d3 = isLE ? 1 : -1;
    var s3 = value < 0 || value === 0 && 1 / value < 0 ? 1 : 0;
    value = Math.abs(value);
    if (isNaN(value) || value === Infinity) {
        m2 = isNaN(value) ? 1 : 0;
        e = eMax;
    } else {
        e = Math.floor(Math.log(value) / Math.LN2);
        if (value * (c = Math.pow(2, -e)) < 1) {
            e--;
            c *= 2;
        }
        if (e + eBias >= 1) value += rt / c;
        else value += rt * Math.pow(2, 1 - eBias);
        if (value * c >= 2) {
            e++;
            c /= 2;
        }
        if (e + eBias >= eMax) {
            m2 = 0;
            e = eMax;
        } else if (e + eBias >= 1) {
            m2 = (value * c - 1) * Math.pow(2, mLen);
            e = e + eBias;
        } else {
            m2 = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen);
            e = 0;
        }
    }
    for(; mLen >= 8; buffer[offset + i] = m2 & 0xff, i += d3, m2 /= 256, mLen -= 8);
    e = e << mLen | m2;
    eLen += mLen;
    for(; eLen > 0; buffer[offset + i] = e & 0xff, i += d3, e /= 256, eLen -= 8);
    buffer[offset + i - d3] |= s3 * 128;
}
var toString = {}.toString;
var isArray$3 = Array.isArray || function(arr) {
    return toString.call(arr) == "[object Array]";
};
/*!
 * The buffer module from node.js, for the browser.
 *
 * @author   Feross Aboukhadijeh <feross@feross.org> <http://feross.org>
 * @license  MIT
 */ var INSPECT_MAX_BYTES = 50;
/**
 * If `Buffer.TYPED_ARRAY_SUPPORT`:
 *   === true    Use Uint8Array implementation (fastest)
 *   === false   Use Object implementation (most compatible, even IE6)
 *
 * Browsers that support typed arrays are IE 10+, Firefox 4+, Chrome 7+, Safari 5.1+,
 * Opera 11.6+, iOS 4.2+.
 *
 * Due to various browser bugs, sometimes the Object implementation will be used even
 * when the browser supports typed arrays.
 *
 * Note:
 *
 *   - Firefox 4-29 lacks support for adding new properties to `Uint8Array` instances,
 *     See: https://bugzilla.mozilla.org/show_bug.cgi?id=695438.
 *
 *   - Chrome 9-10 is missing the `TypedArray.prototype.subarray` function.
 *
 *   - IE10 has a broken `TypedArray.prototype.subarray` function which returns arrays of
 *     incorrect length in some situations.

 * We detect these buggy browsers and set `Buffer.TYPED_ARRAY_SUPPORT` to `false` so they
 * get the Object implementation, which is slower but behaves correctly.
 */ Buffer$1.TYPED_ARRAY_SUPPORT = global$1.TYPED_ARRAY_SUPPORT !== undefined ? global$1.TYPED_ARRAY_SUPPORT : true;
/*
 * Export kMaxLength after typed array support is determined.
 */ var _kMaxLength = kMaxLength();
function kMaxLength() {
    return Buffer$1.TYPED_ARRAY_SUPPORT ? 0x7fffffff : 0x3fffffff;
}
function createBuffer(that, length) {
    if (kMaxLength() < length) throw new RangeError("Invalid typed array length");
    if (Buffer$1.TYPED_ARRAY_SUPPORT) {
        // Return an augmented `Uint8Array` instance, for best performance
        that = new Uint8Array(length);
        that.__proto__ = Buffer$1.prototype;
    } else {
        // Fallback: Return an object instance of the Buffer class
        if (that === null) that = new Buffer$1(length);
        that.length = length;
    }
    return that;
}
/**
 * The Buffer constructor returns instances of `Uint8Array` that have their
 * prototype changed to `Buffer.prototype`. Furthermore, `Buffer` is a subclass of
 * `Uint8Array`, so the returned instances will have all the node `Buffer` methods
 * and the `Uint8Array` methods. Square bracket notation works as expected -- it
 * returns a single octet.
 *
 * The `Uint8Array` prototype remains unmodified.
 */ function Buffer$1(arg, encodingOrOffset, length) {
    if (!Buffer$1.TYPED_ARRAY_SUPPORT && !(this instanceof Buffer$1)) return new Buffer$1(arg, encodingOrOffset, length);
     // Common case.
    if (typeof arg === "number") {
        if (typeof encodingOrOffset === "string") throw new Error("If encoding is specified then the first argument must be a string");
        return allocUnsafe(this, arg);
    }
    return from(this, arg, encodingOrOffset, length);
}
Buffer$1.poolSize = 8192; // not used by this implementation
// TODO: Legacy, not needed anymore. Remove in next major version.
Buffer$1._augment = function(arr) {
    arr.__proto__ = Buffer$1.prototype;
    return arr;
};
function from(that, value, encodingOrOffset, length) {
    if (typeof value === "number") throw new TypeError('"value" argument must not be a number');
    if (typeof ArrayBuffer !== "undefined" && value instanceof ArrayBuffer) return fromArrayBuffer(that, value, encodingOrOffset, length);
    if (typeof value === "string") return fromString(that, value, encodingOrOffset);
    return fromObject(that, value);
}
/**
 * Functionally equivalent to Buffer(arg, encoding) but throws a TypeError
 * if value is a number.
 * Buffer.from(str[, encoding])
 * Buffer.from(array)
 * Buffer.from(buffer)
 * Buffer.from(arrayBuffer[, byteOffset[, length]])
 **/ Buffer$1.from = function(value, encodingOrOffset, length) {
    return from(null, value, encodingOrOffset, length);
};
if (Buffer$1.TYPED_ARRAY_SUPPORT) {
    Buffer$1.prototype.__proto__ = Uint8Array.prototype;
    Buffer$1.__proto__ = Uint8Array;
}
function assertSize(size) {
    if (typeof size !== "number") throw new TypeError('"size" argument must be a number');
    else if (size < 0) throw new RangeError('"size" argument must not be negative');
}
function alloc(that, size, fill, encoding) {
    assertSize(size);
    if (size <= 0) return createBuffer(that, size);
    if (fill !== undefined) // Only pay attention to encoding if it's a string. This
    // prevents accidentally sending in a number that would
    // be interpretted as a start offset.
    return typeof encoding === "string" ? createBuffer(that, size).fill(fill, encoding) : createBuffer(that, size).fill(fill);
    return createBuffer(that, size);
}
/**
 * Creates a new filled Buffer instance.
 * alloc(size[, fill[, encoding]])
 **/ Buffer$1.alloc = function(size, fill, encoding) {
    return alloc(null, size, fill, encoding);
};
function allocUnsafe(that, size) {
    assertSize(size);
    that = createBuffer(that, size < 0 ? 0 : checked(size) | 0);
    if (!Buffer$1.TYPED_ARRAY_SUPPORT) for(var i = 0; i < size; ++i)that[i] = 0;
    return that;
}
/**
 * Equivalent to Buffer(num), by default creates a non-zero-filled Buffer instance.
 * */ Buffer$1.allocUnsafe = function(size) {
    return allocUnsafe(null, size);
};
/**
 * Equivalent to SlowBuffer(num), by default creates a non-zero-filled Buffer instance.
 */ Buffer$1.allocUnsafeSlow = function(size) {
    return allocUnsafe(null, size);
};
function fromString(that, string, encoding) {
    if (typeof encoding !== "string" || encoding === "") encoding = "utf8";
    if (!Buffer$1.isEncoding(encoding)) throw new TypeError('"encoding" must be a valid string encoding');
    var length = byteLength(string, encoding) | 0;
    that = createBuffer(that, length);
    var actual = that.write(string, encoding);
    if (actual !== length) // Writing a hex string, for example, that contains invalid characters will
    // cause everything after the first invalid character to be ignored. (e.g.
    // 'abxxcd' will be treated as 'ab')
    that = that.slice(0, actual);
    return that;
}
function fromArrayLike(that, array) {
    var length = array.length < 0 ? 0 : checked(array.length) | 0;
    that = createBuffer(that, length);
    for(var i = 0; i < length; i += 1)that[i] = array[i] & 255;
    return that;
}
function fromArrayBuffer(that, array, byteOffset, length) {
    array.byteLength; // this throws if `array` is not a valid ArrayBuffer
    if (byteOffset < 0 || array.byteLength < byteOffset) throw new RangeError("'offset' is out of bounds");
    if (array.byteLength < byteOffset + (length || 0)) throw new RangeError("'length' is out of bounds");
    if (byteOffset === undefined && length === undefined) array = new Uint8Array(array);
    else if (length === undefined) array = new Uint8Array(array, byteOffset);
    else array = new Uint8Array(array, byteOffset, length);
    if (Buffer$1.TYPED_ARRAY_SUPPORT) {
        // Return an augmented `Uint8Array` instance, for best performance
        that = array;
        that.__proto__ = Buffer$1.prototype;
    } else // Fallback: Return an object instance of the Buffer class
    that = fromArrayLike(that, array);
    return that;
}
function fromObject(that, obj) {
    if (internalIsBuffer(obj)) {
        var len = checked(obj.length) | 0;
        that = createBuffer(that, len);
        if (that.length === 0) return that;
        obj.copy(that, 0, 0, len);
        return that;
    }
    if (obj) {
        if (typeof ArrayBuffer !== "undefined" && obj.buffer instanceof ArrayBuffer || "length" in obj) {
            if (typeof obj.length !== "number" || isnan(obj.length)) return createBuffer(that, 0);
            return fromArrayLike(that, obj);
        }
        if (obj.type === "Buffer" && isArray$3(obj.data)) return fromArrayLike(that, obj.data);
    }
    throw new TypeError("First argument must be a string, Buffer, ArrayBuffer, Array, or array-like object.");
}
function checked(length) {
    // Note: cannot use `length < kMaxLength()` here because that fails when
    // length is NaN (which is otherwise coerced to zero.)
    if (length >= kMaxLength()) throw new RangeError("Attempt to allocate Buffer larger than maximum size: 0x" + kMaxLength().toString(16) + " bytes");
    return length | 0;
}
function SlowBuffer(length) {
    if (+length != length) // eslint-disable-line eqeqeq
    length = 0;
    return Buffer$1.alloc(+length);
}
Buffer$1.isBuffer = isBuffer;
function internalIsBuffer(b) {
    return !!(b != null && b._isBuffer);
}
Buffer$1.compare = function compare(a, b) {
    if (!internalIsBuffer(a) || !internalIsBuffer(b)) throw new TypeError("Arguments must be Buffers");
    if (a === b) return 0;
    var x = a.length;
    var y1 = b.length;
    for(var i = 0, len = Math.min(x, y1); i < len; ++i)if (a[i] !== b[i]) {
        x = a[i];
        y1 = b[i];
        break;
    }
    if (x < y1) return -1;
    if (y1 < x) return 1;
    return 0;
};
Buffer$1.isEncoding = function isEncoding(encoding) {
    switch(String(encoding).toLowerCase()){
        case "hex":
        case "utf8":
        case "utf-8":
        case "ascii":
        case "latin1":
        case "binary":
        case "base64":
        case "ucs2":
        case "ucs-2":
        case "utf16le":
        case "utf-16le":
            return true;
        default:
            return false;
    }
};
Buffer$1.concat = function concat(list, length) {
    if (!isArray$3(list)) throw new TypeError('"list" argument must be an Array of Buffers');
    if (list.length === 0) return Buffer$1.alloc(0);
    var i;
    if (length === undefined) {
        length = 0;
        for(i = 0; i < list.length; ++i)length += list[i].length;
    }
    var buffer = Buffer$1.allocUnsafe(length);
    var pos = 0;
    for(i = 0; i < list.length; ++i){
        var buf = list[i];
        if (!internalIsBuffer(buf)) throw new TypeError('"list" argument must be an Array of Buffers');
        buf.copy(buffer, pos);
        pos += buf.length;
    }
    return buffer;
};
function byteLength(string, encoding) {
    if (internalIsBuffer(string)) return string.length;
    if (typeof ArrayBuffer !== "undefined" && typeof ArrayBuffer.isView === "function" && (ArrayBuffer.isView(string) || string instanceof ArrayBuffer)) return string.byteLength;
    if (typeof string !== "string") string = "" + string;
    var len = string.length;
    if (len === 0) return 0; // Use a for loop to avoid recursion
    var loweredCase = false;
    for(;;)switch(encoding){
        case "ascii":
        case "latin1":
        case "binary":
            return len;
        case "utf8":
        case "utf-8":
        case undefined:
            return utf8ToBytes(string).length;
        case "ucs2":
        case "ucs-2":
        case "utf16le":
        case "utf-16le":
            return len * 2;
        case "hex":
            return len >>> 1;
        case "base64":
            return base64ToBytes(string).length;
        default:
            if (loweredCase) return utf8ToBytes(string).length; // assume utf8
            encoding = ("" + encoding).toLowerCase();
            loweredCase = true;
    }
}
Buffer$1.byteLength = byteLength;
function slowToString(encoding, start, end) {
    var loweredCase = false; // No need to verify that "this.length <= MAX_UINT32" since it's a read-only
    // property of a typed array.
    // This behaves neither like String nor Uint8Array in that we set start/end
    // to their upper/lower bounds if the value passed is out of range.
    // undefined is handled specially as per ECMA-262 6th Edition,
    // Section 13.3.3.7 Runtime Semantics: KeyedBindingInitialization.
    if (start === undefined || start < 0) start = 0;
     // Return early if start > this.length. Done here to prevent potential uint32
    // coercion fail below.
    if (start > this.length) return "";
    if (end === undefined || end > this.length) end = this.length;
    if (end <= 0) return "";
     // Force coersion to uint32. This will also coerce falsey/NaN values to 0.
    end >>>= 0;
    start >>>= 0;
    if (end <= start) return "";
    if (!encoding) encoding = "utf8";
    while(true)switch(encoding){
        case "hex":
            return hexSlice(this, start, end);
        case "utf8":
        case "utf-8":
            return utf8Slice(this, start, end);
        case "ascii":
            return asciiSlice(this, start, end);
        case "latin1":
        case "binary":
            return latin1Slice(this, start, end);
        case "base64":
            return base64Slice(this, start, end);
        case "ucs2":
        case "ucs-2":
        case "utf16le":
        case "utf-16le":
            return utf16leSlice(this, start, end);
        default:
            if (loweredCase) throw new TypeError("Unknown encoding: " + encoding);
            encoding = (encoding + "").toLowerCase();
            loweredCase = true;
    }
} // The property is used by `Buffer.isBuffer` and `is-buffer` (in Safari 5-7) to detect
// Buffer instances.
Buffer$1.prototype._isBuffer = true;
function swap(b, n, m3) {
    var i = b[n];
    b[n] = b[m3];
    b[m3] = i;
}
Buffer$1.prototype.swap16 = function swap16() {
    var len = this.length;
    if (len % 2 !== 0) throw new RangeError("Buffer size must be a multiple of 16-bits");
    for(var i = 0; i < len; i += 2)swap(this, i, i + 1);
    return this;
};
Buffer$1.prototype.swap32 = function swap32() {
    var len = this.length;
    if (len % 4 !== 0) throw new RangeError("Buffer size must be a multiple of 32-bits");
    for(var i = 0; i < len; i += 4){
        swap(this, i, i + 3);
        swap(this, i + 1, i + 2);
    }
    return this;
};
Buffer$1.prototype.swap64 = function swap64() {
    var len = this.length;
    if (len % 8 !== 0) throw new RangeError("Buffer size must be a multiple of 64-bits");
    for(var i = 0; i < len; i += 8){
        swap(this, i, i + 7);
        swap(this, i + 1, i + 6);
        swap(this, i + 2, i + 5);
        swap(this, i + 3, i + 4);
    }
    return this;
};
Buffer$1.prototype.toString = function toString() {
    var length = this.length | 0;
    if (length === 0) return "";
    if (arguments.length === 0) return utf8Slice(this, 0, length);
    return slowToString.apply(this, arguments);
};
Buffer$1.prototype.equals = function equals(b) {
    if (!internalIsBuffer(b)) throw new TypeError("Argument must be a Buffer");
    if (this === b) return true;
    return Buffer$1.compare(this, b) === 0;
};
Buffer$1.prototype.inspect = function inspect() {
    var str = "";
    var max = INSPECT_MAX_BYTES;
    if (this.length > 0) {
        str = this.toString("hex", 0, max).match(/.{2}/g).join(" ");
        if (this.length > max) str += " ... ";
    }
    return "<Buffer " + str + ">";
};
Buffer$1.prototype.compare = function compare(target, start, end, thisStart, thisEnd) {
    if (!internalIsBuffer(target)) throw new TypeError("Argument must be a Buffer");
    if (start === undefined) start = 0;
    if (end === undefined) end = target ? target.length : 0;
    if (thisStart === undefined) thisStart = 0;
    if (thisEnd === undefined) thisEnd = this.length;
    if (start < 0 || end > target.length || thisStart < 0 || thisEnd > this.length) throw new RangeError("out of range index");
    if (thisStart >= thisEnd && start >= end) return 0;
    if (thisStart >= thisEnd) return -1;
    if (start >= end) return 1;
    start >>>= 0;
    end >>>= 0;
    thisStart >>>= 0;
    thisEnd >>>= 0;
    if (this === target) return 0;
    var x = thisEnd - thisStart;
    var y2 = end - start;
    var len = Math.min(x, y2);
    var thisCopy = this.slice(thisStart, thisEnd);
    var targetCopy = target.slice(start, end);
    for(var i = 0; i < len; ++i)if (thisCopy[i] !== targetCopy[i]) {
        x = thisCopy[i];
        y2 = targetCopy[i];
        break;
    }
    if (x < y2) return -1;
    if (y2 < x) return 1;
    return 0;
}; // Finds either the first index of `val` in `buffer` at offset >= `byteOffset`,
// OR the last index of `val` in `buffer` at offset <= `byteOffset`.
//
// Arguments:
// - buffer - a Buffer to search
// - val - a string, Buffer, or number
// - byteOffset - an index into `buffer`; will be clamped to an int32
// - encoding - an optional encoding, relevant is val is a string
// - dir - true for indexOf, false for lastIndexOf
function bidirectionalIndexOf(buffer, val, byteOffset, encoding, dir) {
    // Empty buffer means no match
    if (buffer.length === 0) return -1; // Normalize byteOffset
    if (typeof byteOffset === "string") {
        encoding = byteOffset;
        byteOffset = 0;
    } else if (byteOffset > 0x7fffffff) byteOffset = 0x7fffffff;
    else if (byteOffset < -2147483648) byteOffset = -2147483648;
    byteOffset = +byteOffset; // Coerce to Number.
    if (isNaN(byteOffset)) // byteOffset: it it's undefined, null, NaN, "foo", etc, search whole buffer
    byteOffset = dir ? 0 : buffer.length - 1;
     // Normalize byteOffset: negative offsets start from the end of the buffer
    if (byteOffset < 0) byteOffset = buffer.length + byteOffset;
    if (byteOffset >= buffer.length) {
        if (dir) return -1;
        else byteOffset = buffer.length - 1;
    } else if (byteOffset < 0) {
        if (dir) byteOffset = 0;
        else return -1;
    } // Normalize val
    if (typeof val === "string") val = Buffer$1.from(val, encoding);
     // Finally, search either indexOf (if dir is true) or lastIndexOf
    if (internalIsBuffer(val)) {
        // Special case: looking for empty string/buffer always fails
        if (val.length === 0) return -1;
        return arrayIndexOf(buffer, val, byteOffset, encoding, dir);
    } else if (typeof val === "number") {
        val = val & 0xff; // Search for a byte value [0-255]
        if (Buffer$1.TYPED_ARRAY_SUPPORT && typeof Uint8Array.prototype.indexOf === "function") {
            if (dir) return Uint8Array.prototype.indexOf.call(buffer, val, byteOffset);
            else return Uint8Array.prototype.lastIndexOf.call(buffer, val, byteOffset);
        }
        return arrayIndexOf(buffer, [
            val
        ], byteOffset, encoding, dir);
    }
    throw new TypeError("val must be string, number or Buffer");
}
function arrayIndexOf(arr, val, byteOffset, encoding, dir) {
    var indexSize = 1;
    var arrLength = arr.length;
    var valLength = val.length;
    if (encoding !== undefined) {
        encoding = String(encoding).toLowerCase();
        if (encoding === "ucs2" || encoding === "ucs-2" || encoding === "utf16le" || encoding === "utf-16le") {
            if (arr.length < 2 || val.length < 2) return -1;
            indexSize = 2;
            arrLength /= 2;
            valLength /= 2;
            byteOffset /= 2;
        }
    }
    function read1(buf, i) {
        if (indexSize === 1) return buf[i];
        else return buf.readUInt16BE(i * indexSize);
    }
    var i1;
    if (dir) {
        var foundIndex = -1;
        for(i1 = byteOffset; i1 < arrLength; i1++)if (read1(arr, i1) === read1(val, foundIndex === -1 ? 0 : i1 - foundIndex)) {
            if (foundIndex === -1) foundIndex = i1;
            if (i1 - foundIndex + 1 === valLength) return foundIndex * indexSize;
        } else {
            if (foundIndex !== -1) i1 -= i1 - foundIndex;
            foundIndex = -1;
        }
    } else {
        if (byteOffset + valLength > arrLength) byteOffset = arrLength - valLength;
        for(i1 = byteOffset; i1 >= 0; i1--){
            var found = true;
            for(var j = 0; j < valLength; j++)if (read1(arr, i1 + j) !== read1(val, j)) {
                found = false;
                break;
            }
            if (found) return i1;
        }
    }
    return -1;
}
Buffer$1.prototype.includes = function includes(val, byteOffset, encoding) {
    return this.indexOf(val, byteOffset, encoding) !== -1;
};
Buffer$1.prototype.indexOf = function indexOf(val, byteOffset, encoding) {
    return bidirectionalIndexOf(this, val, byteOffset, encoding, true);
};
Buffer$1.prototype.lastIndexOf = function lastIndexOf(val, byteOffset, encoding) {
    return bidirectionalIndexOf(this, val, byteOffset, encoding, false);
};
function hexWrite(buf, string, offset, length) {
    offset = Number(offset) || 0;
    var remaining = buf.length - offset;
    if (!length) length = remaining;
    else {
        length = Number(length);
        if (length > remaining) length = remaining;
    } // must be an even number of digits
    var strLen = string.length;
    if (strLen % 2 !== 0) throw new TypeError("Invalid hex string");
    if (length > strLen / 2) length = strLen / 2;
    for(var i = 0; i < length; ++i){
        var parsed = parseInt(string.substr(i * 2, 2), 16);
        if (isNaN(parsed)) return i;
        buf[offset + i] = parsed;
    }
    return i;
}
function utf8Write(buf, string, offset, length) {
    return blitBuffer(utf8ToBytes(string, buf.length - offset), buf, offset, length);
}
function asciiWrite(buf, string, offset, length) {
    return blitBuffer(asciiToBytes(string), buf, offset, length);
}
function latin1Write(buf, string, offset, length) {
    return asciiWrite(buf, string, offset, length);
}
function base64Write(buf, string, offset, length) {
    return blitBuffer(base64ToBytes(string), buf, offset, length);
}
function ucs2Write(buf, string, offset, length) {
    return blitBuffer(utf16leToBytes(string, buf.length - offset), buf, offset, length);
}
Buffer$1.prototype.write = function write(string, offset, length, encoding) {
    // Buffer#write(string)
    if (offset === undefined) {
        encoding = "utf8";
        length = this.length;
        offset = 0; // Buffer#write(string, encoding)
    } else if (length === undefined && typeof offset === "string") {
        encoding = offset;
        length = this.length;
        offset = 0; // Buffer#write(string, offset[, length][, encoding])
    } else if (isFinite(offset)) {
        offset = offset | 0;
        if (isFinite(length)) {
            length = length | 0;
            if (encoding === undefined) encoding = "utf8";
        } else {
            encoding = length;
            length = undefined;
        } // legacy write(string, encoding, offset, length) - remove in v0.13
    } else throw new Error("Buffer.write(string, encoding, offset[, length]) is no longer supported");
    var remaining = this.length - offset;
    if (length === undefined || length > remaining) length = remaining;
    if (string.length > 0 && (length < 0 || offset < 0) || offset > this.length) throw new RangeError("Attempt to write outside buffer bounds");
    if (!encoding) encoding = "utf8";
    var loweredCase = false;
    for(;;)switch(encoding){
        case "hex":
            return hexWrite(this, string, offset, length);
        case "utf8":
        case "utf-8":
            return utf8Write(this, string, offset, length);
        case "ascii":
            return asciiWrite(this, string, offset, length);
        case "latin1":
        case "binary":
            return latin1Write(this, string, offset, length);
        case "base64":
            // Warning: maxLength not taken into account in base64Write
            return base64Write(this, string, offset, length);
        case "ucs2":
        case "ucs-2":
        case "utf16le":
        case "utf-16le":
            return ucs2Write(this, string, offset, length);
        default:
            if (loweredCase) throw new TypeError("Unknown encoding: " + encoding);
            encoding = ("" + encoding).toLowerCase();
            loweredCase = true;
    }
};
Buffer$1.prototype.toJSON = function toJSON() {
    return {
        type: "Buffer",
        data: Array.prototype.slice.call(this._arr || this, 0)
    };
};
function base64Slice(buf, start, end) {
    if (start === 0 && end === buf.length) return fromByteArray(buf);
    else return fromByteArray(buf.slice(start, end));
}
function utf8Slice(buf, start, end) {
    end = Math.min(buf.length, end);
    var res = [];
    var i = start;
    while(i < end){
        var firstByte = buf[i];
        var codePoint = null;
        var bytesPerSequence = firstByte > 0xef ? 4 : firstByte > 0xdf ? 3 : firstByte > 0xbf ? 2 : 1;
        if (i + bytesPerSequence <= end) {
            var secondByte, thirdByte, fourthByte, tempCodePoint;
            switch(bytesPerSequence){
                case 1:
                    if (firstByte < 0x80) codePoint = firstByte;
                    break;
                case 2:
                    secondByte = buf[i + 1];
                    if ((secondByte & 0xc0) === 0x80) {
                        tempCodePoint = (firstByte & 0x1f) << 0x6 | secondByte & 0x3f;
                        if (tempCodePoint > 0x7f) codePoint = tempCodePoint;
                    }
                    break;
                case 3:
                    secondByte = buf[i + 1];
                    thirdByte = buf[i + 2];
                    if ((secondByte & 0xc0) === 0x80 && (thirdByte & 0xc0) === 0x80) {
                        tempCodePoint = (firstByte & 0xf) << 0xc | (secondByte & 0x3f) << 0x6 | thirdByte & 0x3f;
                        if (tempCodePoint > 0x7ff && (tempCodePoint < 0xd800 || tempCodePoint > 0xdfff)) codePoint = tempCodePoint;
                    }
                    break;
                case 4:
                    secondByte = buf[i + 1];
                    thirdByte = buf[i + 2];
                    fourthByte = buf[i + 3];
                    if ((secondByte & 0xc0) === 0x80 && (thirdByte & 0xc0) === 0x80 && (fourthByte & 0xc0) === 0x80) {
                        tempCodePoint = (firstByte & 0xf) << 0x12 | (secondByte & 0x3f) << 0xc | (thirdByte & 0x3f) << 0x6 | fourthByte & 0x3f;
                        if (tempCodePoint > 0xffff && tempCodePoint < 0x110000) codePoint = tempCodePoint;
                    }
            }
        }
        if (codePoint === null) {
            // we did not generate a valid codePoint so insert a
            // replacement char (U+FFFD) and advance only 1 byte
            codePoint = 0xfffd;
            bytesPerSequence = 1;
        } else if (codePoint > 0xffff) {
            // encode to utf16 (surrogate pair dance)
            codePoint -= 0x10000;
            res.push(codePoint >>> 10 & 0x3ff | 0xd800);
            codePoint = 0xdc00 | codePoint & 0x3ff;
        }
        res.push(codePoint);
        i += bytesPerSequence;
    }
    return decodeCodePointsArray(res);
} // Based on http://stackoverflow.com/a/22747272/680742, the browser with
// the lowest limit is Chrome, with 0x10000 args.
// We go 1 magnitude less, for safety
var MAX_ARGUMENTS_LENGTH = 0x1000;
function decodeCodePointsArray(codePoints) {
    var len = codePoints.length;
    if (len <= MAX_ARGUMENTS_LENGTH) return String.fromCharCode.apply(String, codePoints); // avoid extra slice()
     // Decode in chunks to avoid "call stack size exceeded".
    var res = "";
    var i = 0;
    while(i < len)res += String.fromCharCode.apply(String, codePoints.slice(i, i += MAX_ARGUMENTS_LENGTH));
    return res;
}
function asciiSlice(buf, start, end) {
    var ret = "";
    end = Math.min(buf.length, end);
    for(var i = start; i < end; ++i)ret += String.fromCharCode(buf[i] & 0x7f);
    return ret;
}
function latin1Slice(buf, start, end) {
    var ret = "";
    end = Math.min(buf.length, end);
    for(var i = start; i < end; ++i)ret += String.fromCharCode(buf[i]);
    return ret;
}
function hexSlice(buf, start, end) {
    var len = buf.length;
    if (!start || start < 0) start = 0;
    if (!end || end < 0 || end > len) end = len;
    var out = "";
    for(var i = start; i < end; ++i)out += toHex(buf[i]);
    return out;
}
function utf16leSlice(buf, start, end) {
    var bytes = buf.slice(start, end);
    var res = "";
    for(var i = 0; i < bytes.length; i += 2)res += String.fromCharCode(bytes[i] + bytes[i + 1] * 256);
    return res;
}
Buffer$1.prototype.slice = function slice(start, end) {
    var len = this.length;
    start = ~~start;
    end = end === undefined ? len : ~~end;
    if (start < 0) {
        start += len;
        if (start < 0) start = 0;
    } else if (start > len) start = len;
    if (end < 0) {
        end += len;
        if (end < 0) end = 0;
    } else if (end > len) end = len;
    if (end < start) end = start;
    var newBuf;
    if (Buffer$1.TYPED_ARRAY_SUPPORT) {
        newBuf = this.subarray(start, end);
        newBuf.__proto__ = Buffer$1.prototype;
    } else {
        var sliceLen = end - start;
        newBuf = new Buffer$1(sliceLen, undefined);
        for(var i = 0; i < sliceLen; ++i)newBuf[i] = this[i + start];
    }
    return newBuf;
};
/*
 * Need to make sure that buffer isn't trying to write out of bounds.
 */ function checkOffset(offset, ext, length) {
    if (offset % 1 !== 0 || offset < 0) throw new RangeError("offset is not uint");
    if (offset + ext > length) throw new RangeError("Trying to access beyond buffer length");
}
Buffer$1.prototype.readUIntLE = function readUIntLE(offset, byteLength1, noAssert) {
    offset = offset | 0;
    byteLength1 = byteLength1 | 0;
    if (!noAssert) checkOffset(offset, byteLength1, this.length);
    var val = this[offset];
    var mul = 1;
    var i = 0;
    while(++i < byteLength1 && (mul *= 0x100))val += this[offset + i] * mul;
    return val;
};
Buffer$1.prototype.readUIntBE = function readUIntBE(offset, byteLength2, noAssert) {
    offset = offset | 0;
    byteLength2 = byteLength2 | 0;
    if (!noAssert) checkOffset(offset, byteLength2, this.length);
    var val = this[offset + --byteLength2];
    var mul = 1;
    while(byteLength2 > 0 && (mul *= 0x100))val += this[offset + --byteLength2] * mul;
    return val;
};
Buffer$1.prototype.readUInt8 = function readUInt8(offset, noAssert) {
    if (!noAssert) checkOffset(offset, 1, this.length);
    return this[offset];
};
Buffer$1.prototype.readUInt16LE = function readUInt16LE(offset, noAssert) {
    if (!noAssert) checkOffset(offset, 2, this.length);
    return this[offset] | this[offset + 1] << 8;
};
Buffer$1.prototype.readUInt16BE = function readUInt16BE(offset, noAssert) {
    if (!noAssert) checkOffset(offset, 2, this.length);
    return this[offset] << 8 | this[offset + 1];
};
Buffer$1.prototype.readUInt32LE = function readUInt32LE(offset, noAssert) {
    if (!noAssert) checkOffset(offset, 4, this.length);
    return (this[offset] | this[offset + 1] << 8 | this[offset + 2] << 16) + this[offset + 3] * 0x1000000;
};
Buffer$1.prototype.readUInt32BE = function readUInt32BE(offset, noAssert) {
    if (!noAssert) checkOffset(offset, 4, this.length);
    return this[offset] * 0x1000000 + (this[offset + 1] << 16 | this[offset + 2] << 8 | this[offset + 3]);
};
Buffer$1.prototype.readIntLE = function readIntLE(offset, byteLength3, noAssert) {
    offset = offset | 0;
    byteLength3 = byteLength3 | 0;
    if (!noAssert) checkOffset(offset, byteLength3, this.length);
    var val = this[offset];
    var mul = 1;
    var i = 0;
    while(++i < byteLength3 && (mul *= 0x100))val += this[offset + i] * mul;
    mul *= 0x80;
    if (val >= mul) val -= Math.pow(2, 8 * byteLength3);
    return val;
};
Buffer$1.prototype.readIntBE = function readIntBE(offset, byteLength4, noAssert) {
    offset = offset | 0;
    byteLength4 = byteLength4 | 0;
    if (!noAssert) checkOffset(offset, byteLength4, this.length);
    var i = byteLength4;
    var mul = 1;
    var val = this[offset + --i];
    while(i > 0 && (mul *= 0x100))val += this[offset + --i] * mul;
    mul *= 0x80;
    if (val >= mul) val -= Math.pow(2, 8 * byteLength4);
    return val;
};
Buffer$1.prototype.readInt8 = function readInt8(offset, noAssert) {
    if (!noAssert) checkOffset(offset, 1, this.length);
    if (!(this[offset] & 0x80)) return this[offset];
    return (0xff - this[offset] + 1) * -1;
};
Buffer$1.prototype.readInt16LE = function readInt16LE(offset, noAssert) {
    if (!noAssert) checkOffset(offset, 2, this.length);
    var val = this[offset] | this[offset + 1] << 8;
    return val & 0x8000 ? val | 0xffff0000 : val;
};
Buffer$1.prototype.readInt16BE = function readInt16BE(offset, noAssert) {
    if (!noAssert) checkOffset(offset, 2, this.length);
    var val = this[offset + 1] | this[offset] << 8;
    return val & 0x8000 ? val | 0xffff0000 : val;
};
Buffer$1.prototype.readInt32LE = function readInt32LE(offset, noAssert) {
    if (!noAssert) checkOffset(offset, 4, this.length);
    return this[offset] | this[offset + 1] << 8 | this[offset + 2] << 16 | this[offset + 3] << 24;
};
Buffer$1.prototype.readInt32BE = function readInt32BE(offset, noAssert) {
    if (!noAssert) checkOffset(offset, 4, this.length);
    return this[offset] << 24 | this[offset + 1] << 16 | this[offset + 2] << 8 | this[offset + 3];
};
Buffer$1.prototype.readFloatLE = function readFloatLE(offset, noAssert) {
    if (!noAssert) checkOffset(offset, 4, this.length);
    return read(this, offset, true, 23, 4);
};
Buffer$1.prototype.readFloatBE = function readFloatBE(offset, noAssert) {
    if (!noAssert) checkOffset(offset, 4, this.length);
    return read(this, offset, false, 23, 4);
};
Buffer$1.prototype.readDoubleLE = function readDoubleLE(offset, noAssert) {
    if (!noAssert) checkOffset(offset, 8, this.length);
    return read(this, offset, true, 52, 8);
};
Buffer$1.prototype.readDoubleBE = function readDoubleBE(offset, noAssert) {
    if (!noAssert) checkOffset(offset, 8, this.length);
    return read(this, offset, false, 52, 8);
};
function checkInt(buf, value, offset, ext, max, min) {
    if (!internalIsBuffer(buf)) throw new TypeError('"buffer" argument must be a Buffer instance');
    if (value > max || value < min) throw new RangeError('"value" argument is out of bounds');
    if (offset + ext > buf.length) throw new RangeError("Index out of range");
}
Buffer$1.prototype.writeUIntLE = function writeUIntLE(value, offset, byteLength5, noAssert) {
    value = +value;
    offset = offset | 0;
    byteLength5 = byteLength5 | 0;
    if (!noAssert) {
        var maxBytes = Math.pow(2, 8 * byteLength5) - 1;
        checkInt(this, value, offset, byteLength5, maxBytes, 0);
    }
    var mul = 1;
    var i = 0;
    this[offset] = value & 0xff;
    while(++i < byteLength5 && (mul *= 0x100))this[offset + i] = value / mul & 0xff;
    return offset + byteLength5;
};
Buffer$1.prototype.writeUIntBE = function writeUIntBE(value, offset, byteLength6, noAssert) {
    value = +value;
    offset = offset | 0;
    byteLength6 = byteLength6 | 0;
    if (!noAssert) {
        var maxBytes = Math.pow(2, 8 * byteLength6) - 1;
        checkInt(this, value, offset, byteLength6, maxBytes, 0);
    }
    var i = byteLength6 - 1;
    var mul = 1;
    this[offset + i] = value & 0xff;
    while(--i >= 0 && (mul *= 0x100))this[offset + i] = value / mul & 0xff;
    return offset + byteLength6;
};
Buffer$1.prototype.writeUInt8 = function writeUInt8(value, offset, noAssert) {
    value = +value;
    offset = offset | 0;
    if (!noAssert) checkInt(this, value, offset, 1, 0xff, 0);
    if (!Buffer$1.TYPED_ARRAY_SUPPORT) value = Math.floor(value);
    this[offset] = value & 0xff;
    return offset + 1;
};
function objectWriteUInt16(buf, value, offset, littleEndian) {
    if (value < 0) value = 0xffff + value + 1;
    for(var i = 0, j = Math.min(buf.length - offset, 2); i < j; ++i)buf[offset + i] = (value & 0xff << 8 * (littleEndian ? i : 1 - i)) >>> (littleEndian ? i : 1 - i) * 8;
}
Buffer$1.prototype.writeUInt16LE = function writeUInt16LE(value, offset, noAssert) {
    value = +value;
    offset = offset | 0;
    if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0);
    if (Buffer$1.TYPED_ARRAY_SUPPORT) {
        this[offset] = value & 0xff;
        this[offset + 1] = value >>> 8;
    } else objectWriteUInt16(this, value, offset, true);
    return offset + 2;
};
Buffer$1.prototype.writeUInt16BE = function writeUInt16BE(value, offset, noAssert) {
    value = +value;
    offset = offset | 0;
    if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0);
    if (Buffer$1.TYPED_ARRAY_SUPPORT) {
        this[offset] = value >>> 8;
        this[offset + 1] = value & 0xff;
    } else objectWriteUInt16(this, value, offset, false);
    return offset + 2;
};
function objectWriteUInt32(buf, value, offset, littleEndian) {
    if (value < 0) value = 0xffffffff + value + 1;
    for(var i = 0, j = Math.min(buf.length - offset, 4); i < j; ++i)buf[offset + i] = value >>> (littleEndian ? i : 3 - i) * 8 & 0xff;
}
Buffer$1.prototype.writeUInt32LE = function writeUInt32LE(value, offset, noAssert) {
    value = +value;
    offset = offset | 0;
    if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0);
    if (Buffer$1.TYPED_ARRAY_SUPPORT) {
        this[offset + 3] = value >>> 24;
        this[offset + 2] = value >>> 16;
        this[offset + 1] = value >>> 8;
        this[offset] = value & 0xff;
    } else objectWriteUInt32(this, value, offset, true);
    return offset + 4;
};
Buffer$1.prototype.writeUInt32BE = function writeUInt32BE(value, offset, noAssert) {
    value = +value;
    offset = offset | 0;
    if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0);
    if (Buffer$1.TYPED_ARRAY_SUPPORT) {
        this[offset] = value >>> 24;
        this[offset + 1] = value >>> 16;
        this[offset + 2] = value >>> 8;
        this[offset + 3] = value & 0xff;
    } else objectWriteUInt32(this, value, offset, false);
    return offset + 4;
};
Buffer$1.prototype.writeIntLE = function writeIntLE(value, offset, byteLength7, noAssert) {
    value = +value;
    offset = offset | 0;
    if (!noAssert) {
        var limit = Math.pow(2, 8 * byteLength7 - 1);
        checkInt(this, value, offset, byteLength7, limit - 1, -limit);
    }
    var i = 0;
    var mul = 1;
    var sub = 0;
    this[offset] = value & 0xff;
    while(++i < byteLength7 && (mul *= 0x100)){
        if (value < 0 && sub === 0 && this[offset + i - 1] !== 0) sub = 1;
        this[offset + i] = (value / mul >> 0) - sub & 0xff;
    }
    return offset + byteLength7;
};
Buffer$1.prototype.writeIntBE = function writeIntBE(value, offset, byteLength8, noAssert) {
    value = +value;
    offset = offset | 0;
    if (!noAssert) {
        var limit = Math.pow(2, 8 * byteLength8 - 1);
        checkInt(this, value, offset, byteLength8, limit - 1, -limit);
    }
    var i = byteLength8 - 1;
    var mul = 1;
    var sub = 0;
    this[offset + i] = value & 0xff;
    while(--i >= 0 && (mul *= 0x100)){
        if (value < 0 && sub === 0 && this[offset + i + 1] !== 0) sub = 1;
        this[offset + i] = (value / mul >> 0) - sub & 0xff;
    }
    return offset + byteLength8;
};
Buffer$1.prototype.writeInt8 = function writeInt8(value, offset, noAssert) {
    value = +value;
    offset = offset | 0;
    if (!noAssert) checkInt(this, value, offset, 1, 0x7f, -128);
    if (!Buffer$1.TYPED_ARRAY_SUPPORT) value = Math.floor(value);
    if (value < 0) value = 0xff + value + 1;
    this[offset] = value & 0xff;
    return offset + 1;
};
Buffer$1.prototype.writeInt16LE = function writeInt16LE(value, offset, noAssert) {
    value = +value;
    offset = offset | 0;
    if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -32768);
    if (Buffer$1.TYPED_ARRAY_SUPPORT) {
        this[offset] = value & 0xff;
        this[offset + 1] = value >>> 8;
    } else objectWriteUInt16(this, value, offset, true);
    return offset + 2;
};
Buffer$1.prototype.writeInt16BE = function writeInt16BE(value, offset, noAssert) {
    value = +value;
    offset = offset | 0;
    if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -32768);
    if (Buffer$1.TYPED_ARRAY_SUPPORT) {
        this[offset] = value >>> 8;
        this[offset + 1] = value & 0xff;
    } else objectWriteUInt16(this, value, offset, false);
    return offset + 2;
};
Buffer$1.prototype.writeInt32LE = function writeInt32LE(value, offset, noAssert) {
    value = +value;
    offset = offset | 0;
    if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -2147483648);
    if (Buffer$1.TYPED_ARRAY_SUPPORT) {
        this[offset] = value & 0xff;
        this[offset + 1] = value >>> 8;
        this[offset + 2] = value >>> 16;
        this[offset + 3] = value >>> 24;
    } else objectWriteUInt32(this, value, offset, true);
    return offset + 4;
};
Buffer$1.prototype.writeInt32BE = function writeInt32BE(value, offset, noAssert) {
    value = +value;
    offset = offset | 0;
    if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -2147483648);
    if (value < 0) value = 0xffffffff + value + 1;
    if (Buffer$1.TYPED_ARRAY_SUPPORT) {
        this[offset] = value >>> 24;
        this[offset + 1] = value >>> 16;
        this[offset + 2] = value >>> 8;
        this[offset + 3] = value & 0xff;
    } else objectWriteUInt32(this, value, offset, false);
    return offset + 4;
};
function checkIEEE754(buf, value, offset, ext, max, min) {
    if (offset + ext > buf.length) throw new RangeError("Index out of range");
    if (offset < 0) throw new RangeError("Index out of range");
}
function writeFloat(buf, value, offset, littleEndian, noAssert) {
    if (!noAssert) checkIEEE754(buf, value, offset, 4);
    write(buf, value, offset, littleEndian, 23, 4);
    return offset + 4;
}
Buffer$1.prototype.writeFloatLE = function writeFloatLE(value, offset, noAssert) {
    return writeFloat(this, value, offset, true, noAssert);
};
Buffer$1.prototype.writeFloatBE = function writeFloatBE(value, offset, noAssert) {
    return writeFloat(this, value, offset, false, noAssert);
};
function writeDouble(buf, value, offset, littleEndian, noAssert) {
    if (!noAssert) checkIEEE754(buf, value, offset, 8);
    write(buf, value, offset, littleEndian, 52, 8);
    return offset + 8;
}
Buffer$1.prototype.writeDoubleLE = function writeDoubleLE(value, offset, noAssert) {
    return writeDouble(this, value, offset, true, noAssert);
};
Buffer$1.prototype.writeDoubleBE = function writeDoubleBE(value, offset, noAssert) {
    return writeDouble(this, value, offset, false, noAssert);
}; // copy(targetBuffer, targetStart=0, sourceStart=0, sourceEnd=buffer.length)
Buffer$1.prototype.copy = function copy(target, targetStart, start, end) {
    if (!start) start = 0;
    if (!end && end !== 0) end = this.length;
    if (targetStart >= target.length) targetStart = target.length;
    if (!targetStart) targetStart = 0;
    if (end > 0 && end < start) end = start; // Copy 0 bytes; we're done
    if (end === start) return 0;
    if (target.length === 0 || this.length === 0) return 0; // Fatal error conditions
    if (targetStart < 0) throw new RangeError("targetStart out of bounds");
    if (start < 0 || start >= this.length) throw new RangeError("sourceStart out of bounds");
    if (end < 0) throw new RangeError("sourceEnd out of bounds"); // Are we oob?
    if (end > this.length) end = this.length;
    if (target.length - targetStart < end - start) end = target.length - targetStart + start;
    var len = end - start;
    var i;
    if (this === target && start < targetStart && targetStart < end) // descending copy from end
    for(i = len - 1; i >= 0; --i)target[i + targetStart] = this[i + start];
    else if (len < 1000 || !Buffer$1.TYPED_ARRAY_SUPPORT) // ascending copy from start
    for(i = 0; i < len; ++i)target[i + targetStart] = this[i + start];
    else Uint8Array.prototype.set.call(target, this.subarray(start, start + len), targetStart);
    return len;
}; // Usage:
//    buffer.fill(number[, offset[, end]])
//    buffer.fill(buffer[, offset[, end]])
//    buffer.fill(string[, offset[, end]][, encoding])
Buffer$1.prototype.fill = function fill(val, start, end, encoding) {
    // Handle string cases:
    if (typeof val === "string") {
        if (typeof start === "string") {
            encoding = start;
            start = 0;
            end = this.length;
        } else if (typeof end === "string") {
            encoding = end;
            end = this.length;
        }
        if (val.length === 1) {
            var code = val.charCodeAt(0);
            if (code < 256) val = code;
        }
        if (encoding !== undefined && typeof encoding !== "string") throw new TypeError("encoding must be a string");
        if (typeof encoding === "string" && !Buffer$1.isEncoding(encoding)) throw new TypeError("Unknown encoding: " + encoding);
    } else if (typeof val === "number") val = val & 255;
     // Invalid ranges are not set to a default, so can range check early.
    if (start < 0 || this.length < start || this.length < end) throw new RangeError("Out of range index");
    if (end <= start) return this;
    start = start >>> 0;
    end = end === undefined ? this.length : end >>> 0;
    if (!val) val = 0;
    var i;
    if (typeof val === "number") for(i = start; i < end; ++i)this[i] = val;
    else {
        var bytes = internalIsBuffer(val) ? val : utf8ToBytes(new Buffer$1(val, encoding).toString());
        var len = bytes.length;
        for(i = 0; i < end - start; ++i)this[i + start] = bytes[i % len];
    }
    return this;
}; // HELPER FUNCTIONS
// ================
var INVALID_BASE64_RE = /[^+\/0-9A-Za-z-_]/g;
function base64clean(str) {
    // Node strips out invalid characters like \n and \t from the string, base64-js does not
    str = stringtrim(str).replace(INVALID_BASE64_RE, ""); // Node converts strings with length < 2 to ''
    if (str.length < 2) return ""; // Node allows for non-padded base64 strings (missing trailing ===), base64-js does not
    while(str.length % 4 !== 0)str = str + "=";
    return str;
}
function stringtrim(str) {
    if (str.trim) return str.trim();
    return str.replace(/^\s+|\s+$/g, "");
}
function toHex(n) {
    if (n < 16) return "0" + n.toString(16);
    return n.toString(16);
}
function utf8ToBytes(string, units) {
    units = units || Infinity;
    var codePoint;
    var length = string.length;
    var leadSurrogate = null;
    var bytes = [];
    for(var i = 0; i < length; ++i){
        codePoint = string.charCodeAt(i); // is surrogate component
        if (codePoint > 0xd7ff && codePoint < 0xe000) {
            // last char was a lead
            if (!leadSurrogate) {
                // no lead yet
                if (codePoint > 0xdbff) {
                    // unexpected trail
                    if ((units -= 3) > -1) bytes.push(0xef, 0xbf, 0xbd);
                    continue;
                } else if (i + 1 === length) {
                    // unpaired lead
                    if ((units -= 3) > -1) bytes.push(0xef, 0xbf, 0xbd);
                    continue;
                } // valid lead
                leadSurrogate = codePoint;
                continue;
            } // 2 leads in a row
            if (codePoint < 0xdc00) {
                if ((units -= 3) > -1) bytes.push(0xef, 0xbf, 0xbd);
                leadSurrogate = codePoint;
                continue;
            } // valid surrogate pair
            codePoint = (leadSurrogate - 0xd800 << 10 | codePoint - 0xdc00) + 0x10000;
        } else if (leadSurrogate) // valid bmp char, but last char was a lead
        {
            if ((units -= 3) > -1) bytes.push(0xef, 0xbf, 0xbd);
        }
        leadSurrogate = null; // encode utf8
        if (codePoint < 0x80) {
            if ((units -= 1) < 0) break;
            bytes.push(codePoint);
        } else if (codePoint < 0x800) {
            if ((units -= 2) < 0) break;
            bytes.push(codePoint >> 0x6 | 0xc0, codePoint & 0x3f | 0x80);
        } else if (codePoint < 0x10000) {
            if ((units -= 3) < 0) break;
            bytes.push(codePoint >> 0xc | 0xe0, codePoint >> 0x6 & 0x3f | 0x80, codePoint & 0x3f | 0x80);
        } else if (codePoint < 0x110000) {
            if ((units -= 4) < 0) break;
            bytes.push(codePoint >> 0x12 | 0xf0, codePoint >> 0xc & 0x3f | 0x80, codePoint >> 0x6 & 0x3f | 0x80, codePoint & 0x3f | 0x80);
        } else throw new Error("Invalid code point");
    }
    return bytes;
}
function asciiToBytes(str) {
    var byteArray = [];
    for(var i = 0; i < str.length; ++i)// Node's code seems to be doing this and not & 0x7F..
    byteArray.push(str.charCodeAt(i) & 0xff);
    return byteArray;
}
function utf16leToBytes(str, units) {
    var c, hi, lo;
    var byteArray = [];
    for(var i = 0; i < str.length; ++i){
        if ((units -= 2) < 0) break;
        c = str.charCodeAt(i);
        hi = c >> 8;
        lo = c % 256;
        byteArray.push(lo);
        byteArray.push(hi);
    }
    return byteArray;
}
function base64ToBytes(str) {
    return toByteArray(base64clean(str));
}
function blitBuffer(src, dst, offset, length) {
    for(var i = 0; i < length; ++i){
        if (i + offset >= dst.length || i >= src.length) break;
        dst[i + offset] = src[i];
    }
    return i;
}
function isnan(val) {
    return val !== val; // eslint-disable-line no-self-compare
} // the following is from is-buffer, also by Feross Aboukhadijeh and with same lisence
// The _isBuffer check is for Safari 5-7 support, because it's missing
// Object.prototype.constructor. Remove this eventually
function isBuffer(obj) {
    return obj != null && (!!obj._isBuffer || isFastBuffer(obj) || isSlowBuffer(obj));
}
function isFastBuffer(obj) {
    return !!obj.constructor && typeof obj.constructor.isBuffer === "function" && obj.constructor.isBuffer(obj);
} // For Node v0.10 support. Remove this eventually.
function isSlowBuffer(obj) {
    return typeof obj.readFloatLE === "function" && typeof obj.slice === "function" && isFastBuffer(obj.slice(0, 0));
}
var _polyfillNode_buffer = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    Buffer: Buffer$1,
    INSPECT_MAX_BYTES: INSPECT_MAX_BYTES,
    SlowBuffer: SlowBuffer,
    isBuffer: isBuffer,
    kMaxLength: _kMaxLength
});
var sax$1 = {};
var string_decoder = {};
var require$$0 = /*@__PURE__*/ getAugmentedNamespace(_polyfillNode_buffer); // Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.
var Buffer = require$$0.Buffer;
var isBufferEncoding = Buffer.isEncoding || function(encoding) {
    switch(encoding && encoding.toLowerCase()){
        case "hex":
        case "utf8":
        case "utf-8":
        case "ascii":
        case "binary":
        case "base64":
        case "ucs2":
        case "ucs-2":
        case "utf16le":
        case "utf-16le":
        case "raw":
            return true;
        default:
            return false;
    }
};
function assertEncoding(encoding) {
    if (encoding && !isBufferEncoding(encoding)) throw new Error("Unknown encoding: " + encoding);
} // StringDecoder provides an interface for efficiently splitting a series of
// buffers into a series of JS strings without breaking apart multi-byte
// characters. CESU-8 is handled as part of the UTF-8 encoding.
//
// @TODO Handling all encodings inside a single object makes it very difficult
// to reason about this code, so it should be split up in the future.
// @TODO There should be a utf8-strict encoding that rejects invalid UTF-8 code
// points as used by CESU-8.
var StringDecoder = string_decoder.StringDecoder = function(encoding) {
    this.encoding = (encoding || "utf8").toLowerCase().replace(/[-_]/, "");
    assertEncoding(encoding);
    switch(this.encoding){
        case "utf8":
            // CESU-8 represents each of Surrogate Pair by 3-bytes
            this.surrogateSize = 3;
            break;
        case "ucs2":
        case "utf16le":
            // UTF-16 represents each of Surrogate Pair by 2-bytes
            this.surrogateSize = 2;
            this.detectIncompleteChar = utf16DetectIncompleteChar;
            break;
        case "base64":
            // Base-64 stores 3 bytes in 4 chars, and pads the remainder.
            this.surrogateSize = 3;
            this.detectIncompleteChar = base64DetectIncompleteChar;
            break;
        default:
            this.write = passThroughWrite;
            return;
    } // Enough space to store all bytes of a single character. UTF-8 needs 4
    // bytes, but CESU-8 may require up to 6 (3 bytes per surrogate).
    this.charBuffer = new Buffer(6); // Number of bytes received for the current incomplete multi-byte character.
    this.charReceived = 0; // Number of bytes expected for the current incomplete multi-byte character.
    this.charLength = 0;
}; // write decodes the given buffer and returns it as JS string that is
// guaranteed to not contain any partial multi-byte characters. Any partial
// character found at the end of the buffer is buffered up, and will be
// returned when calling write again with the remaining bytes.
//
// Note: Converting a Buffer containing an orphan surrogate to a String
// currently works, but converting a String to a Buffer (via `new Buffer`, or
// Buffer#write) will replace incomplete surrogates with the unicode
// replacement character. See https://codereview.chromium.org/121173009/ .
StringDecoder.prototype.write = function(buffer) {
    var charStr = ""; // if our last write ended with an incomplete multibyte character
    while(this.charLength){
        // determine how many remaining bytes this buffer has to offer for this char
        var available = buffer.length >= this.charLength - this.charReceived ? this.charLength - this.charReceived : buffer.length; // add the new bytes to the char buffer
        buffer.copy(this.charBuffer, this.charReceived, 0, available);
        this.charReceived += available;
        if (this.charReceived < this.charLength) // still not enough chars in this buffer? wait for more ...
        return "";
         // remove bytes belonging to the current character from the buffer
        buffer = buffer.slice(available, buffer.length); // get the character that was split
        charStr = this.charBuffer.slice(0, this.charLength).toString(this.encoding); // CESU-8: lead surrogate (D800-DBFF) is also the incomplete character
        var charCode = charStr.charCodeAt(charStr.length - 1);
        if (charCode >= 0xd800 && charCode <= 0xdbff) {
            this.charLength += this.surrogateSize;
            charStr = "";
            continue;
        }
        this.charReceived = this.charLength = 0; // if there are no more bytes in this buffer, just emit our char
        if (buffer.length === 0) return charStr;
        break;
    } // determine and set charLength / charReceived
    this.detectIncompleteChar(buffer);
    var end = buffer.length;
    if (this.charLength) {
        // buffer the incomplete character bytes we got
        buffer.copy(this.charBuffer, 0, buffer.length - this.charReceived, end);
        end -= this.charReceived;
    }
    charStr += buffer.toString(this.encoding, 0, end);
    var end = charStr.length - 1;
    var charCode = charStr.charCodeAt(end); // CESU-8: lead surrogate (D800-DBFF) is also the incomplete character
    if (charCode >= 0xd800 && charCode <= 0xdbff) {
        var size = this.surrogateSize;
        this.charLength += size;
        this.charReceived += size;
        this.charBuffer.copy(this.charBuffer, size, 0, size);
        buffer.copy(this.charBuffer, 0, 0, size);
        return charStr.substring(0, end);
    } // or just emit the charStr
    return charStr;
}; // detectIncompleteChar determines if there is an incomplete UTF-8 character at
// the end of the given buffer. If so, it sets this.charLength to the byte
// length that character, and sets this.charReceived to the number of bytes
// that are available for this character.
StringDecoder.prototype.detectIncompleteChar = function(buffer) {
    // determine how many bytes we have to check at the end of this buffer
    var i = buffer.length >= 3 ? 3 : buffer.length; // Figure out if one of the last i bytes of our buffer announces an
    // incomplete char.
    for(; i > 0; i--){
        var c = buffer[buffer.length - i]; // See http://en.wikipedia.org/wiki/UTF-8#Description
        // 110XXXXX
        if (i == 1 && c >> 5 == 0x06) {
            this.charLength = 2;
            break;
        } // 1110XXXX
        if (i <= 2 && c >> 4 == 0x0e) {
            this.charLength = 3;
            break;
        } // 11110XXX
        if (i <= 3 && c >> 3 == 0x1e) {
            this.charLength = 4;
            break;
        }
    }
    this.charReceived = i;
};
StringDecoder.prototype.end = function(buffer) {
    var res = "";
    if (buffer && buffer.length) res = this.write(buffer);
    if (this.charReceived) {
        var cr = this.charReceived;
        var buf = this.charBuffer;
        var enc = this.encoding;
        res += buf.slice(0, cr).toString(enc);
    }
    return res;
};
function passThroughWrite(buffer) {
    return buffer.toString(this.encoding);
}
function utf16DetectIncompleteChar(buffer) {
    this.charReceived = buffer.length % 2;
    this.charLength = this.charReceived ? 2 : 0;
}
function base64DetectIncompleteChar(buffer) {
    this.charReceived = buffer.length % 3;
    this.charLength = this.charReceived ? 3 : 0;
}
(function(exports) {
    (function(sax1) {
        // wrapper for non-node envs
        sax1.parser = function(strict, opt) {
            return new SAXParser(strict, opt);
        };
        sax1.SAXParser = SAXParser;
        sax1.SAXStream = SAXStream;
        sax1.createStream = createStream; // When we pass the MAX_BUFFER_LENGTH position, start checking for buffer overruns.
        // When we check, schedule the next check for MAX_BUFFER_LENGTH - (max(buffer lengths)),
        // since that's the earliest that a buffer overrun could occur.  This way, checks are
        // as rare as required, but as often as necessary to ensure never crossing this bound.
        // Furthermore, buffers are only tested at most once per write(), so passing a very
        // large string into write() might have undesirable effects, but this is manageable by
        // the caller, so it is assumed to be safe.  Thus, a call to write() may, in the extreme
        // edge case, result in creating at most one complete copy of the string passed in.
        // Set to Infinity to have unlimited buffers.
        sax1.MAX_BUFFER_LENGTH = 65536;
        var buffers = [
            "comment",
            "sgmlDecl",
            "textNode",
            "tagName",
            "doctype",
            "procInstName",
            "procInstBody",
            "entity",
            "attribName",
            "attribValue",
            "cdata",
            "script"
        ];
        sax1.EVENTS = [
            "text",
            "processinginstruction",
            "sgmldeclaration",
            "doctype",
            "comment",
            "opentagstart",
            "attribute",
            "opentag",
            "closetag",
            "opencdata",
            "cdata",
            "closecdata",
            "error",
            "end",
            "ready",
            "script",
            "opennamespace",
            "closenamespace"
        ];
        function SAXParser(strict, opt) {
            if (!(this instanceof SAXParser)) return new SAXParser(strict, opt);
            var parser = this;
            clearBuffers(parser);
            parser.q = parser.c = "";
            parser.bufferCheckPosition = sax1.MAX_BUFFER_LENGTH;
            parser.opt = opt || {};
            parser.opt.lowercase = parser.opt.lowercase || parser.opt.lowercasetags;
            parser.looseCase = parser.opt.lowercase ? "toLowerCase" : "toUpperCase";
            parser.tags = [];
            parser.closed = parser.closedRoot = parser.sawRoot = false;
            parser.tag = parser.error = null;
            parser.strict = !!strict;
            parser.noscript = !!(strict || parser.opt.noscript);
            parser.state = S.BEGIN;
            parser.strictEntities = parser.opt.strictEntities;
            parser.ENTITIES = parser.strictEntities ? Object.create(sax1.XML_ENTITIES) : Object.create(sax1.ENTITIES);
            parser.attribList = []; // namespaces form a prototype chain.
            // it always points at the current tag,
            // which protos to its parent tag.
            if (parser.opt.xmlns) parser.ns = Object.create(rootNS);
             // mostly just for error reporting
            parser.trackPosition = parser.opt.position !== false;
            if (parser.trackPosition) parser.position = parser.line = parser.column = 0;
            emit1(parser, "onready");
        }
        if (!Object.create) Object.create = function(o) {
            function F() {}
            F.prototype = o;
            var newf = new F();
            return newf;
        };
        if (!Object.keys) Object.keys = function(o) {
            var a = [];
            for(var i in o)if (o.hasOwnProperty(i)) a.push(i);
            return a;
        };
        function checkBufferLength(parser) {
            var maxAllowed = Math.max(sax1.MAX_BUFFER_LENGTH, 10);
            var maxActual = 0;
            for(var i = 0, l = buffers.length; i < l; i++){
                var len = parser[buffers[i]].length;
                if (len > maxAllowed) // Text/cdata nodes can get big, and since they're buffered,
                // we can get here under normal conditions.
                // Avoid issues by emitting the text node now,
                // so at least it won't get any bigger.
                switch(buffers[i]){
                    case "textNode":
                        closeText(parser);
                        break;
                    case "cdata":
                        emitNode(parser, "oncdata", parser.cdata);
                        parser.cdata = "";
                        break;
                    case "script":
                        emitNode(parser, "onscript", parser.script);
                        parser.script = "";
                        break;
                    default:
                        error(parser, "Max buffer length exceeded: " + buffers[i]);
                }
                maxActual = Math.max(maxActual, len);
            } // schedule the next check for the earliest possible buffer overrun.
            var m4 = sax1.MAX_BUFFER_LENGTH - maxActual;
            parser.bufferCheckPosition = m4 + parser.position;
        }
        function clearBuffers(parser) {
            for(var i = 0, l = buffers.length; i < l; i++)parser[buffers[i]] = "";
        }
        function flushBuffers(parser) {
            closeText(parser);
            if (parser.cdata !== "") {
                emitNode(parser, "oncdata", parser.cdata);
                parser.cdata = "";
            }
            if (parser.script !== "") {
                emitNode(parser, "onscript", parser.script);
                parser.script = "";
            }
        }
        SAXParser.prototype = {
            end: function() {
                end(this);
            },
            write: write1,
            resume: function() {
                this.error = null;
                return this;
            },
            close: function() {
                return this.write(null);
            },
            flush: function() {
                flushBuffers(this);
            }
        };
        var Stream;
        try {
            Stream = require("stream").Stream;
        } catch (ex) {
            Stream = function() {};
        }
        var streamWraps = sax1.EVENTS.filter(function(ev) {
            return ev !== "error" && ev !== "end";
        });
        function createStream(strict, opt) {
            return new SAXStream(strict, opt);
        }
        function SAXStream(strict, opt) {
            if (!(this instanceof SAXStream)) return new SAXStream(strict, opt);
            Stream.apply(this);
            this._parser = new SAXParser(strict, opt);
            this.writable = true;
            this.readable = true;
            var me = this;
            this._parser.onend = function() {
                me.emit("end");
            };
            this._parser.onerror = function(er) {
                me.emit("error", er); // if didn't throw, then means error was handled.
                // go ahead and clear error, so we can write again.
                me._parser.error = null;
            };
            this._decoder = null;
            streamWraps.forEach(function(ev) {
                Object.defineProperty(me, "on" + ev, {
                    get: function() {
                        return me._parser["on" + ev];
                    },
                    set: function(h1) {
                        if (!h1) {
                            me.removeAllListeners(ev);
                            me._parser["on" + ev] = h1;
                            return h1;
                        }
                        me.on(ev, h1);
                    },
                    enumerable: true,
                    configurable: false
                });
            });
        }
        SAXStream.prototype = Object.create(Stream.prototype, {
            constructor: {
                value: SAXStream
            }
        });
        SAXStream.prototype.write = function(data) {
            if (typeof Buffer$1 === "function" && typeof Buffer$1.isBuffer === "function" && Buffer$1.isBuffer(data)) {
                if (!this._decoder) {
                    var SD = string_decoder.StringDecoder;
                    this._decoder = new SD("utf8");
                }
                data = this._decoder.write(data);
            }
            this._parser.write(data.toString());
            this.emit("data", data);
            return true;
        };
        SAXStream.prototype.end = function(chunk) {
            if (chunk && chunk.length) this.write(chunk);
            this._parser.end();
            return true;
        };
        SAXStream.prototype.on = function(ev, handler) {
            var me = this;
            if (!me._parser["on" + ev] && streamWraps.indexOf(ev) !== -1) me._parser["on" + ev] = function() {
                var args = arguments.length === 1 ? [
                    arguments[0]
                ] : Array.apply(null, arguments);
                args.splice(0, 0, ev);
                me.emit.apply(me, args);
            };
            return Stream.prototype.on.call(me, ev, handler);
        }; // this really needs to be replaced with character classes.
        // XML allows all manner of ridiculous numbers and digits.
        var CDATA = "[CDATA[";
        var DOCTYPE = "DOCTYPE";
        var XML_NAMESPACE = "http://www.w3.org/XML/1998/namespace";
        var XMLNS_NAMESPACE = "http://www.w3.org/2000/xmlns/";
        var rootNS = {
            xml: XML_NAMESPACE,
            xmlns: XMLNS_NAMESPACE
        }; // http://www.w3.org/TR/REC-xml/#NT-NameStartChar
        // This implementation works on strings, a single character at a time
        // as such, it cannot ever support astral-plane characters (10000-EFFFF)
        // without a significant breaking change to either this  parser, or the
        // JavaScript language.  Implementation of an emoji-capable xml parser
        // is left as an exercise for the reader.
        var nameStart = /[:_A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]/;
        var nameBody = /[:_A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD\u00B7\u0300-\u036F\u203F-\u2040.\d-]/;
        var entityStart = /[#:_A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]/;
        var entityBody = /[#:_A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD\u00B7\u0300-\u036F\u203F-\u2040.\d-]/;
        function isWhitespace(c) {
            return c === " " || c === "\n" || c === "\r" || c === "	";
        }
        function isQuote(c) {
            return c === '"' || c === "'";
        }
        function isAttribEnd(c) {
            return c === ">" || isWhitespace(c);
        }
        function isMatch(regex, c) {
            return regex.test(c);
        }
        function notMatch(regex, c) {
            return !isMatch(regex, c);
        }
        var S = 0;
        sax1.STATE = {
            BEGIN: S++,
            // leading byte order mark or whitespace
            BEGIN_WHITESPACE: S++,
            // leading whitespace
            TEXT: S++,
            // general stuff
            TEXT_ENTITY: S++,
            // &amp and such.
            OPEN_WAKA: S++,
            // <
            SGML_DECL: S++,
            // <!BLARG
            SGML_DECL_QUOTED: S++,
            // <!BLARG foo "bar
            DOCTYPE: S++,
            // <!DOCTYPE
            DOCTYPE_QUOTED: S++,
            // <!DOCTYPE "//blah
            DOCTYPE_DTD: S++,
            // <!DOCTYPE "//blah" [ ...
            DOCTYPE_DTD_QUOTED: S++,
            // <!DOCTYPE "//blah" [ "foo
            COMMENT_STARTING: S++,
            // <!-
            COMMENT: S++,
            // <!--
            COMMENT_ENDING: S++,
            // <!-- blah -
            COMMENT_ENDED: S++,
            // <!-- blah --
            CDATA: S++,
            // <![CDATA[ something
            CDATA_ENDING: S++,
            // ]
            CDATA_ENDING_2: S++,
            // ]]
            PROC_INST: S++,
            // <?hi
            PROC_INST_BODY: S++,
            // <?hi there
            PROC_INST_ENDING: S++,
            // <?hi "there" ?
            OPEN_TAG: S++,
            // <strong
            OPEN_TAG_SLASH: S++,
            // <strong /
            ATTRIB: S++,
            // <a
            ATTRIB_NAME: S++,
            // <a foo
            ATTRIB_NAME_SAW_WHITE: S++,
            // <a foo _
            ATTRIB_VALUE: S++,
            // <a foo=
            ATTRIB_VALUE_QUOTED: S++,
            // <a foo="bar
            ATTRIB_VALUE_CLOSED: S++,
            // <a foo="bar"
            ATTRIB_VALUE_UNQUOTED: S++,
            // <a foo=bar
            ATTRIB_VALUE_ENTITY_Q: S++,
            // <foo bar="&quot;"
            ATTRIB_VALUE_ENTITY_U: S++,
            // <foo bar=&quot
            CLOSE_TAG: S++,
            // </a
            CLOSE_TAG_SAW_WHITE: S++,
            // </a   >
            SCRIPT: S++,
            // <script> ...
            SCRIPT_ENDING: S++ // <script> ... <
        };
        sax1.XML_ENTITIES = {
            "amp": "&",
            "gt": ">",
            "lt": "<",
            "quot": '"',
            "apos": "'"
        };
        sax1.ENTITIES = {
            "amp": "&",
            "gt": ">",
            "lt": "<",
            "quot": '"',
            "apos": "'",
            "AElig": 198,
            "Aacute": 193,
            "Acirc": 194,
            "Agrave": 192,
            "Aring": 197,
            "Atilde": 195,
            "Auml": 196,
            "Ccedil": 199,
            "ETH": 208,
            "Eacute": 201,
            "Ecirc": 202,
            "Egrave": 200,
            "Euml": 203,
            "Iacute": 205,
            "Icirc": 206,
            "Igrave": 204,
            "Iuml": 207,
            "Ntilde": 209,
            "Oacute": 211,
            "Ocirc": 212,
            "Ograve": 210,
            "Oslash": 216,
            "Otilde": 213,
            "Ouml": 214,
            "THORN": 222,
            "Uacute": 218,
            "Ucirc": 219,
            "Ugrave": 217,
            "Uuml": 220,
            "Yacute": 221,
            "aacute": 225,
            "acirc": 226,
            "aelig": 230,
            "agrave": 224,
            "aring": 229,
            "atilde": 227,
            "auml": 228,
            "ccedil": 231,
            "eacute": 233,
            "ecirc": 234,
            "egrave": 232,
            "eth": 240,
            "euml": 235,
            "iacute": 237,
            "icirc": 238,
            "igrave": 236,
            "iuml": 239,
            "ntilde": 241,
            "oacute": 243,
            "ocirc": 244,
            "ograve": 242,
            "oslash": 248,
            "otilde": 245,
            "ouml": 246,
            "szlig": 223,
            "thorn": 254,
            "uacute": 250,
            "ucirc": 251,
            "ugrave": 249,
            "uuml": 252,
            "yacute": 253,
            "yuml": 255,
            "copy": 169,
            "reg": 174,
            "nbsp": 160,
            "iexcl": 161,
            "cent": 162,
            "pound": 163,
            "curren": 164,
            "yen": 165,
            "brvbar": 166,
            "sect": 167,
            "uml": 168,
            "ordf": 170,
            "laquo": 171,
            "not": 172,
            "shy": 173,
            "macr": 175,
            "deg": 176,
            "plusmn": 177,
            "sup1": 185,
            "sup2": 178,
            "sup3": 179,
            "acute": 180,
            "micro": 181,
            "para": 182,
            "middot": 183,
            "cedil": 184,
            "ordm": 186,
            "raquo": 187,
            "frac14": 188,
            "frac12": 189,
            "frac34": 190,
            "iquest": 191,
            "times": 215,
            "divide": 247,
            "OElig": 338,
            "oelig": 339,
            "Scaron": 352,
            "scaron": 353,
            "Yuml": 376,
            "fnof": 402,
            "circ": 710,
            "tilde": 732,
            "Alpha": 913,
            "Beta": 914,
            "Gamma": 915,
            "Delta": 916,
            "Epsilon": 917,
            "Zeta": 918,
            "Eta": 919,
            "Theta": 920,
            "Iota": 921,
            "Kappa": 922,
            "Lambda": 923,
            "Mu": 924,
            "Nu": 925,
            "Xi": 926,
            "Omicron": 927,
            "Pi": 928,
            "Rho": 929,
            "Sigma": 931,
            "Tau": 932,
            "Upsilon": 933,
            "Phi": 934,
            "Chi": 935,
            "Psi": 936,
            "Omega": 937,
            "alpha": 945,
            "beta": 946,
            "gamma": 947,
            "delta": 948,
            "epsilon": 949,
            "zeta": 950,
            "eta": 951,
            "theta": 952,
            "iota": 953,
            "kappa": 954,
            "lambda": 955,
            "mu": 956,
            "nu": 957,
            "xi": 958,
            "omicron": 959,
            "pi": 960,
            "rho": 961,
            "sigmaf": 962,
            "sigma": 963,
            "tau": 964,
            "upsilon": 965,
            "phi": 966,
            "chi": 967,
            "psi": 968,
            "omega": 969,
            "thetasym": 977,
            "upsih": 978,
            "piv": 982,
            "ensp": 8194,
            "emsp": 8195,
            "thinsp": 8201,
            "zwnj": 8204,
            "zwj": 8205,
            "lrm": 8206,
            "rlm": 8207,
            "ndash": 8211,
            "mdash": 8212,
            "lsquo": 8216,
            "rsquo": 8217,
            "sbquo": 8218,
            "ldquo": 8220,
            "rdquo": 8221,
            "bdquo": 8222,
            "dagger": 8224,
            "Dagger": 8225,
            "bull": 8226,
            "hellip": 8230,
            "permil": 8240,
            "prime": 8242,
            "Prime": 8243,
            "lsaquo": 8249,
            "rsaquo": 8250,
            "oline": 8254,
            "frasl": 8260,
            "euro": 8364,
            "image": 8465,
            "weierp": 8472,
            "real": 8476,
            "trade": 8482,
            "alefsym": 8501,
            "larr": 8592,
            "uarr": 8593,
            "rarr": 8594,
            "darr": 8595,
            "harr": 8596,
            "crarr": 8629,
            "lArr": 8656,
            "uArr": 8657,
            "rArr": 8658,
            "dArr": 8659,
            "hArr": 8660,
            "forall": 8704,
            "part": 8706,
            "exist": 8707,
            "empty": 8709,
            "nabla": 8711,
            "isin": 8712,
            "notin": 8713,
            "ni": 8715,
            "prod": 8719,
            "sum": 8721,
            "minus": 8722,
            "lowast": 8727,
            "radic": 8730,
            "prop": 8733,
            "infin": 8734,
            "ang": 8736,
            "and": 8743,
            "or": 8744,
            "cap": 8745,
            "cup": 8746,
            "int": 8747,
            "there4": 8756,
            "sim": 8764,
            "cong": 8773,
            "asymp": 8776,
            "ne": 8800,
            "equiv": 8801,
            "le": 8804,
            "ge": 8805,
            "sub": 8834,
            "sup": 8835,
            "nsub": 8836,
            "sube": 8838,
            "supe": 8839,
            "oplus": 8853,
            "otimes": 8855,
            "perp": 8869,
            "sdot": 8901,
            "lceil": 8968,
            "rceil": 8969,
            "lfloor": 8970,
            "rfloor": 8971,
            "lang": 9001,
            "rang": 9002,
            "loz": 9674,
            "spades": 9824,
            "clubs": 9827,
            "hearts": 9829,
            "diams": 9830
        };
        Object.keys(sax1.ENTITIES).forEach(function(key) {
            var e = sax1.ENTITIES[key];
            var s5 = typeof e === "number" ? String.fromCharCode(e) : e;
            sax1.ENTITIES[key] = s5;
        });
        for(var s4 in sax1.STATE)sax1.STATE[sax1.STATE[s4]] = s4;
         // shorthand
        S = sax1.STATE;
        function emit1(parser, event, data) {
            parser[event] && parser[event](data);
        }
        function emitNode(parser, nodeType, data) {
            if (parser.textNode) closeText(parser);
            emit1(parser, nodeType, data);
        }
        function closeText(parser) {
            parser.textNode = textopts(parser.opt, parser.textNode);
            if (parser.textNode) emit1(parser, "ontext", parser.textNode);
            parser.textNode = "";
        }
        function textopts(opt, text) {
            if (opt.trim) text = text.trim();
            if (opt.normalize) text = text.replace(/\s+/g, " ");
            return text;
        }
        function error(parser, er) {
            closeText(parser);
            if (parser.trackPosition) er += "\nLine: " + parser.line + "\nColumn: " + parser.column + "\nChar: " + parser.c;
            er = new Error(er);
            parser.error = er;
            emit1(parser, "onerror", er);
            return parser;
        }
        function end(parser) {
            if (parser.sawRoot && !parser.closedRoot) strictFail(parser, "Unclosed root tag");
            if (parser.state !== S.BEGIN && parser.state !== S.BEGIN_WHITESPACE && parser.state !== S.TEXT) error(parser, "Unexpected end");
            closeText(parser);
            parser.c = "";
            parser.closed = true;
            emit1(parser, "onend");
            SAXParser.call(parser, parser.strict, parser.opt);
            return parser;
        }
        function strictFail(parser, message) {
            if (typeof parser !== "object" || !(parser instanceof SAXParser)) throw new Error("bad call to strictFail");
            if (parser.strict) error(parser, message);
        }
        function newTag(parser) {
            if (!parser.strict) parser.tagName = parser.tagName[parser.looseCase]();
            var parent = parser.tags[parser.tags.length - 1] || parser;
            var tag = parser.tag = {
                name: parser.tagName,
                attributes: {}
            }; // will be overridden if tag contails an xmlns="foo" or xmlns:foo="bar"
            if (parser.opt.xmlns) tag.ns = parent.ns;
            parser.attribList.length = 0;
            emitNode(parser, "onopentagstart", tag);
        }
        function qname(name, attribute) {
            var i = name.indexOf(":");
            var qualName = i < 0 ? [
                "",
                name
            ] : name.split(":");
            var prefix = qualName[0];
            var local = qualName[1]; // <x "xmlns"="http://foo">
            if (attribute && name === "xmlns") {
                prefix = "xmlns";
                local = "";
            }
            return {
                prefix: prefix,
                local: local
            };
        }
        function attrib(parser) {
            if (!parser.strict) parser.attribName = parser.attribName[parser.looseCase]();
            if (parser.attribList.indexOf(parser.attribName) !== -1 || parser.tag.attributes.hasOwnProperty(parser.attribName)) {
                parser.attribName = parser.attribValue = "";
                return;
            }
            if (parser.opt.xmlns) {
                var qn = qname(parser.attribName, true);
                var prefix = qn.prefix;
                var local = qn.local;
                if (prefix === "xmlns") {
                    // namespace binding attribute. push the binding into scope
                    if (local === "xml" && parser.attribValue !== XML_NAMESPACE) strictFail(parser, "xml: prefix must be bound to " + XML_NAMESPACE + "\n" + "Actual: " + parser.attribValue);
                    else if (local === "xmlns" && parser.attribValue !== XMLNS_NAMESPACE) strictFail(parser, "xmlns: prefix must be bound to " + XMLNS_NAMESPACE + "\n" + "Actual: " + parser.attribValue);
                    else {
                        var tag = parser.tag;
                        var parent = parser.tags[parser.tags.length - 1] || parser;
                        if (tag.ns === parent.ns) tag.ns = Object.create(parent.ns);
                        tag.ns[local] = parser.attribValue;
                    }
                } // defer onattribute events until all attributes have been seen
                // so any new bindings can take effect. preserve attribute order
                // so deferred events can be emitted in document order
                parser.attribList.push([
                    parser.attribName,
                    parser.attribValue
                ]);
            } else {
                // in non-xmlns mode, we can emit the event right away
                parser.tag.attributes[parser.attribName] = parser.attribValue;
                emitNode(parser, "onattribute", {
                    name: parser.attribName,
                    value: parser.attribValue
                });
            }
            parser.attribName = parser.attribValue = "";
        }
        function openTag(parser, selfClosing) {
            if (parser.opt.xmlns) {
                // emit namespace binding events
                var tag = parser.tag; // add namespace info to tag
                var qn = qname(parser.tagName);
                tag.prefix = qn.prefix;
                tag.local = qn.local;
                tag.uri = tag.ns[qn.prefix] || "";
                if (tag.prefix && !tag.uri) {
                    strictFail(parser, "Unbound namespace prefix: " + JSON.stringify(parser.tagName));
                    tag.uri = qn.prefix;
                }
                var parent = parser.tags[parser.tags.length - 1] || parser;
                if (tag.ns && parent.ns !== tag.ns) Object.keys(tag.ns).forEach(function(p) {
                    emitNode(parser, "onopennamespace", {
                        prefix: p,
                        uri: tag.ns[p]
                    });
                });
                 // handle deferred onattribute events
                // Note: do not apply default ns to attributes:
                //   http://www.w3.org/TR/REC-xml-names/#defaulting
                for(var i = 0, l = parser.attribList.length; i < l; i++){
                    var nv = parser.attribList[i];
                    var name = nv[0];
                    var value = nv[1];
                    var qualName = qname(name, true);
                    var prefix = qualName.prefix;
                    var local = qualName.local;
                    var uri = prefix === "" ? "" : tag.ns[prefix] || "";
                    var a = {
                        name: name,
                        value: value,
                        prefix: prefix,
                        local: local,
                        uri: uri
                    }; // if there's any attributes with an undefined namespace,
                    // then fail on them now.
                    if (prefix && prefix !== "xmlns" && !uri) {
                        strictFail(parser, "Unbound namespace prefix: " + JSON.stringify(prefix));
                        a.uri = prefix;
                    }
                    parser.tag.attributes[name] = a;
                    emitNode(parser, "onattribute", a);
                }
                parser.attribList.length = 0;
            }
            parser.tag.isSelfClosing = !!selfClosing; // process the tag
            parser.sawRoot = true;
            parser.tags.push(parser.tag);
            emitNode(parser, "onopentag", parser.tag);
            if (!selfClosing) {
                // special case for <script> in non-strict mode.
                if (!parser.noscript && parser.tagName.toLowerCase() === "script") parser.state = S.SCRIPT;
                else parser.state = S.TEXT;
                parser.tag = null;
                parser.tagName = "";
            }
            parser.attribName = parser.attribValue = "";
            parser.attribList.length = 0;
        }
        function closeTag(parser) {
            if (!parser.tagName) {
                strictFail(parser, "Weird empty close tag.");
                parser.textNode += "</>";
                parser.state = S.TEXT;
                return;
            }
            if (parser.script) {
                if (parser.tagName !== "script") {
                    parser.script += "</" + parser.tagName + ">";
                    parser.tagName = "";
                    parser.state = S.SCRIPT;
                    return;
                }
                emitNode(parser, "onscript", parser.script);
                parser.script = "";
            } // first make sure that the closing tag actually exists.
            // <a><b></c></b></a> will close everything, otherwise.
            var t = parser.tags.length;
            var tagName = parser.tagName;
            if (!parser.strict) tagName = tagName[parser.looseCase]();
            var closeTo = tagName;
            while(t--){
                var close = parser.tags[t];
                if (close.name !== closeTo) // fail the first time in strict mode
                strictFail(parser, "Unexpected close tag");
                else break;
            } // didn't find it.  we already failed for strict, so just abort.
            if (t < 0) {
                strictFail(parser, "Unmatched closing tag: " + parser.tagName);
                parser.textNode += "</" + parser.tagName + ">";
                parser.state = S.TEXT;
                return;
            }
            parser.tagName = tagName;
            var s6 = parser.tags.length;
            while((s6--) > t){
                var tag = parser.tag = parser.tags.pop();
                parser.tagName = parser.tag.name;
                emitNode(parser, "onclosetag", parser.tagName);
                var x = {};
                for(var i in tag.ns)x[i] = tag.ns[i];
                var parent = parser.tags[parser.tags.length - 1] || parser;
                if (parser.opt.xmlns && tag.ns !== parent.ns) // remove namespace bindings introduced by tag
                Object.keys(tag.ns).forEach(function(p) {
                    var n = tag.ns[p];
                    emitNode(parser, "onclosenamespace", {
                        prefix: p,
                        uri: n
                    });
                });
            }
            if (t === 0) parser.closedRoot = true;
            parser.tagName = parser.attribValue = parser.attribName = "";
            parser.attribList.length = 0;
            parser.state = S.TEXT;
        }
        function parseEntity(parser) {
            var entity = parser.entity;
            var entityLC = entity.toLowerCase();
            var num;
            var numStr = "";
            if (parser.ENTITIES[entity]) return parser.ENTITIES[entity];
            if (parser.ENTITIES[entityLC]) return parser.ENTITIES[entityLC];
            entity = entityLC;
            if (entity.charAt(0) === "#") {
                if (entity.charAt(1) === "x") {
                    entity = entity.slice(2);
                    num = parseInt(entity, 16);
                    numStr = num.toString(16);
                } else {
                    entity = entity.slice(1);
                    num = parseInt(entity, 10);
                    numStr = num.toString(10);
                }
            }
            entity = entity.replace(/^0+/, "");
            if (isNaN(num) || numStr.toLowerCase() !== entity) {
                strictFail(parser, "Invalid character entity");
                return "&" + parser.entity + ";";
            }
            return String.fromCodePoint(num);
        }
        function beginWhiteSpace(parser, c) {
            if (c === "<") {
                parser.state = S.OPEN_WAKA;
                parser.startTagPosition = parser.position;
            } else if (!isWhitespace(c)) {
                // have to process this as a text node.
                // weird, but happens.
                strictFail(parser, "Non-whitespace before first tag.");
                parser.textNode = c;
                parser.state = S.TEXT;
            }
        }
        function charAt(chunk, i) {
            var result = "";
            if (i < chunk.length) result = chunk.charAt(i);
            return result;
        }
        function write1(chunk) {
            var parser = this;
            if (this.error) throw this.error;
            if (parser.closed) return error(parser, "Cannot write after close. Assign an onready handler.");
            if (chunk === null) return end(parser);
            if (typeof chunk === "object") chunk = chunk.toString();
            var i = 0;
            var c = "";
            while(true){
                c = charAt(chunk, i++);
                parser.c = c;
                if (!c) break;
                if (parser.trackPosition) {
                    parser.position++;
                    if (c === "\n") {
                        parser.line++;
                        parser.column = 0;
                    } else parser.column++;
                }
                switch(parser.state){
                    case S.BEGIN:
                        parser.state = S.BEGIN_WHITESPACE;
                        if (c === "\uFEFF") continue;
                        beginWhiteSpace(parser, c);
                        continue;
                    case S.BEGIN_WHITESPACE:
                        beginWhiteSpace(parser, c);
                        continue;
                    case S.TEXT:
                        if (parser.sawRoot && !parser.closedRoot) {
                            var starti = i - 1;
                            while(c && c !== "<" && c !== "&"){
                                c = charAt(chunk, i++);
                                if (c && parser.trackPosition) {
                                    parser.position++;
                                    if (c === "\n") {
                                        parser.line++;
                                        parser.column = 0;
                                    } else parser.column++;
                                }
                            }
                            parser.textNode += chunk.substring(starti, i - 1);
                        }
                        if (c === "<" && !(parser.sawRoot && parser.closedRoot && !parser.strict)) {
                            parser.state = S.OPEN_WAKA;
                            parser.startTagPosition = parser.position;
                        } else {
                            if (!isWhitespace(c) && (!parser.sawRoot || parser.closedRoot)) strictFail(parser, "Text data outside of root node.");
                            if (c === "&") parser.state = S.TEXT_ENTITY;
                            else parser.textNode += c;
                        }
                        continue;
                    case S.SCRIPT:
                        // only non-strict
                        if (c === "<") parser.state = S.SCRIPT_ENDING;
                        else parser.script += c;
                        continue;
                    case S.SCRIPT_ENDING:
                        if (c === "/") parser.state = S.CLOSE_TAG;
                        else {
                            parser.script += "<" + c;
                            parser.state = S.SCRIPT;
                        }
                        continue;
                    case S.OPEN_WAKA:
                        // either a /, ?, !, or text is coming next.
                        if (c === "!") {
                            parser.state = S.SGML_DECL;
                            parser.sgmlDecl = "";
                        } else if (isWhitespace(c)) ;
                        else if (isMatch(nameStart, c)) {
                            parser.state = S.OPEN_TAG;
                            parser.tagName = c;
                        } else if (c === "/") {
                            parser.state = S.CLOSE_TAG;
                            parser.tagName = "";
                        } else if (c === "?") {
                            parser.state = S.PROC_INST;
                            parser.procInstName = parser.procInstBody = "";
                        } else {
                            strictFail(parser, "Unencoded <"); // if there was some whitespace, then add that in.
                            if (parser.startTagPosition + 1 < parser.position) {
                                var pad = parser.position - parser.startTagPosition;
                                c = new Array(pad).join(" ") + c;
                            }
                            parser.textNode += "<" + c;
                            parser.state = S.TEXT;
                        }
                        continue;
                    case S.SGML_DECL:
                        if ((parser.sgmlDecl + c).toUpperCase() === CDATA) {
                            emitNode(parser, "onopencdata");
                            parser.state = S.CDATA;
                            parser.sgmlDecl = "";
                            parser.cdata = "";
                        } else if (parser.sgmlDecl + c === "--") {
                            parser.state = S.COMMENT;
                            parser.comment = "";
                            parser.sgmlDecl = "";
                        } else if ((parser.sgmlDecl + c).toUpperCase() === DOCTYPE) {
                            parser.state = S.DOCTYPE;
                            if (parser.doctype || parser.sawRoot) strictFail(parser, "Inappropriately located doctype declaration");
                            parser.doctype = "";
                            parser.sgmlDecl = "";
                        } else if (c === ">") {
                            emitNode(parser, "onsgmldeclaration", parser.sgmlDecl);
                            parser.sgmlDecl = "";
                            parser.state = S.TEXT;
                        } else if (isQuote(c)) {
                            parser.state = S.SGML_DECL_QUOTED;
                            parser.sgmlDecl += c;
                        } else parser.sgmlDecl += c;
                        continue;
                    case S.SGML_DECL_QUOTED:
                        if (c === parser.q) {
                            parser.state = S.SGML_DECL;
                            parser.q = "";
                        }
                        parser.sgmlDecl += c;
                        continue;
                    case S.DOCTYPE:
                        if (c === ">") {
                            parser.state = S.TEXT;
                            emitNode(parser, "ondoctype", parser.doctype);
                            parser.doctype = true; // just remember that we saw it.
                        } else {
                            parser.doctype += c;
                            if (c === "[") parser.state = S.DOCTYPE_DTD;
                            else if (isQuote(c)) {
                                parser.state = S.DOCTYPE_QUOTED;
                                parser.q = c;
                            }
                        }
                        continue;
                    case S.DOCTYPE_QUOTED:
                        parser.doctype += c;
                        if (c === parser.q) {
                            parser.q = "";
                            parser.state = S.DOCTYPE;
                        }
                        continue;
                    case S.DOCTYPE_DTD:
                        parser.doctype += c;
                        if (c === "]") parser.state = S.DOCTYPE;
                        else if (isQuote(c)) {
                            parser.state = S.DOCTYPE_DTD_QUOTED;
                            parser.q = c;
                        }
                        continue;
                    case S.DOCTYPE_DTD_QUOTED:
                        parser.doctype += c;
                        if (c === parser.q) {
                            parser.state = S.DOCTYPE_DTD;
                            parser.q = "";
                        }
                        continue;
                    case S.COMMENT:
                        if (c === "-") parser.state = S.COMMENT_ENDING;
                        else parser.comment += c;
                        continue;
                    case S.COMMENT_ENDING:
                        if (c === "-") {
                            parser.state = S.COMMENT_ENDED;
                            parser.comment = textopts(parser.opt, parser.comment);
                            if (parser.comment) emitNode(parser, "oncomment", parser.comment);
                            parser.comment = "";
                        } else {
                            parser.comment += "-" + c;
                            parser.state = S.COMMENT;
                        }
                        continue;
                    case S.COMMENT_ENDED:
                        if (c !== ">") {
                            strictFail(parser, "Malformed comment"); // allow <!-- blah -- bloo --> in non-strict mode,
                            // which is a comment of " blah -- bloo "
                            parser.comment += "--" + c;
                            parser.state = S.COMMENT;
                        } else parser.state = S.TEXT;
                        continue;
                    case S.CDATA:
                        if (c === "]") parser.state = S.CDATA_ENDING;
                        else parser.cdata += c;
                        continue;
                    case S.CDATA_ENDING:
                        if (c === "]") parser.state = S.CDATA_ENDING_2;
                        else {
                            parser.cdata += "]" + c;
                            parser.state = S.CDATA;
                        }
                        continue;
                    case S.CDATA_ENDING_2:
                        if (c === ">") {
                            if (parser.cdata) emitNode(parser, "oncdata", parser.cdata);
                            emitNode(parser, "onclosecdata");
                            parser.cdata = "";
                            parser.state = S.TEXT;
                        } else if (c === "]") parser.cdata += "]";
                        else {
                            parser.cdata += "]]" + c;
                            parser.state = S.CDATA;
                        }
                        continue;
                    case S.PROC_INST:
                        if (c === "?") parser.state = S.PROC_INST_ENDING;
                        else if (isWhitespace(c)) parser.state = S.PROC_INST_BODY;
                        else parser.procInstName += c;
                        continue;
                    case S.PROC_INST_BODY:
                        if (!parser.procInstBody && isWhitespace(c)) continue;
                        else if (c === "?") parser.state = S.PROC_INST_ENDING;
                        else parser.procInstBody += c;
                        continue;
                    case S.PROC_INST_ENDING:
                        if (c === ">") {
                            emitNode(parser, "onprocessinginstruction", {
                                name: parser.procInstName,
                                body: parser.procInstBody
                            });
                            parser.procInstName = parser.procInstBody = "";
                            parser.state = S.TEXT;
                        } else {
                            parser.procInstBody += "?" + c;
                            parser.state = S.PROC_INST_BODY;
                        }
                        continue;
                    case S.OPEN_TAG:
                        if (isMatch(nameBody, c)) parser.tagName += c;
                        else {
                            newTag(parser);
                            if (c === ">") openTag(parser);
                            else if (c === "/") parser.state = S.OPEN_TAG_SLASH;
                            else {
                                if (!isWhitespace(c)) strictFail(parser, "Invalid character in tag name");
                                parser.state = S.ATTRIB;
                            }
                        }
                        continue;
                    case S.OPEN_TAG_SLASH:
                        if (c === ">") {
                            openTag(parser, true);
                            closeTag(parser);
                        } else {
                            strictFail(parser, "Forward-slash in opening tag not followed by >");
                            parser.state = S.ATTRIB;
                        }
                        continue;
                    case S.ATTRIB:
                        // haven't read the attribute name yet.
                        if (isWhitespace(c)) continue;
                        else if (c === ">") openTag(parser);
                        else if (c === "/") parser.state = S.OPEN_TAG_SLASH;
                        else if (isMatch(nameStart, c)) {
                            parser.attribName = c;
                            parser.attribValue = "";
                            parser.state = S.ATTRIB_NAME;
                        } else strictFail(parser, "Invalid attribute name");
                        continue;
                    case S.ATTRIB_NAME:
                        if (c === "=") parser.state = S.ATTRIB_VALUE;
                        else if (c === ">") {
                            strictFail(parser, "Attribute without value");
                            parser.attribValue = parser.attribName;
                            attrib(parser);
                            openTag(parser);
                        } else if (isWhitespace(c)) parser.state = S.ATTRIB_NAME_SAW_WHITE;
                        else if (isMatch(nameBody, c)) parser.attribName += c;
                        else strictFail(parser, "Invalid attribute name");
                        continue;
                    case S.ATTRIB_NAME_SAW_WHITE:
                        if (c === "=") parser.state = S.ATTRIB_VALUE;
                        else if (isWhitespace(c)) continue;
                        else {
                            strictFail(parser, "Attribute without value");
                            parser.tag.attributes[parser.attribName] = "";
                            parser.attribValue = "";
                            emitNode(parser, "onattribute", {
                                name: parser.attribName,
                                value: ""
                            });
                            parser.attribName = "";
                            if (c === ">") openTag(parser);
                            else if (isMatch(nameStart, c)) {
                                parser.attribName = c;
                                parser.state = S.ATTRIB_NAME;
                            } else {
                                strictFail(parser, "Invalid attribute name");
                                parser.state = S.ATTRIB;
                            }
                        }
                        continue;
                    case S.ATTRIB_VALUE:
                        if (isWhitespace(c)) continue;
                        else if (isQuote(c)) {
                            parser.q = c;
                            parser.state = S.ATTRIB_VALUE_QUOTED;
                        } else {
                            strictFail(parser, "Unquoted attribute value");
                            parser.state = S.ATTRIB_VALUE_UNQUOTED;
                            parser.attribValue = c;
                        }
                        continue;
                    case S.ATTRIB_VALUE_QUOTED:
                        if (c !== parser.q) {
                            if (c === "&") parser.state = S.ATTRIB_VALUE_ENTITY_Q;
                            else parser.attribValue += c;
                            continue;
                        }
                        attrib(parser);
                        parser.q = "";
                        parser.state = S.ATTRIB_VALUE_CLOSED;
                        continue;
                    case S.ATTRIB_VALUE_CLOSED:
                        if (isWhitespace(c)) parser.state = S.ATTRIB;
                        else if (c === ">") openTag(parser);
                        else if (c === "/") parser.state = S.OPEN_TAG_SLASH;
                        else if (isMatch(nameStart, c)) {
                            strictFail(parser, "No whitespace between attributes");
                            parser.attribName = c;
                            parser.attribValue = "";
                            parser.state = S.ATTRIB_NAME;
                        } else strictFail(parser, "Invalid attribute name");
                        continue;
                    case S.ATTRIB_VALUE_UNQUOTED:
                        if (!isAttribEnd(c)) {
                            if (c === "&") parser.state = S.ATTRIB_VALUE_ENTITY_U;
                            else parser.attribValue += c;
                            continue;
                        }
                        attrib(parser);
                        if (c === ">") openTag(parser);
                        else parser.state = S.ATTRIB;
                        continue;
                    case S.CLOSE_TAG:
                        if (!parser.tagName) {
                            if (isWhitespace(c)) continue;
                            else if (notMatch(nameStart, c)) {
                                if (parser.script) {
                                    parser.script += "</" + c;
                                    parser.state = S.SCRIPT;
                                } else strictFail(parser, "Invalid tagname in closing tag.");
                            } else parser.tagName = c;
                        } else if (c === ">") closeTag(parser);
                        else if (isMatch(nameBody, c)) parser.tagName += c;
                        else if (parser.script) {
                            parser.script += "</" + parser.tagName;
                            parser.tagName = "";
                            parser.state = S.SCRIPT;
                        } else {
                            if (!isWhitespace(c)) strictFail(parser, "Invalid tagname in closing tag");
                            parser.state = S.CLOSE_TAG_SAW_WHITE;
                        }
                        continue;
                    case S.CLOSE_TAG_SAW_WHITE:
                        if (isWhitespace(c)) continue;
                        if (c === ">") closeTag(parser);
                        else strictFail(parser, "Invalid characters in closing tag");
                        continue;
                    case S.TEXT_ENTITY:
                    case S.ATTRIB_VALUE_ENTITY_Q:
                    case S.ATTRIB_VALUE_ENTITY_U:
                        var returnState;
                        var buffer;
                        switch(parser.state){
                            case S.TEXT_ENTITY:
                                returnState = S.TEXT;
                                buffer = "textNode";
                                break;
                            case S.ATTRIB_VALUE_ENTITY_Q:
                                returnState = S.ATTRIB_VALUE_QUOTED;
                                buffer = "attribValue";
                                break;
                            case S.ATTRIB_VALUE_ENTITY_U:
                                returnState = S.ATTRIB_VALUE_UNQUOTED;
                                buffer = "attribValue";
                                break;
                        }
                        if (c === ";") {
                            parser[buffer] += parseEntity(parser);
                            parser.entity = "";
                            parser.state = returnState;
                        } else if (isMatch(parser.entity.length ? entityBody : entityStart, c)) parser.entity += c;
                        else {
                            strictFail(parser, "Invalid character in entity name");
                            parser[buffer] += "&" + parser.entity + c;
                            parser.entity = "";
                            parser.state = returnState;
                        }
                        continue;
                    default:
                        throw new Error(parser, "Unknown state: " + parser.state);
                }
            } // while
            if (parser.position >= parser.bufferCheckPosition) checkBufferLength(parser);
            return parser;
        }
        /*! http://mths.be/fromcodepoint v0.1.0 by @mathias */ /* istanbul ignore next */ if (!String.fromCodePoint) (function() {
            var stringFromCharCode = String.fromCharCode;
            var floor = Math.floor;
            var fromCodePoint = function() {
                var MAX_SIZE = 0x4000;
                var codeUnits = [];
                var highSurrogate;
                var lowSurrogate;
                var index3 = -1;
                var length = arguments.length;
                if (!length) return "";
                var result = "";
                while(++index3 < length){
                    var codePoint = Number(arguments[index3]);
                    if (!isFinite(codePoint) || codePoint < 0 || codePoint > 0x10ffff || floor(codePoint) !== codePoint // not an integer
                    ) throw RangeError("Invalid code point: " + codePoint);
                    if (codePoint <= 0xffff) // BMP code point
                    codeUnits.push(codePoint);
                    else {
                        // Astral code point; split in surrogate halves
                        // http://mathiasbynens.be/notes/javascript-encoding#surrogate-formulae
                        codePoint -= 0x10000;
                        highSurrogate = (codePoint >> 10) + 0xd800;
                        lowSurrogate = codePoint % 0x400 + 0xdc00;
                        codeUnits.push(highSurrogate, lowSurrogate);
                    }
                    if (index3 + 1 === length || codeUnits.length > MAX_SIZE) {
                        result += stringFromCharCode.apply(null, codeUnits);
                        codeUnits.length = 0;
                    }
                }
                return result;
            };
            /* istanbul ignore next */ if (Object.defineProperty) Object.defineProperty(String, "fromCodePoint", {
                value: fromCodePoint,
                configurable: true,
                writable: true
            });
            else String.fromCodePoint = fromCodePoint;
        })();
    })(exports);
})(sax$1);
var arrayHelper = {
    isArray: function(value) {
        if (Array.isArray) return Array.isArray(value);
         // fallback for older browsers like  IE 8
        return Object.prototype.toString.call(value) === "[object Array]";
    }
};
var isArray$2 = arrayHelper.isArray;
var optionsHelper = {
    copyOptions: function(options5) {
        var key, copy = {};
        for(key in options5)if (options5.hasOwnProperty(key)) copy[key] = options5[key];
        return copy;
    },
    ensureFlagExists: function(item, options6) {
        if (!(item in options6) || typeof options6[item] !== "boolean") options6[item] = false;
    },
    ensureSpacesExists: function(options7) {
        if (!("spaces" in options7) || typeof options7.spaces !== "number" && typeof options7.spaces !== "string") options7.spaces = 0;
    },
    ensureAlwaysArrayExists: function(options8) {
        if (!("alwaysArray" in options8) || typeof options8.alwaysArray !== "boolean" && !isArray$2(options8.alwaysArray)) options8.alwaysArray = false;
    },
    ensureKeyExists: function(key, options9) {
        if (!(key + "Key" in options9) || typeof options9[key + "Key"] !== "string") options9[key + "Key"] = options9.compact ? "_" + key : key;
    },
    checkFnExists: function(key, options10) {
        return key + "Fn" in options10;
    }
};
var sax = sax$1;
var helper$2 = optionsHelper;
var isArray$1 = arrayHelper.isArray;
var options;
var currentElement$1;
function validateOptions$2(userOptions) {
    options = helper$2.copyOptions(userOptions);
    helper$2.ensureFlagExists("ignoreDeclaration", options);
    helper$2.ensureFlagExists("ignoreInstruction", options);
    helper$2.ensureFlagExists("ignoreAttributes", options);
    helper$2.ensureFlagExists("ignoreText", options);
    helper$2.ensureFlagExists("ignoreComment", options);
    helper$2.ensureFlagExists("ignoreCdata", options);
    helper$2.ensureFlagExists("ignoreDoctype", options);
    helper$2.ensureFlagExists("compact", options);
    helper$2.ensureFlagExists("alwaysChildren", options);
    helper$2.ensureFlagExists("addParent", options);
    helper$2.ensureFlagExists("trim", options);
    helper$2.ensureFlagExists("nativeType", options);
    helper$2.ensureFlagExists("nativeTypeAttributes", options);
    helper$2.ensureFlagExists("sanitize", options);
    helper$2.ensureFlagExists("instructionHasAttributes", options);
    helper$2.ensureFlagExists("captureSpacesBetweenElements", options);
    helper$2.ensureAlwaysArrayExists(options);
    helper$2.ensureKeyExists("declaration", options);
    helper$2.ensureKeyExists("instruction", options);
    helper$2.ensureKeyExists("attributes", options);
    helper$2.ensureKeyExists("text", options);
    helper$2.ensureKeyExists("comment", options);
    helper$2.ensureKeyExists("cdata", options);
    helper$2.ensureKeyExists("doctype", options);
    helper$2.ensureKeyExists("type", options);
    helper$2.ensureKeyExists("name", options);
    helper$2.ensureKeyExists("elements", options);
    helper$2.ensureKeyExists("parent", options);
    return options;
}
function nativeType$1(value) {
    var nValue = Number(value);
    if (!isNaN(nValue)) return nValue;
    var bValue = value.toLowerCase();
    if (bValue === "true") return true;
    else if (bValue === "false") return false;
    return value;
}
function addField(type, value) {
    var key;
    if (options.compact) {
        if (!currentElement$1[options[type + "Key"]] && (isArray$1(options.alwaysArray) ? options.alwaysArray.indexOf(options[type + "Key"]) !== -1 : options.alwaysArray)) currentElement$1[options[type + "Key"]] = [];
        if (currentElement$1[options[type + "Key"]] && !isArray$1(currentElement$1[options[type + "Key"]])) currentElement$1[options[type + "Key"]] = [
            currentElement$1[options[type + "Key"]]
        ];
        if (type + "Fn" in options && typeof value === "string") value = options[type + "Fn"](value, currentElement$1);
        if (type === "instruction" && ("instructionFn" in options || "instructionNameFn" in options)) {
            for(key in value)if (value.hasOwnProperty(key)) {
                if ("instructionFn" in options) value[key] = options.instructionFn(value[key], key, currentElement$1);
                else {
                    var temp = value[key];
                    delete value[key];
                    value[options.instructionNameFn(key, temp, currentElement$1)] = temp;
                }
            }
        }
        if (isArray$1(currentElement$1[options[type + "Key"]])) currentElement$1[options[type + "Key"]].push(value);
        else currentElement$1[options[type + "Key"]] = value;
    } else {
        if (!currentElement$1[options.elementsKey]) currentElement$1[options.elementsKey] = [];
        var element = {};
        element[options.typeKey] = type;
        if (type === "instruction") {
            for(key in value){
                if (value.hasOwnProperty(key)) break;
            }
            element[options.nameKey] = "instructionNameFn" in options ? options.instructionNameFn(key, value, currentElement$1) : key;
            if (options.instructionHasAttributes) {
                element[options.attributesKey] = value[key][options.attributesKey];
                if ("instructionFn" in options) element[options.attributesKey] = options.instructionFn(element[options.attributesKey], key, currentElement$1);
            } else {
                if ("instructionFn" in options) value[key] = options.instructionFn(value[key], key, currentElement$1);
                element[options.instructionKey] = value[key];
            }
        } else {
            if (type + "Fn" in options) value = options[type + "Fn"](value, currentElement$1);
            element[options[type + "Key"]] = value;
        }
        if (options.addParent) element[options.parentKey] = currentElement$1;
        currentElement$1[options.elementsKey].push(element);
    }
}
function manipulateAttributes(attributes) {
    if ("attributesFn" in options && attributes) attributes = options.attributesFn(attributes, currentElement$1);
    if ((options.trim || "attributeValueFn" in options || "attributeNameFn" in options || options.nativeTypeAttributes) && attributes) {
        var key;
        for(key in attributes)if (attributes.hasOwnProperty(key)) {
            if (options.trim) attributes[key] = attributes[key].trim();
            if (options.nativeTypeAttributes) attributes[key] = nativeType$1(attributes[key]);
            if ("attributeValueFn" in options) attributes[key] = options.attributeValueFn(attributes[key], key, currentElement$1);
            if ("attributeNameFn" in options) {
                var temp = attributes[key];
                delete attributes[key];
                attributes[options.attributeNameFn(key, attributes[key], currentElement$1)] = temp;
            }
        }
    }
    return attributes;
}
function onInstruction(instruction) {
    var attributes = {};
    if (instruction.body && (instruction.name.toLowerCase() === "xml" || options.instructionHasAttributes)) {
        var attrsRegExp = /([\w:-]+)\s*=\s*(?:"([^"]*)"|'([^']*)'|(\w+))\s*/g;
        var match;
        while((match = attrsRegExp.exec(instruction.body)) !== null)attributes[match[1]] = match[2] || match[3] || match[4];
        attributes = manipulateAttributes(attributes);
    }
    if (instruction.name.toLowerCase() === "xml") {
        if (options.ignoreDeclaration) return;
        currentElement$1[options.declarationKey] = {};
        if (Object.keys(attributes).length) currentElement$1[options.declarationKey][options.attributesKey] = attributes;
        if (options.addParent) currentElement$1[options.declarationKey][options.parentKey] = currentElement$1;
    } else {
        if (options.ignoreInstruction) return;
        if (options.trim) instruction.body = instruction.body.trim();
        var value = {};
        if (options.instructionHasAttributes && Object.keys(attributes).length) {
            value[instruction.name] = {};
            value[instruction.name][options.attributesKey] = attributes;
        } else value[instruction.name] = instruction.body;
        addField("instruction", value);
    }
}
function onStartElement(name, attributes) {
    var element;
    if (typeof name === "object") {
        attributes = name.attributes;
        name = name.name;
    }
    attributes = manipulateAttributes(attributes);
    if ("elementNameFn" in options) name = options.elementNameFn(name, currentElement$1);
    if (options.compact) {
        element = {};
        if (!options.ignoreAttributes && attributes && Object.keys(attributes).length) {
            element[options.attributesKey] = {};
            var key;
            for(key in attributes)if (attributes.hasOwnProperty(key)) element[options.attributesKey][key] = attributes[key];
        }
        if (!(name in currentElement$1) && (isArray$1(options.alwaysArray) ? options.alwaysArray.indexOf(name) !== -1 : options.alwaysArray)) currentElement$1[name] = [];
        if (currentElement$1[name] && !isArray$1(currentElement$1[name])) currentElement$1[name] = [
            currentElement$1[name]
        ];
        if (isArray$1(currentElement$1[name])) currentElement$1[name].push(element);
        else currentElement$1[name] = element;
    } else {
        if (!currentElement$1[options.elementsKey]) currentElement$1[options.elementsKey] = [];
        element = {};
        element[options.typeKey] = "element";
        element[options.nameKey] = name;
        if (!options.ignoreAttributes && attributes && Object.keys(attributes).length) element[options.attributesKey] = attributes;
        if (options.alwaysChildren) element[options.elementsKey] = [];
        currentElement$1[options.elementsKey].push(element);
    }
    element[options.parentKey] = currentElement$1; // will be deleted in onEndElement() if !options.addParent
    currentElement$1 = element;
}
function onText(text) {
    if (options.ignoreText) return;
    if (!text.trim() && !options.captureSpacesBetweenElements) return;
    if (options.trim) text = text.trim();
    if (options.nativeType) text = nativeType$1(text);
    if (options.sanitize) text = text.replace(/&/g, "&amp;").replace(/</g, "&lt;").replace(/>/g, "&gt;");
    addField("text", text);
}
function onComment(comment) {
    if (options.ignoreComment) return;
    if (options.trim) comment = comment.trim();
    addField("comment", comment);
}
function onEndElement(name) {
    var parentElement = currentElement$1[options.parentKey];
    if (!options.addParent) delete currentElement$1[options.parentKey];
    currentElement$1 = parentElement;
}
function onCdata(cdata) {
    if (options.ignoreCdata) return;
    if (options.trim) cdata = cdata.trim();
    addField("cdata", cdata);
}
function onDoctype(doctype) {
    if (options.ignoreDoctype) return;
    doctype = doctype.replace(/^ /, "");
    if (options.trim) doctype = doctype.trim();
    addField("doctype", doctype);
}
function onError(error) {
    error.note = error; //console.error(error);
}
var xml2js$2 = function(xml, userOptions) {
    var parser = sax.parser(true, {});
    var result = {};
    currentElement$1 = result;
    options = validateOptions$2(userOptions);
    parser.opt = {
        strictEntities: true
    };
    parser.onopentag = onStartElement;
    parser.ontext = onText;
    parser.oncomment = onComment;
    parser.onclosetag = onEndElement;
    parser.onerror = onError;
    parser.oncdata = onCdata;
    parser.ondoctype = onDoctype;
    parser.onprocessinginstruction = onInstruction;
    parser.write(xml).close();
    if (result[options.elementsKey]) {
        var temp = result[options.elementsKey];
        delete result[options.elementsKey];
        result[options.elementsKey] = temp;
        delete result.text;
    }
    return result;
};
var helper$1 = optionsHelper;
var xml2js$1 = xml2js$2;
function validateOptions$1(userOptions) {
    var options11 = helper$1.copyOptions(userOptions);
    helper$1.ensureSpacesExists(options11);
    return options11;
}
var xml2json$1 = function(xml, userOptions) {
    var options12, js, json, parentKey;
    options12 = validateOptions$1(userOptions);
    js = xml2js$1(xml, options12);
    parentKey = "compact" in options12 && options12.compact ? "_parent" : "parent"; // parentKey = ptions.compact ? '_parent' : 'parent'; // consider this
    if ("addParent" in options12 && options12.addParent) json = JSON.stringify(js, function(k, v) {
        return k === parentKey ? "_" : v;
    }, options12.spaces);
    else json = JSON.stringify(js, null, options12.spaces);
    return json.replace(/\u2028/g, "\\u2028").replace(/\u2029/g, "\\u2029");
};
var helper = optionsHelper;
var isArray = arrayHelper.isArray;
var currentElement, currentElementName;
function validateOptions(userOptions) {
    var options13 = helper.copyOptions(userOptions);
    helper.ensureFlagExists("ignoreDeclaration", options13);
    helper.ensureFlagExists("ignoreInstruction", options13);
    helper.ensureFlagExists("ignoreAttributes", options13);
    helper.ensureFlagExists("ignoreText", options13);
    helper.ensureFlagExists("ignoreComment", options13);
    helper.ensureFlagExists("ignoreCdata", options13);
    helper.ensureFlagExists("ignoreDoctype", options13);
    helper.ensureFlagExists("compact", options13);
    helper.ensureFlagExists("indentText", options13);
    helper.ensureFlagExists("indentCdata", options13);
    helper.ensureFlagExists("indentAttributes", options13);
    helper.ensureFlagExists("indentInstruction", options13);
    helper.ensureFlagExists("fullTagEmptyElement", options13);
    helper.ensureFlagExists("noQuotesForNativeAttributes", options13);
    helper.ensureSpacesExists(options13);
    if (typeof options13.spaces === "number") options13.spaces = Array(options13.spaces + 1).join(" ");
    helper.ensureKeyExists("declaration", options13);
    helper.ensureKeyExists("instruction", options13);
    helper.ensureKeyExists("attributes", options13);
    helper.ensureKeyExists("text", options13);
    helper.ensureKeyExists("comment", options13);
    helper.ensureKeyExists("cdata", options13);
    helper.ensureKeyExists("doctype", options13);
    helper.ensureKeyExists("type", options13);
    helper.ensureKeyExists("name", options13);
    helper.ensureKeyExists("elements", options13);
    return options13;
}
function writeIndentation(options14, depth, firstLine) {
    return (!firstLine && options14.spaces ? "\n" : "") + Array(depth + 1).join(options14.spaces);
}
function writeAttributes(attributes, options15, depth) {
    if (options15.ignoreAttributes) return "";
    if ("attributesFn" in options15) attributes = options15.attributesFn(attributes, currentElementName, currentElement);
    var key, attr, attrName, quote, result = [];
    for(key in attributes)if (attributes.hasOwnProperty(key) && attributes[key] !== null && attributes[key] !== undefined) {
        quote = options15.noQuotesForNativeAttributes && typeof attributes[key] !== "string" ? "" : '"';
        attr = "" + attributes[key]; // ensure number and boolean are converted to String
        attr = attr.replace(/"/g, "&quot;");
        attrName = "attributeNameFn" in options15 ? options15.attributeNameFn(key, attr, currentElementName, currentElement) : key;
        result.push(options15.spaces && options15.indentAttributes ? writeIndentation(options15, depth + 1, false) : " ");
        result.push(attrName + "=" + quote + ("attributeValueFn" in options15 ? options15.attributeValueFn(attr, key, currentElementName, currentElement) : attr) + quote);
    }
    if (attributes && Object.keys(attributes).length && options15.spaces && options15.indentAttributes) result.push(writeIndentation(options15, depth, false));
    return result.join("");
}
function writeDeclaration(declaration, options16, depth) {
    currentElement = declaration;
    currentElementName = "xml";
    return options16.ignoreDeclaration ? "" : "<?xml" + writeAttributes(declaration[options16.attributesKey], options16, depth) + "?>";
}
function writeInstruction(instruction, options17, depth) {
    if (options17.ignoreInstruction) return "";
    var key;
    for(key in instruction){
        if (instruction.hasOwnProperty(key)) break;
    }
    var instructionName = "instructionNameFn" in options17 ? options17.instructionNameFn(key, instruction[key], currentElementName, currentElement) : key;
    if (typeof instruction[key] === "object") {
        currentElement = instruction;
        currentElementName = instructionName;
        return "<?" + instructionName + writeAttributes(instruction[key][options17.attributesKey], options17, depth) + "?>";
    } else {
        var instructionValue = instruction[key] ? instruction[key] : "";
        if ("instructionFn" in options17) instructionValue = options17.instructionFn(instructionValue, key, currentElementName, currentElement);
        return "<?" + instructionName + (instructionValue ? " " + instructionValue : "") + "?>";
    }
}
function writeComment(comment, options18) {
    return options18.ignoreComment ? "" : "<!--" + ("commentFn" in options18 ? options18.commentFn(comment, currentElementName, currentElement) : comment) + "-->";
}
function writeCdata(cdata, options19) {
    return options19.ignoreCdata ? "" : "<![CDATA[" + ("cdataFn" in options19 ? options19.cdataFn(cdata, currentElementName, currentElement) : cdata.replace("]]>", "]]]]><![CDATA[>")) + "]]>";
}
function writeDoctype(doctype, options20) {
    return options20.ignoreDoctype ? "" : "<!DOCTYPE " + ("doctypeFn" in options20 ? options20.doctypeFn(doctype, currentElementName, currentElement) : doctype) + ">";
}
function writeText(text, options21) {
    if (options21.ignoreText) return "";
    text = "" + text; // ensure Number and Boolean are converted to String
    text = text.replace(/&amp;/g, "&"); // desanitize to avoid double sanitization
    text = text.replace(/&/g, "&amp;").replace(/</g, "&lt;").replace(/>/g, "&gt;");
    return "textFn" in options21 ? options21.textFn(text, currentElementName, currentElement) : text;
}
function hasContent(element, options22) {
    var i;
    if (element.elements && element.elements.length) for(i = 0; i < element.elements.length; ++i)switch(element.elements[i][options22.typeKey]){
        case "text":
            if (options22.indentText) return true;
            break;
        // skip to next key
        case "cdata":
            if (options22.indentCdata) return true;
            break;
        // skip to next key
        case "instruction":
            if (options22.indentInstruction) return true;
            break;
        // skip to next key
        case "doctype":
        case "comment":
        case "element":
            return true;
        default:
            return true;
    }
    return false;
}
function writeElement(element, options23, depth) {
    currentElement = element;
    currentElementName = element.name;
    var xml = [], elementName = "elementNameFn" in options23 ? options23.elementNameFn(element.name, element) : element.name;
    xml.push("<" + elementName);
    if (element[options23.attributesKey]) xml.push(writeAttributes(element[options23.attributesKey], options23, depth));
    var withClosingTag = element[options23.elementsKey] && element[options23.elementsKey].length || element[options23.attributesKey] && element[options23.attributesKey]["xml:space"] === "preserve";
    if (!withClosingTag) {
        if ("fullTagEmptyElementFn" in options23) withClosingTag = options23.fullTagEmptyElementFn(element.name, element);
        else withClosingTag = options23.fullTagEmptyElement;
    }
    if (withClosingTag) {
        xml.push(">");
        if (element[options23.elementsKey] && element[options23.elementsKey].length) {
            xml.push(writeElements(element[options23.elementsKey], options23, depth + 1));
            currentElement = element;
            currentElementName = element.name;
        }
        xml.push(options23.spaces && hasContent(element, options23) ? "\n" + Array(depth + 1).join(options23.spaces) : "");
        xml.push("</" + elementName + ">");
    } else xml.push("/>");
    return xml.join("");
}
function writeElements(elements, options24, depth, firstLine) {
    return elements.reduce(function(xml, element) {
        var indent = writeIndentation(options24, depth, firstLine && !xml);
        switch(element.type){
            case "element":
                return xml + indent + writeElement(element, options24, depth);
            case "comment":
                return xml + indent + writeComment(element[options24.commentKey], options24);
            case "doctype":
                return xml + indent + writeDoctype(element[options24.doctypeKey], options24);
            case "cdata":
                return xml + (options24.indentCdata ? indent : "") + writeCdata(element[options24.cdataKey], options24);
            case "text":
                return xml + (options24.indentText ? indent : "") + writeText(element[options24.textKey], options24);
            case "instruction":
                var instruction = {};
                instruction[element[options24.nameKey]] = element[options24.attributesKey] ? element : element[options24.instructionKey];
                return xml + (options24.indentInstruction ? indent : "") + writeInstruction(instruction, options24, depth);
        }
    }, "");
}
function hasContentCompact(element, options25, anyContent) {
    var key;
    for(key in element)if (element.hasOwnProperty(key)) switch(key){
        case options25.parentKey:
        case options25.attributesKey:
            break;
        // skip to next key
        case options25.textKey:
            if (options25.indentText || anyContent) return true;
            break;
        // skip to next key
        case options25.cdataKey:
            if (options25.indentCdata || anyContent) return true;
            break;
        // skip to next key
        case options25.instructionKey:
            if (options25.indentInstruction || anyContent) return true;
            break;
        // skip to next key
        case options25.doctypeKey:
        case options25.commentKey:
            return true;
        default:
            return true;
    }
    return false;
}
function writeElementCompact(element, name, options26, depth, indent) {
    currentElement = element;
    currentElementName = name;
    var elementName = "elementNameFn" in options26 ? options26.elementNameFn(name, element) : name;
    if (typeof element === "undefined" || element === null || element === "") return "fullTagEmptyElementFn" in options26 && options26.fullTagEmptyElementFn(name, element) || options26.fullTagEmptyElement ? "<" + elementName + "></" + elementName + ">" : "<" + elementName + "/>";
    var xml = [];
    if (name) {
        xml.push("<" + elementName);
        if (typeof element !== "object") {
            xml.push(">" + writeText(element, options26) + "</" + elementName + ">");
            return xml.join("");
        }
        if (element[options26.attributesKey]) xml.push(writeAttributes(element[options26.attributesKey], options26, depth));
        var withClosingTag = hasContentCompact(element, options26, true) || element[options26.attributesKey] && element[options26.attributesKey]["xml:space"] === "preserve";
        if (!withClosingTag) {
            if ("fullTagEmptyElementFn" in options26) withClosingTag = options26.fullTagEmptyElementFn(name, element);
            else withClosingTag = options26.fullTagEmptyElement;
        }
        if (withClosingTag) xml.push(">");
        else {
            xml.push("/>");
            return xml.join("");
        }
    }
    xml.push(writeElementsCompact(element, options26, depth + 1, false));
    currentElement = element;
    currentElementName = name;
    if (name) xml.push((indent ? writeIndentation(options26, depth, false) : "") + "</" + elementName + ">");
    return xml.join("");
}
function writeElementsCompact(element, options27, depth, firstLine) {
    var i, key, nodes, xml = [];
    for(key in element)if (element.hasOwnProperty(key)) {
        nodes = isArray(element[key]) ? element[key] : [
            element[key]
        ];
        for(i = 0; i < nodes.length; ++i){
            switch(key){
                case options27.declarationKey:
                    xml.push(writeDeclaration(nodes[i], options27, depth));
                    break;
                case options27.instructionKey:
                    xml.push((options27.indentInstruction ? writeIndentation(options27, depth, firstLine) : "") + writeInstruction(nodes[i], options27, depth));
                    break;
                case options27.attributesKey:
                case options27.parentKey:
                    break;
                // skip
                case options27.textKey:
                    xml.push((options27.indentText ? writeIndentation(options27, depth, firstLine) : "") + writeText(nodes[i], options27));
                    break;
                case options27.cdataKey:
                    xml.push((options27.indentCdata ? writeIndentation(options27, depth, firstLine) : "") + writeCdata(nodes[i], options27));
                    break;
                case options27.doctypeKey:
                    xml.push(writeIndentation(options27, depth, firstLine) + writeDoctype(nodes[i], options27));
                    break;
                case options27.commentKey:
                    xml.push(writeIndentation(options27, depth, firstLine) + writeComment(nodes[i], options27));
                    break;
                default:
                    xml.push(writeIndentation(options27, depth, firstLine) + writeElementCompact(nodes[i], key, options27, depth, hasContentCompact(nodes[i], options27)));
            }
            firstLine = firstLine && !xml.length;
        }
    }
    return xml.join("");
}
var js2xml$2 = function(js, options28) {
    options28 = validateOptions(options28);
    var xml = [];
    currentElement = js;
    currentElementName = "_root_";
    if (options28.compact) xml.push(writeElementsCompact(js, options28, 0, true));
    else {
        if (js[options28.declarationKey]) xml.push(writeDeclaration(js[options28.declarationKey], options28, 0));
        if (js[options28.elementsKey] && js[options28.elementsKey].length) xml.push(writeElements(js[options28.elementsKey], options28, 0, !xml.length));
    }
    return xml.join("");
};
var js2xml$1 = js2xml$2;
var json2xml$1 = function(json, options29) {
    if (json instanceof Buffer$1) json = json.toString();
    var js = null;
    if (typeof json === "string") try {
        js = JSON.parse(json);
    } catch (e) {
        throw new Error("The JSON structure is invalid");
    }
    else js = json;
    return js2xml$1(js, options29);
};
/*jslint node:true */ var xml2js = xml2js$2;
var xml2json = xml2json$1;
var js2xml = js2xml$2;
var json2xml = json2xml$1;
var lib = {
    xml2js: xml2js,
    xml2json: xml2json,
    js2xml: js2xml,
    json2xml: json2xml
};
const camelCase = (str)=>str.replace(/([-_]\w)/g, (g)=>g[1].toUpperCase());
const nativeType = (value)=>{
    const nValue = Number(value);
    if (!Number.isNaN(nValue)) return nValue;
    const bValue = value.toLowerCase();
    if (bValue === "true") return true;
    if (bValue === "false") return false;
    return value;
};
const urlEquals = (urlA, urlB)=>{
    if (!urlA && !urlB) return true;
    if (!urlA || !urlB) return false;
    const trimmedUrlA = urlA.trim();
    const trimmedUrlB = urlB.trim();
    if (Math.abs(trimmedUrlA.length - trimmedUrlB.length) > 1) return false;
    const strippedUrlA = trimmedUrlA.slice(-1) === "/" ? trimmedUrlA.slice(0, -1) : trimmedUrlA;
    const strippedUrlB = trimmedUrlB.slice(-1) === "/" ? trimmedUrlB.slice(0, -1) : trimmedUrlB;
    return urlA.includes(strippedUrlB) || urlB.includes(strippedUrlA);
};
const urlContains = (urlA, urlB)=>{
    if (!urlA && !urlB) return true;
    if (!urlA || !urlB) return false;
    const trimmedUrlA = urlA.trim();
    const trimmedUrlB = urlB.trim();
    const strippedUrlA = trimmedUrlA.slice(-1) === "/" ? trimmedUrlA.slice(0, -1) : trimmedUrlA;
    const strippedUrlB = trimmedUrlB.slice(-1) === "/" ? trimmedUrlB.slice(0, -1) : trimmedUrlB;
    return urlA.includes(strippedUrlB) || urlB.includes(strippedUrlA);
};
const getDAVAttribute = (nsArr)=>nsArr.reduce((prev, curr)=>Object.assign(Object.assign({}, prev), {
            [DAVAttributeMap[curr]]: curr
        }), {});
const cleanupFalsy = (obj)=>Object.entries(obj).reduce((prev, [key, value])=>{
        if (value) return Object.assign(Object.assign({}, prev), {
            [key]: value
        });
        return prev;
    }, {});
var requestHelpers = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    urlEquals: urlEquals,
    urlContains: urlContains,
    getDAVAttribute: getDAVAttribute,
    cleanupFalsy: cleanupFalsy
});
const debug$5 = getLogger("tsdav:request");
const davRequest = (params)=>__awaiter(void 0, void 0, void 0, function*() {
        var _a1;
        const { url , init: init2 , convertIncoming =true , parseOutgoing =true  } = params;
        const { headers , body , namespace , method , attributes  } = init2;
        const xmlBody = convertIncoming ? lib.js2xml(Object.assign(Object.assign({
            _declaration: {
                _attributes: {
                    version: "1.0",
                    encoding: "utf-8"
                }
            }
        }, body), {
            _attributes: attributes
        }), {
            compact: true,
            spaces: 2,
            elementNameFn: (name)=>{
                // add namespace to all keys without namespace
                if (namespace && !/^.+:.+/.test(name)) return `${namespace}:${name}`;
                return name;
            }
        }) : body; // debug('outgoing xml:');
        // debug(`${method} ${url}`);
        // debug(
        //   `headers: ${JSON.stringify(
        //     {
        //       'Content-Type': 'text/xml;charset=UTF-8',
        //       ...cleanupFalsy(headers),
        //     },
        //     null,
        //     2
        //   )}`
        // );
        // debug(xmlBody);
        const davResponse = yield browserPonyfill.exports.fetch(url, {
            headers: Object.assign({
                "Content-Type": "text/xml;charset=UTF-8"
            }, cleanupFalsy(headers)),
            body: xmlBody,
            method
        });
        const resText = yield davResponse.text(); // filter out invalid responses
        // debug('response xml:');
        // debug(resText);
        // debug(davResponse);
        if (!davResponse.ok || !((_a1 = davResponse.headers.get("content-type")) === null || _a1 === void 0 ? void 0 : _a1.includes("xml")) || !parseOutgoing) return [
            {
                href: davResponse.url,
                ok: davResponse.ok,
                status: davResponse.status,
                statusText: davResponse.statusText,
                raw: resText
            }
        ];
        const result = lib.xml2js(resText, {
            compact: true,
            trim: true,
            textFn: (value, parentElement)=>{
                try {
                    // This is needed for xml-js design reasons
                    // eslint-disable-next-line no-underscore-dangle
                    const parentOfParent = parentElement._parent;
                    const pOpKeys = Object.keys(parentOfParent);
                    const keyNo = pOpKeys.length;
                    const keyName = pOpKeys[keyNo - 1];
                    const arrOfKey = parentOfParent[keyName];
                    const arrOfKeyLen = arrOfKey.length;
                    if (arrOfKeyLen > 0) {
                        const arr = arrOfKey;
                        const arrIndex = arrOfKey.length - 1;
                        arr[arrIndex] = nativeType(value);
                    } else parentOfParent[keyName] = nativeType(value);
                } catch (e) {
                    debug$5(e.stack);
                }
            },
            // remove namespace & camelCase
            elementNameFn: (attributeName)=>camelCase(attributeName.replace(/^.+:/, "")),
            attributesFn: (value)=>{
                const newVal = Object.assign({}, value);
                delete newVal.xmlns;
                return newVal;
            },
            ignoreDeclaration: true
        });
        const responseBodies = Array.isArray(result.multistatus.response) ? result.multistatus.response : [
            result.multistatus.response
        ];
        return responseBodies.map((responseBody)=>{
            var _a, _b;
            const statusRegex = /*#__PURE__*/ _wrapRegExp(/^\S+\s(\d+)\s(.+)$/, {
                status: 1,
                statusText: 2
            });
            if (!responseBody) return {
                status: davResponse.status,
                statusText: davResponse.statusText,
                ok: davResponse.ok
            };
            const matchArr = statusRegex.exec(responseBody.status);
            return {
                raw: result,
                href: responseBody.href,
                status: (matchArr === null || matchArr === void 0 ? void 0 : matchArr.groups) ? Number.parseInt(matchArr === null || matchArr === void 0 ? void 0 : matchArr.groups.status, 10) : davResponse.status,
                statusText: (_b = (_a = matchArr === null || matchArr === void 0 ? void 0 : matchArr.groups) === null || _a === void 0 ? void 0 : _a.statusText) !== null && _b !== void 0 ? _b : davResponse.statusText,
                ok: !responseBody.error,
                error: responseBody.error,
                responsedescription: responseBody.responsedescription,
                props: (Array.isArray(responseBody.propstat) ? responseBody.propstat : [
                    responseBody.propstat
                ]).reduce((prev, curr)=>{
                    return Object.assign(Object.assign({}, prev), curr === null || curr === void 0 ? void 0 : curr.prop);
                }, {})
            };
        });
    });
const propfind = (params)=>__awaiter(void 0, void 0, void 0, function*() {
        const { url , props , depth , headers  } = params;
        return davRequest({
            url,
            init: {
                method: "PROPFIND",
                headers: cleanupFalsy(Object.assign({
                    depth
                }, headers)),
                namespace: DAVNamespaceShort.DAV,
                body: {
                    propfind: {
                        _attributes: getDAVAttribute([
                            DAVNamespace.CALDAV,
                            DAVNamespace.CALDAV_APPLE,
                            DAVNamespace.CALENDAR_SERVER,
                            DAVNamespace.CARDDAV,
                            DAVNamespace.DAV
                        ]),
                        prop: props
                    }
                }
            }
        });
    });
const createObject = (params)=>__awaiter(void 0, void 0, void 0, function*() {
        const { url , data , headers  } = params;
        return browserPonyfill.exports.fetch(url, {
            method: "PUT",
            body: data,
            headers
        });
    });
const updateObject = (params)=>__awaiter(void 0, void 0, void 0, function*() {
        const { url , data , etag , headers  } = params;
        return browserPonyfill.exports.fetch(url, {
            method: "PUT",
            body: data,
            headers: cleanupFalsy(Object.assign({
                "If-Match": etag
            }, headers))
        });
    });
const deleteObject = (params)=>__awaiter(void 0, void 0, void 0, function*() {
        const { url , headers , etag  } = params;
        return browserPonyfill.exports.fetch(url, {
            method: "DELETE",
            headers: cleanupFalsy(Object.assign({
                "If-Match": etag
            }, headers))
        });
    });
var request = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    davRequest: davRequest,
    propfind: propfind,
    createObject: createObject,
    updateObject: updateObject,
    deleteObject: deleteObject
});
function hasFields(obj, fields) {
    const inObj = (object)=>fields.every((f)=>object[f]);
    if (Array.isArray(obj)) return obj.every((o)=>inObj(o));
    return inObj(obj);
}
const findMissingFieldNames = (obj, fields)=>fields.reduce((prev, curr)=>obj[curr] ? prev : `${prev.length ? `${prev},` : ""}${curr}`, "");
const debug$4 = getLogger("tsdav:collection");
const collectionQuery = (params)=>__awaiter(void 0, void 0, void 0, function*() {
        const { url , body , depth , defaultNamespace =DAVNamespaceShort.DAV , headers  } = params;
        const queryResults = yield davRequest({
            url,
            init: {
                method: "REPORT",
                headers: cleanupFalsy(Object.assign({
                    depth
                }, headers)),
                namespace: defaultNamespace,
                body
            }
        }); // empty query result
        if (queryResults.length === 1 && !queryResults[0].raw) return [];
        return queryResults;
    });
const makeCollection = (params)=>__awaiter(void 0, void 0, void 0, function*() {
        const { url , props , depth , headers  } = params;
        return davRequest({
            url,
            init: {
                method: "MKCOL",
                headers: cleanupFalsy(Object.assign({
                    depth
                }, headers)),
                namespace: DAVNamespaceShort.DAV,
                body: props ? {
                    mkcol: {
                        set: {
                            prop: props
                        }
                    }
                } : undefined
            }
        });
    });
const supportedReportSet = (params)=>__awaiter(void 0, void 0, void 0, function*() {
        var _a, _b, _c, _d, _e;
        const { collection: collection1 , headers  } = params;
        const res = yield propfind({
            url: collection1.url,
            props: {
                [`${DAVNamespaceShort.DAV}:supported-report-set`]: {}
            },
            depth: "0",
            headers
        });
        return (_e = (_d = (_c = (_b = (_a = res[0]) === null || _a === void 0 ? void 0 : _a.props) === null || _b === void 0 ? void 0 : _b.supportedReportSet) === null || _c === void 0 ? void 0 : _c.supportedReport) === null || _d === void 0 ? void 0 : _d.map((sr)=>Object.keys(sr.report)[0])) !== null && _e !== void 0 ? _e : [];
    });
const isCollectionDirty = (params)=>__awaiter(void 0, void 0, void 0, function*() {
        var _f, _g, _h;
        const { collection: collection2 , headers  } = params;
        const responses = yield propfind({
            url: collection2.url,
            props: {
                [`${DAVNamespaceShort.CALENDAR_SERVER}:getctag`]: {}
            },
            depth: "0",
            headers
        });
        const res = responses.filter((r)=>urlContains(collection2.url, r.href))[0];
        if (!res) throw new Error("Collection does not exist on server");
        return {
            isDirty: collection2.ctag !== ((_f = res.props) === null || _f === void 0 ? void 0 : _f.getctag),
            newCtag: (_h = (_g = res.props) === null || _g === void 0 ? void 0 : _g.getctag) === null || _h === void 0 ? void 0 : _h.toString()
        };
    });
/**
 * This is for webdav sync-collection only
 */ const syncCollection = (params)=>{
    const { url , props , headers , syncLevel , syncToken  } = params;
    return davRequest({
        url,
        init: {
            method: "REPORT",
            namespace: DAVNamespaceShort.DAV,
            headers: Object.assign({}, headers),
            body: {
                "sync-collection": {
                    _attributes: getDAVAttribute([
                        DAVNamespace.CALDAV,
                        DAVNamespace.CARDDAV,
                        DAVNamespace.DAV
                    ]),
                    "sync-level": syncLevel,
                    "sync-token": syncToken,
                    [`${DAVNamespaceShort.DAV}:prop`]: props
                }
            }
        }
    });
};
/** remote collection to local */ const smartCollectionSync = (params)=>__awaiter(void 0, void 0, void 0, function*() {
        var _j1, _k1, _l, _m, _o, _p, _q, _r, _s, _t, _u;
        const { collection: collection3 , method , headers , account: account1 , detailedResult  } = params;
        const requiredFields = [
            "accountType",
            "homeUrl"
        ];
        if (!account1 || !hasFields(account1, requiredFields)) {
            if (!account1) throw new Error("no account for smartCollectionSync");
            throw new Error(`account must have ${findMissingFieldNames(account1, requiredFields)} before smartCollectionSync`);
        }
        const syncMethod = method !== null && method !== void 0 ? method : ((_j1 = collection3.reports) === null || _j1 === void 0 ? void 0 : _j1.includes("syncCollection")) ? "webdav" : "basic";
        debug$4(`smart collection sync with type ${account1.accountType} and method ${syncMethod}`);
        if (syncMethod === "webdav") {
            const result = yield syncCollection({
                url: collection3.url,
                props: {
                    [`${DAVNamespaceShort.DAV}:getetag`]: {},
                    [`${account1.accountType === "caldav" ? DAVNamespaceShort.CALDAV : DAVNamespaceShort.CARDDAV}:${account1.accountType === "caldav" ? "calendar-data" : "address-data"}`]: {},
                    [`${DAVNamespaceShort.DAV}:displayname`]: {}
                },
                syncLevel: 1,
                syncToken: collection3.syncToken,
                headers
            });
            const objectResponses = result.filter((r)=>{
                var _a;
                const extName = account1.accountType === "caldav" ? ".ics" : ".vcf";
                return ((_a = r.href) === null || _a === void 0 ? void 0 : _a.slice(-4)) === extName;
            });
            const changedObjectUrls = objectResponses.filter((o)=>o.status !== 404).map((r)=>r.href);
            const deletedObjectUrls = objectResponses.filter((o)=>o.status === 404).map((r)=>r.href);
            const multiGetObjectResponse = changedObjectUrls.length ? (_l = yield (_k1 = collection3 === null || collection3 === void 0 ? void 0 : collection3.objectMultiGet) === null || _k1 === void 0 ? void 0 : _k1.call(collection3, {
                url: collection3.url,
                props: {
                    [`${DAVNamespaceShort.DAV}:getetag`]: {},
                    [`${account1.accountType === "caldav" ? DAVNamespaceShort.CALDAV : DAVNamespaceShort.CARDDAV}:${account1.accountType === "caldav" ? "calendar-data" : "address-data"}`]: {}
                },
                objectUrls: changedObjectUrls,
                depth: "1",
                headers
            })) !== null && _l !== void 0 ? _l : [] : [];
            const remoteObjects = multiGetObjectResponse.map((res)=>{
                var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k;
                return {
                    url: (_a = res.href) !== null && _a !== void 0 ? _a : "",
                    etag: (_b = res.props) === null || _b === void 0 ? void 0 : _b.getetag,
                    data: (account1 === null || account1 === void 0 ? void 0 : account1.accountType) === "caldav" ? (_e = (_d = (_c = res.props) === null || _c === void 0 ? void 0 : _c.calendarData) === null || _d === void 0 ? void 0 : _d._cdata) !== null && _e !== void 0 ? _e : (_f = res.props) === null || _f === void 0 ? void 0 : _f.calendarData : (_j = (_h = (_g = res.props) === null || _g === void 0 ? void 0 : _g.addressData) === null || _h === void 0 ? void 0 : _h._cdata) !== null && _j !== void 0 ? _j : (_k = res.props) === null || _k === void 0 ? void 0 : _k.addressData
                };
            });
            const localObjects = (_m = collection3.objects) !== null && _m !== void 0 ? _m : []; // no existing url
            const created = remoteObjects.filter((o)=>localObjects.every((lo)=>!urlContains(lo.url, o.url))); // debug(`created objects: ${created.map((o) => o.url).join('\n')}`);
            // have same url, but etag different
            const updated = localObjects.reduce((prev, curr)=>{
                const found = remoteObjects.find((ro)=>urlContains(ro.url, curr.url));
                if (found && found.etag && found.etag !== curr.etag) return [
                    ...prev,
                    found
                ];
                return prev;
            }, []); // debug(`updated objects: ${updated.map((o) => o.url).join('\n')}`);
            const deleted = deletedObjectUrls.map((o)=>({
                    url: o,
                    etag: ""
                })); // debug(`deleted objects: ${deleted.map((o) => o.url).join('\n')}`);
            const unchanged = localObjects.filter((lo)=>remoteObjects.some((ro)=>urlContains(lo.url, ro.url) && ro.etag === lo.etag));
            return Object.assign(Object.assign({}, collection3), {
                objects: detailedResult ? {
                    created,
                    updated,
                    deleted
                } : [
                    ...unchanged,
                    ...created,
                    ...updated
                ],
                // all syncToken in the results are the same so we use the first one here
                syncToken: (_r = (_q = (_p = (_o = result[0]) === null || _o === void 0 ? void 0 : _o.raw) === null || _p === void 0 ? void 0 : _p.multistatus) === null || _q === void 0 ? void 0 : _q.syncToken) !== null && _r !== void 0 ? _r : collection3.syncToken
            });
        }
        if (syncMethod === "basic") {
            const { isDirty , newCtag  } = yield isCollectionDirty({
                collection: collection3,
                headers
            });
            const localObjects = (_s = collection3.objects) !== null && _s !== void 0 ? _s : [];
            const remoteObjects = (_u = yield (_t = collection3.fetchObjects) === null || _t === void 0 ? void 0 : _t.call(collection3, {
                collection: collection3,
                headers
            })) !== null && _u !== void 0 ? _u : []; // no existing url
            const created = remoteObjects.filter((ro)=>localObjects.every((lo)=>!urlContains(lo.url, ro.url))); // debug(`created objects: ${created.map((o) => o.url).join('\n')}`);
            // have same url, but etag different
            const updated = localObjects.reduce((prev, curr)=>{
                const found = remoteObjects.find((ro)=>urlContains(ro.url, curr.url));
                if (found && found.etag && found.etag !== curr.etag) return [
                    ...prev,
                    found
                ];
                return prev;
            }, []); // debug(`updated objects: ${updated.map((o) => o.url).join('\n')}`);
            // does not present in remote
            const deleted = localObjects.filter((cal)=>remoteObjects.every((ro)=>!urlContains(ro.url, cal.url))); // debug(`deleted objects: ${deleted.map((o) => o.url).join('\n')}`);
            const unchanged = localObjects.filter((lo)=>remoteObjects.some((ro)=>urlContains(lo.url, ro.url) && ro.etag === lo.etag));
            if (isDirty) return Object.assign(Object.assign({}, collection3), {
                objects: detailedResult ? {
                    created,
                    updated,
                    deleted
                } : [
                    ...unchanged,
                    ...created,
                    ...updated
                ],
                ctag: newCtag
            });
        }
        return detailedResult ? Object.assign(Object.assign({}, collection3), {
            objects: {
                created: [],
                updated: [],
                deleted: []
            }
        }) : collection3;
    });
var collection = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    collectionQuery: collectionQuery,
    makeCollection: makeCollection,
    supportedReportSet: supportedReportSet,
    isCollectionDirty: isCollectionDirty,
    syncCollection: syncCollection,
    smartCollectionSync: smartCollectionSync
});
const debug$3 = getLogger("tsdav:addressBook");
const addressBookQuery = (params)=>__awaiter(void 0, void 0, void 0, function*() {
        const { url , props , filters , depth , headers  } = params;
        return collectionQuery({
            url,
            body: {
                "addressbook-query": {
                    _attributes: getDAVAttribute([
                        DAVNamespace.CARDDAV,
                        DAVNamespace.DAV
                    ]),
                    [`${DAVNamespaceShort.DAV}:prop`]: props,
                    filter: filters !== null && filters !== void 0 ? filters : {
                        "prop-filter": {
                            _attributes: {
                                name: "FN"
                            }
                        }
                    }
                }
            },
            defaultNamespace: DAVNamespaceShort.CARDDAV,
            depth,
            headers
        });
    });
const addressBookMultiGet = (params)=>__awaiter(void 0, void 0, void 0, function*() {
        const { url , props , objectUrls , depth , headers  } = params;
        return collectionQuery({
            url,
            body: {
                "addressbook-multiget": {
                    _attributes: getDAVAttribute([
                        DAVNamespace.DAV,
                        DAVNamespace.CARDDAV
                    ]),
                    [`${DAVNamespaceShort.DAV}:prop`]: props,
                    [`${DAVNamespaceShort.DAV}:href`]: objectUrls
                }
            },
            defaultNamespace: DAVNamespaceShort.CARDDAV,
            depth,
            headers
        });
    });
const fetchAddressBooks = (params)=>__awaiter(void 0, void 0, void 0, function*() {
        const { account: account2 , headers , props: customProps  } = params !== null && params !== void 0 ? params : {};
        const requiredFields = [
            "homeUrl",
            "rootUrl"
        ];
        if (!account2 || !hasFields(account2, requiredFields)) {
            if (!account2) throw new Error("no account for fetchAddressBooks");
            throw new Error(`account must have ${findMissingFieldNames(account2, requiredFields)} before fetchAddressBooks`);
        }
        const res = yield propfind({
            url: account2.homeUrl,
            props: customProps !== null && customProps !== void 0 ? customProps : {
                [`${DAVNamespaceShort.DAV}:displayname`]: {},
                [`${DAVNamespaceShort.CALENDAR_SERVER}:getctag`]: {},
                [`${DAVNamespaceShort.DAV}:resourcetype`]: {},
                [`${DAVNamespaceShort.DAV}:sync-token`]: {}
            },
            depth: "1",
            headers
        });
        return Promise.all(res.filter((r)=>{
            var _a, _b;
            return Object.keys((_b = (_a = r.props) === null || _a === void 0 ? void 0 : _a.resourcetype) !== null && _b !== void 0 ? _b : {}).includes("addressbook");
        }).map((rs)=>{
            var _a, _b, _c, _d, _e, _f, _g, _h, _j;
            const displayName = (_c = (_b = (_a = rs.props) === null || _a === void 0 ? void 0 : _a.displayname) === null || _b === void 0 ? void 0 : _b._cdata) !== null && _c !== void 0 ? _c : (_d = rs.props) === null || _d === void 0 ? void 0 : _d.displayname;
            debug$3(`Found address book named ${typeof displayName === "string" ? displayName : ""},
             props: ${JSON.stringify(rs.props)}`);
            return {
                url: new URL((_e = rs.href) !== null && _e !== void 0 ? _e : "", (_f = account2.rootUrl) !== null && _f !== void 0 ? _f : "").href,
                ctag: (_g = rs.props) === null || _g === void 0 ? void 0 : _g.getctag,
                displayName: typeof displayName === "string" ? displayName : "",
                resourcetype: Object.keys((_h = rs.props) === null || _h === void 0 ? void 0 : _h.resourcetype),
                syncToken: (_j = rs.props) === null || _j === void 0 ? void 0 : _j.syncToken
            };
        }).map((addr)=>__awaiter(void 0, void 0, void 0, function*() {
                return Object.assign(Object.assign({}, addr), {
                    reports: yield supportedReportSet({
                        collection: addr,
                        headers
                    })
                });
            })));
    });
const fetchVCards = (params)=>__awaiter(void 0, void 0, void 0, function*() {
        const { addressBook: addressBook1 , headers , objectUrls , urlFilter  } = params;
        debug$3(`Fetching vcards from ${addressBook1 === null || addressBook1 === void 0 ? void 0 : addressBook1.url}`);
        const requiredFields = [
            "url"
        ];
        if (!addressBook1 || !hasFields(addressBook1, requiredFields)) {
            if (!addressBook1) throw new Error("cannot fetchVCards for undefined addressBook");
            throw new Error(`addressBook must have ${findMissingFieldNames(addressBook1, requiredFields)} before fetchVCards`);
        }
        const vcardUrls = (objectUrls !== null && objectUrls !== void 0 ? objectUrls : (yield addressBookQuery({
            url: addressBook1.url,
            props: {
                [`${DAVNamespaceShort.DAV}:getetag`]: {}
            },
            depth: "1",
            headers
        })).map((res)=>{
            var _a;
            return res.ok ? (_a = res.href) !== null && _a !== void 0 ? _a : "" : "";
        })).map((url)=>url.startsWith("http") || !url ? url : new URL(url, addressBook1.url).href).filter(urlFilter !== null && urlFilter !== void 0 ? urlFilter : (url)=>url).map((url)=>new URL(url).pathname);
        const vCardResults = vcardUrls.length > 0 ? yield addressBookMultiGet({
            url: addressBook1.url,
            props: {
                [`${DAVNamespaceShort.DAV}:getetag`]: {},
                [`${DAVNamespaceShort.CARDDAV}:address-data`]: {}
            },
            objectUrls: vcardUrls,
            depth: "1",
            headers
        }) : [];
        return vCardResults.map((res)=>{
            var _a, _b, _c, _d, _e, _f;
            return {
                url: new URL((_a = res.href) !== null && _a !== void 0 ? _a : "", addressBook1.url).href,
                etag: (_b = res.props) === null || _b === void 0 ? void 0 : _b.getetag,
                data: (_e = (_d = (_c = res.props) === null || _c === void 0 ? void 0 : _c.addressData) === null || _d === void 0 ? void 0 : _d._cdata) !== null && _e !== void 0 ? _e : (_f = res.props) === null || _f === void 0 ? void 0 : _f.addressData
            };
        });
    });
const createVCard = (params)=>__awaiter(void 0, void 0, void 0, function*() {
        const { addressBook: addressBook2 , vCardString , filename , headers  } = params;
        return createObject({
            url: new URL(filename, addressBook2.url).href,
            data: vCardString,
            headers: Object.assign({
                "content-type": "text/vcard; charset=utf-8",
                "If-None-Match": "*"
            }, headers)
        });
    });
const updateVCard = (params)=>__awaiter(void 0, void 0, void 0, function*() {
        const { vCard , headers  } = params;
        return updateObject({
            url: vCard.url,
            data: vCard.data,
            etag: vCard.etag,
            headers: Object.assign({
                "content-type": "text/vcard; charset=utf-8"
            }, headers)
        });
    });
const deleteVCard = (params)=>__awaiter(void 0, void 0, void 0, function*() {
        const { vCard , headers  } = params;
        return deleteObject({
            url: vCard.url,
            etag: vCard.etag,
            headers
        });
    });
var addressBook = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    addressBookQuery: addressBookQuery,
    addressBookMultiGet: addressBookMultiGet,
    fetchAddressBooks: fetchAddressBooks,
    fetchVCards: fetchVCards,
    createVCard: createVCard,
    updateVCard: updateVCard,
    deleteVCard: deleteVCard
});
const debug$2 = getLogger("tsdav:calendar");
const calendarQuery = (params)=>__awaiter(void 0, void 0, void 0, function*() {
        const { url , props , filters , timezone , depth , headers  } = params;
        return collectionQuery({
            url,
            body: {
                "calendar-query": cleanupFalsy({
                    _attributes: getDAVAttribute([
                        DAVNamespace.CALDAV,
                        DAVNamespace.CALENDAR_SERVER,
                        DAVNamespace.CALDAV_APPLE,
                        DAVNamespace.DAV
                    ]),
                    [`${DAVNamespaceShort.DAV}:prop`]: props,
                    filter: filters,
                    timezone
                })
            },
            defaultNamespace: DAVNamespaceShort.CALDAV,
            depth,
            headers
        });
    });
const calendarMultiGet = (params)=>__awaiter(void 0, void 0, void 0, function*() {
        const { url , props , objectUrls , filters , timezone , depth , headers  } = params;
        return collectionQuery({
            url,
            body: {
                "calendar-multiget": {
                    _attributes: getDAVAttribute([
                        DAVNamespace.DAV,
                        DAVNamespace.CALDAV
                    ]),
                    [`${DAVNamespaceShort.DAV}:prop`]: props,
                    [`${DAVNamespaceShort.DAV}:href`]: objectUrls,
                    filter: filters,
                    timezone
                }
            },
            defaultNamespace: DAVNamespaceShort.CALDAV,
            depth,
            headers
        });
    });
const makeCalendar = (params)=>__awaiter(void 0, void 0, void 0, function*() {
        const { url , props , depth , headers  } = params;
        return davRequest({
            url,
            init: {
                method: "MKCALENDAR",
                headers: cleanupFalsy(Object.assign({
                    depth
                }, headers)),
                namespace: DAVNamespaceShort.DAV,
                body: {
                    [`${DAVNamespaceShort.CALDAV}:mkcalendar`]: {
                        _attributes: getDAVAttribute([
                            DAVNamespace.DAV,
                            DAVNamespace.CALDAV,
                            DAVNamespace.CALDAV_APPLE
                        ]),
                        set: {
                            prop: props
                        }
                    }
                }
            }
        });
    });
const fetchCalendars = (params)=>__awaiter(void 0, void 0, void 0, function*() {
        const { headers , account: account3 , props: customProps  } = params !== null && params !== void 0 ? params : {};
        const requiredFields = [
            "homeUrl",
            "rootUrl"
        ];
        if (!account3 || !hasFields(account3, requiredFields)) {
            if (!account3) throw new Error("no account for fetchCalendars");
            throw new Error(`account must have ${findMissingFieldNames(account3, requiredFields)} before fetchCalendars`);
        }
        const res = yield propfind({
            url: account3.homeUrl,
            props: customProps !== null && customProps !== void 0 ? customProps : {
                [`${DAVNamespaceShort.CALDAV}:calendar-description`]: {},
                [`${DAVNamespaceShort.CALDAV}:calendar-timezone`]: {},
                [`${DAVNamespaceShort.DAV}:displayname`]: {},
                [`${DAVNamespaceShort.CALDAV_APPLE}:calendar-color`]: {},
                [`${DAVNamespaceShort.CALENDAR_SERVER}:getctag`]: {},
                [`${DAVNamespaceShort.DAV}:resourcetype`]: {},
                [`${DAVNamespaceShort.CALDAV}:supported-calendar-component-set`]: {},
                [`${DAVNamespaceShort.DAV}:sync-token`]: {}
            },
            depth: "1",
            headers
        });
        return Promise.all(res.filter((r)=>{
            var _a, _b;
            return Object.keys((_b = (_a = r.props) === null || _a === void 0 ? void 0 : _a.resourcetype) !== null && _b !== void 0 ? _b : {}).includes("calendar");
        }).filter((rc)=>{
            var _a, _b, _c; // filter out none iCal format calendars.
            const components = Array.isArray((_a = rc.props) === null || _a === void 0 ? void 0 : _a.supportedCalendarComponentSet.comp) ? (_b = rc.props) === null || _b === void 0 ? void 0 : _b.supportedCalendarComponentSet.comp.map((sc)=>sc._attributes.name) : [
                (_c = rc.props) === null || _c === void 0 ? void 0 : _c.supportedCalendarComponentSet.comp._attributes.name
            ];
            return components.some((c)=>Object.values(ICALObjects).includes(c));
        }).map((rs)=>{
            var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p; // debug(`Found calendar ${rs.props?.displayname}`);
            const description = (_a = rs.props) === null || _a === void 0 ? void 0 : _a.calendarDescription;
            const timezone = (_b = rs.props) === null || _b === void 0 ? void 0 : _b.calendarTimezone;
            return {
                description: typeof description === "string" ? description : "",
                timezone: typeof timezone === "string" ? timezone : "",
                url: new URL((_c = rs.href) !== null && _c !== void 0 ? _c : "", (_d = account3.rootUrl) !== null && _d !== void 0 ? _d : "").href,
                ctag: (_e = rs.props) === null || _e === void 0 ? void 0 : _e.getctag,
                calendarColor: (_f = rs.props) === null || _f === void 0 ? void 0 : _f.calendarColor,
                displayName: (_h = (_g = rs.props) === null || _g === void 0 ? void 0 : _g.displayname._cdata) !== null && _h !== void 0 ? _h : (_j = rs.props) === null || _j === void 0 ? void 0 : _j.displayname,
                components: Array.isArray((_k = rs.props) === null || _k === void 0 ? void 0 : _k.supportedCalendarComponentSet.comp) ? (_l = rs.props) === null || _l === void 0 ? void 0 : _l.supportedCalendarComponentSet.comp.map((sc)=>sc._attributes.name) : [
                    (_m = rs.props) === null || _m === void 0 ? void 0 : _m.supportedCalendarComponentSet.comp._attributes.name
                ],
                resourcetype: Object.keys((_o = rs.props) === null || _o === void 0 ? void 0 : _o.resourcetype),
                syncToken: (_p = rs.props) === null || _p === void 0 ? void 0 : _p.syncToken
            };
        }).map((cal)=>__awaiter(void 0, void 0, void 0, function*() {
                return Object.assign(Object.assign({}, cal), {
                    reports: yield supportedReportSet({
                        collection: cal,
                        headers
                    })
                });
            })));
    });
const fetchCalendarObjects = (params)=>__awaiter(void 0, void 0, void 0, function*() {
        const { calendar: calendar1 , objectUrls , filters: customFilters , timeRange , headers , expand , urlFilter  } = params;
        if (timeRange) {
            // validate timeRange
            const ISO_8601 = /^\d{4}(-\d\d(-\d\d(T\d\d:\d\d(:\d\d)?(\.\d+)?(([+-]\d\d:\d\d)|Z)?)?)?)?$/i;
            const ISO_8601_FULL = /^\d{4}-\d\d-\d\dT\d\d:\d\d:\d\d(\.\d+)?(([+-]\d\d:\d\d)|Z)?$/i;
            if ((!ISO_8601.test(timeRange.start) || !ISO_8601.test(timeRange.end)) && (!ISO_8601_FULL.test(timeRange.start) || !ISO_8601_FULL.test(timeRange.end))) throw new Error("invalid timeRange format, not in ISO8601");
        }
        debug$2(`Fetching calendar objects from ${calendar1 === null || calendar1 === void 0 ? void 0 : calendar1.url}`);
        const requiredFields = [
            "url"
        ];
        if (!calendar1 || !hasFields(calendar1, requiredFields)) {
            if (!calendar1) throw new Error("cannot fetchCalendarObjects for undefined calendar");
            throw new Error(`calendar must have ${findMissingFieldNames(calendar1, requiredFields)} before fetchCalendarObjects`);
        } // default to fetch all
        const filters = customFilters !== null && customFilters !== void 0 ? customFilters : [
            {
                "comp-filter": {
                    _attributes: {
                        name: "VCALENDAR"
                    },
                    "comp-filter": Object.assign({
                        _attributes: {
                            name: "VEVENT"
                        }
                    }, timeRange ? {
                        "time-range": {
                            _attributes: {
                                start: `${new Date(timeRange.start).toISOString().slice(0, 19).replace(/[-:.]/g, "")}Z`,
                                end: `${new Date(timeRange.end).toISOString().slice(0, 19).replace(/[-:.]/g, "")}Z`
                            }
                        }
                    } : {})
                }
            }
        ];
        const calendarObjectUrls = (objectUrls !== null && objectUrls !== void 0 ? objectUrls : (yield calendarQuery({
            url: calendar1.url,
            props: {
                [`${DAVNamespaceShort.DAV}:getetag`]: {}
            },
            filters,
            depth: "1",
            headers
        })).map((res)=>{
            var _a;
            return (_a = res.href) !== null && _a !== void 0 ? _a : "";
        })).map((url)=>url.startsWith("http") || !url ? url : new URL(url, calendar1.url).href) // patch up to full url if url is not full
        .filter(urlFilter !== null && urlFilter !== void 0 ? urlFilter : (url)=>Boolean(url === null || url === void 0 ? void 0 : url.includes(".ics"))) // filter out non ics calendar objects since apple calendar might have those
        .map((url)=>new URL(url).pathname); // obtain pathname of the url
        const calendarObjectResults = calendarObjectUrls.length > 0 ? yield calendarMultiGet({
            url: calendar1.url,
            props: {
                [`${DAVNamespaceShort.DAV}:getetag`]: {},
                [`${DAVNamespaceShort.CALDAV}:calendar-data`]: Object.assign({}, expand && timeRange ? {
                    [`${DAVNamespaceShort.CALDAV}:expand`]: {
                        _attributes: {
                            start: `${new Date(timeRange.start).toISOString().slice(0, 19).replace(/[-:.]/g, "")}Z`,
                            end: `${new Date(timeRange.end).toISOString().slice(0, 19).replace(/[-:.]/g, "")}Z`
                        }
                    }
                } : {})
            },
            objectUrls: calendarObjectUrls,
            depth: "1",
            headers
        }) : [];
        return calendarObjectResults.map((res)=>{
            var _a, _b, _c, _d, _e, _f;
            return {
                url: new URL((_a = res.href) !== null && _a !== void 0 ? _a : "", calendar1.url).href,
                etag: `${(_b = res.props) === null || _b === void 0 ? void 0 : _b.getetag}`,
                data: (_e = (_d = (_c = res.props) === null || _c === void 0 ? void 0 : _c.calendarData) === null || _d === void 0 ? void 0 : _d._cdata) !== null && _e !== void 0 ? _e : (_f = res.props) === null || _f === void 0 ? void 0 : _f.calendarData
            };
        });
    });
const createCalendarObject = (params)=>__awaiter(void 0, void 0, void 0, function*() {
        const { calendar: calendar2 , iCalString , filename , headers  } = params;
        return createObject({
            url: new URL(filename, calendar2.url).href,
            data: iCalString,
            headers: Object.assign({
                "content-type": "text/calendar; charset=utf-8",
                "If-None-Match": "*"
            }, headers)
        });
    });
const updateCalendarObject = (params)=>__awaiter(void 0, void 0, void 0, function*() {
        const { calendarObject , headers  } = params;
        return updateObject({
            url: calendarObject.url,
            data: calendarObject.data,
            etag: calendarObject.etag,
            headers: Object.assign({
                "content-type": "text/calendar; charset=utf-8"
            }, headers)
        });
    });
const deleteCalendarObject = (params)=>__awaiter(void 0, void 0, void 0, function*() {
        const { calendarObject , headers  } = params;
        return deleteObject({
            url: calendarObject.url,
            etag: calendarObject.etag,
            headers
        });
    });
/**
 * Sync remote calendars to local
 */ const syncCalendars = (params)=>__awaiter(void 0, void 0, void 0, function*() {
        var _a;
        const { oldCalendars , account: account4 , detailedResult , headers  } = params;
        if (!account4) throw new Error("Must have account before syncCalendars");
        const localCalendars = (_a = oldCalendars !== null && oldCalendars !== void 0 ? oldCalendars : account4.calendars) !== null && _a !== void 0 ? _a : [];
        const remoteCalendars = yield fetchCalendars({
            account: account4,
            headers
        }); // no existing url
        const created = remoteCalendars.filter((rc)=>localCalendars.every((lc)=>!urlContains(lc.url, rc.url)));
        debug$2(`new calendars: ${created.map((cc)=>cc.displayName)}`); // have same url, but syncToken/ctag different
        const updated = localCalendars.reduce((prev, curr)=>{
            const found = remoteCalendars.find((rc)=>urlContains(rc.url, curr.url));
            if (found && (found.syncToken && found.syncToken !== curr.syncToken || found.ctag && found.ctag !== curr.ctag)) return [
                ...prev,
                found
            ];
            return prev;
        }, []);
        debug$2(`updated calendars: ${updated.map((cc)=>cc.displayName)}`);
        const updatedWithObjects = yield Promise.all(updated.map((u)=>__awaiter(void 0, void 0, void 0, function*() {
                const result = yield smartCollectionSync({
                    collection: Object.assign(Object.assign({}, u), {
                        objectMultiGet: calendarMultiGet
                    }),
                    method: "webdav",
                    headers,
                    account: account4
                });
                return result;
            }))); // does not present in remote
        const deleted = localCalendars.filter((cal)=>remoteCalendars.every((rc)=>!urlContains(rc.url, cal.url)));
        debug$2(`deleted calendars: ${deleted.map((cc)=>cc.displayName)}`);
        const unchanged = localCalendars.filter((cal)=>remoteCalendars.some((rc)=>urlContains(rc.url, cal.url) && (rc.syncToken && rc.syncToken !== cal.syncToken || rc.ctag && rc.ctag !== cal.ctag))); // debug(`unchanged calendars: ${unchanged.map((cc) => cc.displayName)}`);
        return detailedResult ? {
            created,
            updated,
            deleted
        } : [
            ...unchanged,
            ...created,
            ...updatedWithObjects
        ];
    });
const freeBusyQuery = (params)=>__awaiter(void 0, void 0, void 0, function*() {
        const { url , timeRange , depth , headers  } = params;
        if (timeRange) {
            // validate timeRange
            const ISO_8601 = /^\d{4}(-\d\d(-\d\d(T\d\d:\d\d(:\d\d)?(\.\d+)?(([+-]\d\d:\d\d)|Z)?)?)?)?$/i;
            const ISO_8601_FULL = /^\d{4}-\d\d-\d\dT\d\d:\d\d:\d\d(\.\d+)?(([+-]\d\d:\d\d)|Z)?$/i;
            if ((!ISO_8601.test(timeRange.start) || !ISO_8601.test(timeRange.end)) && (!ISO_8601_FULL.test(timeRange.start) || !ISO_8601_FULL.test(timeRange.end))) throw new Error("invalid timeRange format, not in ISO8601");
        } else throw new Error("timeRange is required");
        const result = yield collectionQuery({
            url,
            body: {
                "free-busy-query": cleanupFalsy({
                    _attributes: getDAVAttribute([
                        DAVNamespace.CALDAV
                    ]),
                    [`${DAVNamespaceShort.CALDAV}:time-range`]: {
                        _attributes: {
                            start: `${new Date(timeRange.start).toISOString().slice(0, 19).replace(/[-:.]/g, "")}Z`,
                            end: `${new Date(timeRange.end).toISOString().slice(0, 19).replace(/[-:.]/g, "")}Z`
                        }
                    }
                })
            },
            defaultNamespace: DAVNamespaceShort.CALDAV,
            depth,
            headers
        });
        return result[0];
    });
var calendar = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    calendarQuery: calendarQuery,
    calendarMultiGet: calendarMultiGet,
    makeCalendar: makeCalendar,
    fetchCalendars: fetchCalendars,
    fetchCalendarObjects: fetchCalendarObjects,
    createCalendarObject: createCalendarObject,
    updateCalendarObject: updateCalendarObject,
    deleteCalendarObject: deleteCalendarObject,
    syncCalendars: syncCalendars,
    freeBusyQuery: freeBusyQuery
});
const debug$1 = getLogger("tsdav:account");
const serviceDiscovery = (params)=>__awaiter(void 0, void 0, void 0, function*() {
        var _a, _b;
        debug$1("Service discovery...");
        const { account: account5 , headers  } = params;
        const endpoint = new URL(account5.serverUrl);
        const uri = new URL(`/.well-known/${account5.accountType}`, endpoint);
        uri.protocol = (_a = endpoint.protocol) !== null && _a !== void 0 ? _a : "http";
        try {
            const response = yield browserPonyfill.exports.fetch(uri.href, {
                headers,
                method: "PROPFIND",
                redirect: "manual"
            });
            if (response.status >= 300 && response.status < 400) {
                // http redirect.
                const location = response.headers.get("Location");
                if (typeof location === "string" && location.length) {
                    debug$1(`Service discovery redirected to ${location}`);
                    const serviceURL = new URL(location, endpoint);
                    if (serviceURL.hostname === uri.hostname && uri.port && !serviceURL.port) serviceURL.port = uri.port;
                    serviceURL.protocol = (_b = endpoint.protocol) !== null && _b !== void 0 ? _b : "http";
                    return serviceURL.href;
                }
            }
        } catch (err) {
            debug$1(`Service discovery failed: ${err.stack}`);
        }
        return endpoint.href;
    });
const fetchPrincipalUrl = (params)=>__awaiter(void 0, void 0, void 0, function*() {
        var _c, _d, _e, _f, _g;
        const { account: account6 , headers  } = params;
        const requiredFields = [
            "rootUrl"
        ];
        if (!hasFields(account6, requiredFields)) throw new Error(`account must have ${findMissingFieldNames(account6, requiredFields)} before fetchPrincipalUrl`);
        debug$1(`Fetching principal url from path ${account6.rootUrl}`);
        const [response] = yield propfind({
            url: account6.rootUrl,
            props: {
                [`${DAVNamespaceShort.DAV}:current-user-principal`]: {}
            },
            depth: "0",
            headers
        });
        if (!response.ok) {
            debug$1(`Fetch principal url failed: ${response.statusText}`);
            if (response.status === 401) throw new Error("Invalid credentials");
        }
        debug$1(`Fetched principal url ${(_d = (_c = response.props) === null || _c === void 0 ? void 0 : _c.currentUserPrincipal) === null || _d === void 0 ? void 0 : _d.href}`);
        return new URL((_g = (_f = (_e = response.props) === null || _e === void 0 ? void 0 : _e.currentUserPrincipal) === null || _f === void 0 ? void 0 : _f.href) !== null && _g !== void 0 ? _g : "", account6.rootUrl).href;
    });
const fetchHomeUrl = (params)=>__awaiter(void 0, void 0, void 0, function*() {
        var _h, _j;
        const { account: account7 , headers  } = params;
        const requiredFields = [
            "principalUrl",
            "rootUrl"
        ];
        if (!hasFields(account7, requiredFields)) throw new Error(`account must have ${findMissingFieldNames(account7, requiredFields)} before fetchHomeUrl`);
        debug$1(`Fetch home url from ${account7.principalUrl}`);
        const responses = yield propfind({
            url: account7.principalUrl,
            props: account7.accountType === "caldav" ? {
                [`${DAVNamespaceShort.CALDAV}:calendar-home-set`]: {}
            } : {
                [`${DAVNamespaceShort.CARDDAV}:addressbook-home-set`]: {}
            },
            depth: "0",
            headers
        });
        const matched = responses.find((r)=>urlContains(account7.principalUrl, r.href));
        if (!matched || !matched.ok) throw new Error("cannot find homeUrl");
        const result = new URL(account7.accountType === "caldav" ? (_h = matched === null || matched === void 0 ? void 0 : matched.props) === null || _h === void 0 ? void 0 : _h.calendarHomeSet.href : (_j = matched === null || matched === void 0 ? void 0 : matched.props) === null || _j === void 0 ? void 0 : _j.addressbookHomeSet.href, account7.rootUrl).href;
        debug$1(`Fetched home url ${result}`);
        return result;
    });
const createAccount = (params)=>__awaiter(void 0, void 0, void 0, function*() {
        const { account: account8 , headers , loadCollections =false , loadObjects =false  } = params;
        const newAccount = Object.assign({}, account8);
        newAccount.rootUrl = yield serviceDiscovery({
            account: account8,
            headers
        });
        newAccount.principalUrl = yield fetchPrincipalUrl({
            account: newAccount,
            headers
        });
        newAccount.homeUrl = yield fetchHomeUrl({
            account: newAccount,
            headers
        }); // to load objects you must first load collections
        if (loadCollections || loadObjects) {
            if (account8.accountType === "caldav") newAccount.calendars = yield fetchCalendars({
                headers,
                account: newAccount
            });
            else if (account8.accountType === "carddav") newAccount.addressBooks = yield fetchAddressBooks({
                headers,
                account: newAccount
            });
        }
        if (loadObjects) {
            if (account8.accountType === "caldav" && newAccount.calendars) newAccount.calendars = yield Promise.all(newAccount.calendars.map((cal)=>__awaiter(void 0, void 0, void 0, function*() {
                    return Object.assign(Object.assign({}, cal), {
                        objects: yield fetchCalendarObjects({
                            calendar: cal,
                            headers
                        })
                    });
                })));
            else if (account8.accountType === "carddav" && newAccount.addressBooks) newAccount.addressBooks = yield Promise.all(newAccount.addressBooks.map((addr)=>__awaiter(void 0, void 0, void 0, function*() {
                    return Object.assign(Object.assign({}, addr), {
                        objects: yield fetchVCards({
                            addressBook: addr,
                            headers
                        })
                    });
                })));
        }
        return newAccount;
    });
var account = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    serviceDiscovery: serviceDiscovery,
    fetchPrincipalUrl: fetchPrincipalUrl,
    fetchHomeUrl: fetchHomeUrl,
    createAccount: createAccount
});
var base64 = {
    exports: {}
};
/*! https://mths.be/base64 v1.0.0 by @mathias | MIT license */ (function(module, exports) {
    (function(root) {
        // Detect free variables `exports`.
        var freeExports = exports; // Detect free variable `module`.
        var freeModule = module && module.exports == freeExports && module; // Detect free variable `global`, from Node.js or Browserified code, and use
        // it as `root`.
        var freeGlobal = typeof commonjsGlobal == "object" && commonjsGlobal;
        if (freeGlobal.global === freeGlobal || freeGlobal.window === freeGlobal) root = freeGlobal;
        /*--------------------------------------------------------------------------*/ var InvalidCharacterError = function(message) {
            this.message = message;
        };
        InvalidCharacterError.prototype = new Error();
        InvalidCharacterError.prototype.name = "InvalidCharacterError";
        var error = function(message) {
            // Note: the error messages used throughout this file match those used by
            // the native `atob`/`btoa` implementation in Chromium.
            throw new InvalidCharacterError(message);
        };
        var TABLE = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/"; // http://whatwg.org/html/common-microsyntaxes.html#space-character
        var REGEX_SPACE_CHARACTERS = /[\t\n\f\r ]/g; // `decode` is designed to be fully compatible with `atob` as described in the
        // HTML Standard. http://whatwg.org/html/webappapis.html#dom-windowbase64-atob
        // The optimized base64-decoding algorithm used is based on @atk’s excellent
        // implementation. https://gist.github.com/atk/1020396
        var decode = function(input) {
            input = String(input).replace(REGEX_SPACE_CHARACTERS, "");
            var length = input.length;
            if (length % 4 == 0) {
                input = input.replace(/==?$/, "");
                length = input.length;
            }
            if (length % 4 == 1 || /[^+a-zA-Z0-9/]/.test(input)) error("Invalid character: the string to be decoded is not correctly encoded.");
            var bitCounter = 0;
            var bitStorage;
            var buffer;
            var output = "";
            var position = -1;
            while(++position < length){
                buffer = TABLE.indexOf(input.charAt(position));
                bitStorage = bitCounter % 4 ? bitStorage * 64 + buffer : buffer; // Unless this is the first of a group of 4 characters…
                if ((bitCounter++) % 4) // …convert the first 8 bits to a single ASCII character.
                output += String.fromCharCode(0xff & bitStorage >> (-2 * bitCounter & 6));
            }
            return output;
        }; // `encode` is designed to be fully compatible with `btoa` as described in the
        // HTML Standard: http://whatwg.org/html/webappapis.html#dom-windowbase64-btoa
        var encode = function(input) {
            input = String(input);
            if (/[^\0-\xFF]/.test(input)) // Note: no need to special-case astral symbols here, as surrogates are
            // matched, and the input is supposed to only contain ASCII anyway.
            error("The string to be encoded contains characters outside of the Latin1 range.");
            var padding = input.length % 3;
            var output = "";
            var position = -1;
            var a;
            var b;
            var c;
            var buffer; // Make sure any padding is handled outside of the loop.
            var length = input.length - padding;
            while(++position < length){
                // Read three bytes, i.e. 24 bits.
                a = input.charCodeAt(position) << 16;
                b = input.charCodeAt(++position) << 8;
                c = input.charCodeAt(++position);
                buffer = a + b + c; // Turn the 24 bits into four chunks of 6 bits each, and append the
                // matching character for each of them to the output.
                output += TABLE.charAt(buffer >> 18 & 0x3f) + TABLE.charAt(buffer >> 12 & 0x3f) + TABLE.charAt(buffer >> 6 & 0x3f) + TABLE.charAt(buffer & 0x3f);
            }
            if (padding == 2) {
                a = input.charCodeAt(position) << 8;
                b = input.charCodeAt(++position);
                buffer = a + b;
                output += TABLE.charAt(buffer >> 10) + TABLE.charAt(buffer >> 4 & 0x3f) + TABLE.charAt(buffer << 2 & 0x3f) + "=";
            } else if (padding == 1) {
                buffer = input.charCodeAt(position);
                output += TABLE.charAt(buffer >> 2) + TABLE.charAt(buffer << 4 & 0x3f) + "==";
            }
            return output;
        };
        var base641 = {
            "encode": encode,
            "decode": decode,
            "version": "1.0.0"
        }; // Some AMD build optimizers, like r.js, check for specific condition patterns
        // like the following:
        if (freeExports && !freeExports.nodeType) {
            if (freeModule) // in Node.js or RingoJS v0.8.0+
            freeModule.exports = base641;
            else // in Narwhal or RingoJS v0.7.0-
            for(var key in base641)base641.hasOwnProperty(key) && (freeExports[key] = base641[key]);
        } else // in Rhino or a web browser
        root.base64 = base641;
    })(commonjsGlobal);
})(base64, base64.exports);
const debug = getLogger("tsdav:authHelper");
/**
 * Provide given params as default params to given function with optional params.
 *
 * suitable only for one param functions
 * params are shallow merged
 */ const defaultParam = (fn, params)=>(...args)=>{
        return fn(Object.assign(Object.assign({}, params), args[0]));
    };
const getBasicAuthHeaders = (credentials)=>{
    debug(`Basic auth token generated: ${base64.exports.encode(`${credentials.username}:${credentials.password}`)}`);
    return {
        authorization: `Basic ${base64.exports.encode(`${credentials.username}:${credentials.password}`)}`
    };
};
const fetchOauthTokens = (credentials)=>__awaiter(void 0, void 0, void 0, function*() {
        const requireFields = [
            "authorizationCode",
            "redirectUrl",
            "clientId",
            "clientSecret",
            "tokenUrl"
        ];
        if (!hasFields(credentials, requireFields)) throw new Error(`Oauth credentials missing: ${findMissingFieldNames(credentials, requireFields)}`);
        const param = new URLSearchParams({
            grant_type: "authorization_code",
            code: credentials.authorizationCode,
            redirect_uri: credentials.redirectUrl,
            client_id: credentials.clientId,
            client_secret: credentials.clientSecret
        });
        debug(credentials.tokenUrl);
        debug(param.toString());
        const response = yield browserPonyfill.exports.fetch(credentials.tokenUrl, {
            method: "POST",
            body: param.toString(),
            headers: {
                "content-length": `${param.toString().length}`,
                "content-type": "application/x-www-form-urlencoded"
            }
        });
        if (response.ok) {
            const tokens = yield response.json();
            return tokens;
        }
        debug(`Fetch Oauth tokens failed: ${yield response.text()}`);
        return {};
    });
const refreshAccessToken = (credentials)=>__awaiter(void 0, void 0, void 0, function*() {
        const requireFields = [
            "refreshToken",
            "clientId",
            "clientSecret",
            "tokenUrl"
        ];
        if (!hasFields(credentials, requireFields)) throw new Error(`Oauth credentials missing: ${findMissingFieldNames(credentials, requireFields)}`);
        const param = new URLSearchParams({
            client_id: credentials.clientId,
            client_secret: credentials.clientSecret,
            refresh_token: credentials.refreshToken,
            grant_type: "refresh_token"
        });
        const response = yield browserPonyfill.exports.fetch(credentials.tokenUrl, {
            method: "POST",
            body: param.toString(),
            headers: {
                "Content-Type": "application/x-www-form-urlencoded"
            }
        });
        if (response.ok) {
            const tokens = yield response.json();
            return tokens;
        }
        debug(`Refresh access token failed: ${yield response.text()}`);
        return {};
    });
const getOauthHeaders = (credentials)=>__awaiter(void 0, void 0, void 0, function*() {
        var _a;
        debug("Fetching oauth headers");
        let tokens = {};
        if (!credentials.refreshToken) // No refresh token, fetch new tokens
        tokens = yield fetchOauthTokens(credentials);
        else if (credentials.refreshToken && !credentials.accessToken || Date.now() > ((_a = credentials.expiration) !== null && _a !== void 0 ? _a : 0)) // have refresh token, but no accessToken, fetch access token only
        // or have both, but accessToken was expired
        tokens = yield refreshAccessToken(credentials);
         // now we should have valid access token
        debug(`Oauth tokens fetched: ${tokens.access_token}`);
        return {
            tokens,
            headers: {
                authorization: `Bearer ${tokens.access_token}`
            }
        };
    });
var authHelpers = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    defaultParam: defaultParam,
    getBasicAuthHeaders: getBasicAuthHeaders,
    fetchOauthTokens: fetchOauthTokens,
    refreshAccessToken: refreshAccessToken,
    getOauthHeaders: getOauthHeaders
}); // eslint-disable-next-line @typescript-eslint/explicit-module-boundary-types
const createDAVClient = (params)=>__awaiter(void 0, void 0, void 0, function*() {
        const { serverUrl , credentials , authMethod , defaultAccountType  } = params;
        const authHeaders = authMethod === "Basic" ? getBasicAuthHeaders(credentials) : authMethod === "Oauth" ? (yield getOauthHeaders(credentials)).headers : {};
        const defaultAccount = defaultAccountType ? yield createAccount({
            account: {
                serverUrl,
                credentials,
                accountType: defaultAccountType
            },
            headers: authHeaders
        }) : undefined;
        const davRequest$1 = (params0)=>__awaiter(void 0, void 0, void 0, function*() {
                const { init: init3  } = params0, rest = __rest(params0, [
                    "init"
                ]);
                const { headers  } = init3, restInit = __rest(init3, [
                    "headers"
                ]);
                return davRequest(Object.assign(Object.assign({}, rest), {
                    init: Object.assign(Object.assign({}, restInit), {
                        headers: Object.assign(Object.assign({}, authHeaders), headers)
                    })
                }));
            });
        const createObject$1 = defaultParam(createObject, {
            url: serverUrl,
            headers: authHeaders
        });
        const updateObject$1 = defaultParam(updateObject, {
            headers: authHeaders,
            url: serverUrl
        });
        const deleteObject$1 = defaultParam(deleteObject, {
            headers: authHeaders,
            url: serverUrl
        });
        const propfind$1 = defaultParam(propfind, {
            headers: authHeaders
        }); // account
        const createAccount$1 = (params0)=>__awaiter(void 0, void 0, void 0, function*() {
                const { account: account9 , headers , loadCollections , loadObjects  } = params0;
                return createAccount({
                    account: Object.assign({
                        serverUrl,
                        credentials
                    }, account9),
                    headers: Object.assign(Object.assign({}, authHeaders), headers),
                    loadCollections,
                    loadObjects
                });
            }); // collection
        const collectionQuery$1 = defaultParam(collectionQuery, {
            headers: authHeaders
        });
        const makeCollection$1 = defaultParam(makeCollection, {
            headers: authHeaders
        });
        const syncCollection$1 = defaultParam(syncCollection, {
            headers: authHeaders
        });
        const supportedReportSet$1 = defaultParam(supportedReportSet, {
            headers: authHeaders
        });
        const isCollectionDirty$1 = defaultParam(isCollectionDirty, {
            headers: authHeaders
        });
        const smartCollectionSync$1 = defaultParam(smartCollectionSync, {
            headers: authHeaders,
            account: defaultAccount
        }); // calendar
        const calendarQuery$1 = defaultParam(calendarQuery, {
            headers: authHeaders
        });
        const calendarMultiGet$1 = defaultParam(calendarMultiGet, {
            headers: authHeaders
        });
        const makeCalendar$1 = defaultParam(makeCalendar, {
            headers: authHeaders
        });
        const fetchCalendars$1 = defaultParam(fetchCalendars, {
            headers: authHeaders,
            account: defaultAccount
        });
        const fetchCalendarObjects$1 = defaultParam(fetchCalendarObjects, {
            headers: authHeaders
        });
        const createCalendarObject$1 = defaultParam(createCalendarObject, {
            headers: authHeaders
        });
        const updateCalendarObject$1 = defaultParam(updateCalendarObject, {
            headers: authHeaders
        });
        const deleteCalendarObject$1 = defaultParam(deleteCalendarObject, {
            headers: authHeaders
        });
        const syncCalendars$1 = defaultParam(syncCalendars, {
            account: defaultAccount,
            headers: authHeaders
        }); // addressBook
        const addressBookQuery$1 = defaultParam(addressBookQuery, {
            headers: authHeaders
        });
        const addressBookMultiGet$1 = defaultParam(addressBookMultiGet, {
            headers: authHeaders
        });
        const fetchAddressBooks$1 = defaultParam(fetchAddressBooks, {
            account: defaultAccount,
            headers: authHeaders
        });
        const fetchVCards$1 = defaultParam(fetchVCards, {
            headers: authHeaders
        });
        const createVCard$1 = defaultParam(createVCard, {
            headers: authHeaders
        });
        const updateVCard$1 = defaultParam(updateVCard, {
            headers: authHeaders
        });
        const deleteVCard$1 = defaultParam(deleteVCard, {
            headers: authHeaders
        });
        return {
            davRequest: davRequest$1,
            propfind: propfind$1,
            createAccount: createAccount$1,
            createObject: createObject$1,
            updateObject: updateObject$1,
            deleteObject: deleteObject$1,
            calendarQuery: calendarQuery$1,
            addressBookQuery: addressBookQuery$1,
            collectionQuery: collectionQuery$1,
            makeCollection: makeCollection$1,
            calendarMultiGet: calendarMultiGet$1,
            makeCalendar: makeCalendar$1,
            syncCollection: syncCollection$1,
            supportedReportSet: supportedReportSet$1,
            isCollectionDirty: isCollectionDirty$1,
            smartCollectionSync: smartCollectionSync$1,
            fetchCalendars: fetchCalendars$1,
            fetchCalendarObjects: fetchCalendarObjects$1,
            createCalendarObject: createCalendarObject$1,
            updateCalendarObject: updateCalendarObject$1,
            deleteCalendarObject: deleteCalendarObject$1,
            syncCalendars: syncCalendars$1,
            fetchAddressBooks: fetchAddressBooks$1,
            addressBookMultiGet: addressBookMultiGet$1,
            fetchVCards: fetchVCards$1,
            createVCard: createVCard$1,
            updateVCard: updateVCard$1,
            deleteVCard: deleteVCard$1
        };
    });
class DAVClient {
    constructor(params){
        var _a, _b;
        this.serverUrl = params.serverUrl;
        this.credentials = params.credentials;
        this.authMethod = (_a = params.authMethod) !== null && _a !== void 0 ? _a : "Basic";
        this.accountType = (_b = params.defaultAccountType) !== null && _b !== void 0 ? _b : "caldav";
    }
    login() {
        return __awaiter(this, void 0, void 0, function*() {
            this.authHeaders = this.authMethod === "Basic" ? getBasicAuthHeaders(this.credentials) : this.authMethod === "Oauth" ? (yield getOauthHeaders(this.credentials)).headers : {};
            this.account = this.accountType ? yield createAccount({
                account: {
                    serverUrl: this.serverUrl,
                    credentials: this.credentials,
                    accountType: this.accountType
                },
                headers: this.authHeaders
            }) : undefined;
        });
    }
    davRequest(params0) {
        return __awaiter(this, void 0, void 0, function*() {
            const { init: init4  } = params0, rest = __rest(params0, [
                "init"
            ]);
            const { headers  } = init4, restInit = __rest(init4, [
                "headers"
            ]);
            return davRequest(Object.assign(Object.assign({}, rest), {
                init: Object.assign(Object.assign({}, restInit), {
                    headers: Object.assign(Object.assign({}, this.authHeaders), headers)
                })
            }));
        });
    }
    createObject(...params) {
        return __awaiter(this, void 0, void 0, function*() {
            return defaultParam(createObject, {
                url: this.serverUrl,
                headers: this.authHeaders
            })(params[0]);
        });
    }
    updateObject(...params) {
        return __awaiter(this, void 0, void 0, function*() {
            return defaultParam(updateObject, {
                headers: this.authHeaders,
                url: this.serverUrl
            })(params[0]);
        });
    }
    deleteObject(...params) {
        return __awaiter(this, void 0, void 0, function*() {
            return defaultParam(deleteObject, {
                headers: this.authHeaders,
                url: this.serverUrl
            })(params[0]);
        });
    }
    propfind(...params) {
        return __awaiter(this, void 0, void 0, function*() {
            return defaultParam(propfind, {
                headers: this.authHeaders
            })(params[0]);
        });
    }
    createAccount(params0) {
        return __awaiter(this, void 0, void 0, function*() {
            const { account: account10 , headers , loadCollections , loadObjects  } = params0;
            return createAccount({
                account: Object.assign({
                    serverUrl: this.serverUrl,
                    credentials: this.credentials
                }, account10),
                headers: Object.assign(Object.assign({}, this.authHeaders), headers),
                loadCollections,
                loadObjects
            });
        });
    }
    collectionQuery(...params) {
        return __awaiter(this, void 0, void 0, function*() {
            return defaultParam(collectionQuery, {
                headers: this.authHeaders
            })(params[0]);
        });
    }
    makeCollection(...params) {
        return __awaiter(this, void 0, void 0, function*() {
            return defaultParam(makeCollection, {
                headers: this.authHeaders
            })(params[0]);
        });
    }
    syncCollection(...params) {
        return __awaiter(this, void 0, void 0, function*() {
            return defaultParam(syncCollection, {
                headers: this.authHeaders
            })(params[0]);
        });
    }
    supportedReportSet(...params) {
        return __awaiter(this, void 0, void 0, function*() {
            return defaultParam(supportedReportSet, {
                headers: this.authHeaders
            })(params[0]);
        });
    }
    isCollectionDirty(...params) {
        return __awaiter(this, void 0, void 0, function*() {
            return defaultParam(isCollectionDirty, {
                headers: this.authHeaders
            })(params[0]);
        });
    }
    smartCollectionSync(...params) {
        return __awaiter(this, void 0, void 0, function*() {
            return defaultParam(smartCollectionSync, {
                headers: this.authHeaders,
                account: this.account
            })(params[0]);
        });
    }
    calendarQuery(...params) {
        return __awaiter(this, void 0, void 0, function*() {
            return defaultParam(calendarQuery, {
                headers: this.authHeaders
            })(params[0]);
        });
    }
    makeCalendar(...params) {
        return __awaiter(this, void 0, void 0, function*() {
            return defaultParam(makeCalendar, {
                headers: this.authHeaders
            })(params[0]);
        });
    }
    calendarMultiGet(...params) {
        return __awaiter(this, void 0, void 0, function*() {
            return defaultParam(calendarMultiGet, {
                headers: this.authHeaders
            })(params[0]);
        });
    }
    fetchCalendars(...params) {
        return __awaiter(this, void 0, void 0, function*() {
            return defaultParam(fetchCalendars, {
                headers: this.authHeaders,
                account: this.account
            })(params === null || params === void 0 ? void 0 : params[0]);
        });
    }
    fetchCalendarObjects(...params) {
        return __awaiter(this, void 0, void 0, function*() {
            return defaultParam(fetchCalendarObjects, {
                headers: this.authHeaders
            })(params[0]);
        });
    }
    createCalendarObject(...params) {
        return __awaiter(this, void 0, void 0, function*() {
            return defaultParam(createCalendarObject, {
                headers: this.authHeaders
            })(params[0]);
        });
    }
    updateCalendarObject(...params) {
        return __awaiter(this, void 0, void 0, function*() {
            return defaultParam(updateCalendarObject, {
                headers: this.authHeaders
            })(params[0]);
        });
    }
    deleteCalendarObject(...params) {
        return __awaiter(this, void 0, void 0, function*() {
            return defaultParam(deleteCalendarObject, {
                headers: this.authHeaders
            })(params[0]);
        });
    }
    syncCalendars(...params) {
        return __awaiter(this, void 0, void 0, function*() {
            return defaultParam(syncCalendars, {
                headers: this.authHeaders,
                account: this.account
            })(params[0]);
        });
    }
    addressBookQuery(...params) {
        return __awaiter(this, void 0, void 0, function*() {
            return defaultParam(addressBookQuery, {
                headers: this.authHeaders
            })(params[0]);
        });
    }
    addressBookMultiGet(...params) {
        return __awaiter(this, void 0, void 0, function*() {
            return defaultParam(addressBookMultiGet, {
                headers: this.authHeaders
            })(params[0]);
        });
    }
    fetchAddressBooks(...params) {
        return __awaiter(this, void 0, void 0, function*() {
            return defaultParam(fetchAddressBooks, {
                headers: this.authHeaders,
                account: this.account
            })(params === null || params === void 0 ? void 0 : params[0]);
        });
    }
    fetchVCards(...params) {
        return __awaiter(this, void 0, void 0, function*() {
            return defaultParam(fetchVCards, {
                headers: this.authHeaders
            })(params[0]);
        });
    }
    createVCard(...params) {
        return __awaiter(this, void 0, void 0, function*() {
            return defaultParam(createVCard, {
                headers: this.authHeaders
            })(params[0]);
        });
    }
    updateVCard(...params) {
        return __awaiter(this, void 0, void 0, function*() {
            return defaultParam(updateVCard, {
                headers: this.authHeaders
            })(params[0]);
        });
    }
    deleteVCard(...params) {
        return __awaiter(this, void 0, void 0, function*() {
            return defaultParam(deleteVCard, {
                headers: this.authHeaders
            })(params[0]);
        });
    }
}
var client = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    createDAVClient: createDAVClient,
    DAVClient: DAVClient
});
var index = Object.assign(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign({
    DAVNamespace,
    DAVNamespaceShort,
    DAVAttributeMap
}, client), request), collection), account), addressBook), calendar), authHelpers), requestHelpers);

},{"@babel/runtime/helpers/esm/inherits":"8cvke","@babel/runtime/helpers/esm/setPrototypeOf":"eeTnk","stream":"bJO1t","@parcel/transformer-js/src/esmodule-helpers.js":"j7FRh"}],"8cvke":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _setPrototypeOfJs = require("./setPrototypeOf.js");
var _setPrototypeOfJsDefault = parcelHelpers.interopDefault(_setPrototypeOfJs);
function _inherits(subClass, superClass) {
    if (typeof superClass !== "function" && superClass !== null) throw new TypeError("Super expression must either be null or a function");
    subClass.prototype = Object.create(superClass && superClass.prototype, {
        constructor: {
            value: subClass,
            writable: true,
            configurable: true
        }
    });
    Object.defineProperty(subClass, "prototype", {
        writable: false
    });
    if (superClass) (0, _setPrototypeOfJsDefault.default)(subClass, superClass);
}
exports.default = _inherits;

},{"./setPrototypeOf.js":"eeTnk","@parcel/transformer-js/src/esmodule-helpers.js":"j7FRh"}],"eeTnk":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
function _setPrototypeOf(o1, p1) {
    _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) {
        o.__proto__ = p;
        return o;
    };
    return _setPrototypeOf(o1, p1);
}
exports.default = _setPrototypeOf;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"j7FRh"}],"bJO1t":[function(require,module,exports) {
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.
module.exports = Stream;
var EE = require("events").EventEmitter;
var inherits = require("inherits");
inherits(Stream, EE);
Stream.Readable = require("readable-stream/lib/_stream_readable.js");
Stream.Writable = require("readable-stream/lib/_stream_writable.js");
Stream.Duplex = require("readable-stream/lib/_stream_duplex.js");
Stream.Transform = require("readable-stream/lib/_stream_transform.js");
Stream.PassThrough = require("readable-stream/lib/_stream_passthrough.js");
Stream.finished = require("readable-stream/lib/internal/streams/end-of-stream.js");
Stream.pipeline = require("readable-stream/lib/internal/streams/pipeline.js");
// Backwards-compat with node 0.4.x
Stream.Stream = Stream;
// old-style streams.  Note that the pipe method (the only relevant
// part of this class) is overridden in the Readable class.
function Stream() {
    EE.call(this);
}
Stream.prototype.pipe = function(dest, options) {
    var source = this;
    function ondata(chunk) {
        if (dest.writable) {
            if (false === dest.write(chunk) && source.pause) source.pause();
        }
    }
    source.on("data", ondata);
    function ondrain() {
        if (source.readable && source.resume) source.resume();
    }
    dest.on("drain", ondrain);
    // If the 'end' option is not supplied, dest.end() will be called when
    // source gets the 'end' or 'close' events.  Only dest.end() once.
    if (!dest._isStdio && (!options || options.end !== false)) {
        source.on("end", onend);
        source.on("close", onclose);
    }
    var didOnEnd = false;
    function onend() {
        if (didOnEnd) return;
        didOnEnd = true;
        dest.end();
    }
    function onclose() {
        if (didOnEnd) return;
        didOnEnd = true;
        if (typeof dest.destroy === "function") dest.destroy();
    }
    // don't leave dangling pipes when there are errors.
    function onerror(er) {
        cleanup();
        if (EE.listenerCount(this, "error") === 0) throw er; // Unhandled stream error in pipe.
    }
    source.on("error", onerror);
    dest.on("error", onerror);
    // remove all the event listeners that were added.
    function cleanup() {
        source.removeListener("data", ondata);
        dest.removeListener("drain", ondrain);
        source.removeListener("end", onend);
        source.removeListener("close", onclose);
        source.removeListener("error", onerror);
        dest.removeListener("error", onerror);
        source.removeListener("end", cleanup);
        source.removeListener("close", cleanup);
        dest.removeListener("close", cleanup);
    }
    source.on("end", cleanup);
    source.on("close", cleanup);
    dest.on("close", cleanup);
    dest.emit("pipe", source);
    // Allow for unix-like usage: A.pipe(B).pipe(C)
    return dest;
};

},{"events":"32fHr","inherits":"l3bOz","readable-stream/lib/_stream_readable.js":"fdlsB","readable-stream/lib/_stream_writable.js":"dvVZS","readable-stream/lib/_stream_duplex.js":"e7R9x","readable-stream/lib/_stream_transform.js":"lXi5u","readable-stream/lib/_stream_passthrough.js":"9wa6Y","readable-stream/lib/internal/streams/end-of-stream.js":"4KjsE","readable-stream/lib/internal/streams/pipeline.js":"9oBZJ"}],"32fHr":[function(require,module,exports) {
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.
"use strict";
var R = typeof Reflect === "object" ? Reflect : null;
var ReflectApply = R && typeof R.apply === "function" ? R.apply : function ReflectApply(target, receiver, args) {
    return Function.prototype.apply.call(target, receiver, args);
};
var ReflectOwnKeys;
if (R && typeof R.ownKeys === "function") ReflectOwnKeys = R.ownKeys;
else if (Object.getOwnPropertySymbols) ReflectOwnKeys = function ReflectOwnKeys(target) {
    return Object.getOwnPropertyNames(target).concat(Object.getOwnPropertySymbols(target));
};
else ReflectOwnKeys = function ReflectOwnKeys(target) {
    return Object.getOwnPropertyNames(target);
};
function ProcessEmitWarning(warning) {
    if (console && console.warn) console.warn(warning);
}
var NumberIsNaN = Number.isNaN || function NumberIsNaN(value) {
    return value !== value;
};
function EventEmitter() {
    EventEmitter.init.call(this);
}
module.exports = EventEmitter;
module.exports.once = once;
// Backwards-compat with node 0.10.x
EventEmitter.EventEmitter = EventEmitter;
EventEmitter.prototype._events = undefined;
EventEmitter.prototype._eventsCount = 0;
EventEmitter.prototype._maxListeners = undefined;
// By default EventEmitters will print a warning if more than 10 listeners are
// added to it. This is a useful default which helps finding memory leaks.
var defaultMaxListeners = 10;
function checkListener(listener) {
    if (typeof listener !== "function") throw new TypeError('The "listener" argument must be of type Function. Received type ' + typeof listener);
}
Object.defineProperty(EventEmitter, "defaultMaxListeners", {
    enumerable: true,
    get: function() {
        return defaultMaxListeners;
    },
    set: function(arg) {
        if (typeof arg !== "number" || arg < 0 || NumberIsNaN(arg)) throw new RangeError('The value of "defaultMaxListeners" is out of range. It must be a non-negative number. Received ' + arg + ".");
        defaultMaxListeners = arg;
    }
});
EventEmitter.init = function() {
    if (this._events === undefined || this._events === Object.getPrototypeOf(this)._events) {
        this._events = Object.create(null);
        this._eventsCount = 0;
    }
    this._maxListeners = this._maxListeners || undefined;
};
// Obviously not all Emitters should be limited to 10. This function allows
// that to be increased. Set to zero for unlimited.
EventEmitter.prototype.setMaxListeners = function setMaxListeners(n) {
    if (typeof n !== "number" || n < 0 || NumberIsNaN(n)) throw new RangeError('The value of "n" is out of range. It must be a non-negative number. Received ' + n + ".");
    this._maxListeners = n;
    return this;
};
function _getMaxListeners(that) {
    if (that._maxListeners === undefined) return EventEmitter.defaultMaxListeners;
    return that._maxListeners;
}
EventEmitter.prototype.getMaxListeners = function getMaxListeners() {
    return _getMaxListeners(this);
};
EventEmitter.prototype.emit = function emit(type) {
    var args = [];
    for(var i = 1; i < arguments.length; i++)args.push(arguments[i]);
    var doError = type === "error";
    var events = this._events;
    if (events !== undefined) doError = doError && events.error === undefined;
    else if (!doError) return false;
    // If there is no 'error' event listener then throw.
    if (doError) {
        var er;
        if (args.length > 0) er = args[0];
        if (er instanceof Error) // Note: The comments on the `throw` lines are intentional, they show
        // up in Node's output if this results in an unhandled exception.
        throw er; // Unhandled 'error' event
        // At least give some kind of context to the user
        var err = new Error("Unhandled error." + (er ? " (" + er.message + ")" : ""));
        err.context = er;
        throw err; // Unhandled 'error' event
    }
    var handler = events[type];
    if (handler === undefined) return false;
    if (typeof handler === "function") ReflectApply(handler, this, args);
    else {
        var len = handler.length;
        var listeners = arrayClone(handler, len);
        for(var i = 0; i < len; ++i)ReflectApply(listeners[i], this, args);
    }
    return true;
};
function _addListener(target, type, listener, prepend) {
    var m;
    var events;
    var existing;
    checkListener(listener);
    events = target._events;
    if (events === undefined) {
        events = target._events = Object.create(null);
        target._eventsCount = 0;
    } else {
        // To avoid recursion in the case that type === "newListener"! Before
        // adding it to the listeners, first emit "newListener".
        if (events.newListener !== undefined) {
            target.emit("newListener", type, listener.listener ? listener.listener : listener);
            // Re-assign `events` because a newListener handler could have caused the
            // this._events to be assigned to a new object
            events = target._events;
        }
        existing = events[type];
    }
    if (existing === undefined) {
        // Optimize the case of one listener. Don't need the extra array object.
        existing = events[type] = listener;
        ++target._eventsCount;
    } else {
        if (typeof existing === "function") // Adding the second element, need to change to array.
        existing = events[type] = prepend ? [
            listener,
            existing
        ] : [
            existing,
            listener
        ];
        else if (prepend) existing.unshift(listener);
        else existing.push(listener);
        // Check for listener leak
        m = _getMaxListeners(target);
        if (m > 0 && existing.length > m && !existing.warned) {
            existing.warned = true;
            // No error code for this since it is a Warning
            // eslint-disable-next-line no-restricted-syntax
            var w = new Error("Possible EventEmitter memory leak detected. " + existing.length + " " + String(type) + " listeners " + "added. Use emitter.setMaxListeners() to " + "increase limit");
            w.name = "MaxListenersExceededWarning";
            w.emitter = target;
            w.type = type;
            w.count = existing.length;
            ProcessEmitWarning(w);
        }
    }
    return target;
}
EventEmitter.prototype.addListener = function addListener(type, listener) {
    return _addListener(this, type, listener, false);
};
EventEmitter.prototype.on = EventEmitter.prototype.addListener;
EventEmitter.prototype.prependListener = function prependListener(type, listener) {
    return _addListener(this, type, listener, true);
};
function onceWrapper() {
    if (!this.fired) {
        this.target.removeListener(this.type, this.wrapFn);
        this.fired = true;
        if (arguments.length === 0) return this.listener.call(this.target);
        return this.listener.apply(this.target, arguments);
    }
}
function _onceWrap(target, type, listener) {
    var state = {
        fired: false,
        wrapFn: undefined,
        target: target,
        type: type,
        listener: listener
    };
    var wrapped = onceWrapper.bind(state);
    wrapped.listener = listener;
    state.wrapFn = wrapped;
    return wrapped;
}
EventEmitter.prototype.once = function once(type, listener) {
    checkListener(listener);
    this.on(type, _onceWrap(this, type, listener));
    return this;
};
EventEmitter.prototype.prependOnceListener = function prependOnceListener(type, listener) {
    checkListener(listener);
    this.prependListener(type, _onceWrap(this, type, listener));
    return this;
};
// Emits a 'removeListener' event if and only if the listener was removed.
EventEmitter.prototype.removeListener = function removeListener(type, listener) {
    var list, events, position, i, originalListener;
    checkListener(listener);
    events = this._events;
    if (events === undefined) return this;
    list = events[type];
    if (list === undefined) return this;
    if (list === listener || list.listener === listener) {
        if (--this._eventsCount === 0) this._events = Object.create(null);
        else {
            delete events[type];
            if (events.removeListener) this.emit("removeListener", type, list.listener || listener);
        }
    } else if (typeof list !== "function") {
        position = -1;
        for(i = list.length - 1; i >= 0; i--)if (list[i] === listener || list[i].listener === listener) {
            originalListener = list[i].listener;
            position = i;
            break;
        }
        if (position < 0) return this;
        if (position === 0) list.shift();
        else spliceOne(list, position);
        if (list.length === 1) events[type] = list[0];
        if (events.removeListener !== undefined) this.emit("removeListener", type, originalListener || listener);
    }
    return this;
};
EventEmitter.prototype.off = EventEmitter.prototype.removeListener;
EventEmitter.prototype.removeAllListeners = function removeAllListeners(type) {
    var listeners, events, i;
    events = this._events;
    if (events === undefined) return this;
    // not listening for removeListener, no need to emit
    if (events.removeListener === undefined) {
        if (arguments.length === 0) {
            this._events = Object.create(null);
            this._eventsCount = 0;
        } else if (events[type] !== undefined) {
            if (--this._eventsCount === 0) this._events = Object.create(null);
            else delete events[type];
        }
        return this;
    }
    // emit removeListener for all listeners on all events
    if (arguments.length === 0) {
        var keys = Object.keys(events);
        var key;
        for(i = 0; i < keys.length; ++i){
            key = keys[i];
            if (key === "removeListener") continue;
            this.removeAllListeners(key);
        }
        this.removeAllListeners("removeListener");
        this._events = Object.create(null);
        this._eventsCount = 0;
        return this;
    }
    listeners = events[type];
    if (typeof listeners === "function") this.removeListener(type, listeners);
    else if (listeners !== undefined) // LIFO order
    for(i = listeners.length - 1; i >= 0; i--)this.removeListener(type, listeners[i]);
    return this;
};
function _listeners(target, type, unwrap) {
    var events = target._events;
    if (events === undefined) return [];
    var evlistener = events[type];
    if (evlistener === undefined) return [];
    if (typeof evlistener === "function") return unwrap ? [
        evlistener.listener || evlistener
    ] : [
        evlistener
    ];
    return unwrap ? unwrapListeners(evlistener) : arrayClone(evlistener, evlistener.length);
}
EventEmitter.prototype.listeners = function listeners(type) {
    return _listeners(this, type, true);
};
EventEmitter.prototype.rawListeners = function rawListeners(type) {
    return _listeners(this, type, false);
};
EventEmitter.listenerCount = function(emitter, type) {
    if (typeof emitter.listenerCount === "function") return emitter.listenerCount(type);
    else return listenerCount.call(emitter, type);
};
EventEmitter.prototype.listenerCount = listenerCount;
function listenerCount(type) {
    var events = this._events;
    if (events !== undefined) {
        var evlistener = events[type];
        if (typeof evlistener === "function") return 1;
        else if (evlistener !== undefined) return evlistener.length;
    }
    return 0;
}
EventEmitter.prototype.eventNames = function eventNames() {
    return this._eventsCount > 0 ? ReflectOwnKeys(this._events) : [];
};
function arrayClone(arr, n) {
    var copy = new Array(n);
    for(var i = 0; i < n; ++i)copy[i] = arr[i];
    return copy;
}
function spliceOne(list, index) {
    for(; index + 1 < list.length; index++)list[index] = list[index + 1];
    list.pop();
}
function unwrapListeners(arr) {
    var ret = new Array(arr.length);
    for(var i = 0; i < ret.length; ++i)ret[i] = arr[i].listener || arr[i];
    return ret;
}
function once(emitter, name) {
    return new Promise(function(resolve, reject) {
        function errorListener(err) {
            emitter.removeListener(name, resolver);
            reject(err);
        }
        function resolver() {
            if (typeof emitter.removeListener === "function") emitter.removeListener("error", errorListener);
            resolve([].slice.call(arguments));
        }
        eventTargetAgnosticAddListener(emitter, name, resolver, {
            once: true
        });
        if (name !== "error") addErrorHandlerIfEventEmitter(emitter, errorListener, {
            once: true
        });
    });
}
function addErrorHandlerIfEventEmitter(emitter, handler, flags) {
    if (typeof emitter.on === "function") eventTargetAgnosticAddListener(emitter, "error", handler, flags);
}
function eventTargetAgnosticAddListener(emitter, name, listener, flags) {
    if (typeof emitter.on === "function") {
        if (flags.once) emitter.once(name, listener);
        else emitter.on(name, listener);
    } else if (typeof emitter.addEventListener === "function") // EventTarget does not have `error` event semantics like Node
    // EventEmitters, we do not listen for `error` events here.
    emitter.addEventListener(name, function wrapListener(arg) {
        // IE does not have builtin `{ once: true }` support so we
        // have to do it manually.
        if (flags.once) emitter.removeEventListener(name, wrapListener);
        listener(arg);
    });
    else throw new TypeError('The "emitter" argument must be of type EventEmitter. Received type ' + typeof emitter);
}

},{}],"l3bOz":[function(require,module,exports) {
if (typeof Object.create === "function") // implementation from standard node.js 'util' module
module.exports = function inherits(ctor, superCtor) {
    if (superCtor) {
        ctor.super_ = superCtor;
        ctor.prototype = Object.create(superCtor.prototype, {
            constructor: {
                value: ctor,
                enumerable: false,
                writable: true,
                configurable: true
            }
        });
    }
};
else // old school shim for old browsers
module.exports = function inherits(ctor, superCtor) {
    if (superCtor) {
        ctor.super_ = superCtor;
        var TempCtor = function() {};
        TempCtor.prototype = superCtor.prototype;
        ctor.prototype = new TempCtor();
        ctor.prototype.constructor = ctor;
    }
};

},{}],"fdlsB":[function(require,module,exports) {
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.
"use strict";
var global = arguments[3];
var process = require("process");
module.exports = Readable;
/*<replacement>*/ var Duplex;
/*</replacement>*/ Readable.ReadableState = ReadableState;
/*<replacement>*/ var EE = require("events").EventEmitter;
var EElistenerCount = function EElistenerCount(emitter, type) {
    return emitter.listeners(type).length;
};
/*</replacement>*/ /*<replacement>*/ var Stream = require("./internal/streams/stream");
/*</replacement>*/ var Buffer = require("buffer").Buffer;
var OurUint8Array = global.Uint8Array || function() {};
function _uint8ArrayToBuffer(chunk) {
    return Buffer.from(chunk);
}
function _isUint8Array(obj) {
    return Buffer.isBuffer(obj) || obj instanceof OurUint8Array;
}
/*<replacement>*/ var debugUtil = require("util");
var debug;
if (debugUtil && debugUtil.debuglog) debug = debugUtil.debuglog("stream");
else debug = function debug() {};
/*</replacement>*/ var BufferList = require("./internal/streams/buffer_list");
var destroyImpl = require("./internal/streams/destroy");
var _require = require("./internal/streams/state"), getHighWaterMark = _require.getHighWaterMark;
var _require$codes = require("../errors").codes, ERR_INVALID_ARG_TYPE = _require$codes.ERR_INVALID_ARG_TYPE, ERR_STREAM_PUSH_AFTER_EOF = _require$codes.ERR_STREAM_PUSH_AFTER_EOF, ERR_METHOD_NOT_IMPLEMENTED = _require$codes.ERR_METHOD_NOT_IMPLEMENTED, ERR_STREAM_UNSHIFT_AFTER_END_EVENT = _require$codes.ERR_STREAM_UNSHIFT_AFTER_END_EVENT; // Lazy loaded to improve the startup performance.
var StringDecoder;
var createReadableStreamAsyncIterator;
var from;
require("inherits")(Readable, Stream);
var errorOrDestroy = destroyImpl.errorOrDestroy;
var kProxyEvents = [
    "error",
    "close",
    "destroy",
    "pause",
    "resume"
];
function prependListener(emitter, event, fn) {
    // Sadly this is not cacheable as some libraries bundle their own
    // event emitter implementation with them.
    if (typeof emitter.prependListener === "function") return emitter.prependListener(event, fn); // This is a hack to make sure that our error handler is attached before any
    // userland ones.  NEVER DO THIS. This is here only because this code needs
    // to continue to work with older versions of Node.js that do not include
    // the prependListener() method. The goal is to eventually remove this hack.
    if (!emitter._events || !emitter._events[event]) emitter.on(event, fn);
    else if (Array.isArray(emitter._events[event])) emitter._events[event].unshift(fn);
    else emitter._events[event] = [
        fn,
        emitter._events[event]
    ];
}
function ReadableState(options, stream, isDuplex) {
    Duplex = Duplex || require("./_stream_duplex");
    options = options || {}; // Duplex streams are both readable and writable, but share
    // the same options object.
    // However, some cases require setting options to different
    // values for the readable and the writable sides of the duplex stream.
    // These options can be provided separately as readableXXX and writableXXX.
    if (typeof isDuplex !== "boolean") isDuplex = stream instanceof Duplex; // object stream flag. Used to make read(n) ignore n and to
    // make all the buffer merging and length checks go away
    this.objectMode = !!options.objectMode;
    if (isDuplex) this.objectMode = this.objectMode || !!options.readableObjectMode; // the point at which it stops calling _read() to fill the buffer
    // Note: 0 is a valid value, means "don't call _read preemptively ever"
    this.highWaterMark = getHighWaterMark(this, options, "readableHighWaterMark", isDuplex); // A linked list is used to store data chunks instead of an array because the
    // linked list can remove elements from the beginning faster than
    // array.shift()
    this.buffer = new BufferList();
    this.length = 0;
    this.pipes = null;
    this.pipesCount = 0;
    this.flowing = null;
    this.ended = false;
    this.endEmitted = false;
    this.reading = false; // a flag to be able to tell if the event 'readable'/'data' is emitted
    // immediately, or on a later tick.  We set this to true at first, because
    // any actions that shouldn't happen until "later" should generally also
    // not happen before the first read call.
    this.sync = true; // whenever we return null, then we set a flag to say
    // that we're awaiting a 'readable' event emission.
    this.needReadable = false;
    this.emittedReadable = false;
    this.readableListening = false;
    this.resumeScheduled = false;
    this.paused = true; // Should close be emitted on destroy. Defaults to true.
    this.emitClose = options.emitClose !== false; // Should .destroy() be called after 'end' (and potentially 'finish')
    this.autoDestroy = !!options.autoDestroy; // has it been destroyed
    this.destroyed = false; // Crypto is kind of old and crusty.  Historically, its default string
    // encoding is 'binary' so we have to make this configurable.
    // Everything else in the universe uses 'utf8', though.
    this.defaultEncoding = options.defaultEncoding || "utf8"; // the number of writers that are awaiting a drain event in .pipe()s
    this.awaitDrain = 0; // if true, a maybeReadMore has been scheduled
    this.readingMore = false;
    this.decoder = null;
    this.encoding = null;
    if (options.encoding) {
        if (!StringDecoder) StringDecoder = require("string_decoder/").StringDecoder;
        this.decoder = new StringDecoder(options.encoding);
        this.encoding = options.encoding;
    }
}
function Readable(options) {
    Duplex = Duplex || require("./_stream_duplex");
    if (!(this instanceof Readable)) return new Readable(options); // Checking for a Stream.Duplex instance is faster here instead of inside
    // the ReadableState constructor, at least with V8 6.5
    var isDuplex = this instanceof Duplex;
    this._readableState = new ReadableState(options, this, isDuplex); // legacy
    this.readable = true;
    if (options) {
        if (typeof options.read === "function") this._read = options.read;
        if (typeof options.destroy === "function") this._destroy = options.destroy;
    }
    Stream.call(this);
}
Object.defineProperty(Readable.prototype, "destroyed", {
    // making it explicit this property is not enumerable
    // because otherwise some prototype manipulation in
    // userland will fail
    enumerable: false,
    get: function get() {
        if (this._readableState === undefined) return false;
        return this._readableState.destroyed;
    },
    set: function set(value) {
        // we ignore the value if the stream
        // has not been initialized yet
        if (!this._readableState) return;
         // backward compatibility, the user is explicitly
        // managing destroyed
        this._readableState.destroyed = value;
    }
});
Readable.prototype.destroy = destroyImpl.destroy;
Readable.prototype._undestroy = destroyImpl.undestroy;
Readable.prototype._destroy = function(err, cb) {
    cb(err);
}; // Manually shove something into the read() buffer.
// This returns true if the highWaterMark has not been hit yet,
// similar to how Writable.write() returns true if you should
// write() some more.
Readable.prototype.push = function(chunk, encoding) {
    var state = this._readableState;
    var skipChunkCheck;
    if (!state.objectMode) {
        if (typeof chunk === "string") {
            encoding = encoding || state.defaultEncoding;
            if (encoding !== state.encoding) {
                chunk = Buffer.from(chunk, encoding);
                encoding = "";
            }
            skipChunkCheck = true;
        }
    } else skipChunkCheck = true;
    return readableAddChunk(this, chunk, encoding, false, skipChunkCheck);
}; // Unshift should *always* be something directly out of read()
Readable.prototype.unshift = function(chunk) {
    return readableAddChunk(this, chunk, null, true, false);
};
function readableAddChunk(stream, chunk, encoding, addToFront, skipChunkCheck) {
    debug("readableAddChunk", chunk);
    var state = stream._readableState;
    if (chunk === null) {
        state.reading = false;
        onEofChunk(stream, state);
    } else {
        var er;
        if (!skipChunkCheck) er = chunkInvalid(state, chunk);
        if (er) errorOrDestroy(stream, er);
        else if (state.objectMode || chunk && chunk.length > 0) {
            if (typeof chunk !== "string" && !state.objectMode && Object.getPrototypeOf(chunk) !== Buffer.prototype) chunk = _uint8ArrayToBuffer(chunk);
            if (addToFront) {
                if (state.endEmitted) errorOrDestroy(stream, new ERR_STREAM_UNSHIFT_AFTER_END_EVENT());
                else addChunk(stream, state, chunk, true);
            } else if (state.ended) errorOrDestroy(stream, new ERR_STREAM_PUSH_AFTER_EOF());
            else if (state.destroyed) return false;
            else {
                state.reading = false;
                if (state.decoder && !encoding) {
                    chunk = state.decoder.write(chunk);
                    if (state.objectMode || chunk.length !== 0) addChunk(stream, state, chunk, false);
                    else maybeReadMore(stream, state);
                } else addChunk(stream, state, chunk, false);
            }
        } else if (!addToFront) {
            state.reading = false;
            maybeReadMore(stream, state);
        }
    } // We can push more data if we are below the highWaterMark.
    // Also, if we have no data yet, we can stand some more bytes.
    // This is to work around cases where hwm=0, such as the repl.
    return !state.ended && (state.length < state.highWaterMark || state.length === 0);
}
function addChunk(stream, state, chunk, addToFront) {
    if (state.flowing && state.length === 0 && !state.sync) {
        state.awaitDrain = 0;
        stream.emit("data", chunk);
    } else {
        // update the buffer info.
        state.length += state.objectMode ? 1 : chunk.length;
        if (addToFront) state.buffer.unshift(chunk);
        else state.buffer.push(chunk);
        if (state.needReadable) emitReadable(stream);
    }
    maybeReadMore(stream, state);
}
function chunkInvalid(state, chunk) {
    var er;
    if (!_isUint8Array(chunk) && typeof chunk !== "string" && chunk !== undefined && !state.objectMode) er = new ERR_INVALID_ARG_TYPE("chunk", [
        "string",
        "Buffer",
        "Uint8Array"
    ], chunk);
    return er;
}
Readable.prototype.isPaused = function() {
    return this._readableState.flowing === false;
}; // backwards compatibility.
Readable.prototype.setEncoding = function(enc) {
    if (!StringDecoder) StringDecoder = require("string_decoder/").StringDecoder;
    var decoder = new StringDecoder(enc);
    this._readableState.decoder = decoder; // If setEncoding(null), decoder.encoding equals utf8
    this._readableState.encoding = this._readableState.decoder.encoding; // Iterate over current buffer to convert already stored Buffers:
    var p = this._readableState.buffer.head;
    var content = "";
    while(p !== null){
        content += decoder.write(p.data);
        p = p.next;
    }
    this._readableState.buffer.clear();
    if (content !== "") this._readableState.buffer.push(content);
    this._readableState.length = content.length;
    return this;
}; // Don't raise the hwm > 1GB
var MAX_HWM = 0x40000000;
function computeNewHighWaterMark(n) {
    if (n >= MAX_HWM) // TODO(ronag): Throw ERR_VALUE_OUT_OF_RANGE.
    n = MAX_HWM;
    else {
        // Get the next highest power of 2 to prevent increasing hwm excessively in
        // tiny amounts
        n--;
        n |= n >>> 1;
        n |= n >>> 2;
        n |= n >>> 4;
        n |= n >>> 8;
        n |= n >>> 16;
        n++;
    }
    return n;
} // This function is designed to be inlinable, so please take care when making
// changes to the function body.
function howMuchToRead(n, state) {
    if (n <= 0 || state.length === 0 && state.ended) return 0;
    if (state.objectMode) return 1;
    if (n !== n) {
        // Only flow one buffer at a time
        if (state.flowing && state.length) return state.buffer.head.data.length;
        else return state.length;
    } // If we're asking for more than the current hwm, then raise the hwm.
    if (n > state.highWaterMark) state.highWaterMark = computeNewHighWaterMark(n);
    if (n <= state.length) return n; // Don't have enough
    if (!state.ended) {
        state.needReadable = true;
        return 0;
    }
    return state.length;
} // you can override either this method, or the async _read(n) below.
Readable.prototype.read = function(n) {
    debug("read", n);
    n = parseInt(n, 10);
    var state = this._readableState;
    var nOrig = n;
    if (n !== 0) state.emittedReadable = false; // if we're doing read(0) to trigger a readable event, but we
    // already have a bunch of data in the buffer, then just trigger
    // the 'readable' event and move on.
    if (n === 0 && state.needReadable && ((state.highWaterMark !== 0 ? state.length >= state.highWaterMark : state.length > 0) || state.ended)) {
        debug("read: emitReadable", state.length, state.ended);
        if (state.length === 0 && state.ended) endReadable(this);
        else emitReadable(this);
        return null;
    }
    n = howMuchToRead(n, state); // if we've ended, and we're now clear, then finish it up.
    if (n === 0 && state.ended) {
        if (state.length === 0) endReadable(this);
        return null;
    } // All the actual chunk generation logic needs to be
    // *below* the call to _read.  The reason is that in certain
    // synthetic stream cases, such as passthrough streams, _read
    // may be a completely synchronous operation which may change
    // the state of the read buffer, providing enough data when
    // before there was *not* enough.
    //
    // So, the steps are:
    // 1. Figure out what the state of things will be after we do
    // a read from the buffer.
    //
    // 2. If that resulting state will trigger a _read, then call _read.
    // Note that this may be asynchronous, or synchronous.  Yes, it is
    // deeply ugly to write APIs this way, but that still doesn't mean
    // that the Readable class should behave improperly, as streams are
    // designed to be sync/async agnostic.
    // Take note if the _read call is sync or async (ie, if the read call
    // has returned yet), so that we know whether or not it's safe to emit
    // 'readable' etc.
    //
    // 3. Actually pull the requested chunks out of the buffer and return.
    // if we need a readable event, then we need to do some reading.
    var doRead = state.needReadable;
    debug("need readable", doRead); // if we currently have less than the highWaterMark, then also read some
    if (state.length === 0 || state.length - n < state.highWaterMark) {
        doRead = true;
        debug("length less than watermark", doRead);
    } // however, if we've ended, then there's no point, and if we're already
    // reading, then it's unnecessary.
    if (state.ended || state.reading) {
        doRead = false;
        debug("reading or ended", doRead);
    } else if (doRead) {
        debug("do read");
        state.reading = true;
        state.sync = true; // if the length is currently zero, then we *need* a readable event.
        if (state.length === 0) state.needReadable = true; // call internal read method
        this._read(state.highWaterMark);
        state.sync = false; // If _read pushed data synchronously, then `reading` will be false,
        // and we need to re-evaluate how much data we can return to the user.
        if (!state.reading) n = howMuchToRead(nOrig, state);
    }
    var ret;
    if (n > 0) ret = fromList(n, state);
    else ret = null;
    if (ret === null) {
        state.needReadable = state.length <= state.highWaterMark;
        n = 0;
    } else {
        state.length -= n;
        state.awaitDrain = 0;
    }
    if (state.length === 0) {
        // If we have nothing in the buffer, then we want to know
        // as soon as we *do* get something into the buffer.
        if (!state.ended) state.needReadable = true; // If we tried to read() past the EOF, then emit end on the next tick.
        if (nOrig !== n && state.ended) endReadable(this);
    }
    if (ret !== null) this.emit("data", ret);
    return ret;
};
function onEofChunk(stream, state) {
    debug("onEofChunk");
    if (state.ended) return;
    if (state.decoder) {
        var chunk = state.decoder.end();
        if (chunk && chunk.length) {
            state.buffer.push(chunk);
            state.length += state.objectMode ? 1 : chunk.length;
        }
    }
    state.ended = true;
    if (state.sync) // if we are sync, wait until next tick to emit the data.
    // Otherwise we risk emitting data in the flow()
    // the readable code triggers during a read() call
    emitReadable(stream);
    else {
        // emit 'readable' now to make sure it gets picked up.
        state.needReadable = false;
        if (!state.emittedReadable) {
            state.emittedReadable = true;
            emitReadable_(stream);
        }
    }
} // Don't emit readable right away in sync mode, because this can trigger
// another read() call => stack overflow.  This way, it might trigger
// a nextTick recursion warning, but that's not so bad.
function emitReadable(stream) {
    var state = stream._readableState;
    debug("emitReadable", state.needReadable, state.emittedReadable);
    state.needReadable = false;
    if (!state.emittedReadable) {
        debug("emitReadable", state.flowing);
        state.emittedReadable = true;
        process.nextTick(emitReadable_, stream);
    }
}
function emitReadable_(stream) {
    var state = stream._readableState;
    debug("emitReadable_", state.destroyed, state.length, state.ended);
    if (!state.destroyed && (state.length || state.ended)) {
        stream.emit("readable");
        state.emittedReadable = false;
    } // The stream needs another readable event if
    // 1. It is not flowing, as the flow mechanism will take
    //    care of it.
    // 2. It is not ended.
    // 3. It is below the highWaterMark, so we can schedule
    //    another readable later.
    state.needReadable = !state.flowing && !state.ended && state.length <= state.highWaterMark;
    flow(stream);
} // at this point, the user has presumably seen the 'readable' event,
// and called read() to consume some data.  that may have triggered
// in turn another _read(n) call, in which case reading = true if
// it's in progress.
// However, if we're not ended, or reading, and the length < hwm,
// then go ahead and try to read some more preemptively.
function maybeReadMore(stream, state) {
    if (!state.readingMore) {
        state.readingMore = true;
        process.nextTick(maybeReadMore_, stream, state);
    }
}
function maybeReadMore_(stream, state) {
    // Attempt to read more data if we should.
    //
    // The conditions for reading more data are (one of):
    // - Not enough data buffered (state.length < state.highWaterMark). The loop
    //   is responsible for filling the buffer with enough data if such data
    //   is available. If highWaterMark is 0 and we are not in the flowing mode
    //   we should _not_ attempt to buffer any extra data. We'll get more data
    //   when the stream consumer calls read() instead.
    // - No data in the buffer, and the stream is in flowing mode. In this mode
    //   the loop below is responsible for ensuring read() is called. Failing to
    //   call read here would abort the flow and there's no other mechanism for
    //   continuing the flow if the stream consumer has just subscribed to the
    //   'data' event.
    //
    // In addition to the above conditions to keep reading data, the following
    // conditions prevent the data from being read:
    // - The stream has ended (state.ended).
    // - There is already a pending 'read' operation (state.reading). This is a
    //   case where the the stream has called the implementation defined _read()
    //   method, but they are processing the call asynchronously and have _not_
    //   called push() with new data. In this case we skip performing more
    //   read()s. The execution ends in this method again after the _read() ends
    //   up calling push() with more data.
    while(!state.reading && !state.ended && (state.length < state.highWaterMark || state.flowing && state.length === 0)){
        var len = state.length;
        debug("maybeReadMore read 0");
        stream.read(0);
        if (len === state.length) break;
    }
    state.readingMore = false;
} // abstract method.  to be overridden in specific implementation classes.
// call cb(er, data) where data is <= n in length.
// for virtual (non-string, non-buffer) streams, "length" is somewhat
// arbitrary, and perhaps not very meaningful.
Readable.prototype._read = function(n) {
    errorOrDestroy(this, new ERR_METHOD_NOT_IMPLEMENTED("_read()"));
};
Readable.prototype.pipe = function(dest, pipeOpts) {
    var src = this;
    var state = this._readableState;
    switch(state.pipesCount){
        case 0:
            state.pipes = dest;
            break;
        case 1:
            state.pipes = [
                state.pipes,
                dest
            ];
            break;
        default:
            state.pipes.push(dest);
            break;
    }
    state.pipesCount += 1;
    debug("pipe count=%d opts=%j", state.pipesCount, pipeOpts);
    var doEnd = (!pipeOpts || pipeOpts.end !== false) && dest !== process.stdout && dest !== process.stderr;
    var endFn = doEnd ? onend : unpipe;
    if (state.endEmitted) process.nextTick(endFn);
    else src.once("end", endFn);
    dest.on("unpipe", onunpipe);
    function onunpipe(readable, unpipeInfo) {
        debug("onunpipe");
        if (readable === src) {
            if (unpipeInfo && unpipeInfo.hasUnpiped === false) {
                unpipeInfo.hasUnpiped = true;
                cleanup();
            }
        }
    }
    function onend() {
        debug("onend");
        dest.end();
    } // when the dest drains, it reduces the awaitDrain counter
    // on the source.  This would be more elegant with a .once()
    // handler in flow(), but adding and removing repeatedly is
    // too slow.
    var ondrain = pipeOnDrain(src);
    dest.on("drain", ondrain);
    var cleanedUp = false;
    function cleanup() {
        debug("cleanup"); // cleanup event handlers once the pipe is broken
        dest.removeListener("close", onclose);
        dest.removeListener("finish", onfinish);
        dest.removeListener("drain", ondrain);
        dest.removeListener("error", onerror);
        dest.removeListener("unpipe", onunpipe);
        src.removeListener("end", onend);
        src.removeListener("end", unpipe);
        src.removeListener("data", ondata);
        cleanedUp = true; // if the reader is waiting for a drain event from this
        // specific writer, then it would cause it to never start
        // flowing again.
        // So, if this is awaiting a drain, then we just call it now.
        // If we don't know, then assume that we are waiting for one.
        if (state.awaitDrain && (!dest._writableState || dest._writableState.needDrain)) ondrain();
    }
    src.on("data", ondata);
    function ondata(chunk) {
        debug("ondata");
        var ret = dest.write(chunk);
        debug("dest.write", ret);
        if (ret === false) {
            // If the user unpiped during `dest.write()`, it is possible
            // to get stuck in a permanently paused state if that write
            // also returned false.
            // => Check whether `dest` is still a piping destination.
            if ((state.pipesCount === 1 && state.pipes === dest || state.pipesCount > 1 && indexOf(state.pipes, dest) !== -1) && !cleanedUp) {
                debug("false write response, pause", state.awaitDrain);
                state.awaitDrain++;
            }
            src.pause();
        }
    } // if the dest has an error, then stop piping into it.
    // however, don't suppress the throwing behavior for this.
    function onerror(er) {
        debug("onerror", er);
        unpipe();
        dest.removeListener("error", onerror);
        if (EElistenerCount(dest, "error") === 0) errorOrDestroy(dest, er);
    } // Make sure our error handler is attached before userland ones.
    prependListener(dest, "error", onerror); // Both close and finish should trigger unpipe, but only once.
    function onclose() {
        dest.removeListener("finish", onfinish);
        unpipe();
    }
    dest.once("close", onclose);
    function onfinish() {
        debug("onfinish");
        dest.removeListener("close", onclose);
        unpipe();
    }
    dest.once("finish", onfinish);
    function unpipe() {
        debug("unpipe");
        src.unpipe(dest);
    } // tell the dest that it's being piped to
    dest.emit("pipe", src); // start the flow if it hasn't been started already.
    if (!state.flowing) {
        debug("pipe resume");
        src.resume();
    }
    return dest;
};
function pipeOnDrain(src) {
    return function pipeOnDrainFunctionResult() {
        var state = src._readableState;
        debug("pipeOnDrain", state.awaitDrain);
        if (state.awaitDrain) state.awaitDrain--;
        if (state.awaitDrain === 0 && EElistenerCount(src, "data")) {
            state.flowing = true;
            flow(src);
        }
    };
}
Readable.prototype.unpipe = function(dest) {
    var state = this._readableState;
    var unpipeInfo = {
        hasUnpiped: false
    }; // if we're not piping anywhere, then do nothing.
    if (state.pipesCount === 0) return this; // just one destination.  most common case.
    if (state.pipesCount === 1) {
        // passed in one, but it's not the right one.
        if (dest && dest !== state.pipes) return this;
        if (!dest) dest = state.pipes; // got a match.
        state.pipes = null;
        state.pipesCount = 0;
        state.flowing = false;
        if (dest) dest.emit("unpipe", this, unpipeInfo);
        return this;
    } // slow case. multiple pipe destinations.
    if (!dest) {
        // remove all.
        var dests = state.pipes;
        var len = state.pipesCount;
        state.pipes = null;
        state.pipesCount = 0;
        state.flowing = false;
        for(var i = 0; i < len; i++)dests[i].emit("unpipe", this, {
            hasUnpiped: false
        });
        return this;
    } // try to find the right one.
    var index = indexOf(state.pipes, dest);
    if (index === -1) return this;
    state.pipes.splice(index, 1);
    state.pipesCount -= 1;
    if (state.pipesCount === 1) state.pipes = state.pipes[0];
    dest.emit("unpipe", this, unpipeInfo);
    return this;
}; // set up data events if they are asked for
// Ensure readable listeners eventually get something
Readable.prototype.on = function(ev, fn) {
    var res = Stream.prototype.on.call(this, ev, fn);
    var state = this._readableState;
    if (ev === "data") {
        // update readableListening so that resume() may be a no-op
        // a few lines down. This is needed to support once('readable').
        state.readableListening = this.listenerCount("readable") > 0; // Try start flowing on next tick if stream isn't explicitly paused
        if (state.flowing !== false) this.resume();
    } else if (ev === "readable") {
        if (!state.endEmitted && !state.readableListening) {
            state.readableListening = state.needReadable = true;
            state.flowing = false;
            state.emittedReadable = false;
            debug("on readable", state.length, state.reading);
            if (state.length) emitReadable(this);
            else if (!state.reading) process.nextTick(nReadingNextTick, this);
        }
    }
    return res;
};
Readable.prototype.addListener = Readable.prototype.on;
Readable.prototype.removeListener = function(ev, fn) {
    var res = Stream.prototype.removeListener.call(this, ev, fn);
    if (ev === "readable") // We need to check if there is someone still listening to
    // readable and reset the state. However this needs to happen
    // after readable has been emitted but before I/O (nextTick) to
    // support once('readable', fn) cycles. This means that calling
    // resume within the same tick will have no
    // effect.
    process.nextTick(updateReadableListening, this);
    return res;
};
Readable.prototype.removeAllListeners = function(ev) {
    var res = Stream.prototype.removeAllListeners.apply(this, arguments);
    if (ev === "readable" || ev === undefined) // We need to check if there is someone still listening to
    // readable and reset the state. However this needs to happen
    // after readable has been emitted but before I/O (nextTick) to
    // support once('readable', fn) cycles. This means that calling
    // resume within the same tick will have no
    // effect.
    process.nextTick(updateReadableListening, this);
    return res;
};
function updateReadableListening(self) {
    var state = self._readableState;
    state.readableListening = self.listenerCount("readable") > 0;
    if (state.resumeScheduled && !state.paused) // flowing needs to be set to true now, otherwise
    // the upcoming resume will not flow.
    state.flowing = true; // crude way to check if we should resume
    else if (self.listenerCount("data") > 0) self.resume();
}
function nReadingNextTick(self) {
    debug("readable nexttick read 0");
    self.read(0);
} // pause() and resume() are remnants of the legacy readable stream API
// If the user uses them, then switch into old mode.
Readable.prototype.resume = function() {
    var state = this._readableState;
    if (!state.flowing) {
        debug("resume"); // we flow only if there is no one listening
        // for readable, but we still have to call
        // resume()
        state.flowing = !state.readableListening;
        resume(this, state);
    }
    state.paused = false;
    return this;
};
function resume(stream, state) {
    if (!state.resumeScheduled) {
        state.resumeScheduled = true;
        process.nextTick(resume_, stream, state);
    }
}
function resume_(stream, state) {
    debug("resume", state.reading);
    if (!state.reading) stream.read(0);
    state.resumeScheduled = false;
    stream.emit("resume");
    flow(stream);
    if (state.flowing && !state.reading) stream.read(0);
}
Readable.prototype.pause = function() {
    debug("call pause flowing=%j", this._readableState.flowing);
    if (this._readableState.flowing !== false) {
        debug("pause");
        this._readableState.flowing = false;
        this.emit("pause");
    }
    this._readableState.paused = true;
    return this;
};
function flow(stream) {
    var state = stream._readableState;
    debug("flow", state.flowing);
    while(state.flowing && stream.read() !== null);
} // wrap an old-style stream as the async data source.
// This is *not* part of the readable stream interface.
// It is an ugly unfortunate mess of history.
Readable.prototype.wrap = function(stream) {
    var _this = this;
    var state = this._readableState;
    var paused = false;
    stream.on("end", function() {
        debug("wrapped end");
        if (state.decoder && !state.ended) {
            var chunk = state.decoder.end();
            if (chunk && chunk.length) _this.push(chunk);
        }
        _this.push(null);
    });
    stream.on("data", function(chunk) {
        debug("wrapped data");
        if (state.decoder) chunk = state.decoder.write(chunk); // don't skip over falsy values in objectMode
        if (state.objectMode && (chunk === null || chunk === undefined)) return;
        else if (!state.objectMode && (!chunk || !chunk.length)) return;
        var ret = _this.push(chunk);
        if (!ret) {
            paused = true;
            stream.pause();
        }
    }); // proxy all the other methods.
    // important when wrapping filters and duplexes.
    for(var i in stream)if (this[i] === undefined && typeof stream[i] === "function") this[i] = function methodWrap(method) {
        return function methodWrapReturnFunction() {
            return stream[method].apply(stream, arguments);
        };
    }(i);
     // proxy certain important events.
    for(var n1 = 0; n1 < kProxyEvents.length; n1++)stream.on(kProxyEvents[n1], this.emit.bind(this, kProxyEvents[n1]));
     // when we try to consume some more bytes, simply unpause the
    // underlying stream.
    this._read = function(n) {
        debug("wrapped _read", n);
        if (paused) {
            paused = false;
            stream.resume();
        }
    };
    return this;
};
if (typeof Symbol === "function") Readable.prototype[Symbol.asyncIterator] = function() {
    if (createReadableStreamAsyncIterator === undefined) createReadableStreamAsyncIterator = require("./internal/streams/async_iterator");
    return createReadableStreamAsyncIterator(this);
};
Object.defineProperty(Readable.prototype, "readableHighWaterMark", {
    // making it explicit this property is not enumerable
    // because otherwise some prototype manipulation in
    // userland will fail
    enumerable: false,
    get: function get() {
        return this._readableState.highWaterMark;
    }
});
Object.defineProperty(Readable.prototype, "readableBuffer", {
    // making it explicit this property is not enumerable
    // because otherwise some prototype manipulation in
    // userland will fail
    enumerable: false,
    get: function get() {
        return this._readableState && this._readableState.buffer;
    }
});
Object.defineProperty(Readable.prototype, "readableFlowing", {
    // making it explicit this property is not enumerable
    // because otherwise some prototype manipulation in
    // userland will fail
    enumerable: false,
    get: function get() {
        return this._readableState.flowing;
    },
    set: function set(state) {
        if (this._readableState) this._readableState.flowing = state;
    }
}); // exposed for testing purposes only.
Readable._fromList = fromList;
Object.defineProperty(Readable.prototype, "readableLength", {
    // making it explicit this property is not enumerable
    // because otherwise some prototype manipulation in
    // userland will fail
    enumerable: false,
    get: function get() {
        return this._readableState.length;
    }
}); // Pluck off n bytes from an array of buffers.
// Length is the combined lengths of all the buffers in the list.
// This function is designed to be inlinable, so please take care when making
// changes to the function body.
function fromList(n, state) {
    // nothing buffered
    if (state.length === 0) return null;
    var ret;
    if (state.objectMode) ret = state.buffer.shift();
    else if (!n || n >= state.length) {
        // read it all, truncate the list
        if (state.decoder) ret = state.buffer.join("");
        else if (state.buffer.length === 1) ret = state.buffer.first();
        else ret = state.buffer.concat(state.length);
        state.buffer.clear();
    } else // read part of list
    ret = state.buffer.consume(n, state.decoder);
    return ret;
}
function endReadable(stream) {
    var state = stream._readableState;
    debug("endReadable", state.endEmitted);
    if (!state.endEmitted) {
        state.ended = true;
        process.nextTick(endReadableNT, state, stream);
    }
}
function endReadableNT(state, stream) {
    debug("endReadableNT", state.endEmitted, state.length); // Check that we didn't get one last unshift.
    if (!state.endEmitted && state.length === 0) {
        state.endEmitted = true;
        stream.readable = false;
        stream.emit("end");
        if (state.autoDestroy) {
            // In case of duplex streams we need a way to detect
            // if the writable side is ready for autoDestroy as well
            var wState = stream._writableState;
            if (!wState || wState.autoDestroy && wState.finished) stream.destroy();
        }
    }
}
if (typeof Symbol === "function") Readable.from = function(iterable, opts) {
    if (from === undefined) from = require("./internal/streams/from");
    return from(Readable, iterable, opts);
};
function indexOf(xs, x) {
    for(var i = 0, l = xs.length; i < l; i++){
        if (xs[i] === x) return i;
    }
    return -1;
}

},{"process":"gq3cc","events":"32fHr","./internal/streams/stream":"9z3W4","buffer":"6tQNr","util":"9C0N7","./internal/streams/buffer_list":"7Gh2M","./internal/streams/destroy":"9XP5E","./internal/streams/state":"ks1Kj","../errors":"5EQW4","inherits":"l3bOz","./_stream_duplex":"e7R9x","string_decoder/":"9gZvY","./internal/streams/async_iterator":"jMXvV","./internal/streams/from":"l88sT"}],"gq3cc":[function(require,module,exports) {
// shim for using process in browser
var process = module.exports = {};
// cached from whatever global is present so that test runners that stub it
// don't break things.  But we need to wrap it in a try catch in case it is
// wrapped in strict mode code which doesn't define any globals.  It's inside a
// function because try/catches deoptimize in certain engines.
var cachedSetTimeout;
var cachedClearTimeout;
function defaultSetTimout() {
    throw new Error("setTimeout has not been defined");
}
function defaultClearTimeout() {
    throw new Error("clearTimeout has not been defined");
}
(function() {
    try {
        if (typeof setTimeout === "function") cachedSetTimeout = setTimeout;
        else cachedSetTimeout = defaultSetTimout;
    } catch (e) {
        cachedSetTimeout = defaultSetTimout;
    }
    try {
        if (typeof clearTimeout === "function") cachedClearTimeout = clearTimeout;
        else cachedClearTimeout = defaultClearTimeout;
    } catch (e1) {
        cachedClearTimeout = defaultClearTimeout;
    }
})();
function runTimeout(fun) {
    if (cachedSetTimeout === setTimeout) //normal enviroments in sane situations
    return setTimeout(fun, 0);
    // if setTimeout wasn't available but was latter defined
    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {
        cachedSetTimeout = setTimeout;
        return setTimeout(fun, 0);
    }
    try {
        // when when somebody has screwed with setTimeout but no I.E. maddness
        return cachedSetTimeout(fun, 0);
    } catch (e) {
        try {
            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally
            return cachedSetTimeout.call(null, fun, 0);
        } catch (e) {
            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error
            return cachedSetTimeout.call(this, fun, 0);
        }
    }
}
function runClearTimeout(marker) {
    if (cachedClearTimeout === clearTimeout) //normal enviroments in sane situations
    return clearTimeout(marker);
    // if clearTimeout wasn't available but was latter defined
    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {
        cachedClearTimeout = clearTimeout;
        return clearTimeout(marker);
    }
    try {
        // when when somebody has screwed with setTimeout but no I.E. maddness
        return cachedClearTimeout(marker);
    } catch (e) {
        try {
            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally
            return cachedClearTimeout.call(null, marker);
        } catch (e) {
            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.
            // Some versions of I.E. have different rules for clearTimeout vs setTimeout
            return cachedClearTimeout.call(this, marker);
        }
    }
}
var queue = [];
var draining = false;
var currentQueue;
var queueIndex = -1;
function cleanUpNextTick() {
    if (!draining || !currentQueue) return;
    draining = false;
    if (currentQueue.length) queue = currentQueue.concat(queue);
    else queueIndex = -1;
    if (queue.length) drainQueue();
}
function drainQueue() {
    if (draining) return;
    var timeout = runTimeout(cleanUpNextTick);
    draining = true;
    var len = queue.length;
    while(len){
        currentQueue = queue;
        queue = [];
        while(++queueIndex < len)if (currentQueue) currentQueue[queueIndex].run();
        queueIndex = -1;
        len = queue.length;
    }
    currentQueue = null;
    draining = false;
    runClearTimeout(timeout);
}
process.nextTick = function(fun) {
    var args = new Array(arguments.length - 1);
    if (arguments.length > 1) for(var i = 1; i < arguments.length; i++)args[i - 1] = arguments[i];
    queue.push(new Item(fun, args));
    if (queue.length === 1 && !draining) runTimeout(drainQueue);
};
// v8 likes predictible objects
function Item(fun, array) {
    this.fun = fun;
    this.array = array;
}
Item.prototype.run = function() {
    this.fun.apply(null, this.array);
};
process.title = "browser";
process.browser = true;
process.env = {};
process.argv = [];
process.version = ""; // empty string to avoid regexp issues
process.versions = {};
function noop() {}
process.on = noop;
process.addListener = noop;
process.once = noop;
process.off = noop;
process.removeListener = noop;
process.removeAllListeners = noop;
process.emit = noop;
process.prependListener = noop;
process.prependOnceListener = noop;
process.listeners = function(name) {
    return [];
};
process.binding = function(name) {
    throw new Error("process.binding is not supported");
};
process.cwd = function() {
    return "/";
};
process.chdir = function(dir) {
    throw new Error("process.chdir is not supported");
};
process.umask = function() {
    return 0;
};

},{}],"9z3W4":[function(require,module,exports) {
module.exports = require("events").EventEmitter;

},{"events":"32fHr"}],"6tQNr":[function(require,module,exports) {
/*!
 * The buffer module from node.js, for the browser.
 *
 * @author   Feross Aboukhadijeh <https://feross.org>
 * @license  MIT
 */ /* eslint-disable no-proto */ "use strict";
const base64 = require("base64-js");
const ieee754 = require("ieee754");
const customInspectSymbol = typeof Symbol === "function" && typeof Symbol["for"] === "function" // eslint-disable-line dot-notation
 ? Symbol["for"]("nodejs.util.inspect.custom") // eslint-disable-line dot-notation
 : null;
exports.Buffer = Buffer;
exports.SlowBuffer = SlowBuffer;
exports.INSPECT_MAX_BYTES = 50;
const K_MAX_LENGTH = 0x7fffffff;
exports.kMaxLength = K_MAX_LENGTH;
/**
 * If `Buffer.TYPED_ARRAY_SUPPORT`:
 *   === true    Use Uint8Array implementation (fastest)
 *   === false   Print warning and recommend using `buffer` v4.x which has an Object
 *               implementation (most compatible, even IE6)
 *
 * Browsers that support typed arrays are IE 10+, Firefox 4+, Chrome 7+, Safari 5.1+,
 * Opera 11.6+, iOS 4.2+.
 *
 * We report that the browser does not support typed arrays if the are not subclassable
 * using __proto__. Firefox 4-29 lacks support for adding new properties to `Uint8Array`
 * (See: https://bugzilla.mozilla.org/show_bug.cgi?id=695438). IE 10 lacks support
 * for __proto__ and has a buggy typed array implementation.
 */ Buffer.TYPED_ARRAY_SUPPORT = typedArraySupport();
if (!Buffer.TYPED_ARRAY_SUPPORT && typeof console !== "undefined" && typeof console.error === "function") console.error("This browser lacks typed array (Uint8Array) support which is required by `buffer` v5.x. Use `buffer` v4.x if you require old browser support.");
function typedArraySupport() {
    // Can typed array instances can be augmented?
    try {
        const arr = new Uint8Array(1);
        const proto = {
            foo: function() {
                return 42;
            }
        };
        Object.setPrototypeOf(proto, Uint8Array.prototype);
        Object.setPrototypeOf(arr, proto);
        return arr.foo() === 42;
    } catch (e) {
        return false;
    }
}
Object.defineProperty(Buffer.prototype, "parent", {
    enumerable: true,
    get: function() {
        if (!Buffer.isBuffer(this)) return undefined;
        return this.buffer;
    }
});
Object.defineProperty(Buffer.prototype, "offset", {
    enumerable: true,
    get: function() {
        if (!Buffer.isBuffer(this)) return undefined;
        return this.byteOffset;
    }
});
function createBuffer(length) {
    if (length > K_MAX_LENGTH) throw new RangeError('The value "' + length + '" is invalid for option "size"');
    // Return an augmented `Uint8Array` instance
    const buf = new Uint8Array(length);
    Object.setPrototypeOf(buf, Buffer.prototype);
    return buf;
}
/**
 * The Buffer constructor returns instances of `Uint8Array` that have their
 * prototype changed to `Buffer.prototype`. Furthermore, `Buffer` is a subclass of
 * `Uint8Array`, so the returned instances will have all the node `Buffer` methods
 * and the `Uint8Array` methods. Square bracket notation works as expected -- it
 * returns a single octet.
 *
 * The `Uint8Array` prototype remains unmodified.
 */ function Buffer(arg, encodingOrOffset, length) {
    // Common case.
    if (typeof arg === "number") {
        if (typeof encodingOrOffset === "string") throw new TypeError('The "string" argument must be of type string. Received type number');
        return allocUnsafe(arg);
    }
    return from(arg, encodingOrOffset, length);
}
Buffer.poolSize = 8192 // not used by this implementation
;
function from(value, encodingOrOffset, length) {
    if (typeof value === "string") return fromString(value, encodingOrOffset);
    if (ArrayBuffer.isView(value)) return fromArrayView(value);
    if (value == null) throw new TypeError("The first argument must be one of type string, Buffer, ArrayBuffer, Array, or Array-like Object. Received type " + typeof value);
    if (isInstance(value, ArrayBuffer) || value && isInstance(value.buffer, ArrayBuffer)) return fromArrayBuffer(value, encodingOrOffset, length);
    if (typeof SharedArrayBuffer !== "undefined" && (isInstance(value, SharedArrayBuffer) || value && isInstance(value.buffer, SharedArrayBuffer))) return fromArrayBuffer(value, encodingOrOffset, length);
    if (typeof value === "number") throw new TypeError('The "value" argument must not be of type number. Received type number');
    const valueOf = value.valueOf && value.valueOf();
    if (valueOf != null && valueOf !== value) return Buffer.from(valueOf, encodingOrOffset, length);
    const b = fromObject(value);
    if (b) return b;
    if (typeof Symbol !== "undefined" && Symbol.toPrimitive != null && typeof value[Symbol.toPrimitive] === "function") return Buffer.from(value[Symbol.toPrimitive]("string"), encodingOrOffset, length);
    throw new TypeError("The first argument must be one of type string, Buffer, ArrayBuffer, Array, or Array-like Object. Received type " + typeof value);
}
/**
 * Functionally equivalent to Buffer(arg, encoding) but throws a TypeError
 * if value is a number.
 * Buffer.from(str[, encoding])
 * Buffer.from(array)
 * Buffer.from(buffer)
 * Buffer.from(arrayBuffer[, byteOffset[, length]])
 **/ Buffer.from = function(value, encodingOrOffset, length) {
    return from(value, encodingOrOffset, length);
};
// Note: Change prototype *after* Buffer.from is defined to workaround Chrome bug:
// https://github.com/feross/buffer/pull/148
Object.setPrototypeOf(Buffer.prototype, Uint8Array.prototype);
Object.setPrototypeOf(Buffer, Uint8Array);
function assertSize(size) {
    if (typeof size !== "number") throw new TypeError('"size" argument must be of type number');
    else if (size < 0) throw new RangeError('The value "' + size + '" is invalid for option "size"');
}
function alloc(size, fill, encoding) {
    assertSize(size);
    if (size <= 0) return createBuffer(size);
    if (fill !== undefined) // Only pay attention to encoding if it's a string. This
    // prevents accidentally sending in a number that would
    // be interpreted as a start offset.
    return typeof encoding === "string" ? createBuffer(size).fill(fill, encoding) : createBuffer(size).fill(fill);
    return createBuffer(size);
}
/**
 * Creates a new filled Buffer instance.
 * alloc(size[, fill[, encoding]])
 **/ Buffer.alloc = function(size, fill, encoding) {
    return alloc(size, fill, encoding);
};
function allocUnsafe(size) {
    assertSize(size);
    return createBuffer(size < 0 ? 0 : checked(size) | 0);
}
/**
 * Equivalent to Buffer(num), by default creates a non-zero-filled Buffer instance.
 * */ Buffer.allocUnsafe = function(size) {
    return allocUnsafe(size);
};
/**
 * Equivalent to SlowBuffer(num), by default creates a non-zero-filled Buffer instance.
 */ Buffer.allocUnsafeSlow = function(size) {
    return allocUnsafe(size);
};
function fromString(string, encoding) {
    if (typeof encoding !== "string" || encoding === "") encoding = "utf8";
    if (!Buffer.isEncoding(encoding)) throw new TypeError("Unknown encoding: " + encoding);
    const length = byteLength(string, encoding) | 0;
    let buf = createBuffer(length);
    const actual = buf.write(string, encoding);
    if (actual !== length) // Writing a hex string, for example, that contains invalid characters will
    // cause everything after the first invalid character to be ignored. (e.g.
    // 'abxxcd' will be treated as 'ab')
    buf = buf.slice(0, actual);
    return buf;
}
function fromArrayLike(array) {
    const length = array.length < 0 ? 0 : checked(array.length) | 0;
    const buf = createBuffer(length);
    for(let i = 0; i < length; i += 1)buf[i] = array[i] & 255;
    return buf;
}
function fromArrayView(arrayView) {
    if (isInstance(arrayView, Uint8Array)) {
        const copy = new Uint8Array(arrayView);
        return fromArrayBuffer(copy.buffer, copy.byteOffset, copy.byteLength);
    }
    return fromArrayLike(arrayView);
}
function fromArrayBuffer(array, byteOffset, length) {
    if (byteOffset < 0 || array.byteLength < byteOffset) throw new RangeError('"offset" is outside of buffer bounds');
    if (array.byteLength < byteOffset + (length || 0)) throw new RangeError('"length" is outside of buffer bounds');
    let buf;
    if (byteOffset === undefined && length === undefined) buf = new Uint8Array(array);
    else if (length === undefined) buf = new Uint8Array(array, byteOffset);
    else buf = new Uint8Array(array, byteOffset, length);
    // Return an augmented `Uint8Array` instance
    Object.setPrototypeOf(buf, Buffer.prototype);
    return buf;
}
function fromObject(obj) {
    if (Buffer.isBuffer(obj)) {
        const len = checked(obj.length) | 0;
        const buf = createBuffer(len);
        if (buf.length === 0) return buf;
        obj.copy(buf, 0, 0, len);
        return buf;
    }
    if (obj.length !== undefined) {
        if (typeof obj.length !== "number" || numberIsNaN(obj.length)) return createBuffer(0);
        return fromArrayLike(obj);
    }
    if (obj.type === "Buffer" && Array.isArray(obj.data)) return fromArrayLike(obj.data);
}
function checked(length) {
    // Note: cannot use `length < K_MAX_LENGTH` here because that fails when
    // length is NaN (which is otherwise coerced to zero.)
    if (length >= K_MAX_LENGTH) throw new RangeError("Attempt to allocate Buffer larger than maximum size: 0x" + K_MAX_LENGTH.toString(16) + " bytes");
    return length | 0;
}
function SlowBuffer(length) {
    if (+length != length) length = 0;
    return Buffer.alloc(+length);
}
Buffer.isBuffer = function isBuffer(b) {
    return b != null && b._isBuffer === true && b !== Buffer.prototype // so Buffer.isBuffer(Buffer.prototype) will be false
    ;
};
Buffer.compare = function compare(a, b) {
    if (isInstance(a, Uint8Array)) a = Buffer.from(a, a.offset, a.byteLength);
    if (isInstance(b, Uint8Array)) b = Buffer.from(b, b.offset, b.byteLength);
    if (!Buffer.isBuffer(a) || !Buffer.isBuffer(b)) throw new TypeError('The "buf1", "buf2" arguments must be one of type Buffer or Uint8Array');
    if (a === b) return 0;
    let x = a.length;
    let y = b.length;
    for(let i = 0, len = Math.min(x, y); i < len; ++i)if (a[i] !== b[i]) {
        x = a[i];
        y = b[i];
        break;
    }
    if (x < y) return -1;
    if (y < x) return 1;
    return 0;
};
Buffer.isEncoding = function isEncoding(encoding) {
    switch(String(encoding).toLowerCase()){
        case "hex":
        case "utf8":
        case "utf-8":
        case "ascii":
        case "latin1":
        case "binary":
        case "base64":
        case "ucs2":
        case "ucs-2":
        case "utf16le":
        case "utf-16le":
            return true;
        default:
            return false;
    }
};
Buffer.concat = function concat(list, length) {
    if (!Array.isArray(list)) throw new TypeError('"list" argument must be an Array of Buffers');
    if (list.length === 0) return Buffer.alloc(0);
    let i;
    if (length === undefined) {
        length = 0;
        for(i = 0; i < list.length; ++i)length += list[i].length;
    }
    const buffer = Buffer.allocUnsafe(length);
    let pos = 0;
    for(i = 0; i < list.length; ++i){
        let buf = list[i];
        if (isInstance(buf, Uint8Array)) {
            if (pos + buf.length > buffer.length) {
                if (!Buffer.isBuffer(buf)) buf = Buffer.from(buf);
                buf.copy(buffer, pos);
            } else Uint8Array.prototype.set.call(buffer, buf, pos);
        } else if (!Buffer.isBuffer(buf)) throw new TypeError('"list" argument must be an Array of Buffers');
        else buf.copy(buffer, pos);
        pos += buf.length;
    }
    return buffer;
};
function byteLength(string, encoding) {
    if (Buffer.isBuffer(string)) return string.length;
    if (ArrayBuffer.isView(string) || isInstance(string, ArrayBuffer)) return string.byteLength;
    if (typeof string !== "string") throw new TypeError('The "string" argument must be one of type string, Buffer, or ArrayBuffer. Received type ' + typeof string);
    const len = string.length;
    const mustMatch = arguments.length > 2 && arguments[2] === true;
    if (!mustMatch && len === 0) return 0;
    // Use a for loop to avoid recursion
    let loweredCase = false;
    for(;;)switch(encoding){
        case "ascii":
        case "latin1":
        case "binary":
            return len;
        case "utf8":
        case "utf-8":
            return utf8ToBytes(string).length;
        case "ucs2":
        case "ucs-2":
        case "utf16le":
        case "utf-16le":
            return len * 2;
        case "hex":
            return len >>> 1;
        case "base64":
            return base64ToBytes(string).length;
        default:
            if (loweredCase) return mustMatch ? -1 : utf8ToBytes(string).length // assume utf8
            ;
            encoding = ("" + encoding).toLowerCase();
            loweredCase = true;
    }
}
Buffer.byteLength = byteLength;
function slowToString(encoding, start, end) {
    let loweredCase = false;
    // No need to verify that "this.length <= MAX_UINT32" since it's a read-only
    // property of a typed array.
    // This behaves neither like String nor Uint8Array in that we set start/end
    // to their upper/lower bounds if the value passed is out of range.
    // undefined is handled specially as per ECMA-262 6th Edition,
    // Section 13.3.3.7 Runtime Semantics: KeyedBindingInitialization.
    if (start === undefined || start < 0) start = 0;
    // Return early if start > this.length. Done here to prevent potential uint32
    // coercion fail below.
    if (start > this.length) return "";
    if (end === undefined || end > this.length) end = this.length;
    if (end <= 0) return "";
    // Force coercion to uint32. This will also coerce falsey/NaN values to 0.
    end >>>= 0;
    start >>>= 0;
    if (end <= start) return "";
    if (!encoding) encoding = "utf8";
    while(true)switch(encoding){
        case "hex":
            return hexSlice(this, start, end);
        case "utf8":
        case "utf-8":
            return utf8Slice(this, start, end);
        case "ascii":
            return asciiSlice(this, start, end);
        case "latin1":
        case "binary":
            return latin1Slice(this, start, end);
        case "base64":
            return base64Slice(this, start, end);
        case "ucs2":
        case "ucs-2":
        case "utf16le":
        case "utf-16le":
            return utf16leSlice(this, start, end);
        default:
            if (loweredCase) throw new TypeError("Unknown encoding: " + encoding);
            encoding = (encoding + "").toLowerCase();
            loweredCase = true;
    }
}
// This property is used by `Buffer.isBuffer` (and the `is-buffer` npm package)
// to detect a Buffer instance. It's not possible to use `instanceof Buffer`
// reliably in a browserify context because there could be multiple different
// copies of the 'buffer' package in use. This method works even for Buffer
// instances that were created from another copy of the `buffer` package.
// See: https://github.com/feross/buffer/issues/154
Buffer.prototype._isBuffer = true;
function swap(b, n, m) {
    const i = b[n];
    b[n] = b[m];
    b[m] = i;
}
Buffer.prototype.swap16 = function swap16() {
    const len = this.length;
    if (len % 2 !== 0) throw new RangeError("Buffer size must be a multiple of 16-bits");
    for(let i = 0; i < len; i += 2)swap(this, i, i + 1);
    return this;
};
Buffer.prototype.swap32 = function swap32() {
    const len = this.length;
    if (len % 4 !== 0) throw new RangeError("Buffer size must be a multiple of 32-bits");
    for(let i = 0; i < len; i += 4){
        swap(this, i, i + 3);
        swap(this, i + 1, i + 2);
    }
    return this;
};
Buffer.prototype.swap64 = function swap64() {
    const len = this.length;
    if (len % 8 !== 0) throw new RangeError("Buffer size must be a multiple of 64-bits");
    for(let i = 0; i < len; i += 8){
        swap(this, i, i + 7);
        swap(this, i + 1, i + 6);
        swap(this, i + 2, i + 5);
        swap(this, i + 3, i + 4);
    }
    return this;
};
Buffer.prototype.toString = function toString() {
    const length = this.length;
    if (length === 0) return "";
    if (arguments.length === 0) return utf8Slice(this, 0, length);
    return slowToString.apply(this, arguments);
};
Buffer.prototype.toLocaleString = Buffer.prototype.toString;
Buffer.prototype.equals = function equals(b) {
    if (!Buffer.isBuffer(b)) throw new TypeError("Argument must be a Buffer");
    if (this === b) return true;
    return Buffer.compare(this, b) === 0;
};
Buffer.prototype.inspect = function inspect() {
    let str = "";
    const max = exports.INSPECT_MAX_BYTES;
    str = this.toString("hex", 0, max).replace(/(.{2})/g, "$1 ").trim();
    if (this.length > max) str += " ... ";
    return "<Buffer " + str + ">";
};
if (customInspectSymbol) Buffer.prototype[customInspectSymbol] = Buffer.prototype.inspect;
Buffer.prototype.compare = function compare(target, start, end, thisStart, thisEnd) {
    if (isInstance(target, Uint8Array)) target = Buffer.from(target, target.offset, target.byteLength);
    if (!Buffer.isBuffer(target)) throw new TypeError('The "target" argument must be one of type Buffer or Uint8Array. Received type ' + typeof target);
    if (start === undefined) start = 0;
    if (end === undefined) end = target ? target.length : 0;
    if (thisStart === undefined) thisStart = 0;
    if (thisEnd === undefined) thisEnd = this.length;
    if (start < 0 || end > target.length || thisStart < 0 || thisEnd > this.length) throw new RangeError("out of range index");
    if (thisStart >= thisEnd && start >= end) return 0;
    if (thisStart >= thisEnd) return -1;
    if (start >= end) return 1;
    start >>>= 0;
    end >>>= 0;
    thisStart >>>= 0;
    thisEnd >>>= 0;
    if (this === target) return 0;
    let x = thisEnd - thisStart;
    let y = end - start;
    const len = Math.min(x, y);
    const thisCopy = this.slice(thisStart, thisEnd);
    const targetCopy = target.slice(start, end);
    for(let i = 0; i < len; ++i)if (thisCopy[i] !== targetCopy[i]) {
        x = thisCopy[i];
        y = targetCopy[i];
        break;
    }
    if (x < y) return -1;
    if (y < x) return 1;
    return 0;
};
// Finds either the first index of `val` in `buffer` at offset >= `byteOffset`,
// OR the last index of `val` in `buffer` at offset <= `byteOffset`.
//
// Arguments:
// - buffer - a Buffer to search
// - val - a string, Buffer, or number
// - byteOffset - an index into `buffer`; will be clamped to an int32
// - encoding - an optional encoding, relevant is val is a string
// - dir - true for indexOf, false for lastIndexOf
function bidirectionalIndexOf(buffer, val, byteOffset, encoding, dir) {
    // Empty buffer means no match
    if (buffer.length === 0) return -1;
    // Normalize byteOffset
    if (typeof byteOffset === "string") {
        encoding = byteOffset;
        byteOffset = 0;
    } else if (byteOffset > 0x7fffffff) byteOffset = 0x7fffffff;
    else if (byteOffset < -2147483648) byteOffset = -2147483648;
    byteOffset = +byteOffset // Coerce to Number.
    ;
    if (numberIsNaN(byteOffset)) // byteOffset: it it's undefined, null, NaN, "foo", etc, search whole buffer
    byteOffset = dir ? 0 : buffer.length - 1;
    // Normalize byteOffset: negative offsets start from the end of the buffer
    if (byteOffset < 0) byteOffset = buffer.length + byteOffset;
    if (byteOffset >= buffer.length) {
        if (dir) return -1;
        else byteOffset = buffer.length - 1;
    } else if (byteOffset < 0) {
        if (dir) byteOffset = 0;
        else return -1;
    }
    // Normalize val
    if (typeof val === "string") val = Buffer.from(val, encoding);
    // Finally, search either indexOf (if dir is true) or lastIndexOf
    if (Buffer.isBuffer(val)) {
        // Special case: looking for empty string/buffer always fails
        if (val.length === 0) return -1;
        return arrayIndexOf(buffer, val, byteOffset, encoding, dir);
    } else if (typeof val === "number") {
        val = val & 0xFF // Search for a byte value [0-255]
        ;
        if (typeof Uint8Array.prototype.indexOf === "function") {
            if (dir) return Uint8Array.prototype.indexOf.call(buffer, val, byteOffset);
            else return Uint8Array.prototype.lastIndexOf.call(buffer, val, byteOffset);
        }
        return arrayIndexOf(buffer, [
            val
        ], byteOffset, encoding, dir);
    }
    throw new TypeError("val must be string, number or Buffer");
}
function arrayIndexOf(arr, val, byteOffset, encoding, dir) {
    let indexSize = 1;
    let arrLength = arr.length;
    let valLength = val.length;
    if (encoding !== undefined) {
        encoding = String(encoding).toLowerCase();
        if (encoding === "ucs2" || encoding === "ucs-2" || encoding === "utf16le" || encoding === "utf-16le") {
            if (arr.length < 2 || val.length < 2) return -1;
            indexSize = 2;
            arrLength /= 2;
            valLength /= 2;
            byteOffset /= 2;
        }
    }
    function read(buf, i) {
        if (indexSize === 1) return buf[i];
        else return buf.readUInt16BE(i * indexSize);
    }
    let i1;
    if (dir) {
        let foundIndex = -1;
        for(i1 = byteOffset; i1 < arrLength; i1++)if (read(arr, i1) === read(val, foundIndex === -1 ? 0 : i1 - foundIndex)) {
            if (foundIndex === -1) foundIndex = i1;
            if (i1 - foundIndex + 1 === valLength) return foundIndex * indexSize;
        } else {
            if (foundIndex !== -1) i1 -= i1 - foundIndex;
            foundIndex = -1;
        }
    } else {
        if (byteOffset + valLength > arrLength) byteOffset = arrLength - valLength;
        for(i1 = byteOffset; i1 >= 0; i1--){
            let found = true;
            for(let j = 0; j < valLength; j++)if (read(arr, i1 + j) !== read(val, j)) {
                found = false;
                break;
            }
            if (found) return i1;
        }
    }
    return -1;
}
Buffer.prototype.includes = function includes(val, byteOffset, encoding) {
    return this.indexOf(val, byteOffset, encoding) !== -1;
};
Buffer.prototype.indexOf = function indexOf(val, byteOffset, encoding) {
    return bidirectionalIndexOf(this, val, byteOffset, encoding, true);
};
Buffer.prototype.lastIndexOf = function lastIndexOf(val, byteOffset, encoding) {
    return bidirectionalIndexOf(this, val, byteOffset, encoding, false);
};
function hexWrite(buf, string, offset, length) {
    offset = Number(offset) || 0;
    const remaining = buf.length - offset;
    if (!length) length = remaining;
    else {
        length = Number(length);
        if (length > remaining) length = remaining;
    }
    const strLen = string.length;
    if (length > strLen / 2) length = strLen / 2;
    let i;
    for(i = 0; i < length; ++i){
        const parsed = parseInt(string.substr(i * 2, 2), 16);
        if (numberIsNaN(parsed)) return i;
        buf[offset + i] = parsed;
    }
    return i;
}
function utf8Write(buf, string, offset, length) {
    return blitBuffer(utf8ToBytes(string, buf.length - offset), buf, offset, length);
}
function asciiWrite(buf, string, offset, length) {
    return blitBuffer(asciiToBytes(string), buf, offset, length);
}
function base64Write(buf, string, offset, length) {
    return blitBuffer(base64ToBytes(string), buf, offset, length);
}
function ucs2Write(buf, string, offset, length) {
    return blitBuffer(utf16leToBytes(string, buf.length - offset), buf, offset, length);
}
Buffer.prototype.write = function write(string, offset, length, encoding) {
    // Buffer#write(string)
    if (offset === undefined) {
        encoding = "utf8";
        length = this.length;
        offset = 0;
    // Buffer#write(string, encoding)
    } else if (length === undefined && typeof offset === "string") {
        encoding = offset;
        length = this.length;
        offset = 0;
    // Buffer#write(string, offset[, length][, encoding])
    } else if (isFinite(offset)) {
        offset = offset >>> 0;
        if (isFinite(length)) {
            length = length >>> 0;
            if (encoding === undefined) encoding = "utf8";
        } else {
            encoding = length;
            length = undefined;
        }
    } else throw new Error("Buffer.write(string, encoding, offset[, length]) is no longer supported");
    const remaining = this.length - offset;
    if (length === undefined || length > remaining) length = remaining;
    if (string.length > 0 && (length < 0 || offset < 0) || offset > this.length) throw new RangeError("Attempt to write outside buffer bounds");
    if (!encoding) encoding = "utf8";
    let loweredCase = false;
    for(;;)switch(encoding){
        case "hex":
            return hexWrite(this, string, offset, length);
        case "utf8":
        case "utf-8":
            return utf8Write(this, string, offset, length);
        case "ascii":
        case "latin1":
        case "binary":
            return asciiWrite(this, string, offset, length);
        case "base64":
            // Warning: maxLength not taken into account in base64Write
            return base64Write(this, string, offset, length);
        case "ucs2":
        case "ucs-2":
        case "utf16le":
        case "utf-16le":
            return ucs2Write(this, string, offset, length);
        default:
            if (loweredCase) throw new TypeError("Unknown encoding: " + encoding);
            encoding = ("" + encoding).toLowerCase();
            loweredCase = true;
    }
};
Buffer.prototype.toJSON = function toJSON() {
    return {
        type: "Buffer",
        data: Array.prototype.slice.call(this._arr || this, 0)
    };
};
function base64Slice(buf, start, end) {
    if (start === 0 && end === buf.length) return base64.fromByteArray(buf);
    else return base64.fromByteArray(buf.slice(start, end));
}
function utf8Slice(buf, start, end) {
    end = Math.min(buf.length, end);
    const res = [];
    let i = start;
    while(i < end){
        const firstByte = buf[i];
        let codePoint = null;
        let bytesPerSequence = firstByte > 0xEF ? 4 : firstByte > 0xDF ? 3 : firstByte > 0xBF ? 2 : 1;
        if (i + bytesPerSequence <= end) {
            let secondByte, thirdByte, fourthByte, tempCodePoint;
            switch(bytesPerSequence){
                case 1:
                    if (firstByte < 0x80) codePoint = firstByte;
                    break;
                case 2:
                    secondByte = buf[i + 1];
                    if ((secondByte & 0xC0) === 0x80) {
                        tempCodePoint = (firstByte & 0x1F) << 0x6 | secondByte & 0x3F;
                        if (tempCodePoint > 0x7F) codePoint = tempCodePoint;
                    }
                    break;
                case 3:
                    secondByte = buf[i + 1];
                    thirdByte = buf[i + 2];
                    if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80) {
                        tempCodePoint = (firstByte & 0xF) << 0xC | (secondByte & 0x3F) << 0x6 | thirdByte & 0x3F;
                        if (tempCodePoint > 0x7FF && (tempCodePoint < 0xD800 || tempCodePoint > 0xDFFF)) codePoint = tempCodePoint;
                    }
                    break;
                case 4:
                    secondByte = buf[i + 1];
                    thirdByte = buf[i + 2];
                    fourthByte = buf[i + 3];
                    if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80 && (fourthByte & 0xC0) === 0x80) {
                        tempCodePoint = (firstByte & 0xF) << 0x12 | (secondByte & 0x3F) << 0xC | (thirdByte & 0x3F) << 0x6 | fourthByte & 0x3F;
                        if (tempCodePoint > 0xFFFF && tempCodePoint < 0x110000) codePoint = tempCodePoint;
                    }
            }
        }
        if (codePoint === null) {
            // we did not generate a valid codePoint so insert a
            // replacement char (U+FFFD) and advance only 1 byte
            codePoint = 0xFFFD;
            bytesPerSequence = 1;
        } else if (codePoint > 0xFFFF) {
            // encode to utf16 (surrogate pair dance)
            codePoint -= 0x10000;
            res.push(codePoint >>> 10 & 0x3FF | 0xD800);
            codePoint = 0xDC00 | codePoint & 0x3FF;
        }
        res.push(codePoint);
        i += bytesPerSequence;
    }
    return decodeCodePointsArray(res);
}
// Based on http://stackoverflow.com/a/22747272/680742, the browser with
// the lowest limit is Chrome, with 0x10000 args.
// We go 1 magnitude less, for safety
const MAX_ARGUMENTS_LENGTH = 0x1000;
function decodeCodePointsArray(codePoints) {
    const len = codePoints.length;
    if (len <= MAX_ARGUMENTS_LENGTH) return String.fromCharCode.apply(String, codePoints) // avoid extra slice()
    ;
    // Decode in chunks to avoid "call stack size exceeded".
    let res = "";
    let i = 0;
    while(i < len)res += String.fromCharCode.apply(String, codePoints.slice(i, i += MAX_ARGUMENTS_LENGTH));
    return res;
}
function asciiSlice(buf, start, end) {
    let ret = "";
    end = Math.min(buf.length, end);
    for(let i = start; i < end; ++i)ret += String.fromCharCode(buf[i] & 0x7F);
    return ret;
}
function latin1Slice(buf, start, end) {
    let ret = "";
    end = Math.min(buf.length, end);
    for(let i = start; i < end; ++i)ret += String.fromCharCode(buf[i]);
    return ret;
}
function hexSlice(buf, start, end) {
    const len = buf.length;
    if (!start || start < 0) start = 0;
    if (!end || end < 0 || end > len) end = len;
    let out = "";
    for(let i = start; i < end; ++i)out += hexSliceLookupTable[buf[i]];
    return out;
}
function utf16leSlice(buf, start, end) {
    const bytes = buf.slice(start, end);
    let res = "";
    // If bytes.length is odd, the last 8 bits must be ignored (same as node.js)
    for(let i = 0; i < bytes.length - 1; i += 2)res += String.fromCharCode(bytes[i] + bytes[i + 1] * 256);
    return res;
}
Buffer.prototype.slice = function slice(start, end) {
    const len = this.length;
    start = ~~start;
    end = end === undefined ? len : ~~end;
    if (start < 0) {
        start += len;
        if (start < 0) start = 0;
    } else if (start > len) start = len;
    if (end < 0) {
        end += len;
        if (end < 0) end = 0;
    } else if (end > len) end = len;
    if (end < start) end = start;
    const newBuf = this.subarray(start, end);
    // Return an augmented `Uint8Array` instance
    Object.setPrototypeOf(newBuf, Buffer.prototype);
    return newBuf;
};
/*
 * Need to make sure that buffer isn't trying to write out of bounds.
 */ function checkOffset(offset, ext, length) {
    if (offset % 1 !== 0 || offset < 0) throw new RangeError("offset is not uint");
    if (offset + ext > length) throw new RangeError("Trying to access beyond buffer length");
}
Buffer.prototype.readUintLE = Buffer.prototype.readUIntLE = function readUIntLE(offset, byteLength1, noAssert) {
    offset = offset >>> 0;
    byteLength1 = byteLength1 >>> 0;
    if (!noAssert) checkOffset(offset, byteLength1, this.length);
    let val = this[offset];
    let mul = 1;
    let i = 0;
    while(++i < byteLength1 && (mul *= 0x100))val += this[offset + i] * mul;
    return val;
};
Buffer.prototype.readUintBE = Buffer.prototype.readUIntBE = function readUIntBE(offset, byteLength2, noAssert) {
    offset = offset >>> 0;
    byteLength2 = byteLength2 >>> 0;
    if (!noAssert) checkOffset(offset, byteLength2, this.length);
    let val = this[offset + --byteLength2];
    let mul = 1;
    while(byteLength2 > 0 && (mul *= 0x100))val += this[offset + --byteLength2] * mul;
    return val;
};
Buffer.prototype.readUint8 = Buffer.prototype.readUInt8 = function readUInt8(offset, noAssert) {
    offset = offset >>> 0;
    if (!noAssert) checkOffset(offset, 1, this.length);
    return this[offset];
};
Buffer.prototype.readUint16LE = Buffer.prototype.readUInt16LE = function readUInt16LE(offset, noAssert) {
    offset = offset >>> 0;
    if (!noAssert) checkOffset(offset, 2, this.length);
    return this[offset] | this[offset + 1] << 8;
};
Buffer.prototype.readUint16BE = Buffer.prototype.readUInt16BE = function readUInt16BE(offset, noAssert) {
    offset = offset >>> 0;
    if (!noAssert) checkOffset(offset, 2, this.length);
    return this[offset] << 8 | this[offset + 1];
};
Buffer.prototype.readUint32LE = Buffer.prototype.readUInt32LE = function readUInt32LE(offset, noAssert) {
    offset = offset >>> 0;
    if (!noAssert) checkOffset(offset, 4, this.length);
    return (this[offset] | this[offset + 1] << 8 | this[offset + 2] << 16) + this[offset + 3] * 0x1000000;
};
Buffer.prototype.readUint32BE = Buffer.prototype.readUInt32BE = function readUInt32BE(offset, noAssert) {
    offset = offset >>> 0;
    if (!noAssert) checkOffset(offset, 4, this.length);
    return this[offset] * 0x1000000 + (this[offset + 1] << 16 | this[offset + 2] << 8 | this[offset + 3]);
};
Buffer.prototype.readBigUInt64LE = defineBigIntMethod(function readBigUInt64LE(offset) {
    offset = offset >>> 0;
    validateNumber(offset, "offset");
    const first = this[offset];
    const last = this[offset + 7];
    if (first === undefined || last === undefined) boundsError(offset, this.length - 8);
    const lo = first + this[++offset] * 256 + this[++offset] * 65536 + this[++offset] * 2 ** 24;
    const hi = this[++offset] + this[++offset] * 256 + this[++offset] * 65536 + last * 2 ** 24;
    return BigInt(lo) + (BigInt(hi) << BigInt(32));
});
Buffer.prototype.readBigUInt64BE = defineBigIntMethod(function readBigUInt64BE(offset) {
    offset = offset >>> 0;
    validateNumber(offset, "offset");
    const first = this[offset];
    const last = this[offset + 7];
    if (first === undefined || last === undefined) boundsError(offset, this.length - 8);
    const hi = first * 2 ** 24 + this[++offset] * 65536 + this[++offset] * 256 + this[++offset];
    const lo = this[++offset] * 2 ** 24 + this[++offset] * 65536 + this[++offset] * 256 + last;
    return (BigInt(hi) << BigInt(32)) + BigInt(lo);
});
Buffer.prototype.readIntLE = function readIntLE(offset, byteLength3, noAssert) {
    offset = offset >>> 0;
    byteLength3 = byteLength3 >>> 0;
    if (!noAssert) checkOffset(offset, byteLength3, this.length);
    let val = this[offset];
    let mul = 1;
    let i = 0;
    while(++i < byteLength3 && (mul *= 0x100))val += this[offset + i] * mul;
    mul *= 0x80;
    if (val >= mul) val -= Math.pow(2, 8 * byteLength3);
    return val;
};
Buffer.prototype.readIntBE = function readIntBE(offset, byteLength4, noAssert) {
    offset = offset >>> 0;
    byteLength4 = byteLength4 >>> 0;
    if (!noAssert) checkOffset(offset, byteLength4, this.length);
    let i = byteLength4;
    let mul = 1;
    let val = this[offset + --i];
    while(i > 0 && (mul *= 0x100))val += this[offset + --i] * mul;
    mul *= 0x80;
    if (val >= mul) val -= Math.pow(2, 8 * byteLength4);
    return val;
};
Buffer.prototype.readInt8 = function readInt8(offset, noAssert) {
    offset = offset >>> 0;
    if (!noAssert) checkOffset(offset, 1, this.length);
    if (!(this[offset] & 0x80)) return this[offset];
    return (0xff - this[offset] + 1) * -1;
};
Buffer.prototype.readInt16LE = function readInt16LE(offset, noAssert) {
    offset = offset >>> 0;
    if (!noAssert) checkOffset(offset, 2, this.length);
    const val = this[offset] | this[offset + 1] << 8;
    return val & 0x8000 ? val | 0xFFFF0000 : val;
};
Buffer.prototype.readInt16BE = function readInt16BE(offset, noAssert) {
    offset = offset >>> 0;
    if (!noAssert) checkOffset(offset, 2, this.length);
    const val = this[offset + 1] | this[offset] << 8;
    return val & 0x8000 ? val | 0xFFFF0000 : val;
};
Buffer.prototype.readInt32LE = function readInt32LE(offset, noAssert) {
    offset = offset >>> 0;
    if (!noAssert) checkOffset(offset, 4, this.length);
    return this[offset] | this[offset + 1] << 8 | this[offset + 2] << 16 | this[offset + 3] << 24;
};
Buffer.prototype.readInt32BE = function readInt32BE(offset, noAssert) {
    offset = offset >>> 0;
    if (!noAssert) checkOffset(offset, 4, this.length);
    return this[offset] << 24 | this[offset + 1] << 16 | this[offset + 2] << 8 | this[offset + 3];
};
Buffer.prototype.readBigInt64LE = defineBigIntMethod(function readBigInt64LE(offset) {
    offset = offset >>> 0;
    validateNumber(offset, "offset");
    const first = this[offset];
    const last = this[offset + 7];
    if (first === undefined || last === undefined) boundsError(offset, this.length - 8);
    const val = this[offset + 4] + this[offset + 5] * 256 + this[offset + 6] * 65536 + (last << 24 // Overflow
    );
    return (BigInt(val) << BigInt(32)) + BigInt(first + this[++offset] * 256 + this[++offset] * 65536 + this[++offset] * 2 ** 24);
});
Buffer.prototype.readBigInt64BE = defineBigIntMethod(function readBigInt64BE(offset) {
    offset = offset >>> 0;
    validateNumber(offset, "offset");
    const first = this[offset];
    const last = this[offset + 7];
    if (first === undefined || last === undefined) boundsError(offset, this.length - 8);
    const val = (first << 24) + this[++offset] * 65536 + this[++offset] * 256 + this[++offset];
    return (BigInt(val) << BigInt(32)) + BigInt(this[++offset] * 2 ** 24 + this[++offset] * 65536 + this[++offset] * 256 + last);
});
Buffer.prototype.readFloatLE = function readFloatLE(offset, noAssert) {
    offset = offset >>> 0;
    if (!noAssert) checkOffset(offset, 4, this.length);
    return ieee754.read(this, offset, true, 23, 4);
};
Buffer.prototype.readFloatBE = function readFloatBE(offset, noAssert) {
    offset = offset >>> 0;
    if (!noAssert) checkOffset(offset, 4, this.length);
    return ieee754.read(this, offset, false, 23, 4);
};
Buffer.prototype.readDoubleLE = function readDoubleLE(offset, noAssert) {
    offset = offset >>> 0;
    if (!noAssert) checkOffset(offset, 8, this.length);
    return ieee754.read(this, offset, true, 52, 8);
};
Buffer.prototype.readDoubleBE = function readDoubleBE(offset, noAssert) {
    offset = offset >>> 0;
    if (!noAssert) checkOffset(offset, 8, this.length);
    return ieee754.read(this, offset, false, 52, 8);
};
function checkInt(buf, value, offset, ext, max, min) {
    if (!Buffer.isBuffer(buf)) throw new TypeError('"buffer" argument must be a Buffer instance');
    if (value > max || value < min) throw new RangeError('"value" argument is out of bounds');
    if (offset + ext > buf.length) throw new RangeError("Index out of range");
}
Buffer.prototype.writeUintLE = Buffer.prototype.writeUIntLE = function writeUIntLE(value, offset, byteLength5, noAssert) {
    value = +value;
    offset = offset >>> 0;
    byteLength5 = byteLength5 >>> 0;
    if (!noAssert) {
        const maxBytes = Math.pow(2, 8 * byteLength5) - 1;
        checkInt(this, value, offset, byteLength5, maxBytes, 0);
    }
    let mul = 1;
    let i = 0;
    this[offset] = value & 0xFF;
    while(++i < byteLength5 && (mul *= 0x100))this[offset + i] = value / mul & 0xFF;
    return offset + byteLength5;
};
Buffer.prototype.writeUintBE = Buffer.prototype.writeUIntBE = function writeUIntBE(value, offset, byteLength6, noAssert) {
    value = +value;
    offset = offset >>> 0;
    byteLength6 = byteLength6 >>> 0;
    if (!noAssert) {
        const maxBytes = Math.pow(2, 8 * byteLength6) - 1;
        checkInt(this, value, offset, byteLength6, maxBytes, 0);
    }
    let i = byteLength6 - 1;
    let mul = 1;
    this[offset + i] = value & 0xFF;
    while(--i >= 0 && (mul *= 0x100))this[offset + i] = value / mul & 0xFF;
    return offset + byteLength6;
};
Buffer.prototype.writeUint8 = Buffer.prototype.writeUInt8 = function writeUInt8(value, offset, noAssert) {
    value = +value;
    offset = offset >>> 0;
    if (!noAssert) checkInt(this, value, offset, 1, 0xff, 0);
    this[offset] = value & 0xff;
    return offset + 1;
};
Buffer.prototype.writeUint16LE = Buffer.prototype.writeUInt16LE = function writeUInt16LE(value, offset, noAssert) {
    value = +value;
    offset = offset >>> 0;
    if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0);
    this[offset] = value & 0xff;
    this[offset + 1] = value >>> 8;
    return offset + 2;
};
Buffer.prototype.writeUint16BE = Buffer.prototype.writeUInt16BE = function writeUInt16BE(value, offset, noAssert) {
    value = +value;
    offset = offset >>> 0;
    if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0);
    this[offset] = value >>> 8;
    this[offset + 1] = value & 0xff;
    return offset + 2;
};
Buffer.prototype.writeUint32LE = Buffer.prototype.writeUInt32LE = function writeUInt32LE(value, offset, noAssert) {
    value = +value;
    offset = offset >>> 0;
    if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0);
    this[offset + 3] = value >>> 24;
    this[offset + 2] = value >>> 16;
    this[offset + 1] = value >>> 8;
    this[offset] = value & 0xff;
    return offset + 4;
};
Buffer.prototype.writeUint32BE = Buffer.prototype.writeUInt32BE = function writeUInt32BE(value, offset, noAssert) {
    value = +value;
    offset = offset >>> 0;
    if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0);
    this[offset] = value >>> 24;
    this[offset + 1] = value >>> 16;
    this[offset + 2] = value >>> 8;
    this[offset + 3] = value & 0xff;
    return offset + 4;
};
function wrtBigUInt64LE(buf, value, offset, min, max) {
    checkIntBI(value, min, max, buf, offset, 7);
    let lo = Number(value & BigInt(0xffffffff));
    buf[offset++] = lo;
    lo = lo >> 8;
    buf[offset++] = lo;
    lo = lo >> 8;
    buf[offset++] = lo;
    lo = lo >> 8;
    buf[offset++] = lo;
    let hi = Number(value >> BigInt(32) & BigInt(0xffffffff));
    buf[offset++] = hi;
    hi = hi >> 8;
    buf[offset++] = hi;
    hi = hi >> 8;
    buf[offset++] = hi;
    hi = hi >> 8;
    buf[offset++] = hi;
    return offset;
}
function wrtBigUInt64BE(buf, value, offset, min, max) {
    checkIntBI(value, min, max, buf, offset, 7);
    let lo = Number(value & BigInt(0xffffffff));
    buf[offset + 7] = lo;
    lo = lo >> 8;
    buf[offset + 6] = lo;
    lo = lo >> 8;
    buf[offset + 5] = lo;
    lo = lo >> 8;
    buf[offset + 4] = lo;
    let hi = Number(value >> BigInt(32) & BigInt(0xffffffff));
    buf[offset + 3] = hi;
    hi = hi >> 8;
    buf[offset + 2] = hi;
    hi = hi >> 8;
    buf[offset + 1] = hi;
    hi = hi >> 8;
    buf[offset] = hi;
    return offset + 8;
}
Buffer.prototype.writeBigUInt64LE = defineBigIntMethod(function writeBigUInt64LE(value, offset = 0) {
    return wrtBigUInt64LE(this, value, offset, BigInt(0), BigInt("0xffffffffffffffff"));
});
Buffer.prototype.writeBigUInt64BE = defineBigIntMethod(function writeBigUInt64BE(value, offset = 0) {
    return wrtBigUInt64BE(this, value, offset, BigInt(0), BigInt("0xffffffffffffffff"));
});
Buffer.prototype.writeIntLE = function writeIntLE(value, offset, byteLength7, noAssert) {
    value = +value;
    offset = offset >>> 0;
    if (!noAssert) {
        const limit = Math.pow(2, 8 * byteLength7 - 1);
        checkInt(this, value, offset, byteLength7, limit - 1, -limit);
    }
    let i = 0;
    let mul = 1;
    let sub = 0;
    this[offset] = value & 0xFF;
    while(++i < byteLength7 && (mul *= 0x100)){
        if (value < 0 && sub === 0 && this[offset + i - 1] !== 0) sub = 1;
        this[offset + i] = (value / mul >> 0) - sub & 0xFF;
    }
    return offset + byteLength7;
};
Buffer.prototype.writeIntBE = function writeIntBE(value, offset, byteLength8, noAssert) {
    value = +value;
    offset = offset >>> 0;
    if (!noAssert) {
        const limit = Math.pow(2, 8 * byteLength8 - 1);
        checkInt(this, value, offset, byteLength8, limit - 1, -limit);
    }
    let i = byteLength8 - 1;
    let mul = 1;
    let sub = 0;
    this[offset + i] = value & 0xFF;
    while(--i >= 0 && (mul *= 0x100)){
        if (value < 0 && sub === 0 && this[offset + i + 1] !== 0) sub = 1;
        this[offset + i] = (value / mul >> 0) - sub & 0xFF;
    }
    return offset + byteLength8;
};
Buffer.prototype.writeInt8 = function writeInt8(value, offset, noAssert) {
    value = +value;
    offset = offset >>> 0;
    if (!noAssert) checkInt(this, value, offset, 1, 0x7f, -128);
    if (value < 0) value = 0xff + value + 1;
    this[offset] = value & 0xff;
    return offset + 1;
};
Buffer.prototype.writeInt16LE = function writeInt16LE(value, offset, noAssert) {
    value = +value;
    offset = offset >>> 0;
    if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -32768);
    this[offset] = value & 0xff;
    this[offset + 1] = value >>> 8;
    return offset + 2;
};
Buffer.prototype.writeInt16BE = function writeInt16BE(value, offset, noAssert) {
    value = +value;
    offset = offset >>> 0;
    if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -32768);
    this[offset] = value >>> 8;
    this[offset + 1] = value & 0xff;
    return offset + 2;
};
Buffer.prototype.writeInt32LE = function writeInt32LE(value, offset, noAssert) {
    value = +value;
    offset = offset >>> 0;
    if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -2147483648);
    this[offset] = value & 0xff;
    this[offset + 1] = value >>> 8;
    this[offset + 2] = value >>> 16;
    this[offset + 3] = value >>> 24;
    return offset + 4;
};
Buffer.prototype.writeInt32BE = function writeInt32BE(value, offset, noAssert) {
    value = +value;
    offset = offset >>> 0;
    if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -2147483648);
    if (value < 0) value = 0xffffffff + value + 1;
    this[offset] = value >>> 24;
    this[offset + 1] = value >>> 16;
    this[offset + 2] = value >>> 8;
    this[offset + 3] = value & 0xff;
    return offset + 4;
};
Buffer.prototype.writeBigInt64LE = defineBigIntMethod(function writeBigInt64LE(value, offset = 0) {
    return wrtBigUInt64LE(this, value, offset, -BigInt("0x8000000000000000"), BigInt("0x7fffffffffffffff"));
});
Buffer.prototype.writeBigInt64BE = defineBigIntMethod(function writeBigInt64BE(value, offset = 0) {
    return wrtBigUInt64BE(this, value, offset, -BigInt("0x8000000000000000"), BigInt("0x7fffffffffffffff"));
});
function checkIEEE754(buf, value, offset, ext, max, min) {
    if (offset + ext > buf.length) throw new RangeError("Index out of range");
    if (offset < 0) throw new RangeError("Index out of range");
}
function writeFloat(buf, value, offset, littleEndian, noAssert) {
    value = +value;
    offset = offset >>> 0;
    if (!noAssert) checkIEEE754(buf, value, offset, 4, 3.4028234663852886e+38, -340282346638528860000000000000000000000);
    ieee754.write(buf, value, offset, littleEndian, 23, 4);
    return offset + 4;
}
Buffer.prototype.writeFloatLE = function writeFloatLE(value, offset, noAssert) {
    return writeFloat(this, value, offset, true, noAssert);
};
Buffer.prototype.writeFloatBE = function writeFloatBE(value, offset, noAssert) {
    return writeFloat(this, value, offset, false, noAssert);
};
function writeDouble(buf, value, offset, littleEndian, noAssert) {
    value = +value;
    offset = offset >>> 0;
    if (!noAssert) checkIEEE754(buf, value, offset, 8, 1.7976931348623157E+308, -179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000);
    ieee754.write(buf, value, offset, littleEndian, 52, 8);
    return offset + 8;
}
Buffer.prototype.writeDoubleLE = function writeDoubleLE(value, offset, noAssert) {
    return writeDouble(this, value, offset, true, noAssert);
};
Buffer.prototype.writeDoubleBE = function writeDoubleBE(value, offset, noAssert) {
    return writeDouble(this, value, offset, false, noAssert);
};
// copy(targetBuffer, targetStart=0, sourceStart=0, sourceEnd=buffer.length)
Buffer.prototype.copy = function copy(target, targetStart, start, end) {
    if (!Buffer.isBuffer(target)) throw new TypeError("argument should be a Buffer");
    if (!start) start = 0;
    if (!end && end !== 0) end = this.length;
    if (targetStart >= target.length) targetStart = target.length;
    if (!targetStart) targetStart = 0;
    if (end > 0 && end < start) end = start;
    // Copy 0 bytes; we're done
    if (end === start) return 0;
    if (target.length === 0 || this.length === 0) return 0;
    // Fatal error conditions
    if (targetStart < 0) throw new RangeError("targetStart out of bounds");
    if (start < 0 || start >= this.length) throw new RangeError("Index out of range");
    if (end < 0) throw new RangeError("sourceEnd out of bounds");
    // Are we oob?
    if (end > this.length) end = this.length;
    if (target.length - targetStart < end - start) end = target.length - targetStart + start;
    const len = end - start;
    if (this === target && typeof Uint8Array.prototype.copyWithin === "function") // Use built-in when available, missing from IE11
    this.copyWithin(targetStart, start, end);
    else Uint8Array.prototype.set.call(target, this.subarray(start, end), targetStart);
    return len;
};
// Usage:
//    buffer.fill(number[, offset[, end]])
//    buffer.fill(buffer[, offset[, end]])
//    buffer.fill(string[, offset[, end]][, encoding])
Buffer.prototype.fill = function fill(val, start, end, encoding) {
    // Handle string cases:
    if (typeof val === "string") {
        if (typeof start === "string") {
            encoding = start;
            start = 0;
            end = this.length;
        } else if (typeof end === "string") {
            encoding = end;
            end = this.length;
        }
        if (encoding !== undefined && typeof encoding !== "string") throw new TypeError("encoding must be a string");
        if (typeof encoding === "string" && !Buffer.isEncoding(encoding)) throw new TypeError("Unknown encoding: " + encoding);
        if (val.length === 1) {
            const code = val.charCodeAt(0);
            if (encoding === "utf8" && code < 128 || encoding === "latin1") // Fast path: If `val` fits into a single byte, use that numeric value.
            val = code;
        }
    } else if (typeof val === "number") val = val & 255;
    else if (typeof val === "boolean") val = Number(val);
    // Invalid ranges are not set to a default, so can range check early.
    if (start < 0 || this.length < start || this.length < end) throw new RangeError("Out of range index");
    if (end <= start) return this;
    start = start >>> 0;
    end = end === undefined ? this.length : end >>> 0;
    if (!val) val = 0;
    let i;
    if (typeof val === "number") for(i = start; i < end; ++i)this[i] = val;
    else {
        const bytes = Buffer.isBuffer(val) ? val : Buffer.from(val, encoding);
        const len = bytes.length;
        if (len === 0) throw new TypeError('The value "' + val + '" is invalid for argument "value"');
        for(i = 0; i < end - start; ++i)this[i + start] = bytes[i % len];
    }
    return this;
};
// CUSTOM ERRORS
// =============
// Simplified versions from Node, changed for Buffer-only usage
const errors = {};
function E(sym, getMessage, Base) {
    errors[sym] = class NodeError extends Base {
        constructor(){
            super();
            Object.defineProperty(this, "message", {
                value: getMessage.apply(this, arguments),
                writable: true,
                configurable: true
            });
            // Add the error code to the name to include it in the stack trace.
            this.name = `${this.name} [${sym}]`;
            // Access the stack to generate the error message including the error code
            // from the name.
            this.stack // eslint-disable-line no-unused-expressions
            ;
            // Reset the name to the actual name.
            delete this.name;
        }
        get code() {
            return sym;
        }
        set code(value) {
            Object.defineProperty(this, "code", {
                configurable: true,
                enumerable: true,
                value,
                writable: true
            });
        }
        toString() {
            return `${this.name} [${sym}]: ${this.message}`;
        }
    };
}
E("ERR_BUFFER_OUT_OF_BOUNDS", function(name) {
    if (name) return `${name} is outside of buffer bounds`;
    return "Attempt to access memory outside buffer bounds";
}, RangeError);
E("ERR_INVALID_ARG_TYPE", function(name, actual) {
    return `The "${name}" argument must be of type number. Received type ${typeof actual}`;
}, TypeError);
E("ERR_OUT_OF_RANGE", function(str, range, input) {
    let msg = `The value of "${str}" is out of range.`;
    let received = input;
    if (Number.isInteger(input) && Math.abs(input) > 2 ** 32) received = addNumericalSeparator(String(input));
    else if (typeof input === "bigint") {
        received = String(input);
        if (input > BigInt(2) ** BigInt(32) || input < -(BigInt(2) ** BigInt(32))) received = addNumericalSeparator(received);
        received += "n";
    }
    msg += ` It must be ${range}. Received ${received}`;
    return msg;
}, RangeError);
function addNumericalSeparator(val) {
    let res = "";
    let i = val.length;
    const start = val[0] === "-" ? 1 : 0;
    for(; i >= start + 4; i -= 3)res = `_${val.slice(i - 3, i)}${res}`;
    return `${val.slice(0, i)}${res}`;
}
// CHECK FUNCTIONS
// ===============
function checkBounds(buf, offset, byteLength9) {
    validateNumber(offset, "offset");
    if (buf[offset] === undefined || buf[offset + byteLength9] === undefined) boundsError(offset, buf.length - (byteLength9 + 1));
}
function checkIntBI(value, min, max, buf, offset, byteLength10) {
    if (value > max || value < min) {
        const n = typeof min === "bigint" ? "n" : "";
        let range;
        if (byteLength10 > 3) {
            if (min === 0 || min === BigInt(0)) range = `>= 0${n} and < 2${n} ** ${(byteLength10 + 1) * 8}${n}`;
            else range = `>= -(2${n} ** ${(byteLength10 + 1) * 8 - 1}${n}) and < 2 ** ` + `${(byteLength10 + 1) * 8 - 1}${n}`;
        } else range = `>= ${min}${n} and <= ${max}${n}`;
        throw new errors.ERR_OUT_OF_RANGE("value", range, value);
    }
    checkBounds(buf, offset, byteLength10);
}
function validateNumber(value, name) {
    if (typeof value !== "number") throw new errors.ERR_INVALID_ARG_TYPE(name, "number", value);
}
function boundsError(value, length, type) {
    if (Math.floor(value) !== value) {
        validateNumber(value, type);
        throw new errors.ERR_OUT_OF_RANGE(type || "offset", "an integer", value);
    }
    if (length < 0) throw new errors.ERR_BUFFER_OUT_OF_BOUNDS();
    throw new errors.ERR_OUT_OF_RANGE(type || "offset", `>= ${type ? 1 : 0} and <= ${length}`, value);
}
// HELPER FUNCTIONS
// ================
const INVALID_BASE64_RE = /[^+/0-9A-Za-z-_]/g;
function base64clean(str) {
    // Node takes equal signs as end of the Base64 encoding
    str = str.split("=")[0];
    // Node strips out invalid characters like \n and \t from the string, base64-js does not
    str = str.trim().replace(INVALID_BASE64_RE, "");
    // Node converts strings with length < 2 to ''
    if (str.length < 2) return "";
    // Node allows for non-padded base64 strings (missing trailing ===), base64-js does not
    while(str.length % 4 !== 0)str = str + "=";
    return str;
}
function utf8ToBytes(string, units) {
    units = units || Infinity;
    let codePoint;
    const length = string.length;
    let leadSurrogate = null;
    const bytes = [];
    for(let i = 0; i < length; ++i){
        codePoint = string.charCodeAt(i);
        // is surrogate component
        if (codePoint > 0xD7FF && codePoint < 0xE000) {
            // last char was a lead
            if (!leadSurrogate) {
                // no lead yet
                if (codePoint > 0xDBFF) {
                    // unexpected trail
                    if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD);
                    continue;
                } else if (i + 1 === length) {
                    // unpaired lead
                    if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD);
                    continue;
                }
                // valid lead
                leadSurrogate = codePoint;
                continue;
            }
            // 2 leads in a row
            if (codePoint < 0xDC00) {
                if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD);
                leadSurrogate = codePoint;
                continue;
            }
            // valid surrogate pair
            codePoint = (leadSurrogate - 0xD800 << 10 | codePoint - 0xDC00) + 0x10000;
        } else if (leadSurrogate) // valid bmp char, but last char was a lead
        {
            if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD);
        }
        leadSurrogate = null;
        // encode utf8
        if (codePoint < 0x80) {
            if ((units -= 1) < 0) break;
            bytes.push(codePoint);
        } else if (codePoint < 0x800) {
            if ((units -= 2) < 0) break;
            bytes.push(codePoint >> 0x6 | 0xC0, codePoint & 0x3F | 0x80);
        } else if (codePoint < 0x10000) {
            if ((units -= 3) < 0) break;
            bytes.push(codePoint >> 0xC | 0xE0, codePoint >> 0x6 & 0x3F | 0x80, codePoint & 0x3F | 0x80);
        } else if (codePoint < 0x110000) {
            if ((units -= 4) < 0) break;
            bytes.push(codePoint >> 0x12 | 0xF0, codePoint >> 0xC & 0x3F | 0x80, codePoint >> 0x6 & 0x3F | 0x80, codePoint & 0x3F | 0x80);
        } else throw new Error("Invalid code point");
    }
    return bytes;
}
function asciiToBytes(str) {
    const byteArray = [];
    for(let i = 0; i < str.length; ++i)// Node's code seems to be doing this and not & 0x7F..
    byteArray.push(str.charCodeAt(i) & 0xFF);
    return byteArray;
}
function utf16leToBytes(str, units) {
    let c, hi, lo;
    const byteArray = [];
    for(let i = 0; i < str.length; ++i){
        if ((units -= 2) < 0) break;
        c = str.charCodeAt(i);
        hi = c >> 8;
        lo = c % 256;
        byteArray.push(lo);
        byteArray.push(hi);
    }
    return byteArray;
}
function base64ToBytes(str) {
    return base64.toByteArray(base64clean(str));
}
function blitBuffer(src, dst, offset, length) {
    let i;
    for(i = 0; i < length; ++i){
        if (i + offset >= dst.length || i >= src.length) break;
        dst[i + offset] = src[i];
    }
    return i;
}
// ArrayBuffer or Uint8Array objects from other contexts (i.e. iframes) do not pass
// the `instanceof` check but they should be treated as of that type.
// See: https://github.com/feross/buffer/issues/166
function isInstance(obj, type) {
    return obj instanceof type || obj != null && obj.constructor != null && obj.constructor.name != null && obj.constructor.name === type.name;
}
function numberIsNaN(obj) {
    // For IE11 support
    return obj !== obj // eslint-disable-line no-self-compare
    ;
}
// Create lookup table for `toString('hex')`
// See: https://github.com/feross/buffer/issues/219
const hexSliceLookupTable = function() {
    const alphabet = "0123456789abcdef";
    const table = new Array(256);
    for(let i = 0; i < 16; ++i){
        const i16 = i * 16;
        for(let j = 0; j < 16; ++j)table[i16 + j] = alphabet[i] + alphabet[j];
    }
    return table;
}();
// Return not function with Error if BigInt not supported
function defineBigIntMethod(fn) {
    return typeof BigInt === "undefined" ? BufferBigIntNotDefined : fn;
}
function BufferBigIntNotDefined() {
    throw new Error("BigInt not supported");
}

},{"base64-js":"7jAMi","ieee754":"hITcF"}],"7jAMi":[function(require,module,exports) {
"use strict";
exports.byteLength = byteLength;
exports.toByteArray = toByteArray;
exports.fromByteArray = fromByteArray;
var lookup = [];
var revLookup = [];
var Arr = typeof Uint8Array !== "undefined" ? Uint8Array : Array;
var code = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/";
for(var i = 0, len = code.length; i < len; ++i){
    lookup[i] = code[i];
    revLookup[code.charCodeAt(i)] = i;
}
// Support decoding URL-safe base64 strings, as Node.js does.
// See: https://en.wikipedia.org/wiki/Base64#URL_applications
revLookup["-".charCodeAt(0)] = 62;
revLookup["_".charCodeAt(0)] = 63;
function getLens(b64) {
    var len1 = b64.length;
    if (len1 % 4 > 0) throw new Error("Invalid string. Length must be a multiple of 4");
    // Trim off extra bytes after placeholder bytes are found
    // See: https://github.com/beatgammit/base64-js/issues/42
    var validLen = b64.indexOf("=");
    if (validLen === -1) validLen = len1;
    var placeHoldersLen = validLen === len1 ? 0 : 4 - validLen % 4;
    return [
        validLen,
        placeHoldersLen
    ];
}
// base64 is 4/3 + up to two characters of the original data
function byteLength(b64) {
    var lens = getLens(b64);
    var validLen = lens[0];
    var placeHoldersLen = lens[1];
    return (validLen + placeHoldersLen) * 3 / 4 - placeHoldersLen;
}
function _byteLength(b64, validLen, placeHoldersLen) {
    return (validLen + placeHoldersLen) * 3 / 4 - placeHoldersLen;
}
function toByteArray(b64) {
    var tmp;
    var lens = getLens(b64);
    var validLen = lens[0];
    var placeHoldersLen = lens[1];
    var arr = new Arr(_byteLength(b64, validLen, placeHoldersLen));
    var curByte = 0;
    // if there are placeholders, only get up to the last complete 4 chars
    var len2 = placeHoldersLen > 0 ? validLen - 4 : validLen;
    var i1;
    for(i1 = 0; i1 < len2; i1 += 4){
        tmp = revLookup[b64.charCodeAt(i1)] << 18 | revLookup[b64.charCodeAt(i1 + 1)] << 12 | revLookup[b64.charCodeAt(i1 + 2)] << 6 | revLookup[b64.charCodeAt(i1 + 3)];
        arr[curByte++] = tmp >> 16 & 0xFF;
        arr[curByte++] = tmp >> 8 & 0xFF;
        arr[curByte++] = tmp & 0xFF;
    }
    if (placeHoldersLen === 2) {
        tmp = revLookup[b64.charCodeAt(i1)] << 2 | revLookup[b64.charCodeAt(i1 + 1)] >> 4;
        arr[curByte++] = tmp & 0xFF;
    }
    if (placeHoldersLen === 1) {
        tmp = revLookup[b64.charCodeAt(i1)] << 10 | revLookup[b64.charCodeAt(i1 + 1)] << 4 | revLookup[b64.charCodeAt(i1 + 2)] >> 2;
        arr[curByte++] = tmp >> 8 & 0xFF;
        arr[curByte++] = tmp & 0xFF;
    }
    return arr;
}
function tripletToBase64(num) {
    return lookup[num >> 18 & 0x3F] + lookup[num >> 12 & 0x3F] + lookup[num >> 6 & 0x3F] + lookup[num & 0x3F];
}
function encodeChunk(uint8, start, end) {
    var tmp;
    var output = [];
    for(var i2 = start; i2 < end; i2 += 3){
        tmp = (uint8[i2] << 16 & 0xFF0000) + (uint8[i2 + 1] << 8 & 0xFF00) + (uint8[i2 + 2] & 0xFF);
        output.push(tripletToBase64(tmp));
    }
    return output.join("");
}
function fromByteArray(uint8) {
    var tmp;
    var len3 = uint8.length;
    var extraBytes = len3 % 3 // if we have 1 byte left, pad 2 bytes
    ;
    var parts = [];
    var maxChunkLength = 16383 // must be multiple of 3
    ;
    // go through the array every three bytes, we'll deal with trailing stuff later
    for(var i3 = 0, len2 = len3 - extraBytes; i3 < len2; i3 += maxChunkLength)parts.push(encodeChunk(uint8, i3, i3 + maxChunkLength > len2 ? len2 : i3 + maxChunkLength));
    // pad the end with zeros, but make sure to not forget the extra bytes
    if (extraBytes === 1) {
        tmp = uint8[len3 - 1];
        parts.push(lookup[tmp >> 2] + lookup[tmp << 4 & 0x3F] + "==");
    } else if (extraBytes === 2) {
        tmp = (uint8[len3 - 2] << 8) + uint8[len3 - 1];
        parts.push(lookup[tmp >> 10] + lookup[tmp >> 4 & 0x3F] + lookup[tmp << 2 & 0x3F] + "=");
    }
    return parts.join("");
}

},{}],"hITcF":[function(require,module,exports) {
/*! ieee754. BSD-3-Clause License. Feross Aboukhadijeh <https://feross.org/opensource> */ exports.read = function(buffer, offset, isLE, mLen, nBytes) {
    var e, m;
    var eLen = nBytes * 8 - mLen - 1;
    var eMax = (1 << eLen) - 1;
    var eBias = eMax >> 1;
    var nBits = -7;
    var i = isLE ? nBytes - 1 : 0;
    var d = isLE ? -1 : 1;
    var s = buffer[offset + i];
    i += d;
    e = s & (1 << -nBits) - 1;
    s >>= -nBits;
    nBits += eLen;
    for(; nBits > 0; e = e * 256 + buffer[offset + i], i += d, nBits -= 8);
    m = e & (1 << -nBits) - 1;
    e >>= -nBits;
    nBits += mLen;
    for(; nBits > 0; m = m * 256 + buffer[offset + i], i += d, nBits -= 8);
    if (e === 0) e = 1 - eBias;
    else if (e === eMax) return m ? NaN : (s ? -1 : 1) * Infinity;
    else {
        m = m + Math.pow(2, mLen);
        e = e - eBias;
    }
    return (s ? -1 : 1) * m * Math.pow(2, e - mLen);
};
exports.write = function(buffer, value, offset, isLE, mLen, nBytes) {
    var e, m, c;
    var eLen = nBytes * 8 - mLen - 1;
    var eMax = (1 << eLen) - 1;
    var eBias = eMax >> 1;
    var rt = mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0;
    var i = isLE ? 0 : nBytes - 1;
    var d = isLE ? 1 : -1;
    var s = value < 0 || value === 0 && 1 / value < 0 ? 1 : 0;
    value = Math.abs(value);
    if (isNaN(value) || value === Infinity) {
        m = isNaN(value) ? 1 : 0;
        e = eMax;
    } else {
        e = Math.floor(Math.log(value) / Math.LN2);
        if (value * (c = Math.pow(2, -e)) < 1) {
            e--;
            c *= 2;
        }
        if (e + eBias >= 1) value += rt / c;
        else value += rt * Math.pow(2, 1 - eBias);
        if (value * c >= 2) {
            e++;
            c /= 2;
        }
        if (e + eBias >= eMax) {
            m = 0;
            e = eMax;
        } else if (e + eBias >= 1) {
            m = (value * c - 1) * Math.pow(2, mLen);
            e = e + eBias;
        } else {
            m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen);
            e = 0;
        }
    }
    for(; mLen >= 8; buffer[offset + i] = m & 0xff, i += d, m /= 256, mLen -= 8);
    e = e << mLen | m;
    eLen += mLen;
    for(; eLen > 0; buffer[offset + i] = e & 0xff, i += d, e /= 256, eLen -= 8);
    buffer[offset + i - d] |= s * 128;
};

},{}],"9C0N7":[function(require,module,exports) {
"use strict";

},{}],"7Gh2M":[function(require,module,exports) {
"use strict";
function ownKeys(object, enumerableOnly) {
    var keys = Object.keys(object);
    if (Object.getOwnPropertySymbols) {
        var symbols = Object.getOwnPropertySymbols(object);
        if (enumerableOnly) symbols = symbols.filter(function(sym) {
            return Object.getOwnPropertyDescriptor(object, sym).enumerable;
        });
        keys.push.apply(keys, symbols);
    }
    return keys;
}
function _objectSpread(target) {
    for(var i = 1; i < arguments.length; i++){
        var source = arguments[i] != null ? arguments[i] : {};
        if (i % 2) ownKeys(Object(source), true).forEach(function(key) {
            _defineProperty(target, key, source[key]);
        });
        else if (Object.getOwnPropertyDescriptors) Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
        else ownKeys(Object(source)).forEach(function(key) {
            Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
        });
    }
    return target;
}
function _defineProperty(obj, key, value) {
    if (key in obj) Object.defineProperty(obj, key, {
        value: value,
        enumerable: true,
        configurable: true,
        writable: true
    });
    else obj[key] = value;
    return obj;
}
function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) throw new TypeError("Cannot call a class as a function");
}
function _defineProperties(target, props) {
    for(var i = 0; i < props.length; i++){
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor) descriptor.writable = true;
        Object.defineProperty(target, descriptor.key, descriptor);
    }
}
function _createClass(Constructor, protoProps, staticProps) {
    if (protoProps) _defineProperties(Constructor.prototype, protoProps);
    if (staticProps) _defineProperties(Constructor, staticProps);
    return Constructor;
}
var _require = require("buffer"), Buffer = _require.Buffer;
var _require2 = require("util"), inspect = _require2.inspect;
var custom = inspect && inspect.custom || "inspect";
function copyBuffer(src, target, offset) {
    Buffer.prototype.copy.call(src, target, offset);
}
module.exports = /*#__PURE__*/ function() {
    function BufferList() {
        _classCallCheck(this, BufferList);
        this.head = null;
        this.tail = null;
        this.length = 0;
    }
    _createClass(BufferList, [
        {
            key: "push",
            value: function push(v) {
                var entry = {
                    data: v,
                    next: null
                };
                if (this.length > 0) this.tail.next = entry;
                else this.head = entry;
                this.tail = entry;
                ++this.length;
            }
        },
        {
            key: "unshift",
            value: function unshift(v) {
                var entry = {
                    data: v,
                    next: this.head
                };
                if (this.length === 0) this.tail = entry;
                this.head = entry;
                ++this.length;
            }
        },
        {
            key: "shift",
            value: function shift() {
                if (this.length === 0) return;
                var ret = this.head.data;
                if (this.length === 1) this.head = this.tail = null;
                else this.head = this.head.next;
                --this.length;
                return ret;
            }
        },
        {
            key: "clear",
            value: function clear() {
                this.head = this.tail = null;
                this.length = 0;
            }
        },
        {
            key: "join",
            value: function join(s) {
                if (this.length === 0) return "";
                var p = this.head;
                var ret = "" + p.data;
                while(p = p.next)ret += s + p.data;
                return ret;
            }
        },
        {
            key: "concat",
            value: function concat(n) {
                if (this.length === 0) return Buffer.alloc(0);
                var ret = Buffer.allocUnsafe(n >>> 0);
                var p = this.head;
                var i = 0;
                while(p){
                    copyBuffer(p.data, ret, i);
                    i += p.data.length;
                    p = p.next;
                }
                return ret;
            } // Consumes a specified amount of bytes or characters from the buffered data.
        },
        {
            key: "consume",
            value: function consume(n, hasStrings) {
                var ret;
                if (n < this.head.data.length) {
                    // `slice` is the same for buffers and strings.
                    ret = this.head.data.slice(0, n);
                    this.head.data = this.head.data.slice(n);
                } else if (n === this.head.data.length) // First chunk is a perfect match.
                ret = this.shift();
                else // Result spans more than one buffer.
                ret = hasStrings ? this._getString(n) : this._getBuffer(n);
                return ret;
            }
        },
        {
            key: "first",
            value: function first() {
                return this.head.data;
            } // Consumes a specified amount of characters from the buffered data.
        },
        {
            key: "_getString",
            value: function _getString(n) {
                var p = this.head;
                var c = 1;
                var ret = p.data;
                n -= ret.length;
                while(p = p.next){
                    var str = p.data;
                    var nb = n > str.length ? str.length : n;
                    if (nb === str.length) ret += str;
                    else ret += str.slice(0, n);
                    n -= nb;
                    if (n === 0) {
                        if (nb === str.length) {
                            ++c;
                            if (p.next) this.head = p.next;
                            else this.head = this.tail = null;
                        } else {
                            this.head = p;
                            p.data = str.slice(nb);
                        }
                        break;
                    }
                    ++c;
                }
                this.length -= c;
                return ret;
            } // Consumes a specified amount of bytes from the buffered data.
        },
        {
            key: "_getBuffer",
            value: function _getBuffer(n) {
                var ret = Buffer.allocUnsafe(n);
                var p = this.head;
                var c = 1;
                p.data.copy(ret);
                n -= p.data.length;
                while(p = p.next){
                    var buf = p.data;
                    var nb = n > buf.length ? buf.length : n;
                    buf.copy(ret, ret.length - n, 0, nb);
                    n -= nb;
                    if (n === 0) {
                        if (nb === buf.length) {
                            ++c;
                            if (p.next) this.head = p.next;
                            else this.head = this.tail = null;
                        } else {
                            this.head = p;
                            p.data = buf.slice(nb);
                        }
                        break;
                    }
                    ++c;
                }
                this.length -= c;
                return ret;
            } // Make sure the linked list only shows the minimal necessary information.
        },
        {
            key: custom,
            value: function value(_, options) {
                return inspect(this, _objectSpread({}, options, {
                    // Only inspect one level.
                    depth: 0,
                    // It should not recurse.
                    customInspect: false
                }));
            }
        }
    ]);
    return BufferList;
}();

},{"buffer":"6tQNr","util":"9C0N7"}],"9XP5E":[function(require,module,exports) {
"use strict"; // undocumented cb() API, needed for core, not for public API
var process = require("process");
function destroy(err1, cb) {
    var _this = this;
    var readableDestroyed = this._readableState && this._readableState.destroyed;
    var writableDestroyed = this._writableState && this._writableState.destroyed;
    if (readableDestroyed || writableDestroyed) {
        if (cb) cb(err1);
        else if (err1) {
            if (!this._writableState) process.nextTick(emitErrorNT, this, err1);
            else if (!this._writableState.errorEmitted) {
                this._writableState.errorEmitted = true;
                process.nextTick(emitErrorNT, this, err1);
            }
        }
        return this;
    } // we set destroyed to true before firing error callbacks in order
    // to make it re-entrance safe in case destroy() is called within callbacks
    if (this._readableState) this._readableState.destroyed = true;
     // if this is a duplex stream mark the writable part as destroyed as well
    if (this._writableState) this._writableState.destroyed = true;
    this._destroy(err1 || null, function(err) {
        if (!cb && err) {
            if (!_this._writableState) process.nextTick(emitErrorAndCloseNT, _this, err);
            else if (!_this._writableState.errorEmitted) {
                _this._writableState.errorEmitted = true;
                process.nextTick(emitErrorAndCloseNT, _this, err);
            } else process.nextTick(emitCloseNT, _this);
        } else if (cb) {
            process.nextTick(emitCloseNT, _this);
            cb(err);
        } else process.nextTick(emitCloseNT, _this);
    });
    return this;
}
function emitErrorAndCloseNT(self, err) {
    emitErrorNT(self, err);
    emitCloseNT(self);
}
function emitCloseNT(self) {
    if (self._writableState && !self._writableState.emitClose) return;
    if (self._readableState && !self._readableState.emitClose) return;
    self.emit("close");
}
function undestroy() {
    if (this._readableState) {
        this._readableState.destroyed = false;
        this._readableState.reading = false;
        this._readableState.ended = false;
        this._readableState.endEmitted = false;
    }
    if (this._writableState) {
        this._writableState.destroyed = false;
        this._writableState.ended = false;
        this._writableState.ending = false;
        this._writableState.finalCalled = false;
        this._writableState.prefinished = false;
        this._writableState.finished = false;
        this._writableState.errorEmitted = false;
    }
}
function emitErrorNT(self, err) {
    self.emit("error", err);
}
function errorOrDestroy(stream, err) {
    // We have tests that rely on errors being emitted
    // in the same tick, so changing this is semver major.
    // For now when you opt-in to autoDestroy we allow
    // the error to be emitted nextTick. In a future
    // semver major update we should change the default to this.
    var rState = stream._readableState;
    var wState = stream._writableState;
    if (rState && rState.autoDestroy || wState && wState.autoDestroy) stream.destroy(err);
    else stream.emit("error", err);
}
module.exports = {
    destroy: destroy,
    undestroy: undestroy,
    errorOrDestroy: errorOrDestroy
};

},{"process":"gq3cc"}],"ks1Kj":[function(require,module,exports) {
"use strict";
var ERR_INVALID_OPT_VALUE = require("../../../errors").codes.ERR_INVALID_OPT_VALUE;
function highWaterMarkFrom(options, isDuplex, duplexKey) {
    return options.highWaterMark != null ? options.highWaterMark : isDuplex ? options[duplexKey] : null;
}
function getHighWaterMark(state, options, duplexKey, isDuplex) {
    var hwm = highWaterMarkFrom(options, isDuplex, duplexKey);
    if (hwm != null) {
        if (!(isFinite(hwm) && Math.floor(hwm) === hwm) || hwm < 0) {
            var name = isDuplex ? duplexKey : "highWaterMark";
            throw new ERR_INVALID_OPT_VALUE(name, hwm);
        }
        return Math.floor(hwm);
    } // Default value
    return state.objectMode ? 16 : 16384;
}
module.exports = {
    getHighWaterMark: getHighWaterMark
};

},{"../../../errors":"5EQW4"}],"5EQW4":[function(require,module,exports) {
"use strict";
function _inheritsLoose(subClass, superClass) {
    subClass.prototype = Object.create(superClass.prototype);
    subClass.prototype.constructor = subClass;
    subClass.__proto__ = superClass;
}
var codes = {};
function createErrorType(code, message, Base) {
    if (!Base) Base = Error;
    function getMessage(arg1, arg2, arg3) {
        if (typeof message === "string") return message;
        else return message(arg1, arg2, arg3);
    }
    var NodeError1 = /*#__PURE__*/ function(_Base) {
        _inheritsLoose(NodeError, _Base);
        function NodeError(arg1, arg2, arg3) {
            return _Base.call(this, getMessage(arg1, arg2, arg3)) || this;
        }
        return NodeError;
    }(Base);
    NodeError1.prototype.name = Base.name;
    NodeError1.prototype.code = code;
    codes[code] = NodeError1;
} // https://github.com/nodejs/node/blob/v10.8.0/lib/internal/errors.js
function oneOf(expected, thing) {
    if (Array.isArray(expected)) {
        var len = expected.length;
        expected = expected.map(function(i) {
            return String(i);
        });
        if (len > 2) return "one of ".concat(thing, " ").concat(expected.slice(0, len - 1).join(", "), ", or ") + expected[len - 1];
        else if (len === 2) return "one of ".concat(thing, " ").concat(expected[0], " or ").concat(expected[1]);
        else return "of ".concat(thing, " ").concat(expected[0]);
    } else return "of ".concat(thing, " ").concat(String(expected));
} // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/startsWith
function startsWith(str, search, pos) {
    return str.substr(!pos || pos < 0 ? 0 : +pos, search.length) === search;
} // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/endsWith
function endsWith(str, search, this_len) {
    if (this_len === undefined || this_len > str.length) this_len = str.length;
    return str.substring(this_len - search.length, this_len) === search;
} // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/includes
function includes(str, search, start) {
    if (typeof start !== "number") start = 0;
    if (start + search.length > str.length) return false;
    else return str.indexOf(search, start) !== -1;
}
createErrorType("ERR_INVALID_OPT_VALUE", function(name, value) {
    return 'The value "' + value + '" is invalid for option "' + name + '"';
}, TypeError);
createErrorType("ERR_INVALID_ARG_TYPE", function(name, expected, actual) {
    // determiner: 'must be' or 'must not be'
    var determiner;
    if (typeof expected === "string" && startsWith(expected, "not ")) {
        determiner = "must not be";
        expected = expected.replace(/^not /, "");
    } else determiner = "must be";
    var msg;
    if (endsWith(name, " argument")) // For cases like 'first argument'
    msg = "The ".concat(name, " ").concat(determiner, " ").concat(oneOf(expected, "type"));
    else {
        var type = includes(name, ".") ? "property" : "argument";
        msg = 'The "'.concat(name, '" ').concat(type, " ").concat(determiner, " ").concat(oneOf(expected, "type"));
    }
    msg += ". Received type ".concat(typeof actual);
    return msg;
}, TypeError);
createErrorType("ERR_STREAM_PUSH_AFTER_EOF", "stream.push() after EOF");
createErrorType("ERR_METHOD_NOT_IMPLEMENTED", function(name) {
    return "The " + name + " method is not implemented";
});
createErrorType("ERR_STREAM_PREMATURE_CLOSE", "Premature close");
createErrorType("ERR_STREAM_DESTROYED", function(name) {
    return "Cannot call " + name + " after a stream was destroyed";
});
createErrorType("ERR_MULTIPLE_CALLBACK", "Callback called multiple times");
createErrorType("ERR_STREAM_CANNOT_PIPE", "Cannot pipe, not readable");
createErrorType("ERR_STREAM_WRITE_AFTER_END", "write after end");
createErrorType("ERR_STREAM_NULL_VALUES", "May not write null values to stream", TypeError);
createErrorType("ERR_UNKNOWN_ENCODING", function(arg) {
    return "Unknown encoding: " + arg;
}, TypeError);
createErrorType("ERR_STREAM_UNSHIFT_AFTER_END_EVENT", "stream.unshift() after end event");
module.exports.codes = codes;

},{}],"e7R9x":[function(require,module,exports) {
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.
// a duplex stream is just a stream that is both readable and writable.
// Since JS doesn't have multiple prototypal inheritance, this class
// prototypally inherits from Readable, and then parasitically from
// Writable.
"use strict";
var process = require("process");
/*<replacement>*/ var objectKeys = Object.keys || function(obj) {
    var keys1 = [];
    for(var key in obj)keys1.push(key);
    return keys1;
};
/*</replacement>*/ module.exports = Duplex;
var Readable = require("./_stream_readable");
var Writable = require("./_stream_writable");
require("inherits")(Duplex, Readable);
// Allow the keys array to be GC'ed.
var keys = objectKeys(Writable.prototype);
for(var v = 0; v < keys.length; v++){
    var method = keys[v];
    if (!Duplex.prototype[method]) Duplex.prototype[method] = Writable.prototype[method];
}
function Duplex(options) {
    if (!(this instanceof Duplex)) return new Duplex(options);
    Readable.call(this, options);
    Writable.call(this, options);
    this.allowHalfOpen = true;
    if (options) {
        if (options.readable === false) this.readable = false;
        if (options.writable === false) this.writable = false;
        if (options.allowHalfOpen === false) {
            this.allowHalfOpen = false;
            this.once("end", onend);
        }
    }
}
Object.defineProperty(Duplex.prototype, "writableHighWaterMark", {
    // making it explicit this property is not enumerable
    // because otherwise some prototype manipulation in
    // userland will fail
    enumerable: false,
    get: function get() {
        return this._writableState.highWaterMark;
    }
});
Object.defineProperty(Duplex.prototype, "writableBuffer", {
    // making it explicit this property is not enumerable
    // because otherwise some prototype manipulation in
    // userland will fail
    enumerable: false,
    get: function get() {
        return this._writableState && this._writableState.getBuffer();
    }
});
Object.defineProperty(Duplex.prototype, "writableLength", {
    // making it explicit this property is not enumerable
    // because otherwise some prototype manipulation in
    // userland will fail
    enumerable: false,
    get: function get() {
        return this._writableState.length;
    }
}); // the no-half-open enforcer
function onend() {
    // If the writable side ended, then we're ok.
    if (this._writableState.ended) return; // no more data can be written.
    // But allow more writes to happen in this tick.
    process.nextTick(onEndNT, this);
}
function onEndNT(self) {
    self.end();
}
Object.defineProperty(Duplex.prototype, "destroyed", {
    // making it explicit this property is not enumerable
    // because otherwise some prototype manipulation in
    // userland will fail
    enumerable: false,
    get: function get() {
        if (this._readableState === undefined || this._writableState === undefined) return false;
        return this._readableState.destroyed && this._writableState.destroyed;
    },
    set: function set(value) {
        // we ignore the value if the stream
        // has not been initialized yet
        if (this._readableState === undefined || this._writableState === undefined) return;
         // backward compatibility, the user is explicitly
        // managing destroyed
        this._readableState.destroyed = value;
        this._writableState.destroyed = value;
    }
});

},{"process":"gq3cc","./_stream_readable":"fdlsB","./_stream_writable":"dvVZS","inherits":"l3bOz"}],"dvVZS":[function(require,module,exports) {
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.
// A bit simpler than readable streams.
// Implement an async ._write(chunk, encoding, cb), and it'll handle all
// the drain event emission and buffering.
"use strict";
var process = require("process");
var global = arguments[3];
module.exports = Writable;
/* <replacement> */ function WriteReq(chunk, encoding, cb) {
    this.chunk = chunk;
    this.encoding = encoding;
    this.callback = cb;
    this.next = null;
} // It seems a linked list but it is not
// there will be only 2 of these for each stream
function CorkedRequest(state) {
    var _this = this;
    this.next = null;
    this.entry = null;
    this.finish = function() {
        onCorkedFinish(_this, state);
    };
}
/* </replacement> */ /*<replacement>*/ var Duplex;
/*</replacement>*/ Writable.WritableState = WritableState;
/*<replacement>*/ var internalUtil = {
    deprecate: require("util-deprecate")
};
/*</replacement>*/ /*<replacement>*/ var Stream = require("./internal/streams/stream");
/*</replacement>*/ var Buffer = require("buffer").Buffer;
var OurUint8Array = global.Uint8Array || function() {};
function _uint8ArrayToBuffer(chunk) {
    return Buffer.from(chunk);
}
function _isUint8Array(obj) {
    return Buffer.isBuffer(obj) || obj instanceof OurUint8Array;
}
var destroyImpl = require("./internal/streams/destroy");
var _require = require("./internal/streams/state"), getHighWaterMark = _require.getHighWaterMark;
var _require$codes = require("../errors").codes, ERR_INVALID_ARG_TYPE = _require$codes.ERR_INVALID_ARG_TYPE, ERR_METHOD_NOT_IMPLEMENTED = _require$codes.ERR_METHOD_NOT_IMPLEMENTED, ERR_MULTIPLE_CALLBACK = _require$codes.ERR_MULTIPLE_CALLBACK, ERR_STREAM_CANNOT_PIPE = _require$codes.ERR_STREAM_CANNOT_PIPE, ERR_STREAM_DESTROYED = _require$codes.ERR_STREAM_DESTROYED, ERR_STREAM_NULL_VALUES = _require$codes.ERR_STREAM_NULL_VALUES, ERR_STREAM_WRITE_AFTER_END = _require$codes.ERR_STREAM_WRITE_AFTER_END, ERR_UNKNOWN_ENCODING = _require$codes.ERR_UNKNOWN_ENCODING;
var errorOrDestroy = destroyImpl.errorOrDestroy;
require("inherits")(Writable, Stream);
function nop() {}
function WritableState(options, stream, isDuplex) {
    Duplex = Duplex || require("./_stream_duplex");
    options = options || {}; // Duplex streams are both readable and writable, but share
    // the same options object.
    // However, some cases require setting options to different
    // values for the readable and the writable sides of the duplex stream,
    // e.g. options.readableObjectMode vs. options.writableObjectMode, etc.
    if (typeof isDuplex !== "boolean") isDuplex = stream instanceof Duplex; // object stream flag to indicate whether or not this stream
    // contains buffers or objects.
    this.objectMode = !!options.objectMode;
    if (isDuplex) this.objectMode = this.objectMode || !!options.writableObjectMode; // the point at which write() starts returning false
    // Note: 0 is a valid value, means that we always return false if
    // the entire buffer is not flushed immediately on write()
    this.highWaterMark = getHighWaterMark(this, options, "writableHighWaterMark", isDuplex); // if _final has been called
    this.finalCalled = false; // drain event flag.
    this.needDrain = false; // at the start of calling end()
    this.ending = false; // when end() has been called, and returned
    this.ended = false; // when 'finish' is emitted
    this.finished = false; // has it been destroyed
    this.destroyed = false; // should we decode strings into buffers before passing to _write?
    // this is here so that some node-core streams can optimize string
    // handling at a lower level.
    var noDecode = options.decodeStrings === false;
    this.decodeStrings = !noDecode; // Crypto is kind of old and crusty.  Historically, its default string
    // encoding is 'binary' so we have to make this configurable.
    // Everything else in the universe uses 'utf8', though.
    this.defaultEncoding = options.defaultEncoding || "utf8"; // not an actual buffer we keep track of, but a measurement
    // of how much we're waiting to get pushed to some underlying
    // socket or file.
    this.length = 0; // a flag to see when we're in the middle of a write.
    this.writing = false; // when true all writes will be buffered until .uncork() call
    this.corked = 0; // a flag to be able to tell if the onwrite cb is called immediately,
    // or on a later tick.  We set this to true at first, because any
    // actions that shouldn't happen until "later" should generally also
    // not happen before the first write call.
    this.sync = true; // a flag to know if we're processing previously buffered items, which
    // may call the _write() callback in the same tick, so that we don't
    // end up in an overlapped onwrite situation.
    this.bufferProcessing = false; // the callback that's passed to _write(chunk,cb)
    this.onwrite = function(er) {
        onwrite(stream, er);
    }; // the callback that the user supplies to write(chunk,encoding,cb)
    this.writecb = null; // the amount that is being written when _write is called.
    this.writelen = 0;
    this.bufferedRequest = null;
    this.lastBufferedRequest = null; // number of pending user-supplied write callbacks
    // this must be 0 before 'finish' can be emitted
    this.pendingcb = 0; // emit prefinish if the only thing we're waiting for is _write cbs
    // This is relevant for synchronous Transform streams
    this.prefinished = false; // True if the error was already emitted and should not be thrown again
    this.errorEmitted = false; // Should close be emitted on destroy. Defaults to true.
    this.emitClose = options.emitClose !== false; // Should .destroy() be called after 'finish' (and potentially 'end')
    this.autoDestroy = !!options.autoDestroy; // count buffered requests
    this.bufferedRequestCount = 0; // allocate the first CorkedRequest, there is always
    // one allocated and free to use, and we maintain at most two
    this.corkedRequestsFree = new CorkedRequest(this);
}
WritableState.prototype.getBuffer = function getBuffer() {
    var current = this.bufferedRequest;
    var out = [];
    while(current){
        out.push(current);
        current = current.next;
    }
    return out;
};
(function() {
    try {
        Object.defineProperty(WritableState.prototype, "buffer", {
            get: internalUtil.deprecate(function writableStateBufferGetter() {
                return this.getBuffer();
            }, "_writableState.buffer is deprecated. Use _writableState.getBuffer instead.", "DEP0003")
        });
    } catch (_) {}
})(); // Test _writableState for inheritance to account for Duplex streams,
// whose prototype chain only points to Readable.
var realHasInstance;
if (typeof Symbol === "function" && Symbol.hasInstance && typeof Function.prototype[Symbol.hasInstance] === "function") {
    realHasInstance = Function.prototype[Symbol.hasInstance];
    Object.defineProperty(Writable, Symbol.hasInstance, {
        value: function value(object) {
            if (realHasInstance.call(this, object)) return true;
            if (this !== Writable) return false;
            return object && object._writableState instanceof WritableState;
        }
    });
} else realHasInstance = function realHasInstance(object) {
    return object instanceof this;
};
function Writable(options) {
    Duplex = Duplex || require("./_stream_duplex"); // Writable ctor is applied to Duplexes, too.
    // `realHasInstance` is necessary because using plain `instanceof`
    // would return false, as no `_writableState` property is attached.
    // Trying to use the custom `instanceof` for Writable here will also break the
    // Node.js LazyTransform implementation, which has a non-trivial getter for
    // `_writableState` that would lead to infinite recursion.
    // Checking for a Stream.Duplex instance is faster here instead of inside
    // the WritableState constructor, at least with V8 6.5
    var isDuplex = this instanceof Duplex;
    if (!isDuplex && !realHasInstance.call(Writable, this)) return new Writable(options);
    this._writableState = new WritableState(options, this, isDuplex); // legacy.
    this.writable = true;
    if (options) {
        if (typeof options.write === "function") this._write = options.write;
        if (typeof options.writev === "function") this._writev = options.writev;
        if (typeof options.destroy === "function") this._destroy = options.destroy;
        if (typeof options.final === "function") this._final = options.final;
    }
    Stream.call(this);
} // Otherwise people can pipe Writable streams, which is just wrong.
Writable.prototype.pipe = function() {
    errorOrDestroy(this, new ERR_STREAM_CANNOT_PIPE());
};
function writeAfterEnd(stream, cb) {
    var er = new ERR_STREAM_WRITE_AFTER_END(); // TODO: defer error events consistently everywhere, not just the cb
    errorOrDestroy(stream, er);
    process.nextTick(cb, er);
} // Checks that a user-supplied chunk is valid, especially for the particular
// mode the stream is in. Currently this means that `null` is never accepted
// and undefined/non-string values are only allowed in object mode.
function validChunk(stream, state, chunk, cb) {
    var er;
    if (chunk === null) er = new ERR_STREAM_NULL_VALUES();
    else if (typeof chunk !== "string" && !state.objectMode) er = new ERR_INVALID_ARG_TYPE("chunk", [
        "string",
        "Buffer"
    ], chunk);
    if (er) {
        errorOrDestroy(stream, er);
        process.nextTick(cb, er);
        return false;
    }
    return true;
}
Writable.prototype.write = function(chunk, encoding, cb) {
    var state = this._writableState;
    var ret = false;
    var isBuf = !state.objectMode && _isUint8Array(chunk);
    if (isBuf && !Buffer.isBuffer(chunk)) chunk = _uint8ArrayToBuffer(chunk);
    if (typeof encoding === "function") {
        cb = encoding;
        encoding = null;
    }
    if (isBuf) encoding = "buffer";
    else if (!encoding) encoding = state.defaultEncoding;
    if (typeof cb !== "function") cb = nop;
    if (state.ending) writeAfterEnd(this, cb);
    else if (isBuf || validChunk(this, state, chunk, cb)) {
        state.pendingcb++;
        ret = writeOrBuffer(this, state, isBuf, chunk, encoding, cb);
    }
    return ret;
};
Writable.prototype.cork = function() {
    this._writableState.corked++;
};
Writable.prototype.uncork = function() {
    var state = this._writableState;
    if (state.corked) {
        state.corked--;
        if (!state.writing && !state.corked && !state.bufferProcessing && state.bufferedRequest) clearBuffer(this, state);
    }
};
Writable.prototype.setDefaultEncoding = function setDefaultEncoding(encoding) {
    // node::ParseEncoding() requires lower case.
    if (typeof encoding === "string") encoding = encoding.toLowerCase();
    if (!([
        "hex",
        "utf8",
        "utf-8",
        "ascii",
        "binary",
        "base64",
        "ucs2",
        "ucs-2",
        "utf16le",
        "utf-16le",
        "raw"
    ].indexOf((encoding + "").toLowerCase()) > -1)) throw new ERR_UNKNOWN_ENCODING(encoding);
    this._writableState.defaultEncoding = encoding;
    return this;
};
Object.defineProperty(Writable.prototype, "writableBuffer", {
    // making it explicit this property is not enumerable
    // because otherwise some prototype manipulation in
    // userland will fail
    enumerable: false,
    get: function get() {
        return this._writableState && this._writableState.getBuffer();
    }
});
function decodeChunk(state, chunk, encoding) {
    if (!state.objectMode && state.decodeStrings !== false && typeof chunk === "string") chunk = Buffer.from(chunk, encoding);
    return chunk;
}
Object.defineProperty(Writable.prototype, "writableHighWaterMark", {
    // making it explicit this property is not enumerable
    // because otherwise some prototype manipulation in
    // userland will fail
    enumerable: false,
    get: function get() {
        return this._writableState.highWaterMark;
    }
}); // if we're already writing something, then just put this
// in the queue, and wait our turn.  Otherwise, call _write
// If we return false, then we need a drain event, so set that flag.
function writeOrBuffer(stream, state, isBuf, chunk, encoding, cb) {
    if (!isBuf) {
        var newChunk = decodeChunk(state, chunk, encoding);
        if (chunk !== newChunk) {
            isBuf = true;
            encoding = "buffer";
            chunk = newChunk;
        }
    }
    var len = state.objectMode ? 1 : chunk.length;
    state.length += len;
    var ret = state.length < state.highWaterMark; // we must ensure that previous needDrain will not be reset to false.
    if (!ret) state.needDrain = true;
    if (state.writing || state.corked) {
        var last = state.lastBufferedRequest;
        state.lastBufferedRequest = {
            chunk: chunk,
            encoding: encoding,
            isBuf: isBuf,
            callback: cb,
            next: null
        };
        if (last) last.next = state.lastBufferedRequest;
        else state.bufferedRequest = state.lastBufferedRequest;
        state.bufferedRequestCount += 1;
    } else doWrite(stream, state, false, len, chunk, encoding, cb);
    return ret;
}
function doWrite(stream, state, writev, len, chunk, encoding, cb) {
    state.writelen = len;
    state.writecb = cb;
    state.writing = true;
    state.sync = true;
    if (state.destroyed) state.onwrite(new ERR_STREAM_DESTROYED("write"));
    else if (writev) stream._writev(chunk, state.onwrite);
    else stream._write(chunk, encoding, state.onwrite);
    state.sync = false;
}
function onwriteError(stream, state, sync, er, cb) {
    --state.pendingcb;
    if (sync) {
        // defer the callback if we are being called synchronously
        // to avoid piling up things on the stack
        process.nextTick(cb, er); // this can emit finish, and it will always happen
        // after error
        process.nextTick(finishMaybe, stream, state);
        stream._writableState.errorEmitted = true;
        errorOrDestroy(stream, er);
    } else {
        // the caller expect this to happen before if
        // it is async
        cb(er);
        stream._writableState.errorEmitted = true;
        errorOrDestroy(stream, er); // this can emit finish, but finish must
        // always follow error
        finishMaybe(stream, state);
    }
}
function onwriteStateUpdate(state) {
    state.writing = false;
    state.writecb = null;
    state.length -= state.writelen;
    state.writelen = 0;
}
function onwrite(stream, er) {
    var state = stream._writableState;
    var sync = state.sync;
    var cb = state.writecb;
    if (typeof cb !== "function") throw new ERR_MULTIPLE_CALLBACK();
    onwriteStateUpdate(state);
    if (er) onwriteError(stream, state, sync, er, cb);
    else {
        // Check if we're actually ready to finish, but don't emit yet
        var finished = needFinish(state) || stream.destroyed;
        if (!finished && !state.corked && !state.bufferProcessing && state.bufferedRequest) clearBuffer(stream, state);
        if (sync) process.nextTick(afterWrite, stream, state, finished, cb);
        else afterWrite(stream, state, finished, cb);
    }
}
function afterWrite(stream, state, finished, cb) {
    if (!finished) onwriteDrain(stream, state);
    state.pendingcb--;
    cb();
    finishMaybe(stream, state);
} // Must force callback to be called on nextTick, so that we don't
// emit 'drain' before the write() consumer gets the 'false' return
// value, and has a chance to attach a 'drain' listener.
function onwriteDrain(stream, state) {
    if (state.length === 0 && state.needDrain) {
        state.needDrain = false;
        stream.emit("drain");
    }
} // if there's something in the buffer waiting, then process it
function clearBuffer(stream, state) {
    state.bufferProcessing = true;
    var entry = state.bufferedRequest;
    if (stream._writev && entry && entry.next) {
        // Fast case, write everything using _writev()
        var l = state.bufferedRequestCount;
        var buffer = new Array(l);
        var holder = state.corkedRequestsFree;
        holder.entry = entry;
        var count = 0;
        var allBuffers = true;
        while(entry){
            buffer[count] = entry;
            if (!entry.isBuf) allBuffers = false;
            entry = entry.next;
            count += 1;
        }
        buffer.allBuffers = allBuffers;
        doWrite(stream, state, true, state.length, buffer, "", holder.finish); // doWrite is almost always async, defer these to save a bit of time
        // as the hot path ends with doWrite
        state.pendingcb++;
        state.lastBufferedRequest = null;
        if (holder.next) {
            state.corkedRequestsFree = holder.next;
            holder.next = null;
        } else state.corkedRequestsFree = new CorkedRequest(state);
        state.bufferedRequestCount = 0;
    } else {
        // Slow case, write chunks one-by-one
        while(entry){
            var chunk = entry.chunk;
            var encoding = entry.encoding;
            var cb = entry.callback;
            var len = state.objectMode ? 1 : chunk.length;
            doWrite(stream, state, false, len, chunk, encoding, cb);
            entry = entry.next;
            state.bufferedRequestCount--; // if we didn't call the onwrite immediately, then
            // it means that we need to wait until it does.
            // also, that means that the chunk and cb are currently
            // being processed, so move the buffer counter past them.
            if (state.writing) break;
        }
        if (entry === null) state.lastBufferedRequest = null;
    }
    state.bufferedRequest = entry;
    state.bufferProcessing = false;
}
Writable.prototype._write = function(chunk, encoding, cb) {
    cb(new ERR_METHOD_NOT_IMPLEMENTED("_write()"));
};
Writable.prototype._writev = null;
Writable.prototype.end = function(chunk, encoding, cb) {
    var state = this._writableState;
    if (typeof chunk === "function") {
        cb = chunk;
        chunk = null;
        encoding = null;
    } else if (typeof encoding === "function") {
        cb = encoding;
        encoding = null;
    }
    if (chunk !== null && chunk !== undefined) this.write(chunk, encoding); // .end() fully uncorks
    if (state.corked) {
        state.corked = 1;
        this.uncork();
    } // ignore unnecessary end() calls.
    if (!state.ending) endWritable(this, state, cb);
    return this;
};
Object.defineProperty(Writable.prototype, "writableLength", {
    // making it explicit this property is not enumerable
    // because otherwise some prototype manipulation in
    // userland will fail
    enumerable: false,
    get: function get() {
        return this._writableState.length;
    }
});
function needFinish(state) {
    return state.ending && state.length === 0 && state.bufferedRequest === null && !state.finished && !state.writing;
}
function callFinal(stream, state) {
    stream._final(function(err) {
        state.pendingcb--;
        if (err) errorOrDestroy(stream, err);
        state.prefinished = true;
        stream.emit("prefinish");
        finishMaybe(stream, state);
    });
}
function prefinish(stream, state) {
    if (!state.prefinished && !state.finalCalled) {
        if (typeof stream._final === "function" && !state.destroyed) {
            state.pendingcb++;
            state.finalCalled = true;
            process.nextTick(callFinal, stream, state);
        } else {
            state.prefinished = true;
            stream.emit("prefinish");
        }
    }
}
function finishMaybe(stream, state) {
    var need = needFinish(state);
    if (need) {
        prefinish(stream, state);
        if (state.pendingcb === 0) {
            state.finished = true;
            stream.emit("finish");
            if (state.autoDestroy) {
                // In case of duplex streams we need a way to detect
                // if the readable side is ready for autoDestroy as well
                var rState = stream._readableState;
                if (!rState || rState.autoDestroy && rState.endEmitted) stream.destroy();
            }
        }
    }
    return need;
}
function endWritable(stream, state, cb) {
    state.ending = true;
    finishMaybe(stream, state);
    if (cb) {
        if (state.finished) process.nextTick(cb);
        else stream.once("finish", cb);
    }
    state.ended = true;
    stream.writable = false;
}
function onCorkedFinish(corkReq, state, err) {
    var entry = corkReq.entry;
    corkReq.entry = null;
    while(entry){
        var cb = entry.callback;
        state.pendingcb--;
        cb(err);
        entry = entry.next;
    } // reuse the free corkReq.
    state.corkedRequestsFree.next = corkReq;
}
Object.defineProperty(Writable.prototype, "destroyed", {
    // making it explicit this property is not enumerable
    // because otherwise some prototype manipulation in
    // userland will fail
    enumerable: false,
    get: function get() {
        if (this._writableState === undefined) return false;
        return this._writableState.destroyed;
    },
    set: function set(value) {
        // we ignore the value if the stream
        // has not been initialized yet
        if (!this._writableState) return;
         // backward compatibility, the user is explicitly
        // managing destroyed
        this._writableState.destroyed = value;
    }
});
Writable.prototype.destroy = destroyImpl.destroy;
Writable.prototype._undestroy = destroyImpl.undestroy;
Writable.prototype._destroy = function(err, cb) {
    cb(err);
};

},{"process":"gq3cc","util-deprecate":"aS0tA","./internal/streams/stream":"9z3W4","buffer":"6tQNr","./internal/streams/destroy":"9XP5E","./internal/streams/state":"ks1Kj","../errors":"5EQW4","inherits":"l3bOz","./_stream_duplex":"e7R9x"}],"aS0tA":[function(require,module,exports) {
var global = arguments[3];
/**
 * Module exports.
 */ module.exports = deprecate;
/**
 * Mark that a method should not be used.
 * Returns a modified function which warns once by default.
 *
 * If `localStorage.noDeprecation = true` is set, then it is a no-op.
 *
 * If `localStorage.throwDeprecation = true` is set, then deprecated functions
 * will throw an Error when invoked.
 *
 * If `localStorage.traceDeprecation = true` is set, then deprecated functions
 * will invoke `console.trace()` instead of `console.error()`.
 *
 * @param {Function} fn - the function to deprecate
 * @param {String} msg - the string to print to the console when `fn` is invoked
 * @returns {Function} a new "deprecated" version of `fn`
 * @api public
 */ function deprecate(fn, msg) {
    if (config("noDeprecation")) return fn;
    var warned = false;
    function deprecated() {
        if (!warned) {
            if (config("throwDeprecation")) throw new Error(msg);
            else if (config("traceDeprecation")) console.trace(msg);
            else console.warn(msg);
            warned = true;
        }
        return fn.apply(this, arguments);
    }
    return deprecated;
}
/**
 * Checks `localStorage` for boolean values for the given `name`.
 *
 * @param {String} name
 * @returns {Boolean}
 * @api private
 */ function config(name) {
    // accessing global.localStorage can trigger a DOMException in sandboxed iframes
    try {
        if (!global.localStorage) return false;
    } catch (_) {
        return false;
    }
    var val = global.localStorage[name];
    if (null == val) return false;
    return String(val).toLowerCase() === "true";
}

},{}],"9gZvY":[function(require,module,exports) {
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.
"use strict";
/*<replacement>*/ var Buffer = require("safe-buffer").Buffer;
/*</replacement>*/ var isEncoding = Buffer.isEncoding || function(encoding) {
    encoding = "" + encoding;
    switch(encoding && encoding.toLowerCase()){
        case "hex":
        case "utf8":
        case "utf-8":
        case "ascii":
        case "binary":
        case "base64":
        case "ucs2":
        case "ucs-2":
        case "utf16le":
        case "utf-16le":
        case "raw":
            return true;
        default:
            return false;
    }
};
function _normalizeEncoding(enc) {
    if (!enc) return "utf8";
    var retried;
    while(true)switch(enc){
        case "utf8":
        case "utf-8":
            return "utf8";
        case "ucs2":
        case "ucs-2":
        case "utf16le":
        case "utf-16le":
            return "utf16le";
        case "latin1":
        case "binary":
            return "latin1";
        case "base64":
        case "ascii":
        case "hex":
            return enc;
        default:
            if (retried) return; // undefined
            enc = ("" + enc).toLowerCase();
            retried = true;
    }
}
// Do not cache `Buffer.isEncoding` when checking encoding names as some
// modules monkey-patch it to support additional encodings
function normalizeEncoding(enc) {
    var nenc = _normalizeEncoding(enc);
    if (typeof nenc !== "string" && (Buffer.isEncoding === isEncoding || !isEncoding(enc))) throw new Error("Unknown encoding: " + enc);
    return nenc || enc;
}
// StringDecoder provides an interface for efficiently splitting a series of
// buffers into a series of JS strings without breaking apart multi-byte
// characters.
exports.StringDecoder = StringDecoder;
function StringDecoder(encoding) {
    this.encoding = normalizeEncoding(encoding);
    var nb;
    switch(this.encoding){
        case "utf16le":
            this.text = utf16Text;
            this.end = utf16End;
            nb = 4;
            break;
        case "utf8":
            this.fillLast = utf8FillLast;
            nb = 4;
            break;
        case "base64":
            this.text = base64Text;
            this.end = base64End;
            nb = 3;
            break;
        default:
            this.write = simpleWrite;
            this.end = simpleEnd;
            return;
    }
    this.lastNeed = 0;
    this.lastTotal = 0;
    this.lastChar = Buffer.allocUnsafe(nb);
}
StringDecoder.prototype.write = function(buf) {
    if (buf.length === 0) return "";
    var r;
    var i;
    if (this.lastNeed) {
        r = this.fillLast(buf);
        if (r === undefined) return "";
        i = this.lastNeed;
        this.lastNeed = 0;
    } else i = 0;
    if (i < buf.length) return r ? r + this.text(buf, i) : this.text(buf, i);
    return r || "";
};
StringDecoder.prototype.end = utf8End;
// Returns only complete characters in a Buffer
StringDecoder.prototype.text = utf8Text;
// Attempts to complete a partial non-UTF-8 character using bytes from a Buffer
StringDecoder.prototype.fillLast = function(buf) {
    if (this.lastNeed <= buf.length) {
        buf.copy(this.lastChar, this.lastTotal - this.lastNeed, 0, this.lastNeed);
        return this.lastChar.toString(this.encoding, 0, this.lastTotal);
    }
    buf.copy(this.lastChar, this.lastTotal - this.lastNeed, 0, buf.length);
    this.lastNeed -= buf.length;
};
// Checks the type of a UTF-8 byte, whether it's ASCII, a leading byte, or a
// continuation byte. If an invalid byte is detected, -2 is returned.
function utf8CheckByte(byte) {
    if (byte <= 0x7F) return 0;
    else if (byte >> 5 === 0x06) return 2;
    else if (byte >> 4 === 0x0E) return 3;
    else if (byte >> 3 === 0x1E) return 4;
    return byte >> 6 === 0x02 ? -1 : -2;
}
// Checks at most 3 bytes at the end of a Buffer in order to detect an
// incomplete multi-byte UTF-8 character. The total number of bytes (2, 3, or 4)
// needed to complete the UTF-8 character (if applicable) are returned.
function utf8CheckIncomplete(self, buf, i) {
    var j = buf.length - 1;
    if (j < i) return 0;
    var nb = utf8CheckByte(buf[j]);
    if (nb >= 0) {
        if (nb > 0) self.lastNeed = nb - 1;
        return nb;
    }
    if (--j < i || nb === -2) return 0;
    nb = utf8CheckByte(buf[j]);
    if (nb >= 0) {
        if (nb > 0) self.lastNeed = nb - 2;
        return nb;
    }
    if (--j < i || nb === -2) return 0;
    nb = utf8CheckByte(buf[j]);
    if (nb >= 0) {
        if (nb > 0) {
            if (nb === 2) nb = 0;
            else self.lastNeed = nb - 3;
        }
        return nb;
    }
    return 0;
}
// Validates as many continuation bytes for a multi-byte UTF-8 character as
// needed or are available. If we see a non-continuation byte where we expect
// one, we "replace" the validated continuation bytes we've seen so far with
// a single UTF-8 replacement character ('\ufffd'), to match v8's UTF-8 decoding
// behavior. The continuation byte check is included three times in the case
// where all of the continuation bytes for a character exist in the same buffer.
// It is also done this way as a slight performance increase instead of using a
// loop.
function utf8CheckExtraBytes(self, buf, p) {
    if ((buf[0] & 0xC0) !== 0x80) {
        self.lastNeed = 0;
        return "\uFFFD";
    }
    if (self.lastNeed > 1 && buf.length > 1) {
        if ((buf[1] & 0xC0) !== 0x80) {
            self.lastNeed = 1;
            return "\uFFFD";
        }
        if (self.lastNeed > 2 && buf.length > 2) {
            if ((buf[2] & 0xC0) !== 0x80) {
                self.lastNeed = 2;
                return "\uFFFD";
            }
        }
    }
}
// Attempts to complete a multi-byte UTF-8 character using bytes from a Buffer.
function utf8FillLast(buf) {
    var p = this.lastTotal - this.lastNeed;
    var r = utf8CheckExtraBytes(this, buf, p);
    if (r !== undefined) return r;
    if (this.lastNeed <= buf.length) {
        buf.copy(this.lastChar, p, 0, this.lastNeed);
        return this.lastChar.toString(this.encoding, 0, this.lastTotal);
    }
    buf.copy(this.lastChar, p, 0, buf.length);
    this.lastNeed -= buf.length;
}
// Returns all complete UTF-8 characters in a Buffer. If the Buffer ended on a
// partial character, the character's bytes are buffered until the required
// number of bytes are available.
function utf8Text(buf, i) {
    var total = utf8CheckIncomplete(this, buf, i);
    if (!this.lastNeed) return buf.toString("utf8", i);
    this.lastTotal = total;
    var end = buf.length - (total - this.lastNeed);
    buf.copy(this.lastChar, 0, end);
    return buf.toString("utf8", i, end);
}
// For UTF-8, a replacement character is added when ending on a partial
// character.
function utf8End(buf) {
    var r = buf && buf.length ? this.write(buf) : "";
    if (this.lastNeed) return r + "\uFFFD";
    return r;
}
// UTF-16LE typically needs two bytes per character, but even if we have an even
// number of bytes available, we need to check if we end on a leading/high
// surrogate. In that case, we need to wait for the next two bytes in order to
// decode the last character properly.
function utf16Text(buf, i) {
    if ((buf.length - i) % 2 === 0) {
        var r = buf.toString("utf16le", i);
        if (r) {
            var c = r.charCodeAt(r.length - 1);
            if (c >= 0xD800 && c <= 0xDBFF) {
                this.lastNeed = 2;
                this.lastTotal = 4;
                this.lastChar[0] = buf[buf.length - 2];
                this.lastChar[1] = buf[buf.length - 1];
                return r.slice(0, -1);
            }
        }
        return r;
    }
    this.lastNeed = 1;
    this.lastTotal = 2;
    this.lastChar[0] = buf[buf.length - 1];
    return buf.toString("utf16le", i, buf.length - 1);
}
// For UTF-16LE we do not explicitly append special replacement characters if we
// end on a partial character, we simply let v8 handle that.
function utf16End(buf) {
    var r = buf && buf.length ? this.write(buf) : "";
    if (this.lastNeed) {
        var end = this.lastTotal - this.lastNeed;
        return r + this.lastChar.toString("utf16le", 0, end);
    }
    return r;
}
function base64Text(buf, i) {
    var n = (buf.length - i) % 3;
    if (n === 0) return buf.toString("base64", i);
    this.lastNeed = 3 - n;
    this.lastTotal = 3;
    if (n === 1) this.lastChar[0] = buf[buf.length - 1];
    else {
        this.lastChar[0] = buf[buf.length - 2];
        this.lastChar[1] = buf[buf.length - 1];
    }
    return buf.toString("base64", i, buf.length - n);
}
function base64End(buf) {
    var r = buf && buf.length ? this.write(buf) : "";
    if (this.lastNeed) return r + this.lastChar.toString("base64", 0, 3 - this.lastNeed);
    return r;
}
// Pass bytes on through for single-byte encodings (e.g. ascii, latin1, hex)
function simpleWrite(buf) {
    return buf.toString(this.encoding);
}
function simpleEnd(buf) {
    return buf && buf.length ? this.write(buf) : "";
}

},{"safe-buffer":"4WLFd"}],"4WLFd":[function(require,module,exports) {
/*! safe-buffer. MIT License. Feross Aboukhadijeh <https://feross.org/opensource> */ /* eslint-disable node/no-deprecated-api */ var buffer = require("buffer");
var Buffer = buffer.Buffer;
// alternative to using Object.keys for old browsers
function copyProps(src, dst) {
    for(var key in src)dst[key] = src[key];
}
if (Buffer.from && Buffer.alloc && Buffer.allocUnsafe && Buffer.allocUnsafeSlow) module.exports = buffer;
else {
    // Copy properties from require('buffer')
    copyProps(buffer, exports);
    exports.Buffer = SafeBuffer;
}
function SafeBuffer(arg, encodingOrOffset, length) {
    return Buffer(arg, encodingOrOffset, length);
}
SafeBuffer.prototype = Object.create(Buffer.prototype);
// Copy static methods from Buffer
copyProps(Buffer, SafeBuffer);
SafeBuffer.from = function(arg, encodingOrOffset, length) {
    if (typeof arg === "number") throw new TypeError("Argument must not be a number");
    return Buffer(arg, encodingOrOffset, length);
};
SafeBuffer.alloc = function(size, fill, encoding) {
    if (typeof size !== "number") throw new TypeError("Argument must be a number");
    var buf = Buffer(size);
    if (fill !== undefined) {
        if (typeof encoding === "string") buf.fill(fill, encoding);
        else buf.fill(fill);
    } else buf.fill(0);
    return buf;
};
SafeBuffer.allocUnsafe = function(size) {
    if (typeof size !== "number") throw new TypeError("Argument must be a number");
    return Buffer(size);
};
SafeBuffer.allocUnsafeSlow = function(size) {
    if (typeof size !== "number") throw new TypeError("Argument must be a number");
    return buffer.SlowBuffer(size);
};

},{"buffer":"6tQNr"}],"jMXvV":[function(require,module,exports) {
"use strict";
var process = require("process");
var _Object$setPrototypeO;
function _defineProperty(obj, key, value) {
    if (key in obj) Object.defineProperty(obj, key, {
        value: value,
        enumerable: true,
        configurable: true,
        writable: true
    });
    else obj[key] = value;
    return obj;
}
var finished = require("./end-of-stream");
var kLastResolve = Symbol("lastResolve");
var kLastReject = Symbol("lastReject");
var kError = Symbol("error");
var kEnded = Symbol("ended");
var kLastPromise = Symbol("lastPromise");
var kHandlePromise = Symbol("handlePromise");
var kStream = Symbol("stream");
function createIterResult(value, done) {
    return {
        value: value,
        done: done
    };
}
function readAndResolve(iter) {
    var resolve = iter[kLastResolve];
    if (resolve !== null) {
        var data = iter[kStream].read(); // we defer if data is null
        // we can be expecting either 'end' or
        // 'error'
        if (data !== null) {
            iter[kLastPromise] = null;
            iter[kLastResolve] = null;
            iter[kLastReject] = null;
            resolve(createIterResult(data, false));
        }
    }
}
function onReadable(iter) {
    // we wait for the next tick, because it might
    // emit an error with process.nextTick
    process.nextTick(readAndResolve, iter);
}
function wrapForNext(lastPromise, iter) {
    return function(resolve, reject) {
        lastPromise.then(function() {
            if (iter[kEnded]) {
                resolve(createIterResult(undefined, true));
                return;
            }
            iter[kHandlePromise](resolve, reject);
        }, reject);
    };
}
var AsyncIteratorPrototype = Object.getPrototypeOf(function() {});
var ReadableStreamAsyncIteratorPrototype = Object.setPrototypeOf((_Object$setPrototypeO = {
    get stream () {
        return this[kStream];
    },
    next: function next() {
        var _this = this;
        // if we have detected an error in the meanwhile
        // reject straight away
        var error = this[kError];
        if (error !== null) return Promise.reject(error);
        if (this[kEnded]) return Promise.resolve(createIterResult(undefined, true));
        if (this[kStream].destroyed) // We need to defer via nextTick because if .destroy(err) is
        // called, the error will be emitted via nextTick, and
        // we cannot guarantee that there is no error lingering around
        // waiting to be emitted.
        return new Promise(function(resolve, reject) {
            process.nextTick(function() {
                if (_this[kError]) reject(_this[kError]);
                else resolve(createIterResult(undefined, true));
            });
        });
         // if we have multiple next() calls
        // we will wait for the previous Promise to finish
        // this logic is optimized to support for await loops,
        // where next() is only called once at a time
        var lastPromise = this[kLastPromise];
        var promise;
        if (lastPromise) promise = new Promise(wrapForNext(lastPromise, this));
        else {
            // fast path needed to support multiple this.push()
            // without triggering the next() queue
            var data = this[kStream].read();
            if (data !== null) return Promise.resolve(createIterResult(data, false));
            promise = new Promise(this[kHandlePromise]);
        }
        this[kLastPromise] = promise;
        return promise;
    }
}, _defineProperty(_Object$setPrototypeO, Symbol.asyncIterator, function() {
    return this;
}), _defineProperty(_Object$setPrototypeO, "return", function _return() {
    var _this2 = this;
    // destroy(err, cb) is a private API
    // we can guarantee we have that here, because we control the
    // Readable class this is attached to
    return new Promise(function(resolve, reject) {
        _this2[kStream].destroy(null, function(err) {
            if (err) {
                reject(err);
                return;
            }
            resolve(createIterResult(undefined, true));
        });
    });
}), _Object$setPrototypeO), AsyncIteratorPrototype);
var createReadableStreamAsyncIterator = function createReadableStreamAsyncIterator(stream) {
    var _Object$create;
    var iterator = Object.create(ReadableStreamAsyncIteratorPrototype, (_Object$create = {}, _defineProperty(_Object$create, kStream, {
        value: stream,
        writable: true
    }), _defineProperty(_Object$create, kLastResolve, {
        value: null,
        writable: true
    }), _defineProperty(_Object$create, kLastReject, {
        value: null,
        writable: true
    }), _defineProperty(_Object$create, kError, {
        value: null,
        writable: true
    }), _defineProperty(_Object$create, kEnded, {
        value: stream._readableState.endEmitted,
        writable: true
    }), _defineProperty(_Object$create, kHandlePromise, {
        value: function value(resolve, reject) {
            var data = iterator[kStream].read();
            if (data) {
                iterator[kLastPromise] = null;
                iterator[kLastResolve] = null;
                iterator[kLastReject] = null;
                resolve(createIterResult(data, false));
            } else {
                iterator[kLastResolve] = resolve;
                iterator[kLastReject] = reject;
            }
        },
        writable: true
    }), _Object$create));
    iterator[kLastPromise] = null;
    finished(stream, function(err) {
        if (err && err.code !== "ERR_STREAM_PREMATURE_CLOSE") {
            var reject = iterator[kLastReject]; // reject if we are waiting for data in the Promise
            // returned by next() and store the error
            if (reject !== null) {
                iterator[kLastPromise] = null;
                iterator[kLastResolve] = null;
                iterator[kLastReject] = null;
                reject(err);
            }
            iterator[kError] = err;
            return;
        }
        var resolve = iterator[kLastResolve];
        if (resolve !== null) {
            iterator[kLastPromise] = null;
            iterator[kLastResolve] = null;
            iterator[kLastReject] = null;
            resolve(createIterResult(undefined, true));
        }
        iterator[kEnded] = true;
    });
    stream.on("readable", onReadable.bind(null, iterator));
    return iterator;
};
module.exports = createReadableStreamAsyncIterator;

},{"process":"gq3cc","./end-of-stream":"4KjsE"}],"4KjsE":[function(require,module,exports) {
// Ported from https://github.com/mafintosh/end-of-stream with
// permission from the author, Mathias Buus (@mafintosh).
"use strict";
var ERR_STREAM_PREMATURE_CLOSE = require("../../../errors").codes.ERR_STREAM_PREMATURE_CLOSE;
function once(callback) {
    var called = false;
    return function() {
        if (called) return;
        called = true;
        for(var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++)args[_key] = arguments[_key];
        callback.apply(this, args);
    };
}
function noop() {}
function isRequest(stream) {
    return stream.setHeader && typeof stream.abort === "function";
}
function eos(stream, opts, callback) {
    if (typeof opts === "function") return eos(stream, null, opts);
    if (!opts) opts = {};
    callback = once(callback || noop);
    var readable = opts.readable || opts.readable !== false && stream.readable;
    var writable = opts.writable || opts.writable !== false && stream.writable;
    var onlegacyfinish = function onlegacyfinish() {
        if (!stream.writable) onfinish();
    };
    var writableEnded = stream._writableState && stream._writableState.finished;
    var onfinish = function onfinish() {
        writable = false;
        writableEnded = true;
        if (!readable) callback.call(stream);
    };
    var readableEnded = stream._readableState && stream._readableState.endEmitted;
    var onend = function onend() {
        readable = false;
        readableEnded = true;
        if (!writable) callback.call(stream);
    };
    var onerror = function onerror(err) {
        callback.call(stream, err);
    };
    var onclose = function onclose() {
        var err;
        if (readable && !readableEnded) {
            if (!stream._readableState || !stream._readableState.ended) err = new ERR_STREAM_PREMATURE_CLOSE();
            return callback.call(stream, err);
        }
        if (writable && !writableEnded) {
            if (!stream._writableState || !stream._writableState.ended) err = new ERR_STREAM_PREMATURE_CLOSE();
            return callback.call(stream, err);
        }
    };
    var onrequest = function onrequest() {
        stream.req.on("finish", onfinish);
    };
    if (isRequest(stream)) {
        stream.on("complete", onfinish);
        stream.on("abort", onclose);
        if (stream.req) onrequest();
        else stream.on("request", onrequest);
    } else if (writable && !stream._writableState) {
        // legacy streams
        stream.on("end", onlegacyfinish);
        stream.on("close", onlegacyfinish);
    }
    stream.on("end", onend);
    stream.on("finish", onfinish);
    if (opts.error !== false) stream.on("error", onerror);
    stream.on("close", onclose);
    return function() {
        stream.removeListener("complete", onfinish);
        stream.removeListener("abort", onclose);
        stream.removeListener("request", onrequest);
        if (stream.req) stream.req.removeListener("finish", onfinish);
        stream.removeListener("end", onlegacyfinish);
        stream.removeListener("close", onlegacyfinish);
        stream.removeListener("finish", onfinish);
        stream.removeListener("end", onend);
        stream.removeListener("error", onerror);
        stream.removeListener("close", onclose);
    };
}
module.exports = eos;

},{"../../../errors":"5EQW4"}],"l88sT":[function(require,module,exports) {
module.exports = function() {
    throw new Error("Readable.from is not available in the browser");
};

},{}],"lXi5u":[function(require,module,exports) {
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.
// a transform stream is a readable/writable stream where you do
// something with the data.  Sometimes it's called a "filter",
// but that's not a great name for it, since that implies a thing where
// some bits pass through, and others are simply ignored.  (That would
// be a valid example of a transform, of course.)
//
// While the output is causally related to the input, it's not a
// necessarily symmetric or synchronous transformation.  For example,
// a zlib stream might take multiple plain-text writes(), and then
// emit a single compressed chunk some time in the future.
//
// Here's how this works:
//
// The Transform stream has all the aspects of the readable and writable
// stream classes.  When you write(chunk), that calls _write(chunk,cb)
// internally, and returns false if there's a lot of pending writes
// buffered up.  When you call read(), that calls _read(n) until
// there's enough pending readable data buffered up.
//
// In a transform stream, the written data is placed in a buffer.  When
// _read(n) is called, it transforms the queued up data, calling the
// buffered _write cb's as it consumes chunks.  If consuming a single
// written chunk would result in multiple output chunks, then the first
// outputted bit calls the readcb, and subsequent chunks just go into
// the read buffer, and will cause it to emit 'readable' if necessary.
//
// This way, back-pressure is actually determined by the reading side,
// since _read has to be called to start processing a new chunk.  However,
// a pathological inflate type of transform can cause excessive buffering
// here.  For example, imagine a stream where every byte of input is
// interpreted as an integer from 0-255, and then results in that many
// bytes of output.  Writing the 4 bytes {ff,ff,ff,ff} would result in
// 1kb of data being output.  In this case, you could write a very small
// amount of input, and end up with a very large amount of output.  In
// such a pathological inflating mechanism, there'd be no way to tell
// the system to stop doing the transform.  A single 4MB write could
// cause the system to run out of memory.
//
// However, even in such a pathological case, only a single written chunk
// would be consumed, and then the rest would wait (un-transformed) until
// the results of the previous transformed chunk were consumed.
"use strict";
module.exports = Transform;
var _require$codes = require("../errors").codes, ERR_METHOD_NOT_IMPLEMENTED = _require$codes.ERR_METHOD_NOT_IMPLEMENTED, ERR_MULTIPLE_CALLBACK = _require$codes.ERR_MULTIPLE_CALLBACK, ERR_TRANSFORM_ALREADY_TRANSFORMING = _require$codes.ERR_TRANSFORM_ALREADY_TRANSFORMING, ERR_TRANSFORM_WITH_LENGTH_0 = _require$codes.ERR_TRANSFORM_WITH_LENGTH_0;
var Duplex = require("./_stream_duplex");
require("inherits")(Transform, Duplex);
function afterTransform(er, data) {
    var ts = this._transformState;
    ts.transforming = false;
    var cb = ts.writecb;
    if (cb === null) return this.emit("error", new ERR_MULTIPLE_CALLBACK());
    ts.writechunk = null;
    ts.writecb = null;
    if (data != null) this.push(data);
    cb(er);
    var rs = this._readableState;
    rs.reading = false;
    if (rs.needReadable || rs.length < rs.highWaterMark) this._read(rs.highWaterMark);
}
function Transform(options) {
    if (!(this instanceof Transform)) return new Transform(options);
    Duplex.call(this, options);
    this._transformState = {
        afterTransform: afterTransform.bind(this),
        needTransform: false,
        transforming: false,
        writecb: null,
        writechunk: null,
        writeencoding: null
    }; // start out asking for a readable event once data is transformed.
    this._readableState.needReadable = true; // we have implemented the _read method, and done the other things
    // that Readable wants before the first _read call, so unset the
    // sync guard flag.
    this._readableState.sync = false;
    if (options) {
        if (typeof options.transform === "function") this._transform = options.transform;
        if (typeof options.flush === "function") this._flush = options.flush;
    } // When the writable side finishes, then flush out anything remaining.
    this.on("prefinish", prefinish);
}
function prefinish() {
    var _this = this;
    if (typeof this._flush === "function" && !this._readableState.destroyed) this._flush(function(er, data) {
        done(_this, er, data);
    });
    else done(this, null, null);
}
Transform.prototype.push = function(chunk, encoding) {
    this._transformState.needTransform = false;
    return Duplex.prototype.push.call(this, chunk, encoding);
}; // This is the part where you do stuff!
// override this function in implementation classes.
// 'chunk' is an input chunk.
//
// Call `push(newChunk)` to pass along transformed output
// to the readable side.  You may call 'push' zero or more times.
//
// Call `cb(err)` when you are done with this chunk.  If you pass
// an error, then that'll put the hurt on the whole operation.  If you
// never call cb(), then you'll never get another chunk.
Transform.prototype._transform = function(chunk, encoding, cb) {
    cb(new ERR_METHOD_NOT_IMPLEMENTED("_transform()"));
};
Transform.prototype._write = function(chunk, encoding, cb) {
    var ts = this._transformState;
    ts.writecb = cb;
    ts.writechunk = chunk;
    ts.writeencoding = encoding;
    if (!ts.transforming) {
        var rs = this._readableState;
        if (ts.needTransform || rs.needReadable || rs.length < rs.highWaterMark) this._read(rs.highWaterMark);
    }
}; // Doesn't matter what the args are here.
// _transform does all the work.
// That we got here means that the readable side wants more data.
Transform.prototype._read = function(n) {
    var ts = this._transformState;
    if (ts.writechunk !== null && !ts.transforming) {
        ts.transforming = true;
        this._transform(ts.writechunk, ts.writeencoding, ts.afterTransform);
    } else // mark that we need a transform, so that any data that comes in
    // will get processed, now that we've asked for it.
    ts.needTransform = true;
};
Transform.prototype._destroy = function(err, cb) {
    Duplex.prototype._destroy.call(this, err, function(err2) {
        cb(err2);
    });
};
function done(stream, er, data) {
    if (er) return stream.emit("error", er);
    if (data != null) stream.push(data); // TODO(BridgeAR): Write a test for these two error cases
    // if there's nothing in the write buffer, then that means
    // that nothing more will ever be provided
    if (stream._writableState.length) throw new ERR_TRANSFORM_WITH_LENGTH_0();
    if (stream._transformState.transforming) throw new ERR_TRANSFORM_ALREADY_TRANSFORMING();
    return stream.push(null);
}

},{"../errors":"5EQW4","./_stream_duplex":"e7R9x","inherits":"l3bOz"}],"9wa6Y":[function(require,module,exports) {
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.
// a passthrough stream.
// basically just the most minimal sort of Transform stream.
// Every written chunk gets output as-is.
"use strict";
module.exports = PassThrough;
var Transform = require("./_stream_transform");
require("inherits")(PassThrough, Transform);
function PassThrough(options) {
    if (!(this instanceof PassThrough)) return new PassThrough(options);
    Transform.call(this, options);
}
PassThrough.prototype._transform = function(chunk, encoding, cb) {
    cb(null, chunk);
};

},{"./_stream_transform":"lXi5u","inherits":"l3bOz"}],"9oBZJ":[function(require,module,exports) {
// Ported from https://github.com/mafintosh/pump with
// permission from the author, Mathias Buus (@mafintosh).
"use strict";
var eos;
function once(callback) {
    var called = false;
    return function() {
        if (called) return;
        called = true;
        callback.apply(void 0, arguments);
    };
}
var _require$codes = require("../../../errors").codes, ERR_MISSING_ARGS = _require$codes.ERR_MISSING_ARGS, ERR_STREAM_DESTROYED = _require$codes.ERR_STREAM_DESTROYED;
function noop(err) {
    // Rethrow the error if it exists to avoid swallowing it
    if (err) throw err;
}
function isRequest(stream) {
    return stream.setHeader && typeof stream.abort === "function";
}
function destroyer(stream, reading, writing, callback) {
    callback = once(callback);
    var closed = false;
    stream.on("close", function() {
        closed = true;
    });
    if (eos === undefined) eos = require("./end-of-stream");
    eos(stream, {
        readable: reading,
        writable: writing
    }, function(err) {
        if (err) return callback(err);
        closed = true;
        callback();
    });
    var destroyed = false;
    return function(err) {
        if (closed) return;
        if (destroyed) return;
        destroyed = true; // request.destroy just do .end - .abort is what we want
        if (isRequest(stream)) return stream.abort();
        if (typeof stream.destroy === "function") return stream.destroy();
        callback(err || new ERR_STREAM_DESTROYED("pipe"));
    };
}
function call(fn) {
    fn();
}
function pipe(from, to) {
    return from.pipe(to);
}
function popCallback(streams) {
    if (!streams.length) return noop;
    if (typeof streams[streams.length - 1] !== "function") return noop;
    return streams.pop();
}
function pipeline() {
    for(var _len = arguments.length, streams = new Array(_len), _key = 0; _key < _len; _key++)streams[_key] = arguments[_key];
    var callback = popCallback(streams);
    if (Array.isArray(streams[0])) streams = streams[0];
    if (streams.length < 2) throw new ERR_MISSING_ARGS("streams");
    var error;
    var destroys = streams.map(function(stream, i) {
        var reading = i < streams.length - 1;
        var writing = i > 0;
        return destroyer(stream, reading, writing, function(err) {
            if (!error) error = err;
            if (err) destroys.forEach(call);
            if (reading) return;
            destroys.forEach(call);
            callback(error);
        });
    });
    return streams.reduce(pipe);
}
module.exports = pipeline;

},{"../../../errors":"5EQW4","./end-of-stream":"4KjsE"}],"lE7Rf":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "uid", ()=>uid);
var IDX = 256, HEX = [], SIZE = 256, BUFFER;
while(IDX--)HEX[IDX] = (IDX + 256).toString(16).substring(1);
function uid(len) {
    var i = 0, tmp = len || 11;
    if (!BUFFER || IDX + tmp > SIZE * 2) for(BUFFER = "", IDX = 0; i < SIZE; i++)BUFFER += HEX[Math.random() * 256 | 0];
    return BUFFER.substring(IDX, (IDX++) + tmp);
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"j7FRh"}],"77kdC":[function(require,module,exports) {
var moment = module.exports = require("./moment-timezone");
moment.tz.load(require("./data/packed/latest.json"));

},{"./moment-timezone":"1nSBl","./data/packed/latest.json":"bpzNI"}],"1nSBl":[function(require,module,exports) {
//! moment-timezone.js
//! version : 0.5.34
//! Copyright (c) JS Foundation and other contributors
//! license : MIT
//! github.com/moment/moment-timezone
(function(root, factory) {
    "use strict";
    /*global define*/ if (module.exports) module.exports = factory(require("moment")); // Node
    else if (typeof define === "function" && define.amd) define([
        "moment"
    ], factory); // AMD
    else factory(root.moment); // Browser
})(this, function(moment) {
    "use strict";
    // Resolves es6 module loading issue
    if (moment.version === undefined && moment.default) moment = moment.default;
    // Do not load moment-timezone a second time.
    // if (moment.tz !== undefined) {
    // 	logError('Moment Timezone ' + moment.tz.version + ' was already loaded ' + (moment.tz.dataVersion ? 'with data from ' : 'without any data') + moment.tz.dataVersion);
    // 	return moment;
    // }
    var VERSION = "0.5.34", zones1 = {}, links = {}, countries = {}, names = {}, guesses1 = {}, cachedGuess;
    if (!moment || typeof moment.version !== "string") logError("Moment Timezone requires Moment.js. See https://momentjs.com/timezone/docs/#/use-it/browser/");
    var momentVersion = moment.version.split("."), major = +momentVersion[0], minor = +momentVersion[1];
    // Moment.js version check
    if (major < 2 || major === 2 && minor < 6) logError("Moment Timezone requires Moment.js >= 2.6.0. You are using Moment.js " + moment.version + ". See momentjs.com");
    /************************************
		Unpacking
	************************************/ function charCodeToInt(charCode) {
        if (charCode > 96) return charCode - 87;
        else if (charCode > 64) return charCode - 29;
        return charCode - 48;
    }
    function unpackBase60(string) {
        var i = 0, parts = string.split("."), whole = parts[0], fractional = parts[1] || "", multiplier = 1, num, out = 0, sign = 1;
        // handle negative numbers
        if (string.charCodeAt(0) === 45) {
            i = 1;
            sign = -1;
        }
        // handle digits before the decimal
        for(i; i < whole.length; i++){
            num = charCodeToInt(whole.charCodeAt(i));
            out = 60 * out + num;
        }
        // handle digits after the decimal
        for(i = 0; i < fractional.length; i++){
            multiplier = multiplier / 60;
            num = charCodeToInt(fractional.charCodeAt(i));
            out += num * multiplier;
        }
        return out * sign;
    }
    function arrayToInt(array) {
        for(var i = 0; i < array.length; i++)array[i] = unpackBase60(array[i]);
    }
    function intToUntil(array, length) {
        for(var i = 0; i < length; i++)array[i] = Math.round((array[i - 1] || 0) + array[i] * 60000); // minutes to milliseconds
        array[length - 1] = Infinity;
    }
    function mapIndices(source, indices) {
        var out = [], i;
        for(i = 0; i < indices.length; i++)out[i] = source[indices[i]];
        return out;
    }
    function unpack(string) {
        var data = string.split("|"), offsets = data[2].split(" "), indices = data[3].split(""), untils = data[4].split(" ");
        arrayToInt(offsets);
        arrayToInt(indices);
        arrayToInt(untils);
        intToUntil(untils, indices.length);
        return {
            name: data[0],
            abbrs: mapIndices(data[1].split(" "), indices),
            offsets: mapIndices(offsets, indices),
            untils: untils,
            population: data[5] | 0
        };
    }
    /************************************
		Zone object
	************************************/ function Zone(packedString) {
        if (packedString) this._set(unpack(packedString));
    }
    Zone.prototype = {
        _set: function(unpacked) {
            this.name = unpacked.name;
            this.abbrs = unpacked.abbrs;
            this.untils = unpacked.untils;
            this.offsets = unpacked.offsets;
            this.population = unpacked.population;
        },
        _index: function(timestamp) {
            var target = +timestamp, untils = this.untils, i;
            for(i = 0; i < untils.length; i++){
                if (target < untils[i]) return i;
            }
        },
        countries: function() {
            var zone_name = this.name;
            return Object.keys(countries).filter(function(country_code) {
                return countries[country_code].zones.indexOf(zone_name) !== -1;
            });
        },
        parse: function(timestamp) {
            var target = +timestamp, offsets = this.offsets, untils = this.untils, max = untils.length - 1, offset, offsetNext, offsetPrev, i;
            for(i = 0; i < max; i++){
                offset = offsets[i];
                offsetNext = offsets[i + 1];
                offsetPrev = offsets[i ? i - 1 : i];
                if (offset < offsetNext && tz.moveAmbiguousForward) offset = offsetNext;
                else if (offset > offsetPrev && tz.moveInvalidForward) offset = offsetPrev;
                if (target < untils[i] - offset * 60000) return offsets[i];
            }
            return offsets[max];
        },
        abbr: function(mom) {
            return this.abbrs[this._index(mom)];
        },
        offset: function(mom) {
            logError("zone.offset has been deprecated in favor of zone.utcOffset");
            return this.offsets[this._index(mom)];
        },
        utcOffset: function(mom) {
            return this.offsets[this._index(mom)];
        }
    };
    /************************************
		Country object
	************************************/ function Country(country_name, zone_names) {
        this.name = country_name;
        this.zones = zone_names;
    }
    /************************************
		Current Timezone
	************************************/ function OffsetAt(at) {
        var timeString = at.toTimeString();
        var abbr = timeString.match(/\([a-z ]+\)/i);
        if (abbr && abbr[0]) {
            // 17:56:31 GMT-0600 (CST)
            // 17:56:31 GMT-0600 (Central Standard Time)
            abbr = abbr[0].match(/[A-Z]/g);
            abbr = abbr ? abbr.join("") : undefined;
        } else {
            // 17:56:31 CST
            // 17:56:31 GMT+0800 (台北標準時間)
            abbr = timeString.match(/[A-Z]{3,5}/g);
            abbr = abbr ? abbr[0] : undefined;
        }
        if (abbr === "GMT") abbr = undefined;
        this.at = +at;
        this.abbr = abbr;
        this.offset = at.getTimezoneOffset();
    }
    function ZoneScore(zone) {
        this.zone = zone;
        this.offsetScore = 0;
        this.abbrScore = 0;
    }
    ZoneScore.prototype.scoreOffsetAt = function(offsetAt) {
        this.offsetScore += Math.abs(this.zone.utcOffset(offsetAt.at) - offsetAt.offset);
        if (this.zone.abbr(offsetAt.at).replace(/[^A-Z]/g, "") !== offsetAt.abbr) this.abbrScore++;
    };
    function findChange(low, high) {
        var mid, diff;
        while(diff = ((high.at - low.at) / 12e4 | 0) * 6e4){
            mid = new OffsetAt(new Date(low.at + diff));
            if (mid.offset === low.offset) low = mid;
            else high = mid;
        }
        return low;
    }
    function userOffsets() {
        var startYear = new Date().getFullYear() - 2, last = new OffsetAt(new Date(startYear, 0, 1)), offsets = [
            last
        ], change, next, i;
        for(i = 1; i < 48; i++){
            next = new OffsetAt(new Date(startYear, i, 1));
            if (next.offset !== last.offset) {
                change = findChange(last, next);
                offsets.push(change);
                offsets.push(new OffsetAt(new Date(change.at + 6e4)));
            }
            last = next;
        }
        for(i = 0; i < 4; i++){
            offsets.push(new OffsetAt(new Date(startYear + i, 0, 1)));
            offsets.push(new OffsetAt(new Date(startYear + i, 6, 1)));
        }
        return offsets;
    }
    function sortZoneScores(a, b) {
        if (a.offsetScore !== b.offsetScore) return a.offsetScore - b.offsetScore;
        if (a.abbrScore !== b.abbrScore) return a.abbrScore - b.abbrScore;
        if (a.zone.population !== b.zone.population) return b.zone.population - a.zone.population;
        return b.zone.name.localeCompare(a.zone.name);
    }
    function addToGuesses(name, offsets) {
        var i, offset;
        arrayToInt(offsets);
        for(i = 0; i < offsets.length; i++){
            offset = offsets[i];
            guesses1[offset] = guesses1[offset] || {};
            guesses1[offset][name] = true;
        }
    }
    function guessesForUserOffsets(offsets) {
        var offsetsLength = offsets.length, filteredGuesses = {}, out = [], i, j, guessesOffset;
        for(i = 0; i < offsetsLength; i++){
            guessesOffset = guesses1[offsets[i].offset] || {};
            for(j in guessesOffset)if (guessesOffset.hasOwnProperty(j)) filteredGuesses[j] = true;
        }
        for(i in filteredGuesses)if (filteredGuesses.hasOwnProperty(i)) out.push(names[i]);
        return out;
    }
    function rebuildGuess() {
        // use Intl API when available and returning valid time zone
        try {
            var intlName = Intl.DateTimeFormat().resolvedOptions().timeZone;
            if (intlName && intlName.length > 3) {
                var name = names[normalizeName(intlName)];
                if (name) return name;
                logError("Moment Timezone found " + intlName + " from the Intl api, but did not have that data loaded.");
            }
        } catch (e) {
        // Intl unavailable, fall back to manual guessing.
        }
        var offsets = userOffsets(), offsetsLength = offsets.length, guesses = guessesForUserOffsets(offsets), zoneScores = [], zoneScore, i, j;
        for(i = 0; i < guesses.length; i++){
            zoneScore = new ZoneScore(getZone(guesses[i]), offsetsLength);
            for(j = 0; j < offsetsLength; j++)zoneScore.scoreOffsetAt(offsets[j]);
            zoneScores.push(zoneScore);
        }
        zoneScores.sort(sortZoneScores);
        return zoneScores.length > 0 ? zoneScores[0].zone.name : undefined;
    }
    function guess(ignoreCache) {
        if (!cachedGuess || ignoreCache) cachedGuess = rebuildGuess();
        return cachedGuess;
    }
    /************************************
		Global Methods
	************************************/ function normalizeName(name) {
        return (name || "").toLowerCase().replace(/\//g, "_");
    }
    function addZone(packed) {
        var i, name, split, normalized;
        if (typeof packed === "string") packed = [
            packed
        ];
        for(i = 0; i < packed.length; i++){
            split = packed[i].split("|");
            name = split[0];
            normalized = normalizeName(name);
            zones1[normalized] = packed[i];
            names[normalized] = name;
            addToGuesses(normalized, split[2].split(" "));
        }
    }
    function getZone(name, caller) {
        name = normalizeName(name);
        var zone = zones1[name];
        var link;
        if (zone instanceof Zone) return zone;
        if (typeof zone === "string") {
            zone = new Zone(zone);
            zones1[name] = zone;
            return zone;
        }
        // Pass getZone to prevent recursion more than 1 level deep
        if (links[name] && caller !== getZone && (link = getZone(links[name], getZone))) {
            zone = zones1[name] = new Zone();
            zone._set(link);
            zone.name = names[name];
            return zone;
        }
        return null;
    }
    function getNames() {
        var i, out = [];
        for(i in names)if (names.hasOwnProperty(i) && (zones1[i] || zones1[links[i]]) && names[i]) out.push(names[i]);
        return out.sort();
    }
    function getCountryNames() {
        return Object.keys(countries);
    }
    function addLink(aliases) {
        var i, alias, normal0, normal1;
        if (typeof aliases === "string") aliases = [
            aliases
        ];
        for(i = 0; i < aliases.length; i++){
            alias = aliases[i].split("|");
            normal0 = normalizeName(alias[0]);
            normal1 = normalizeName(alias[1]);
            links[normal0] = normal1;
            names[normal0] = alias[0];
            links[normal1] = normal0;
            names[normal1] = alias[1];
        }
    }
    function addCountries(data) {
        var i, country_code, country_zones, split;
        if (!data || !data.length) return;
        for(i = 0; i < data.length; i++){
            split = data[i].split("|");
            country_code = split[0].toUpperCase();
            country_zones = split[1].split(" ");
            countries[country_code] = new Country(country_code, country_zones);
        }
    }
    function getCountry(name) {
        name = name.toUpperCase();
        return countries[name] || null;
    }
    function zonesForCountry(country, with_offset) {
        country = getCountry(country);
        if (!country) return null;
        var zones = country.zones.sort();
        if (with_offset) return zones.map(function(zone_name) {
            var zone = getZone(zone_name);
            return {
                name: zone_name,
                offset: zone.utcOffset(new Date())
            };
        });
        return zones;
    }
    function loadData(data) {
        addZone(data.zones);
        addLink(data.links);
        addCountries(data.countries);
        tz.dataVersion = data.version;
    }
    function zoneExists(name) {
        if (!zoneExists.didShowError) {
            zoneExists.didShowError = true;
            logError("moment.tz.zoneExists('" + name + "') has been deprecated in favor of !moment.tz.zone('" + name + "')");
        }
        return !!getZone(name);
    }
    function needsOffset(m) {
        var isUnixTimestamp = m._f === "X" || m._f === "x";
        return !!(m._a && m._tzm === undefined && !isUnixTimestamp);
    }
    function logError(message) {
        if (typeof console !== "undefined" && typeof console.error === "function") console.error(message);
    }
    /************************************
		moment.tz namespace
	************************************/ function tz(input) {
        var args = Array.prototype.slice.call(arguments, 0, -1), name = arguments[arguments.length - 1], zone = getZone(name), out = moment.utc.apply(null, args);
        if (zone && !moment.isMoment(input) && needsOffset(out)) out.add(zone.parse(out), "minutes");
        out.tz(name);
        return out;
    }
    tz.version = VERSION;
    tz.dataVersion = "";
    tz._zones = zones1;
    tz._links = links;
    tz._names = names;
    tz._countries = countries;
    tz.add = addZone;
    tz.link = addLink;
    tz.load = loadData;
    tz.zone = getZone;
    tz.zoneExists = zoneExists; // deprecated in 0.1.0
    tz.guess = guess;
    tz.names = getNames;
    tz.Zone = Zone;
    tz.unpack = unpack;
    tz.unpackBase60 = unpackBase60;
    tz.needsOffset = needsOffset;
    tz.moveInvalidForward = true;
    tz.moveAmbiguousForward = false;
    tz.countries = getCountryNames;
    tz.zonesForCountry = zonesForCountry;
    /************************************
		Interface with Moment.js
	************************************/ var fn = moment.fn;
    moment.tz = tz;
    moment.defaultZone = null;
    moment.updateOffset = function(mom, keepTime) {
        var zone = moment.defaultZone, offset;
        if (mom._z === undefined) {
            if (zone && needsOffset(mom) && !mom._isUTC) {
                mom._d = moment.utc(mom._a)._d;
                mom.utc().add(zone.parse(mom), "minutes");
            }
            mom._z = zone;
        }
        if (mom._z) {
            offset = mom._z.utcOffset(mom);
            if (Math.abs(offset) < 16) offset = offset / 60;
            if (mom.utcOffset !== undefined) {
                var z = mom._z;
                mom.utcOffset(-offset, keepTime);
                mom._z = z;
            } else mom.zone(offset, keepTime);
        }
    };
    fn.tz = function(name, keepTime) {
        if (name) {
            if (typeof name !== "string") throw new Error("Time zone name must be a string, got " + name + " [" + typeof name + "]");
            this._z = getZone(name);
            if (this._z) moment.updateOffset(this, keepTime);
            else logError("Moment Timezone has no data for " + name + ". See http://momentjs.com/timezone/docs/#/data-loading/.");
            return this;
        }
        if (this._z) return this._z.name;
    };
    function abbrWrap(old) {
        return function() {
            if (this._z) return this._z.abbr(this);
            return old.call(this);
        };
    }
    function resetZoneWrap(old) {
        return function() {
            this._z = null;
            return old.apply(this, arguments);
        };
    }
    function resetZoneWrap2(old) {
        return function() {
            if (arguments.length > 0) this._z = null;
            return old.apply(this, arguments);
        };
    }
    fn.zoneName = abbrWrap(fn.zoneName);
    fn.zoneAbbr = abbrWrap(fn.zoneAbbr);
    fn.utc = resetZoneWrap(fn.utc);
    fn.local = resetZoneWrap(fn.local);
    fn.utcOffset = resetZoneWrap2(fn.utcOffset);
    moment.tz.setDefault = function(name) {
        if (major < 2 || major === 2 && minor < 9) logError("Moment Timezone setDefault() requires Moment.js >= 2.9.0. You are using Moment.js " + moment.version + ".");
        moment.defaultZone = name ? getZone(name) : null;
        return moment;
    };
    // Cloning a moment should include the _z property.
    var momentProperties = moment.momentProperties;
    if (Object.prototype.toString.call(momentProperties) === "[object Array]") {
        // moment 2.8.1+
        momentProperties.push("_z");
        momentProperties.push("_a");
    } else if (momentProperties) // moment 2.7.0
    momentProperties._z = null;
    // INJECT DATA
    return moment;
});

},{"moment":"28SLz"}],"28SLz":[function(require,module,exports) {
(function(global, factory) {
    module.exports = factory();
})(this, function() {
    "use strict";
    var hookCallback;
    function hooks() {
        return hookCallback.apply(null, arguments);
    }
    // This is done to register the method called with moment()
    // without creating circular dependencies.
    function setHookCallback(callback) {
        hookCallback = callback;
    }
    function isArray(input) {
        return input instanceof Array || Object.prototype.toString.call(input) === "[object Array]";
    }
    function isObject(input) {
        // IE8 will treat undefined and null as object if it wasn't for
        // input != null
        return input != null && Object.prototype.toString.call(input) === "[object Object]";
    }
    function hasOwnProp(a, b) {
        return Object.prototype.hasOwnProperty.call(a, b);
    }
    function isObjectEmpty(obj) {
        if (Object.getOwnPropertyNames) return Object.getOwnPropertyNames(obj).length === 0;
        else {
            var k;
            for(k in obj){
                if (hasOwnProp(obj, k)) return false;
            }
            return true;
        }
    }
    function isUndefined(input) {
        return input === void 0;
    }
    function isNumber(input) {
        return typeof input === "number" || Object.prototype.toString.call(input) === "[object Number]";
    }
    function isDate(input) {
        return input instanceof Date || Object.prototype.toString.call(input) === "[object Date]";
    }
    function map(arr, fn) {
        var res = [], i, arrLen = arr.length;
        for(i = 0; i < arrLen; ++i)res.push(fn(arr[i], i));
        return res;
    }
    function extend(a, b) {
        for(var i in b)if (hasOwnProp(b, i)) a[i] = b[i];
        if (hasOwnProp(b, "toString")) a.toString = b.toString;
        if (hasOwnProp(b, "valueOf")) a.valueOf = b.valueOf;
        return a;
    }
    function createUTC(input, format, locale, strict) {
        return createLocalOrUTC(input, format, locale, strict, true).utc();
    }
    function defaultParsingFlags() {
        // We need to deep clone this object.
        return {
            empty: false,
            unusedTokens: [],
            unusedInput: [],
            overflow: -2,
            charsLeftOver: 0,
            nullInput: false,
            invalidEra: null,
            invalidMonth: null,
            invalidFormat: false,
            userInvalidated: false,
            iso: false,
            parsedDateParts: [],
            era: null,
            meridiem: null,
            rfc2822: false,
            weekdayMismatch: false
        };
    }
    function getParsingFlags(m) {
        if (m._pf == null) m._pf = defaultParsingFlags();
        return m._pf;
    }
    var some;
    if (Array.prototype.some) some = Array.prototype.some;
    else some = function(fun) {
        var t = Object(this), len = t.length >>> 0, i;
        for(i = 0; i < len; i++){
            if (i in t && fun.call(this, t[i], i, t)) return true;
        }
        return false;
    };
    function isValid(m) {
        if (m._isValid == null) {
            var flags = getParsingFlags(m), parsedParts = some.call(flags.parsedDateParts, function(i) {
                return i != null;
            }), isNowValid = !isNaN(m._d.getTime()) && flags.overflow < 0 && !flags.empty && !flags.invalidEra && !flags.invalidMonth && !flags.invalidWeekday && !flags.weekdayMismatch && !flags.nullInput && !flags.invalidFormat && !flags.userInvalidated && (!flags.meridiem || flags.meridiem && parsedParts);
            if (m._strict) isNowValid = isNowValid && flags.charsLeftOver === 0 && flags.unusedTokens.length === 0 && flags.bigHour === undefined;
            if (Object.isFrozen == null || !Object.isFrozen(m)) m._isValid = isNowValid;
            else return isNowValid;
        }
        return m._isValid;
    }
    function createInvalid(flags) {
        var m = createUTC(NaN);
        if (flags != null) extend(getParsingFlags(m), flags);
        else getParsingFlags(m).userInvalidated = true;
        return m;
    }
    // Plugins that add properties should also add the key here (null value),
    // so we can properly clone ourselves.
    var momentProperties = hooks.momentProperties = [], updateInProgress = false;
    function copyConfig(to, from) {
        var i, prop, val, momentPropertiesLen = momentProperties.length;
        if (!isUndefined(from._isAMomentObject)) to._isAMomentObject = from._isAMomentObject;
        if (!isUndefined(from._i)) to._i = from._i;
        if (!isUndefined(from._f)) to._f = from._f;
        if (!isUndefined(from._l)) to._l = from._l;
        if (!isUndefined(from._strict)) to._strict = from._strict;
        if (!isUndefined(from._tzm)) to._tzm = from._tzm;
        if (!isUndefined(from._isUTC)) to._isUTC = from._isUTC;
        if (!isUndefined(from._offset)) to._offset = from._offset;
        if (!isUndefined(from._pf)) to._pf = getParsingFlags(from);
        if (!isUndefined(from._locale)) to._locale = from._locale;
        if (momentPropertiesLen > 0) for(i = 0; i < momentPropertiesLen; i++){
            prop = momentProperties[i];
            val = from[prop];
            if (!isUndefined(val)) to[prop] = val;
        }
        return to;
    }
    // Moment prototype object
    function Moment(config) {
        copyConfig(this, config);
        this._d = new Date(config._d != null ? config._d.getTime() : NaN);
        if (!this.isValid()) this._d = new Date(NaN);
        // Prevent infinite loop in case updateOffset creates new moment
        // objects.
        if (updateInProgress === false) {
            updateInProgress = true;
            hooks.updateOffset(this);
            updateInProgress = false;
        }
    }
    function isMoment(obj) {
        return obj instanceof Moment || obj != null && obj._isAMomentObject != null;
    }
    function warn(msg) {
        if (hooks.suppressDeprecationWarnings === false && typeof console !== "undefined" && console.warn) console.warn("Deprecation warning: " + msg);
    }
    function deprecate(msg, fn) {
        var firstTime = true;
        return extend(function() {
            if (hooks.deprecationHandler != null) hooks.deprecationHandler(null, msg);
            if (firstTime) {
                var args = [], arg, i, key, argLen = arguments.length;
                for(i = 0; i < argLen; i++){
                    arg = "";
                    if (typeof arguments[i] === "object") {
                        arg += "\n[" + i + "] ";
                        for(key in arguments[0])if (hasOwnProp(arguments[0], key)) arg += key + ": " + arguments[0][key] + ", ";
                        arg = arg.slice(0, -2); // Remove trailing comma and space
                    } else arg = arguments[i];
                    args.push(arg);
                }
                warn(msg + "\nArguments: " + Array.prototype.slice.call(args).join("") + "\n" + new Error().stack);
                firstTime = false;
            }
            return fn.apply(this, arguments);
        }, fn);
    }
    var deprecations = {};
    function deprecateSimple(name, msg) {
        if (hooks.deprecationHandler != null) hooks.deprecationHandler(name, msg);
        if (!deprecations[name]) {
            warn(msg);
            deprecations[name] = true;
        }
    }
    hooks.suppressDeprecationWarnings = false;
    hooks.deprecationHandler = null;
    function isFunction(input) {
        return typeof Function !== "undefined" && input instanceof Function || Object.prototype.toString.call(input) === "[object Function]";
    }
    function set(config) {
        var prop, i;
        for(i in config)if (hasOwnProp(config, i)) {
            prop = config[i];
            if (isFunction(prop)) this[i] = prop;
            else this["_" + i] = prop;
        }
        this._config = config;
        // Lenient ordinal parsing accepts just a number in addition to
        // number + (possibly) stuff coming from _dayOfMonthOrdinalParse.
        // TODO: Remove "ordinalParse" fallback in next major release.
        this._dayOfMonthOrdinalParseLenient = new RegExp((this._dayOfMonthOrdinalParse.source || this._ordinalParse.source) + "|" + /\d{1,2}/.source);
    }
    function mergeConfigs(parentConfig, childConfig) {
        var res = extend({}, parentConfig), prop;
        for(prop in childConfig)if (hasOwnProp(childConfig, prop)) {
            if (isObject(parentConfig[prop]) && isObject(childConfig[prop])) {
                res[prop] = {};
                extend(res[prop], parentConfig[prop]);
                extend(res[prop], childConfig[prop]);
            } else if (childConfig[prop] != null) res[prop] = childConfig[prop];
            else delete res[prop];
        }
        for(prop in parentConfig)if (hasOwnProp(parentConfig, prop) && !hasOwnProp(childConfig, prop) && isObject(parentConfig[prop])) // make sure changes to properties don't modify parent config
        res[prop] = extend({}, res[prop]);
        return res;
    }
    function Locale(config) {
        if (config != null) this.set(config);
    }
    var keys;
    if (Object.keys) keys = Object.keys;
    else keys = function(obj) {
        var i, res = [];
        for(i in obj)if (hasOwnProp(obj, i)) res.push(i);
        return res;
    };
    var defaultCalendar = {
        sameDay: "[Today at] LT",
        nextDay: "[Tomorrow at] LT",
        nextWeek: "dddd [at] LT",
        lastDay: "[Yesterday at] LT",
        lastWeek: "[Last] dddd [at] LT",
        sameElse: "L"
    };
    function calendar(key, mom, now) {
        var output = this._calendar[key] || this._calendar["sameElse"];
        return isFunction(output) ? output.call(mom, now) : output;
    }
    function zeroFill(number, targetLength, forceSign) {
        var absNumber = "" + Math.abs(number), zerosToFill = targetLength - absNumber.length, sign = number >= 0;
        return (sign ? forceSign ? "+" : "" : "-") + Math.pow(10, Math.max(0, zerosToFill)).toString().substr(1) + absNumber;
    }
    var formattingTokens = /(\[[^\[]*\])|(\\)?([Hh]mm(ss)?|Mo|MM?M?M?|Do|DDDo|DD?D?D?|ddd?d?|do?|w[o|w]?|W[o|W]?|Qo?|N{1,5}|YYYYYY|YYYYY|YYYY|YY|y{2,4}|yo?|gg(ggg?)?|GG(GGG?)?|e|E|a|A|hh?|HH?|kk?|mm?|ss?|S{1,9}|x|X|zz?|ZZ?|.)/g, localFormattingTokens = /(\[[^\[]*\])|(\\)?(LTS|LT|LL?L?L?|l{1,4})/g, formatFunctions = {}, formatTokenFunctions = {};
    // token:    'M'
    // padded:   ['MM', 2]
    // ordinal:  'Mo'
    // callback: function () { this.month() + 1 }
    function addFormatToken(token, padded, ordinal, callback) {
        var func = callback;
        if (typeof callback === "string") func = function() {
            return this[callback]();
        };
        if (token) formatTokenFunctions[token] = func;
        if (padded) formatTokenFunctions[padded[0]] = function() {
            return zeroFill(func.apply(this, arguments), padded[1], padded[2]);
        };
        if (ordinal) formatTokenFunctions[ordinal] = function() {
            return this.localeData().ordinal(func.apply(this, arguments), token);
        };
    }
    function removeFormattingTokens(input) {
        if (input.match(/\[[\s\S]/)) return input.replace(/^\[|\]$/g, "");
        return input.replace(/\\/g, "");
    }
    function makeFormatFunction(format) {
        var array = format.match(formattingTokens), i1, length;
        for(i1 = 0, length = array.length; i1 < length; i1++)if (formatTokenFunctions[array[i1]]) array[i1] = formatTokenFunctions[array[i1]];
        else array[i1] = removeFormattingTokens(array[i1]);
        return function(mom) {
            var output = "", i;
            for(i = 0; i < length; i++)output += isFunction(array[i]) ? array[i].call(mom, format) : array[i];
            return output;
        };
    }
    // format date using native date object
    function formatMoment(m, format) {
        if (!m.isValid()) return m.localeData().invalidDate();
        format = expandFormat(format, m.localeData());
        formatFunctions[format] = formatFunctions[format] || makeFormatFunction(format);
        return formatFunctions[format](m);
    }
    function expandFormat(format, locale) {
        var i = 5;
        function replaceLongDateFormatTokens(input) {
            return locale.longDateFormat(input) || input;
        }
        localFormattingTokens.lastIndex = 0;
        while(i >= 0 && localFormattingTokens.test(format)){
            format = format.replace(localFormattingTokens, replaceLongDateFormatTokens);
            localFormattingTokens.lastIndex = 0;
            i -= 1;
        }
        return format;
    }
    var defaultLongDateFormat = {
        LTS: "h:mm:ss A",
        LT: "h:mm A",
        L: "MM/DD/YYYY",
        LL: "MMMM D, YYYY",
        LLL: "MMMM D, YYYY h:mm A",
        LLLL: "dddd, MMMM D, YYYY h:mm A"
    };
    function longDateFormat(key) {
        var format = this._longDateFormat[key], formatUpper = this._longDateFormat[key.toUpperCase()];
        if (format || !formatUpper) return format;
        this._longDateFormat[key] = formatUpper.match(formattingTokens).map(function(tok) {
            if (tok === "MMMM" || tok === "MM" || tok === "DD" || tok === "dddd") return tok.slice(1);
            return tok;
        }).join("");
        return this._longDateFormat[key];
    }
    var defaultInvalidDate = "Invalid date";
    function invalidDate() {
        return this._invalidDate;
    }
    var defaultOrdinal = "%d", defaultDayOfMonthOrdinalParse = /\d{1,2}/;
    function ordinal1(number) {
        return this._ordinal.replace("%d", number);
    }
    var defaultRelativeTime = {
        future: "in %s",
        past: "%s ago",
        s: "a few seconds",
        ss: "%d seconds",
        m: "a minute",
        mm: "%d minutes",
        h: "an hour",
        hh: "%d hours",
        d: "a day",
        dd: "%d days",
        w: "a week",
        ww: "%d weeks",
        M: "a month",
        MM: "%d months",
        y: "a year",
        yy: "%d years"
    };
    function relativeTime(number, withoutSuffix, string, isFuture) {
        var output = this._relativeTime[string];
        return isFunction(output) ? output(number, withoutSuffix, string, isFuture) : output.replace(/%d/i, number);
    }
    function pastFuture(diff, output) {
        var format = this._relativeTime[diff > 0 ? "future" : "past"];
        return isFunction(format) ? format(output) : format.replace(/%s/i, output);
    }
    var aliases = {};
    function addUnitAlias(unit, shorthand) {
        var lowerCase = unit.toLowerCase();
        aliases[lowerCase] = aliases[lowerCase + "s"] = aliases[shorthand] = unit;
    }
    function normalizeUnits(units) {
        return typeof units === "string" ? aliases[units] || aliases[units.toLowerCase()] : undefined;
    }
    function normalizeObjectUnits(inputObject) {
        var normalizedInput = {}, normalizedProp, prop;
        for(prop in inputObject)if (hasOwnProp(inputObject, prop)) {
            normalizedProp = normalizeUnits(prop);
            if (normalizedProp) normalizedInput[normalizedProp] = inputObject[prop];
        }
        return normalizedInput;
    }
    var priorities = {};
    function addUnitPriority(unit, priority) {
        priorities[unit] = priority;
    }
    function getPrioritizedUnits(unitsObj) {
        var units = [], u;
        for(u in unitsObj)if (hasOwnProp(unitsObj, u)) units.push({
            unit: u,
            priority: priorities[u]
        });
        units.sort(function(a, b) {
            return a.priority - b.priority;
        });
        return units;
    }
    function isLeapYear(year) {
        return year % 4 === 0 && year % 100 !== 0 || year % 400 === 0;
    }
    function absFloor(number) {
        if (number < 0) // -0 -> 0
        return Math.ceil(number) || 0;
        else return Math.floor(number);
    }
    function toInt(argumentForCoercion) {
        var coercedNumber = +argumentForCoercion, value = 0;
        if (coercedNumber !== 0 && isFinite(coercedNumber)) value = absFloor(coercedNumber);
        return value;
    }
    function makeGetSet(unit, keepTime) {
        return function(value) {
            if (value != null) {
                set$1(this, unit, value);
                hooks.updateOffset(this, keepTime);
                return this;
            } else return get(this, unit);
        };
    }
    function get(mom, unit) {
        return mom.isValid() ? mom._d["get" + (mom._isUTC ? "UTC" : "") + unit]() : NaN;
    }
    function set$1(mom, unit, value) {
        if (mom.isValid() && !isNaN(value)) {
            if (unit === "FullYear" && isLeapYear(mom.year()) && mom.month() === 1 && mom.date() === 29) {
                value = toInt(value);
                mom._d["set" + (mom._isUTC ? "UTC" : "") + unit](value, mom.month(), daysInMonth(value, mom.month()));
            } else mom._d["set" + (mom._isUTC ? "UTC" : "") + unit](value);
        }
    }
    // MOMENTS
    function stringGet(units) {
        units = normalizeUnits(units);
        if (isFunction(this[units])) return this[units]();
        return this;
    }
    function stringSet(units, value) {
        if (typeof units === "object") {
            units = normalizeObjectUnits(units);
            var prioritized = getPrioritizedUnits(units), i, prioritizedLen = prioritized.length;
            for(i = 0; i < prioritizedLen; i++)this[prioritized[i].unit](units[prioritized[i].unit]);
        } else {
            units = normalizeUnits(units);
            if (isFunction(this[units])) return this[units](value);
        }
        return this;
    }
    var match1 = /\d/, match2 = /\d\d/, match3 = /\d{3}/, match4 = /\d{4}/, match6 = /[+-]?\d{6}/, match1to2 = /\d\d?/, match3to4 = /\d\d\d\d?/, match5to6 = /\d\d\d\d\d\d?/, match1to3 = /\d{1,3}/, match1to4 = /\d{1,4}/, match1to6 = /[+-]?\d{1,6}/, matchUnsigned = /\d+/, matchSigned = /[+-]?\d+/, matchOffset = /Z|[+-]\d\d:?\d\d/gi, matchShortOffset = /Z|[+-]\d\d(?::?\d\d)?/gi, matchTimestamp = /[+-]?\d+(\.\d{1,3})?/, // any word (or two) characters or numbers including two/three word month in arabic.
    // includes scottish gaelic two word and hyphenated months
    matchWord = /[0-9]{0,256}['a-z\u00A0-\u05FF\u0700-\uD7FF\uF900-\uFDCF\uFDF0-\uFF07\uFF10-\uFFEF]{1,256}|[\u0600-\u06FF\/]{1,256}(\s*?[\u0600-\u06FF]{1,256}){1,2}/i, regexes;
    regexes = {};
    function addRegexToken(token, regex, strictRegex) {
        regexes[token] = isFunction(regex) ? regex : function(isStrict, localeData) {
            return isStrict && strictRegex ? strictRegex : regex;
        };
    }
    function getParseRegexForToken(token, config) {
        if (!hasOwnProp(regexes, token)) return new RegExp(unescapeFormat(token));
        return regexes[token](config._strict, config._locale);
    }
    // Code from http://stackoverflow.com/questions/3561493/is-there-a-regexp-escape-function-in-javascript
    function unescapeFormat(s) {
        return regexEscape(s.replace("\\", "").replace(/\\(\[)|\\(\])|\[([^\]\[]*)\]|\\(.)/g, function(matched, p1, p2, p3, p4) {
            return p1 || p2 || p3 || p4;
        }));
    }
    function regexEscape(s) {
        return s.replace(/[-\/\\^$*+?.()|[\]{}]/g, "\\$&");
    }
    var tokens1 = {};
    function addParseToken(token, callback) {
        var i, func = callback, tokenLen;
        if (typeof token === "string") token = [
            token
        ];
        if (isNumber(callback)) func = function(input, array) {
            array[callback] = toInt(input);
        };
        tokenLen = token.length;
        for(i = 0; i < tokenLen; i++)tokens1[token[i]] = func;
    }
    function addWeekParseToken(token2, callback) {
        addParseToken(token2, function(input, array, config, token) {
            config._w = config._w || {};
            callback(input, config._w, config, token);
        });
    }
    function addTimeToArrayFromToken(token, input, config) {
        if (input != null && hasOwnProp(tokens1, token)) tokens1[token](input, config._a, config, token);
    }
    var YEAR = 0, MONTH = 1, DATE = 2, HOUR = 3, MINUTE = 4, SECOND = 5, MILLISECOND = 6, WEEK = 7, WEEKDAY = 8;
    function mod(n, x) {
        return (n % x + x) % x;
    }
    var indexOf;
    if (Array.prototype.indexOf) indexOf = Array.prototype.indexOf;
    else indexOf = function(o) {
        // I know
        var i;
        for(i = 0; i < this.length; ++i){
            if (this[i] === o) return i;
        }
        return -1;
    };
    function daysInMonth(year, month) {
        if (isNaN(year) || isNaN(month)) return NaN;
        var modMonth = mod(month, 12);
        year += (month - modMonth) / 12;
        return modMonth === 1 ? isLeapYear(year) ? 29 : 28 : 31 - modMonth % 7 % 2;
    }
    // FORMATTING
    addFormatToken("M", [
        "MM",
        2
    ], "Mo", function() {
        return this.month() + 1;
    });
    addFormatToken("MMM", 0, 0, function(format) {
        return this.localeData().monthsShort(this, format);
    });
    addFormatToken("MMMM", 0, 0, function(format) {
        return this.localeData().months(this, format);
    });
    // ALIASES
    addUnitAlias("month", "M");
    // PRIORITY
    addUnitPriority("month", 8);
    // PARSING
    addRegexToken("M", match1to2);
    addRegexToken("MM", match1to2, match2);
    addRegexToken("MMM", function(isStrict, locale) {
        return locale.monthsShortRegex(isStrict);
    });
    addRegexToken("MMMM", function(isStrict, locale) {
        return locale.monthsRegex(isStrict);
    });
    addParseToken([
        "M",
        "MM"
    ], function(input, array) {
        array[MONTH] = toInt(input) - 1;
    });
    addParseToken([
        "MMM",
        "MMMM"
    ], function(input, array, config, token) {
        var month = config._locale.monthsParse(input, token, config._strict);
        // if we didn't find a month name, mark the date as invalid.
        if (month != null) array[MONTH] = month;
        else getParsingFlags(config).invalidMonth = input;
    });
    // LOCALES
    var defaultLocaleMonths = "January_February_March_April_May_June_July_August_September_October_November_December".split("_"), defaultLocaleMonthsShort = "Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec".split("_"), MONTHS_IN_FORMAT = /D[oD]?(\[[^\[\]]*\]|\s)+MMMM?/, defaultMonthsShortRegex = matchWord, defaultMonthsRegex = matchWord;
    function localeMonths(m, format) {
        if (!m) return isArray(this._months) ? this._months : this._months["standalone"];
        return isArray(this._months) ? this._months[m.month()] : this._months[(this._months.isFormat || MONTHS_IN_FORMAT).test(format) ? "format" : "standalone"][m.month()];
    }
    function localeMonthsShort(m, format) {
        if (!m) return isArray(this._monthsShort) ? this._monthsShort : this._monthsShort["standalone"];
        return isArray(this._monthsShort) ? this._monthsShort[m.month()] : this._monthsShort[MONTHS_IN_FORMAT.test(format) ? "format" : "standalone"][m.month()];
    }
    function handleStrictParse(monthName, format, strict) {
        var i, ii, mom, llc = monthName.toLocaleLowerCase();
        if (!this._monthsParse) {
            // this is not used
            this._monthsParse = [];
            this._longMonthsParse = [];
            this._shortMonthsParse = [];
            for(i = 0; i < 12; ++i){
                mom = createUTC([
                    2000,
                    i
                ]);
                this._shortMonthsParse[i] = this.monthsShort(mom, "").toLocaleLowerCase();
                this._longMonthsParse[i] = this.months(mom, "").toLocaleLowerCase();
            }
        }
        if (strict) {
            if (format === "MMM") {
                ii = indexOf.call(this._shortMonthsParse, llc);
                return ii !== -1 ? ii : null;
            } else {
                ii = indexOf.call(this._longMonthsParse, llc);
                return ii !== -1 ? ii : null;
            }
        } else if (format === "MMM") {
            ii = indexOf.call(this._shortMonthsParse, llc);
            if (ii !== -1) return ii;
            ii = indexOf.call(this._longMonthsParse, llc);
            return ii !== -1 ? ii : null;
        } else {
            ii = indexOf.call(this._longMonthsParse, llc);
            if (ii !== -1) return ii;
            ii = indexOf.call(this._shortMonthsParse, llc);
            return ii !== -1 ? ii : null;
        }
    }
    function localeMonthsParse(monthName, format, strict) {
        var i, mom, regex;
        if (this._monthsParseExact) return handleStrictParse.call(this, monthName, format, strict);
        if (!this._monthsParse) {
            this._monthsParse = [];
            this._longMonthsParse = [];
            this._shortMonthsParse = [];
        }
        // TODO: add sorting
        // Sorting makes sure if one month (or abbr) is a prefix of another
        // see sorting in computeMonthsParse
        for(i = 0; i < 12; i++){
            // make the regex if we don't have it already
            mom = createUTC([
                2000,
                i
            ]);
            if (strict && !this._longMonthsParse[i]) {
                this._longMonthsParse[i] = new RegExp("^" + this.months(mom, "").replace(".", "") + "$", "i");
                this._shortMonthsParse[i] = new RegExp("^" + this.monthsShort(mom, "").replace(".", "") + "$", "i");
            }
            if (!strict && !this._monthsParse[i]) {
                regex = "^" + this.months(mom, "") + "|^" + this.monthsShort(mom, "");
                this._monthsParse[i] = new RegExp(regex.replace(".", ""), "i");
            }
            // test the regex
            if (strict && format === "MMMM" && this._longMonthsParse[i].test(monthName)) return i;
            else if (strict && format === "MMM" && this._shortMonthsParse[i].test(monthName)) return i;
            else if (!strict && this._monthsParse[i].test(monthName)) return i;
        }
    }
    // MOMENTS
    function setMonth(mom, value) {
        var dayOfMonth;
        if (!mom.isValid()) // No op
        return mom;
        if (typeof value === "string") {
            if (/^\d+$/.test(value)) value = toInt(value);
            else {
                value = mom.localeData().monthsParse(value);
                // TODO: Another silent failure?
                if (!isNumber(value)) return mom;
            }
        }
        dayOfMonth = Math.min(mom.date(), daysInMonth(mom.year(), value));
        mom._d["set" + (mom._isUTC ? "UTC" : "") + "Month"](value, dayOfMonth);
        return mom;
    }
    function getSetMonth(value) {
        if (value != null) {
            setMonth(this, value);
            hooks.updateOffset(this, true);
            return this;
        } else return get(this, "Month");
    }
    function getDaysInMonth() {
        return daysInMonth(this.year(), this.month());
    }
    function monthsShortRegex(isStrict) {
        if (this._monthsParseExact) {
            if (!hasOwnProp(this, "_monthsRegex")) computeMonthsParse.call(this);
            if (isStrict) return this._monthsShortStrictRegex;
            else return this._monthsShortRegex;
        } else {
            if (!hasOwnProp(this, "_monthsShortRegex")) this._monthsShortRegex = defaultMonthsShortRegex;
            return this._monthsShortStrictRegex && isStrict ? this._monthsShortStrictRegex : this._monthsShortRegex;
        }
    }
    function monthsRegex(isStrict) {
        if (this._monthsParseExact) {
            if (!hasOwnProp(this, "_monthsRegex")) computeMonthsParse.call(this);
            if (isStrict) return this._monthsStrictRegex;
            else return this._monthsRegex;
        } else {
            if (!hasOwnProp(this, "_monthsRegex")) this._monthsRegex = defaultMonthsRegex;
            return this._monthsStrictRegex && isStrict ? this._monthsStrictRegex : this._monthsRegex;
        }
    }
    function computeMonthsParse() {
        function cmpLenRev(a, b) {
            return b.length - a.length;
        }
        var shortPieces = [], longPieces = [], mixedPieces = [], i, mom;
        for(i = 0; i < 12; i++){
            // make the regex if we don't have it already
            mom = createUTC([
                2000,
                i
            ]);
            shortPieces.push(this.monthsShort(mom, ""));
            longPieces.push(this.months(mom, ""));
            mixedPieces.push(this.months(mom, ""));
            mixedPieces.push(this.monthsShort(mom, ""));
        }
        // Sorting makes sure if one month (or abbr) is a prefix of another it
        // will match the longer piece.
        shortPieces.sort(cmpLenRev);
        longPieces.sort(cmpLenRev);
        mixedPieces.sort(cmpLenRev);
        for(i = 0; i < 12; i++){
            shortPieces[i] = regexEscape(shortPieces[i]);
            longPieces[i] = regexEscape(longPieces[i]);
        }
        for(i = 0; i < 24; i++)mixedPieces[i] = regexEscape(mixedPieces[i]);
        this._monthsRegex = new RegExp("^(" + mixedPieces.join("|") + ")", "i");
        this._monthsShortRegex = this._monthsRegex;
        this._monthsStrictRegex = new RegExp("^(" + longPieces.join("|") + ")", "i");
        this._monthsShortStrictRegex = new RegExp("^(" + shortPieces.join("|") + ")", "i");
    }
    // FORMATTING
    addFormatToken("Y", 0, 0, function() {
        var y = this.year();
        return y <= 9999 ? zeroFill(y, 4) : "+" + y;
    });
    addFormatToken(0, [
        "YY",
        2
    ], 0, function() {
        return this.year() % 100;
    });
    addFormatToken(0, [
        "YYYY",
        4
    ], 0, "year");
    addFormatToken(0, [
        "YYYYY",
        5
    ], 0, "year");
    addFormatToken(0, [
        "YYYYYY",
        6,
        true
    ], 0, "year");
    // ALIASES
    addUnitAlias("year", "y");
    // PRIORITIES
    addUnitPriority("year", 1);
    // PARSING
    addRegexToken("Y", matchSigned);
    addRegexToken("YY", match1to2, match2);
    addRegexToken("YYYY", match1to4, match4);
    addRegexToken("YYYYY", match1to6, match6);
    addRegexToken("YYYYYY", match1to6, match6);
    addParseToken([
        "YYYYY",
        "YYYYYY"
    ], YEAR);
    addParseToken("YYYY", function(input, array) {
        array[YEAR] = input.length === 2 ? hooks.parseTwoDigitYear(input) : toInt(input);
    });
    addParseToken("YY", function(input, array) {
        array[YEAR] = hooks.parseTwoDigitYear(input);
    });
    addParseToken("Y", function(input, array) {
        array[YEAR] = parseInt(input, 10);
    });
    // HELPERS
    function daysInYear(year) {
        return isLeapYear(year) ? 366 : 365;
    }
    // HOOKS
    hooks.parseTwoDigitYear = function(input) {
        return toInt(input) + (toInt(input) > 68 ? 1900 : 2000);
    };
    // MOMENTS
    var getSetYear = makeGetSet("FullYear", true);
    function getIsLeapYear() {
        return isLeapYear(this.year());
    }
    function createDate(y, m, d, h, M, s, ms) {
        // can't just apply() to create a date:
        // https://stackoverflow.com/q/181348
        var date;
        // the date constructor remaps years 0-99 to 1900-1999
        if (y < 100 && y >= 0) {
            // preserve leap years using a full 400 year cycle, then reset
            date = new Date(y + 400, m, d, h, M, s, ms);
            if (isFinite(date.getFullYear())) date.setFullYear(y);
        } else date = new Date(y, m, d, h, M, s, ms);
        return date;
    }
    function createUTCDate(y) {
        var date, args;
        // the Date.UTC function remaps years 0-99 to 1900-1999
        if (y < 100 && y >= 0) {
            args = Array.prototype.slice.call(arguments);
            // preserve leap years using a full 400 year cycle, then reset
            args[0] = y + 400;
            date = new Date(Date.UTC.apply(null, args));
            if (isFinite(date.getUTCFullYear())) date.setUTCFullYear(y);
        } else date = new Date(Date.UTC.apply(null, arguments));
        return date;
    }
    // start-of-first-week - start-of-year
    function firstWeekOffset(year, dow, doy) {
        var fwd = 7 + dow - doy, // first-week day local weekday -- which local weekday is fwd
        fwdlw = (7 + createUTCDate(year, 0, fwd).getUTCDay() - dow) % 7;
        return -fwdlw + fwd - 1;
    }
    // https://en.wikipedia.org/wiki/ISO_week_date#Calculating_a_date_given_the_year.2C_week_number_and_weekday
    function dayOfYearFromWeeks(year, week, weekday, dow, doy) {
        var localWeekday = (7 + weekday - dow) % 7, weekOffset = firstWeekOffset(year, dow, doy), dayOfYear = 1 + 7 * (week - 1) + localWeekday + weekOffset, resYear, resDayOfYear;
        if (dayOfYear <= 0) {
            resYear = year - 1;
            resDayOfYear = daysInYear(resYear) + dayOfYear;
        } else if (dayOfYear > daysInYear(year)) {
            resYear = year + 1;
            resDayOfYear = dayOfYear - daysInYear(year);
        } else {
            resYear = year;
            resDayOfYear = dayOfYear;
        }
        return {
            year: resYear,
            dayOfYear: resDayOfYear
        };
    }
    function weekOfYear(mom, dow, doy) {
        var weekOffset = firstWeekOffset(mom.year(), dow, doy), week = Math.floor((mom.dayOfYear() - weekOffset - 1) / 7) + 1, resWeek, resYear;
        if (week < 1) {
            resYear = mom.year() - 1;
            resWeek = week + weeksInYear(resYear, dow, doy);
        } else if (week > weeksInYear(mom.year(), dow, doy)) {
            resWeek = week - weeksInYear(mom.year(), dow, doy);
            resYear = mom.year() + 1;
        } else {
            resYear = mom.year();
            resWeek = week;
        }
        return {
            week: resWeek,
            year: resYear
        };
    }
    function weeksInYear(year, dow, doy) {
        var weekOffset = firstWeekOffset(year, dow, doy), weekOffsetNext = firstWeekOffset(year + 1, dow, doy);
        return (daysInYear(year) - weekOffset + weekOffsetNext) / 7;
    }
    // FORMATTING
    addFormatToken("w", [
        "ww",
        2
    ], "wo", "week");
    addFormatToken("W", [
        "WW",
        2
    ], "Wo", "isoWeek");
    // ALIASES
    addUnitAlias("week", "w");
    addUnitAlias("isoWeek", "W");
    // PRIORITIES
    addUnitPriority("week", 5);
    addUnitPriority("isoWeek", 5);
    // PARSING
    addRegexToken("w", match1to2);
    addRegexToken("ww", match1to2, match2);
    addRegexToken("W", match1to2);
    addRegexToken("WW", match1to2, match2);
    addWeekParseToken([
        "w",
        "ww",
        "W",
        "WW"
    ], function(input, week, config, token) {
        week[token.substr(0, 1)] = toInt(input);
    });
    // HELPERS
    // LOCALES
    function localeWeek(mom) {
        return weekOfYear(mom, this._week.dow, this._week.doy).week;
    }
    var defaultLocaleWeek = {
        dow: 0,
        doy: 6
    };
    function localeFirstDayOfWeek() {
        return this._week.dow;
    }
    function localeFirstDayOfYear() {
        return this._week.doy;
    }
    // MOMENTS
    function getSetWeek(input) {
        var week = this.localeData().week(this);
        return input == null ? week : this.add((input - week) * 7, "d");
    }
    function getSetISOWeek(input) {
        var week = weekOfYear(this, 1, 4).week;
        return input == null ? week : this.add((input - week) * 7, "d");
    }
    // FORMATTING
    addFormatToken("d", 0, "do", "day");
    addFormatToken("dd", 0, 0, function(format) {
        return this.localeData().weekdaysMin(this, format);
    });
    addFormatToken("ddd", 0, 0, function(format) {
        return this.localeData().weekdaysShort(this, format);
    });
    addFormatToken("dddd", 0, 0, function(format) {
        return this.localeData().weekdays(this, format);
    });
    addFormatToken("e", 0, 0, "weekday");
    addFormatToken("E", 0, 0, "isoWeekday");
    // ALIASES
    addUnitAlias("day", "d");
    addUnitAlias("weekday", "e");
    addUnitAlias("isoWeekday", "E");
    // PRIORITY
    addUnitPriority("day", 11);
    addUnitPriority("weekday", 11);
    addUnitPriority("isoWeekday", 11);
    // PARSING
    addRegexToken("d", match1to2);
    addRegexToken("e", match1to2);
    addRegexToken("E", match1to2);
    addRegexToken("dd", function(isStrict, locale) {
        return locale.weekdaysMinRegex(isStrict);
    });
    addRegexToken("ddd", function(isStrict, locale) {
        return locale.weekdaysShortRegex(isStrict);
    });
    addRegexToken("dddd", function(isStrict, locale) {
        return locale.weekdaysRegex(isStrict);
    });
    addWeekParseToken([
        "dd",
        "ddd",
        "dddd"
    ], function(input, week, config, token) {
        var weekday = config._locale.weekdaysParse(input, token, config._strict);
        // if we didn't get a weekday name, mark the date as invalid
        if (weekday != null) week.d = weekday;
        else getParsingFlags(config).invalidWeekday = input;
    });
    addWeekParseToken([
        "d",
        "e",
        "E"
    ], function(input, week, config, token) {
        week[token] = toInt(input);
    });
    // HELPERS
    function parseWeekday(input, locale) {
        if (typeof input !== "string") return input;
        if (!isNaN(input)) return parseInt(input, 10);
        input = locale.weekdaysParse(input);
        if (typeof input === "number") return input;
        return null;
    }
    function parseIsoWeekday(input, locale) {
        if (typeof input === "string") return locale.weekdaysParse(input) % 7 || 7;
        return isNaN(input) ? null : input;
    }
    // LOCALES
    function shiftWeekdays(ws, n) {
        return ws.slice(n, 7).concat(ws.slice(0, n));
    }
    var defaultLocaleWeekdays = "Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday".split("_"), defaultLocaleWeekdaysShort = "Sun_Mon_Tue_Wed_Thu_Fri_Sat".split("_"), defaultLocaleWeekdaysMin = "Su_Mo_Tu_We_Th_Fr_Sa".split("_"), defaultWeekdaysRegex = matchWord, defaultWeekdaysShortRegex = matchWord, defaultWeekdaysMinRegex = matchWord;
    function localeWeekdays(m, format) {
        var weekdays = isArray(this._weekdays) ? this._weekdays : this._weekdays[m && m !== true && this._weekdays.isFormat.test(format) ? "format" : "standalone"];
        return m === true ? shiftWeekdays(weekdays, this._week.dow) : m ? weekdays[m.day()] : weekdays;
    }
    function localeWeekdaysShort(m) {
        return m === true ? shiftWeekdays(this._weekdaysShort, this._week.dow) : m ? this._weekdaysShort[m.day()] : this._weekdaysShort;
    }
    function localeWeekdaysMin(m) {
        return m === true ? shiftWeekdays(this._weekdaysMin, this._week.dow) : m ? this._weekdaysMin[m.day()] : this._weekdaysMin;
    }
    function handleStrictParse$1(weekdayName, format, strict) {
        var i, ii, mom, llc = weekdayName.toLocaleLowerCase();
        if (!this._weekdaysParse) {
            this._weekdaysParse = [];
            this._shortWeekdaysParse = [];
            this._minWeekdaysParse = [];
            for(i = 0; i < 7; ++i){
                mom = createUTC([
                    2000,
                    1
                ]).day(i);
                this._minWeekdaysParse[i] = this.weekdaysMin(mom, "").toLocaleLowerCase();
                this._shortWeekdaysParse[i] = this.weekdaysShort(mom, "").toLocaleLowerCase();
                this._weekdaysParse[i] = this.weekdays(mom, "").toLocaleLowerCase();
            }
        }
        if (strict) {
            if (format === "dddd") {
                ii = indexOf.call(this._weekdaysParse, llc);
                return ii !== -1 ? ii : null;
            } else if (format === "ddd") {
                ii = indexOf.call(this._shortWeekdaysParse, llc);
                return ii !== -1 ? ii : null;
            } else {
                ii = indexOf.call(this._minWeekdaysParse, llc);
                return ii !== -1 ? ii : null;
            }
        } else {
            if (format === "dddd") {
                ii = indexOf.call(this._weekdaysParse, llc);
                if (ii !== -1) return ii;
                ii = indexOf.call(this._shortWeekdaysParse, llc);
                if (ii !== -1) return ii;
                ii = indexOf.call(this._minWeekdaysParse, llc);
                return ii !== -1 ? ii : null;
            } else if (format === "ddd") {
                ii = indexOf.call(this._shortWeekdaysParse, llc);
                if (ii !== -1) return ii;
                ii = indexOf.call(this._weekdaysParse, llc);
                if (ii !== -1) return ii;
                ii = indexOf.call(this._minWeekdaysParse, llc);
                return ii !== -1 ? ii : null;
            } else {
                ii = indexOf.call(this._minWeekdaysParse, llc);
                if (ii !== -1) return ii;
                ii = indexOf.call(this._weekdaysParse, llc);
                if (ii !== -1) return ii;
                ii = indexOf.call(this._shortWeekdaysParse, llc);
                return ii !== -1 ? ii : null;
            }
        }
    }
    function localeWeekdaysParse(weekdayName, format, strict) {
        var i, mom, regex;
        if (this._weekdaysParseExact) return handleStrictParse$1.call(this, weekdayName, format, strict);
        if (!this._weekdaysParse) {
            this._weekdaysParse = [];
            this._minWeekdaysParse = [];
            this._shortWeekdaysParse = [];
            this._fullWeekdaysParse = [];
        }
        for(i = 0; i < 7; i++){
            // make the regex if we don't have it already
            mom = createUTC([
                2000,
                1
            ]).day(i);
            if (strict && !this._fullWeekdaysParse[i]) {
                this._fullWeekdaysParse[i] = new RegExp("^" + this.weekdays(mom, "").replace(".", "\\.?") + "$", "i");
                this._shortWeekdaysParse[i] = new RegExp("^" + this.weekdaysShort(mom, "").replace(".", "\\.?") + "$", "i");
                this._minWeekdaysParse[i] = new RegExp("^" + this.weekdaysMin(mom, "").replace(".", "\\.?") + "$", "i");
            }
            if (!this._weekdaysParse[i]) {
                regex = "^" + this.weekdays(mom, "") + "|^" + this.weekdaysShort(mom, "") + "|^" + this.weekdaysMin(mom, "");
                this._weekdaysParse[i] = new RegExp(regex.replace(".", ""), "i");
            }
            // test the regex
            if (strict && format === "dddd" && this._fullWeekdaysParse[i].test(weekdayName)) return i;
            else if (strict && format === "ddd" && this._shortWeekdaysParse[i].test(weekdayName)) return i;
            else if (strict && format === "dd" && this._minWeekdaysParse[i].test(weekdayName)) return i;
            else if (!strict && this._weekdaysParse[i].test(weekdayName)) return i;
        }
    }
    // MOMENTS
    function getSetDayOfWeek(input) {
        if (!this.isValid()) return input != null ? this : NaN;
        var day = this._isUTC ? this._d.getUTCDay() : this._d.getDay();
        if (input != null) {
            input = parseWeekday(input, this.localeData());
            return this.add(input - day, "d");
        } else return day;
    }
    function getSetLocaleDayOfWeek(input) {
        if (!this.isValid()) return input != null ? this : NaN;
        var weekday = (this.day() + 7 - this.localeData()._week.dow) % 7;
        return input == null ? weekday : this.add(input - weekday, "d");
    }
    function getSetISODayOfWeek(input) {
        if (!this.isValid()) return input != null ? this : NaN;
        // behaves the same as moment#day except
        // as a getter, returns 7 instead of 0 (1-7 range instead of 0-6)
        // as a setter, sunday should belong to the previous week.
        if (input != null) {
            var weekday = parseIsoWeekday(input, this.localeData());
            return this.day(this.day() % 7 ? weekday : weekday - 7);
        } else return this.day() || 7;
    }
    function weekdaysRegex(isStrict) {
        if (this._weekdaysParseExact) {
            if (!hasOwnProp(this, "_weekdaysRegex")) computeWeekdaysParse.call(this);
            if (isStrict) return this._weekdaysStrictRegex;
            else return this._weekdaysRegex;
        } else {
            if (!hasOwnProp(this, "_weekdaysRegex")) this._weekdaysRegex = defaultWeekdaysRegex;
            return this._weekdaysStrictRegex && isStrict ? this._weekdaysStrictRegex : this._weekdaysRegex;
        }
    }
    function weekdaysShortRegex(isStrict) {
        if (this._weekdaysParseExact) {
            if (!hasOwnProp(this, "_weekdaysRegex")) computeWeekdaysParse.call(this);
            if (isStrict) return this._weekdaysShortStrictRegex;
            else return this._weekdaysShortRegex;
        } else {
            if (!hasOwnProp(this, "_weekdaysShortRegex")) this._weekdaysShortRegex = defaultWeekdaysShortRegex;
            return this._weekdaysShortStrictRegex && isStrict ? this._weekdaysShortStrictRegex : this._weekdaysShortRegex;
        }
    }
    function weekdaysMinRegex(isStrict) {
        if (this._weekdaysParseExact) {
            if (!hasOwnProp(this, "_weekdaysRegex")) computeWeekdaysParse.call(this);
            if (isStrict) return this._weekdaysMinStrictRegex;
            else return this._weekdaysMinRegex;
        } else {
            if (!hasOwnProp(this, "_weekdaysMinRegex")) this._weekdaysMinRegex = defaultWeekdaysMinRegex;
            return this._weekdaysMinStrictRegex && isStrict ? this._weekdaysMinStrictRegex : this._weekdaysMinRegex;
        }
    }
    function computeWeekdaysParse() {
        function cmpLenRev(a, b) {
            return b.length - a.length;
        }
        var minPieces = [], shortPieces = [], longPieces = [], mixedPieces = [], i, mom, minp, shortp, longp;
        for(i = 0; i < 7; i++){
            // make the regex if we don't have it already
            mom = createUTC([
                2000,
                1
            ]).day(i);
            minp = regexEscape(this.weekdaysMin(mom, ""));
            shortp = regexEscape(this.weekdaysShort(mom, ""));
            longp = regexEscape(this.weekdays(mom, ""));
            minPieces.push(minp);
            shortPieces.push(shortp);
            longPieces.push(longp);
            mixedPieces.push(minp);
            mixedPieces.push(shortp);
            mixedPieces.push(longp);
        }
        // Sorting makes sure if one weekday (or abbr) is a prefix of another it
        // will match the longer piece.
        minPieces.sort(cmpLenRev);
        shortPieces.sort(cmpLenRev);
        longPieces.sort(cmpLenRev);
        mixedPieces.sort(cmpLenRev);
        this._weekdaysRegex = new RegExp("^(" + mixedPieces.join("|") + ")", "i");
        this._weekdaysShortRegex = this._weekdaysRegex;
        this._weekdaysMinRegex = this._weekdaysRegex;
        this._weekdaysStrictRegex = new RegExp("^(" + longPieces.join("|") + ")", "i");
        this._weekdaysShortStrictRegex = new RegExp("^(" + shortPieces.join("|") + ")", "i");
        this._weekdaysMinStrictRegex = new RegExp("^(" + minPieces.join("|") + ")", "i");
    }
    // FORMATTING
    function hFormat() {
        return this.hours() % 12 || 12;
    }
    function kFormat() {
        return this.hours() || 24;
    }
    addFormatToken("H", [
        "HH",
        2
    ], 0, "hour");
    addFormatToken("h", [
        "hh",
        2
    ], 0, hFormat);
    addFormatToken("k", [
        "kk",
        2
    ], 0, kFormat);
    addFormatToken("hmm", 0, 0, function() {
        return "" + hFormat.apply(this) + zeroFill(this.minutes(), 2);
    });
    addFormatToken("hmmss", 0, 0, function() {
        return "" + hFormat.apply(this) + zeroFill(this.minutes(), 2) + zeroFill(this.seconds(), 2);
    });
    addFormatToken("Hmm", 0, 0, function() {
        return "" + this.hours() + zeroFill(this.minutes(), 2);
    });
    addFormatToken("Hmmss", 0, 0, function() {
        return "" + this.hours() + zeroFill(this.minutes(), 2) + zeroFill(this.seconds(), 2);
    });
    function meridiem1(token, lowercase) {
        addFormatToken(token, 0, 0, function() {
            return this.localeData().meridiem(this.hours(), this.minutes(), lowercase);
        });
    }
    meridiem1("a", true);
    meridiem1("A", false);
    // ALIASES
    addUnitAlias("hour", "h");
    // PRIORITY
    addUnitPriority("hour", 13);
    // PARSING
    function matchMeridiem(isStrict, locale) {
        return locale._meridiemParse;
    }
    addRegexToken("a", matchMeridiem);
    addRegexToken("A", matchMeridiem);
    addRegexToken("H", match1to2);
    addRegexToken("h", match1to2);
    addRegexToken("k", match1to2);
    addRegexToken("HH", match1to2, match2);
    addRegexToken("hh", match1to2, match2);
    addRegexToken("kk", match1to2, match2);
    addRegexToken("hmm", match3to4);
    addRegexToken("hmmss", match5to6);
    addRegexToken("Hmm", match3to4);
    addRegexToken("Hmmss", match5to6);
    addParseToken([
        "H",
        "HH"
    ], HOUR);
    addParseToken([
        "k",
        "kk"
    ], function(input, array, config) {
        var kInput = toInt(input);
        array[HOUR] = kInput === 24 ? 0 : kInput;
    });
    addParseToken([
        "a",
        "A"
    ], function(input, array, config) {
        config._isPm = config._locale.isPM(input);
        config._meridiem = input;
    });
    addParseToken([
        "h",
        "hh"
    ], function(input, array, config) {
        array[HOUR] = toInt(input);
        getParsingFlags(config).bigHour = true;
    });
    addParseToken("hmm", function(input, array, config) {
        var pos = input.length - 2;
        array[HOUR] = toInt(input.substr(0, pos));
        array[MINUTE] = toInt(input.substr(pos));
        getParsingFlags(config).bigHour = true;
    });
    addParseToken("hmmss", function(input, array, config) {
        var pos1 = input.length - 4, pos2 = input.length - 2;
        array[HOUR] = toInt(input.substr(0, pos1));
        array[MINUTE] = toInt(input.substr(pos1, 2));
        array[SECOND] = toInt(input.substr(pos2));
        getParsingFlags(config).bigHour = true;
    });
    addParseToken("Hmm", function(input, array, config) {
        var pos = input.length - 2;
        array[HOUR] = toInt(input.substr(0, pos));
        array[MINUTE] = toInt(input.substr(pos));
    });
    addParseToken("Hmmss", function(input, array, config) {
        var pos1 = input.length - 4, pos2 = input.length - 2;
        array[HOUR] = toInt(input.substr(0, pos1));
        array[MINUTE] = toInt(input.substr(pos1, 2));
        array[SECOND] = toInt(input.substr(pos2));
    });
    // LOCALES
    function localeIsPM(input) {
        // IE8 Quirks Mode & IE7 Standards Mode do not allow accessing strings like arrays
        // Using charAt should be more compatible.
        return (input + "").toLowerCase().charAt(0) === "p";
    }
    var defaultLocaleMeridiemParse = /[ap]\.?m?\.?/i, // Setting the hour should keep the time, because the user explicitly
    // specified which hour they want. So trying to maintain the same hour (in
    // a new timezone) makes sense. Adding/subtracting hours does not follow
    // this rule.
    getSetHour = makeGetSet("Hours", true);
    function localeMeridiem(hours, minutes, isLower) {
        if (hours > 11) return isLower ? "pm" : "PM";
        else return isLower ? "am" : "AM";
    }
    var baseConfig = {
        calendar: defaultCalendar,
        longDateFormat: defaultLongDateFormat,
        invalidDate: defaultInvalidDate,
        ordinal: defaultOrdinal,
        dayOfMonthOrdinalParse: defaultDayOfMonthOrdinalParse,
        relativeTime: defaultRelativeTime,
        months: defaultLocaleMonths,
        monthsShort: defaultLocaleMonthsShort,
        week: defaultLocaleWeek,
        weekdays: defaultLocaleWeekdays,
        weekdaysMin: defaultLocaleWeekdaysMin,
        weekdaysShort: defaultLocaleWeekdaysShort,
        meridiemParse: defaultLocaleMeridiemParse
    };
    // internal storage for locale config files
    var locales = {}, localeFamilies = {}, globalLocale;
    function commonPrefix(arr1, arr2) {
        var i, minl = Math.min(arr1.length, arr2.length);
        for(i = 0; i < minl; i += 1){
            if (arr1[i] !== arr2[i]) return i;
        }
        return minl;
    }
    function normalizeLocale(key) {
        return key ? key.toLowerCase().replace("_", "-") : key;
    }
    // pick the locale from the array
    // try ['en-au', 'en-gb'] as 'en-au', 'en-gb', 'en', as in move through the list trying each
    // substring from most specific to least, but move to the next array item if it's a more specific variant than the current root
    function chooseLocale(names) {
        var i = 0, j, next, locale, split;
        while(i < names.length){
            split = normalizeLocale(names[i]).split("-");
            j = split.length;
            next = normalizeLocale(names[i + 1]);
            next = next ? next.split("-") : null;
            while(j > 0){
                locale = loadLocale(split.slice(0, j).join("-"));
                if (locale) return locale;
                if (next && next.length >= j && commonPrefix(split, next) >= j - 1) break;
                j--;
            }
            i++;
        }
        return globalLocale;
    }
    function isLocaleNameSane(name) {
        // Prevent names that look like filesystem paths, i.e contain '/' or '\'
        return name.match("^[^/\\\\]*$") != null;
    }
    function loadLocale(name) {
        var oldLocale = null, aliasedRequire;
        // TODO: Find a better way to register and load all the locales in Node
        if (locales[name] === undefined && true && module && module.exports && isLocaleNameSane(name)) try {
            oldLocale = globalLocale._abbr;
            aliasedRequire = undefined;
            aliasedRequire("./locale/" + name);
            getSetGlobalLocale(oldLocale);
        } catch (e) {
            // mark as not found to avoid repeating expensive file require call causing high CPU
            // when trying to find en-US, en_US, en-us for every format call
            locales[name] = null; // null means not found
        }
        return locales[name];
    }
    // This function will load locale and then set the global locale.  If
    // no arguments are passed in, it will simply return the current global
    // locale key.
    function getSetGlobalLocale(key, values) {
        var data;
        if (key) {
            if (isUndefined(values)) data = getLocale(key);
            else data = defineLocale(key, values);
            if (data) // moment.duration._locale = moment._locale = data;
            globalLocale = data;
            else if (typeof console !== "undefined" && console.warn) //warn user if arguments are passed but the locale could not be set
            console.warn("Locale " + key + " not found. Did you forget to load it?");
        }
        return globalLocale._abbr;
    }
    function defineLocale(name, config) {
        if (config !== null) {
            var locale, parentConfig = baseConfig;
            config.abbr = name;
            if (locales[name] != null) {
                deprecateSimple("defineLocaleOverride", "use moment.updateLocale(localeName, config) to change an existing locale. moment.defineLocale(localeName, config) should only be used for creating a new locale See http://momentjs.com/guides/#/warnings/define-locale/ for more info.");
                parentConfig = locales[name]._config;
            } else if (config.parentLocale != null) {
                if (locales[config.parentLocale] != null) parentConfig = locales[config.parentLocale]._config;
                else {
                    locale = loadLocale(config.parentLocale);
                    if (locale != null) parentConfig = locale._config;
                    else {
                        if (!localeFamilies[config.parentLocale]) localeFamilies[config.parentLocale] = [];
                        localeFamilies[config.parentLocale].push({
                            name: name,
                            config: config
                        });
                        return null;
                    }
                }
            }
            locales[name] = new Locale(mergeConfigs(parentConfig, config));
            if (localeFamilies[name]) localeFamilies[name].forEach(function(x) {
                defineLocale(x.name, x.config);
            });
            // backwards compat for now: also set the locale
            // make sure we set the locale AFTER all child locales have been
            // created, so we won't end up with the child locale set.
            getSetGlobalLocale(name);
            return locales[name];
        } else {
            // useful for testing
            delete locales[name];
            return null;
        }
    }
    function updateLocale(name, config) {
        if (config != null) {
            var locale, tmpLocale, parentConfig = baseConfig;
            if (locales[name] != null && locales[name].parentLocale != null) // Update existing child locale in-place to avoid memory-leaks
            locales[name].set(mergeConfigs(locales[name]._config, config));
            else {
                // MERGE
                tmpLocale = loadLocale(name);
                if (tmpLocale != null) parentConfig = tmpLocale._config;
                config = mergeConfigs(parentConfig, config);
                if (tmpLocale == null) // updateLocale is called for creating a new locale
                // Set abbr so it will have a name (getters return
                // undefined otherwise).
                config.abbr = name;
                locale = new Locale(config);
                locale.parentLocale = locales[name];
                locales[name] = locale;
            }
            // backwards compat for now: also set the locale
            getSetGlobalLocale(name);
        } else // pass null for config to unupdate, useful for tests
        if (locales[name] != null) {
            if (locales[name].parentLocale != null) {
                locales[name] = locales[name].parentLocale;
                if (name === getSetGlobalLocale()) getSetGlobalLocale(name);
            } else if (locales[name] != null) delete locales[name];
        }
        return locales[name];
    }
    // returns locale data
    function getLocale(key) {
        var locale;
        if (key && key._locale && key._locale._abbr) key = key._locale._abbr;
        if (!key) return globalLocale;
        if (!isArray(key)) {
            //short-circuit everything else
            locale = loadLocale(key);
            if (locale) return locale;
            key = [
                key
            ];
        }
        return chooseLocale(key);
    }
    function listLocales() {
        return keys(locales);
    }
    function checkOverflow(m) {
        var overflow, a = m._a;
        if (a && getParsingFlags(m).overflow === -2) {
            overflow = a[MONTH] < 0 || a[MONTH] > 11 ? MONTH : a[DATE] < 1 || a[DATE] > daysInMonth(a[YEAR], a[MONTH]) ? DATE : a[HOUR] < 0 || a[HOUR] > 24 || a[HOUR] === 24 && (a[MINUTE] !== 0 || a[SECOND] !== 0 || a[MILLISECOND] !== 0) ? HOUR : a[MINUTE] < 0 || a[MINUTE] > 59 ? MINUTE : a[SECOND] < 0 || a[SECOND] > 59 ? SECOND : a[MILLISECOND] < 0 || a[MILLISECOND] > 999 ? MILLISECOND : -1;
            if (getParsingFlags(m)._overflowDayOfYear && (overflow < YEAR || overflow > DATE)) overflow = DATE;
            if (getParsingFlags(m)._overflowWeeks && overflow === -1) overflow = WEEK;
            if (getParsingFlags(m)._overflowWeekday && overflow === -1) overflow = WEEKDAY;
            getParsingFlags(m).overflow = overflow;
        }
        return m;
    }
    // iso 8601 regex
    // 0000-00-00 0000-W00 or 0000-W00-0 + T + 00 or 00:00 or 00:00:00 or 00:00:00.000 + +00:00 or +0000 or +00)
    var extendedIsoRegex = /^\s*((?:[+-]\d{6}|\d{4})-(?:\d\d-\d\d|W\d\d-\d|W\d\d|\d\d\d|\d\d))(?:(T| )(\d\d(?::\d\d(?::\d\d(?:[.,]\d+)?)?)?)([+-]\d\d(?::?\d\d)?|\s*Z)?)?$/, basicIsoRegex = /^\s*((?:[+-]\d{6}|\d{4})(?:\d\d\d\d|W\d\d\d|W\d\d|\d\d\d|\d\d|))(?:(T| )(\d\d(?:\d\d(?:\d\d(?:[.,]\d+)?)?)?)([+-]\d\d(?::?\d\d)?|\s*Z)?)?$/, tzRegex = /Z|[+-]\d\d(?::?\d\d)?/, isoDates = [
        [
            "YYYYYY-MM-DD",
            /[+-]\d{6}-\d\d-\d\d/
        ],
        [
            "YYYY-MM-DD",
            /\d{4}-\d\d-\d\d/
        ],
        [
            "GGGG-[W]WW-E",
            /\d{4}-W\d\d-\d/
        ],
        [
            "GGGG-[W]WW",
            /\d{4}-W\d\d/,
            false
        ],
        [
            "YYYY-DDD",
            /\d{4}-\d{3}/
        ],
        [
            "YYYY-MM",
            /\d{4}-\d\d/,
            false
        ],
        [
            "YYYYYYMMDD",
            /[+-]\d{10}/
        ],
        [
            "YYYYMMDD",
            /\d{8}/
        ],
        [
            "GGGG[W]WWE",
            /\d{4}W\d{3}/
        ],
        [
            "GGGG[W]WW",
            /\d{4}W\d{2}/,
            false
        ],
        [
            "YYYYDDD",
            /\d{7}/
        ],
        [
            "YYYYMM",
            /\d{6}/,
            false
        ],
        [
            "YYYY",
            /\d{4}/,
            false
        ], 
    ], // iso time formats and regexes
    isoTimes = [
        [
            "HH:mm:ss.SSSS",
            /\d\d:\d\d:\d\d\.\d+/
        ],
        [
            "HH:mm:ss,SSSS",
            /\d\d:\d\d:\d\d,\d+/
        ],
        [
            "HH:mm:ss",
            /\d\d:\d\d:\d\d/
        ],
        [
            "HH:mm",
            /\d\d:\d\d/
        ],
        [
            "HHmmss.SSSS",
            /\d\d\d\d\d\d\.\d+/
        ],
        [
            "HHmmss,SSSS",
            /\d\d\d\d\d\d,\d+/
        ],
        [
            "HHmmss",
            /\d\d\d\d\d\d/
        ],
        [
            "HHmm",
            /\d\d\d\d/
        ],
        [
            "HH",
            /\d\d/
        ], 
    ], aspNetJsonRegex = /^\/?Date\((-?\d+)/i, // RFC 2822 regex: For details see https://tools.ietf.org/html/rfc2822#section-3.3
    rfc2822 = /^(?:(Mon|Tue|Wed|Thu|Fri|Sat|Sun),?\s)?(\d{1,2})\s(Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec)\s(\d{2,4})\s(\d\d):(\d\d)(?::(\d\d))?\s(?:(UT|GMT|[ECMP][SD]T)|([Zz])|([+-]\d{4}))$/, obsOffsets = {
        UT: 0,
        GMT: 0,
        EDT: -240,
        EST: -300,
        CDT: -300,
        CST: -360,
        MDT: -360,
        MST: -420,
        PDT: -420,
        PST: -480
    };
    // date from iso format
    function configFromISO(config) {
        var i, l, string = config._i, match = extendedIsoRegex.exec(string) || basicIsoRegex.exec(string), allowTime, dateFormat, timeFormat, tzFormat, isoDatesLen = isoDates.length, isoTimesLen = isoTimes.length;
        if (match) {
            getParsingFlags(config).iso = true;
            for(i = 0, l = isoDatesLen; i < l; i++)if (isoDates[i][1].exec(match[1])) {
                dateFormat = isoDates[i][0];
                allowTime = isoDates[i][2] !== false;
                break;
            }
            if (dateFormat == null) {
                config._isValid = false;
                return;
            }
            if (match[3]) {
                for(i = 0, l = isoTimesLen; i < l; i++)if (isoTimes[i][1].exec(match[3])) {
                    // match[2] should be 'T' or space
                    timeFormat = (match[2] || " ") + isoTimes[i][0];
                    break;
                }
                if (timeFormat == null) {
                    config._isValid = false;
                    return;
                }
            }
            if (!allowTime && timeFormat != null) {
                config._isValid = false;
                return;
            }
            if (match[4]) {
                if (tzRegex.exec(match[4])) tzFormat = "Z";
                else {
                    config._isValid = false;
                    return;
                }
            }
            config._f = dateFormat + (timeFormat || "") + (tzFormat || "");
            configFromStringAndFormat(config);
        } else config._isValid = false;
    }
    function extractFromRFC2822Strings(yearStr, monthStr, dayStr, hourStr, minuteStr, secondStr) {
        var result = [
            untruncateYear(yearStr),
            defaultLocaleMonthsShort.indexOf(monthStr),
            parseInt(dayStr, 10),
            parseInt(hourStr, 10),
            parseInt(minuteStr, 10), 
        ];
        if (secondStr) result.push(parseInt(secondStr, 10));
        return result;
    }
    function untruncateYear(yearStr) {
        var year = parseInt(yearStr, 10);
        if (year <= 49) return 2000 + year;
        else if (year <= 999) return 1900 + year;
        return year;
    }
    function preprocessRFC2822(s) {
        // Remove comments and folding whitespace and replace multiple-spaces with a single space
        return s.replace(/\([^()]*\)|[\n\t]/g, " ").replace(/(\s\s+)/g, " ").replace(/^\s\s*/, "").replace(/\s\s*$/, "");
    }
    function checkWeekday(weekdayStr, parsedInput, config) {
        if (weekdayStr) {
            // TODO: Replace the vanilla JS Date object with an independent day-of-week check.
            var weekdayProvided = defaultLocaleWeekdaysShort.indexOf(weekdayStr), weekdayActual = new Date(parsedInput[0], parsedInput[1], parsedInput[2]).getDay();
            if (weekdayProvided !== weekdayActual) {
                getParsingFlags(config).weekdayMismatch = true;
                config._isValid = false;
                return false;
            }
        }
        return true;
    }
    function calculateOffset(obsOffset, militaryOffset, numOffset) {
        if (obsOffset) return obsOffsets[obsOffset];
        else if (militaryOffset) // the only allowed military tz is Z
        return 0;
        else {
            var hm = parseInt(numOffset, 10), m = hm % 100, h = (hm - m) / 100;
            return h * 60 + m;
        }
    }
    // date and time from ref 2822 format
    function configFromRFC2822(config) {
        var match = rfc2822.exec(preprocessRFC2822(config._i)), parsedArray;
        if (match) {
            parsedArray = extractFromRFC2822Strings(match[4], match[3], match[2], match[5], match[6], match[7]);
            if (!checkWeekday(match[1], parsedArray, config)) return;
            config._a = parsedArray;
            config._tzm = calculateOffset(match[8], match[9], match[10]);
            config._d = createUTCDate.apply(null, config._a);
            config._d.setUTCMinutes(config._d.getUTCMinutes() - config._tzm);
            getParsingFlags(config).rfc2822 = true;
        } else config._isValid = false;
    }
    // date from 1) ASP.NET, 2) ISO, 3) RFC 2822 formats, or 4) optional fallback if parsing isn't strict
    function configFromString(config) {
        var matched = aspNetJsonRegex.exec(config._i);
        if (matched !== null) {
            config._d = new Date(+matched[1]);
            return;
        }
        configFromISO(config);
        if (config._isValid === false) delete config._isValid;
        else return;
        configFromRFC2822(config);
        if (config._isValid === false) delete config._isValid;
        else return;
        if (config._strict) config._isValid = false;
        else // Final attempt, use Input Fallback
        hooks.createFromInputFallback(config);
    }
    hooks.createFromInputFallback = deprecate("value provided is not in a recognized RFC2822 or ISO format. moment construction falls back to js Date(), which is not reliable across all browsers and versions. Non RFC2822/ISO date formats are discouraged. Please refer to http://momentjs.com/guides/#/warnings/js-date/ for more info.", function(config) {
        config._d = new Date(config._i + (config._useUTC ? " UTC" : ""));
    });
    // Pick the first defined of two or three arguments.
    function defaults(a, b, c) {
        if (a != null) return a;
        if (b != null) return b;
        return c;
    }
    function currentDateArray(config) {
        // hooks is actually the exported moment object
        var nowValue = new Date(hooks.now());
        if (config._useUTC) return [
            nowValue.getUTCFullYear(),
            nowValue.getUTCMonth(),
            nowValue.getUTCDate(), 
        ];
        return [
            nowValue.getFullYear(),
            nowValue.getMonth(),
            nowValue.getDate()
        ];
    }
    // convert an array to a date.
    // the array should mirror the parameters below
    // note: all values past the year are optional and will default to the lowest possible value.
    // [year, month, day , hour, minute, second, millisecond]
    function configFromArray(config) {
        var i, date, input = [], currentDate, expectedWeekday, yearToUse;
        if (config._d) return;
        currentDate = currentDateArray(config);
        //compute day of the year from weeks and weekdays
        if (config._w && config._a[DATE] == null && config._a[MONTH] == null) dayOfYearFromWeekInfo(config);
        //if the day of the year is set, figure out what it is
        if (config._dayOfYear != null) {
            yearToUse = defaults(config._a[YEAR], currentDate[YEAR]);
            if (config._dayOfYear > daysInYear(yearToUse) || config._dayOfYear === 0) getParsingFlags(config)._overflowDayOfYear = true;
            date = createUTCDate(yearToUse, 0, config._dayOfYear);
            config._a[MONTH] = date.getUTCMonth();
            config._a[DATE] = date.getUTCDate();
        }
        // Default to current date.
        // * if no year, month, day of month are given, default to today
        // * if day of month is given, default month and year
        // * if month is given, default only year
        // * if year is given, don't default anything
        for(i = 0; i < 3 && config._a[i] == null; ++i)config._a[i] = input[i] = currentDate[i];
        // Zero out whatever was not defaulted, including time
        for(; i < 7; i++)config._a[i] = input[i] = config._a[i] == null ? i === 2 ? 1 : 0 : config._a[i];
        // Check for 24:00:00.000
        if (config._a[HOUR] === 24 && config._a[MINUTE] === 0 && config._a[SECOND] === 0 && config._a[MILLISECOND] === 0) {
            config._nextDay = true;
            config._a[HOUR] = 0;
        }
        config._d = (config._useUTC ? createUTCDate : createDate).apply(null, input);
        expectedWeekday = config._useUTC ? config._d.getUTCDay() : config._d.getDay();
        // Apply timezone offset from input. The actual utcOffset can be changed
        // with parseZone.
        if (config._tzm != null) config._d.setUTCMinutes(config._d.getUTCMinutes() - config._tzm);
        if (config._nextDay) config._a[HOUR] = 24;
        // check for mismatching day of week
        if (config._w && typeof config._w.d !== "undefined" && config._w.d !== expectedWeekday) getParsingFlags(config).weekdayMismatch = true;
    }
    function dayOfYearFromWeekInfo(config) {
        var w, weekYear, week, weekday, dow, doy, temp, weekdayOverflow, curWeek;
        w = config._w;
        if (w.GG != null || w.W != null || w.E != null) {
            dow = 1;
            doy = 4;
            // TODO: We need to take the current isoWeekYear, but that depends on
            // how we interpret now (local, utc, fixed offset). So create
            // a now version of current config (take local/utc/offset flags, and
            // create now).
            weekYear = defaults(w.GG, config._a[YEAR], weekOfYear(createLocal(), 1, 4).year);
            week = defaults(w.W, 1);
            weekday = defaults(w.E, 1);
            if (weekday < 1 || weekday > 7) weekdayOverflow = true;
        } else {
            dow = config._locale._week.dow;
            doy = config._locale._week.doy;
            curWeek = weekOfYear(createLocal(), dow, doy);
            weekYear = defaults(w.gg, config._a[YEAR], curWeek.year);
            // Default to current week.
            week = defaults(w.w, curWeek.week);
            if (w.d != null) {
                // weekday -- low day numbers are considered next week
                weekday = w.d;
                if (weekday < 0 || weekday > 6) weekdayOverflow = true;
            } else if (w.e != null) {
                // local weekday -- counting starts from beginning of week
                weekday = w.e + dow;
                if (w.e < 0 || w.e > 6) weekdayOverflow = true;
            } else // default to beginning of week
            weekday = dow;
        }
        if (week < 1 || week > weeksInYear(weekYear, dow, doy)) getParsingFlags(config)._overflowWeeks = true;
        else if (weekdayOverflow != null) getParsingFlags(config)._overflowWeekday = true;
        else {
            temp = dayOfYearFromWeeks(weekYear, week, weekday, dow, doy);
            config._a[YEAR] = temp.year;
            config._dayOfYear = temp.dayOfYear;
        }
    }
    // constant that refers to the ISO standard
    hooks.ISO_8601 = function() {};
    // constant that refers to the RFC 2822 form
    hooks.RFC_2822 = function() {};
    // date from string and format string
    function configFromStringAndFormat(config) {
        // TODO: Move this to another part of the creation flow to prevent circular deps
        if (config._f === hooks.ISO_8601) {
            configFromISO(config);
            return;
        }
        if (config._f === hooks.RFC_2822) {
            configFromRFC2822(config);
            return;
        }
        config._a = [];
        getParsingFlags(config).empty = true;
        // This array is used to make a Date, either with `new Date` or `Date.UTC`
        var string = "" + config._i, i, parsedInput, tokens, token, skipped, stringLength = string.length, totalParsedInputLength = 0, era, tokenLen;
        tokens = expandFormat(config._f, config._locale).match(formattingTokens) || [];
        tokenLen = tokens.length;
        for(i = 0; i < tokenLen; i++){
            token = tokens[i];
            parsedInput = (string.match(getParseRegexForToken(token, config)) || [])[0];
            if (parsedInput) {
                skipped = string.substr(0, string.indexOf(parsedInput));
                if (skipped.length > 0) getParsingFlags(config).unusedInput.push(skipped);
                string = string.slice(string.indexOf(parsedInput) + parsedInput.length);
                totalParsedInputLength += parsedInput.length;
            }
            // don't parse if it's not a known token
            if (formatTokenFunctions[token]) {
                if (parsedInput) getParsingFlags(config).empty = false;
                else getParsingFlags(config).unusedTokens.push(token);
                addTimeToArrayFromToken(token, parsedInput, config);
            } else if (config._strict && !parsedInput) getParsingFlags(config).unusedTokens.push(token);
        }
        // add remaining unparsed input length to the string
        getParsingFlags(config).charsLeftOver = stringLength - totalParsedInputLength;
        if (string.length > 0) getParsingFlags(config).unusedInput.push(string);
        // clear _12h flag if hour is <= 12
        if (config._a[HOUR] <= 12 && getParsingFlags(config).bigHour === true && config._a[HOUR] > 0) getParsingFlags(config).bigHour = undefined;
        getParsingFlags(config).parsedDateParts = config._a.slice(0);
        getParsingFlags(config).meridiem = config._meridiem;
        // handle meridiem
        config._a[HOUR] = meridiemFixWrap(config._locale, config._a[HOUR], config._meridiem);
        // handle era
        era = getParsingFlags(config).era;
        if (era !== null) config._a[YEAR] = config._locale.erasConvertYear(era, config._a[YEAR]);
        configFromArray(config);
        checkOverflow(config);
    }
    function meridiemFixWrap(locale, hour, meridiem) {
        var isPm;
        if (meridiem == null) // nothing to do
        return hour;
        if (locale.meridiemHour != null) return locale.meridiemHour(hour, meridiem);
        else if (locale.isPM != null) {
            // Fallback
            isPm = locale.isPM(meridiem);
            if (isPm && hour < 12) hour += 12;
            if (!isPm && hour === 12) hour = 0;
            return hour;
        } else // this is not supposed to happen
        return hour;
    }
    // date from string and array of format strings
    function configFromStringAndArray(config) {
        var tempConfig, bestMoment, scoreToBeat, i, currentScore, validFormatFound, bestFormatIsValid = false, configfLen = config._f.length;
        if (configfLen === 0) {
            getParsingFlags(config).invalidFormat = true;
            config._d = new Date(NaN);
            return;
        }
        for(i = 0; i < configfLen; i++){
            currentScore = 0;
            validFormatFound = false;
            tempConfig = copyConfig({}, config);
            if (config._useUTC != null) tempConfig._useUTC = config._useUTC;
            tempConfig._f = config._f[i];
            configFromStringAndFormat(tempConfig);
            if (isValid(tempConfig)) validFormatFound = true;
            // if there is any input that was not parsed add a penalty for that format
            currentScore += getParsingFlags(tempConfig).charsLeftOver;
            //or tokens
            currentScore += getParsingFlags(tempConfig).unusedTokens.length * 10;
            getParsingFlags(tempConfig).score = currentScore;
            if (!bestFormatIsValid) {
                if (scoreToBeat == null || currentScore < scoreToBeat || validFormatFound) {
                    scoreToBeat = currentScore;
                    bestMoment = tempConfig;
                    if (validFormatFound) bestFormatIsValid = true;
                }
            } else if (currentScore < scoreToBeat) {
                scoreToBeat = currentScore;
                bestMoment = tempConfig;
            }
        }
        extend(config, bestMoment || tempConfig);
    }
    function configFromObject(config) {
        if (config._d) return;
        var i = normalizeObjectUnits(config._i), dayOrDate = i.day === undefined ? i.date : i.day;
        config._a = map([
            i.year,
            i.month,
            dayOrDate,
            i.hour,
            i.minute,
            i.second,
            i.millisecond
        ], function(obj) {
            return obj && parseInt(obj, 10);
        });
        configFromArray(config);
    }
    function createFromConfig(config) {
        var res = new Moment(checkOverflow(prepareConfig(config)));
        if (res._nextDay) {
            // Adding is smart enough around DST
            res.add(1, "d");
            res._nextDay = undefined;
        }
        return res;
    }
    function prepareConfig(config) {
        var input = config._i, format = config._f;
        config._locale = config._locale || getLocale(config._l);
        if (input === null || format === undefined && input === "") return createInvalid({
            nullInput: true
        });
        if (typeof input === "string") config._i = input = config._locale.preparse(input);
        if (isMoment(input)) return new Moment(checkOverflow(input));
        else if (isDate(input)) config._d = input;
        else if (isArray(format)) configFromStringAndArray(config);
        else if (format) configFromStringAndFormat(config);
        else configFromInput(config);
        if (!isValid(config)) config._d = null;
        return config;
    }
    function configFromInput(config) {
        var input = config._i;
        if (isUndefined(input)) config._d = new Date(hooks.now());
        else if (isDate(input)) config._d = new Date(input.valueOf());
        else if (typeof input === "string") configFromString(config);
        else if (isArray(input)) {
            config._a = map(input.slice(0), function(obj) {
                return parseInt(obj, 10);
            });
            configFromArray(config);
        } else if (isObject(input)) configFromObject(config);
        else if (isNumber(input)) // from milliseconds
        config._d = new Date(input);
        else hooks.createFromInputFallback(config);
    }
    function createLocalOrUTC(input, format, locale, strict, isUTC) {
        var c = {};
        if (format === true || format === false) {
            strict = format;
            format = undefined;
        }
        if (locale === true || locale === false) {
            strict = locale;
            locale = undefined;
        }
        if (isObject(input) && isObjectEmpty(input) || isArray(input) && input.length === 0) input = undefined;
        // object construction must be done this way.
        // https://github.com/moment/moment/issues/1423
        c._isAMomentObject = true;
        c._useUTC = c._isUTC = isUTC;
        c._l = locale;
        c._i = input;
        c._f = format;
        c._strict = strict;
        return createFromConfig(c);
    }
    function createLocal(input, format, locale, strict) {
        return createLocalOrUTC(input, format, locale, strict, false);
    }
    var prototypeMin = deprecate("moment().min is deprecated, use moment.max instead. http://momentjs.com/guides/#/warnings/min-max/", function() {
        var other = createLocal.apply(null, arguments);
        if (this.isValid() && other.isValid()) return other < this ? this : other;
        else return createInvalid();
    }), prototypeMax = deprecate("moment().max is deprecated, use moment.min instead. http://momentjs.com/guides/#/warnings/min-max/", function() {
        var other = createLocal.apply(null, arguments);
        if (this.isValid() && other.isValid()) return other > this ? this : other;
        else return createInvalid();
    });
    // Pick a moment m from moments so that m[fn](other) is true for all
    // other. This relies on the function fn to be transitive.
    //
    // moments should either be an array of moment objects or an array, whose
    // first element is an array of moment objects.
    function pickBy(fn, moments) {
        var res, i;
        if (moments.length === 1 && isArray(moments[0])) moments = moments[0];
        if (!moments.length) return createLocal();
        res = moments[0];
        for(i = 1; i < moments.length; ++i)if (!moments[i].isValid() || moments[i][fn](res)) res = moments[i];
        return res;
    }
    // TODO: Use [].sort instead?
    function min() {
        var args = [].slice.call(arguments, 0);
        return pickBy("isBefore", args);
    }
    function max() {
        var args = [].slice.call(arguments, 0);
        return pickBy("isAfter", args);
    }
    var now1 = function() {
        return Date.now ? Date.now() : +new Date();
    };
    var ordering = [
        "year",
        "quarter",
        "month",
        "week",
        "day",
        "hour",
        "minute",
        "second",
        "millisecond", 
    ];
    function isDurationValid(m) {
        var key, unitHasDecimal = false, i, orderLen = ordering.length;
        for(key in m){
            if (hasOwnProp(m, key) && !(indexOf.call(ordering, key) !== -1 && (m[key] == null || !isNaN(m[key])))) return false;
        }
        for(i = 0; i < orderLen; ++i)if (m[ordering[i]]) {
            if (unitHasDecimal) return false; // only allow non-integers for smallest unit
            if (parseFloat(m[ordering[i]]) !== toInt(m[ordering[i]])) unitHasDecimal = true;
        }
        return true;
    }
    function isValid$1() {
        return this._isValid;
    }
    function createInvalid$1() {
        return createDuration(NaN);
    }
    function Duration(duration) {
        var normalizedInput = normalizeObjectUnits(duration), years = normalizedInput.year || 0, quarters = normalizedInput.quarter || 0, months = normalizedInput.month || 0, weeks = normalizedInput.week || normalizedInput.isoWeek || 0, days = normalizedInput.day || 0, hours = normalizedInput.hour || 0, minutes = normalizedInput.minute || 0, seconds = normalizedInput.second || 0, milliseconds = normalizedInput.millisecond || 0;
        this._isValid = isDurationValid(normalizedInput);
        // representation for dateAddRemove
        this._milliseconds = +milliseconds + seconds * 1e3 + minutes * 6e4 + hours * 3600000; //using 1000 * 60 * 60 instead of 36e5 to avoid floating point rounding errors https://github.com/moment/moment/issues/2978
        // Because of dateAddRemove treats 24 hours as different from a
        // day when working around DST, we need to store them separately
        this._days = +days + weeks * 7;
        // It is impossible to translate months into days without knowing
        // which months you are are talking about, so we have to store
        // it separately.
        this._months = +months + quarters * 3 + years * 12;
        this._data = {};
        this._locale = getLocale();
        this._bubble();
    }
    function isDuration(obj) {
        return obj instanceof Duration;
    }
    function absRound(number) {
        if (number < 0) return Math.round(-1 * number) * -1;
        else return Math.round(number);
    }
    // compare two arrays, return the number of differences
    function compareArrays(array1, array2, dontConvert) {
        var len = Math.min(array1.length, array2.length), lengthDiff = Math.abs(array1.length - array2.length), diffs = 0, i;
        for(i = 0; i < len; i++)if (dontConvert && array1[i] !== array2[i] || !dontConvert && toInt(array1[i]) !== toInt(array2[i])) diffs++;
        return diffs + lengthDiff;
    }
    // FORMATTING
    function offset1(token, separator) {
        addFormatToken(token, 0, 0, function() {
            var offset = this.utcOffset(), sign = "+";
            if (offset < 0) {
                offset = -offset;
                sign = "-";
            }
            return sign + zeroFill(~~(offset / 60), 2) + separator + zeroFill(~~offset % 60, 2);
        });
    }
    offset1("Z", ":");
    offset1("ZZ", "");
    // PARSING
    addRegexToken("Z", matchShortOffset);
    addRegexToken("ZZ", matchShortOffset);
    addParseToken([
        "Z",
        "ZZ"
    ], function(input, array, config) {
        config._useUTC = true;
        config._tzm = offsetFromString(matchShortOffset, input);
    });
    // HELPERS
    // timezone chunker
    // '+10:00' > ['10',  '00']
    // '-1530'  > ['-15', '30']
    var chunkOffset = /([\+\-]|\d\d)/gi;
    function offsetFromString(matcher, string) {
        var matches = (string || "").match(matcher), chunk, parts, minutes;
        if (matches === null) return null;
        chunk = matches[matches.length - 1] || [];
        parts = (chunk + "").match(chunkOffset) || [
            "-",
            0,
            0
        ];
        minutes = +(parts[1] * 60) + toInt(parts[2]);
        return minutes === 0 ? 0 : parts[0] === "+" ? minutes : -minutes;
    }
    // Return a moment from input, that is local/utc/zone equivalent to model.
    function cloneWithOffset(input, model) {
        var res, diff;
        if (model._isUTC) {
            res = model.clone();
            diff = (isMoment(input) || isDate(input) ? input.valueOf() : createLocal(input).valueOf()) - res.valueOf();
            // Use low-level api, because this fn is low-level api.
            res._d.setTime(res._d.valueOf() + diff);
            hooks.updateOffset(res, false);
            return res;
        } else return createLocal(input).local();
    }
    function getDateOffset(m) {
        // On Firefox.24 Date#getTimezoneOffset returns a floating point.
        // https://github.com/moment/moment/pull/1871
        return -Math.round(m._d.getTimezoneOffset());
    }
    // HOOKS
    // This function will be called whenever a moment is mutated.
    // It is intended to keep the offset in sync with the timezone.
    hooks.updateOffset = function() {};
    // MOMENTS
    // keepLocalTime = true means only change the timezone, without
    // affecting the local hour. So 5:31:26 +0300 --[utcOffset(2, true)]-->
    // 5:31:26 +0200 It is possible that 5:31:26 doesn't exist with offset
    // +0200, so we adjust the time as needed, to be valid.
    //
    // Keeping the time actually adds/subtracts (one hour)
    // from the actual represented time. That is why we call updateOffset
    // a second time. In case it wants us to change the offset again
    // _changeInProgress == true case, then we have to adjust, because
    // there is no such time in the given timezone.
    function getSetOffset(input, keepLocalTime, keepMinutes) {
        var offset = this._offset || 0, localAdjust;
        if (!this.isValid()) return input != null ? this : NaN;
        if (input != null) {
            if (typeof input === "string") {
                input = offsetFromString(matchShortOffset, input);
                if (input === null) return this;
            } else if (Math.abs(input) < 16 && !keepMinutes) input = input * 60;
            if (!this._isUTC && keepLocalTime) localAdjust = getDateOffset(this);
            this._offset = input;
            this._isUTC = true;
            if (localAdjust != null) this.add(localAdjust, "m");
            if (offset !== input) {
                if (!keepLocalTime || this._changeInProgress) addSubtract(this, createDuration(input - offset, "m"), 1, false);
                else if (!this._changeInProgress) {
                    this._changeInProgress = true;
                    hooks.updateOffset(this, true);
                    this._changeInProgress = null;
                }
            }
            return this;
        } else return this._isUTC ? offset : getDateOffset(this);
    }
    function getSetZone(input, keepLocalTime) {
        if (input != null) {
            if (typeof input !== "string") input = -input;
            this.utcOffset(input, keepLocalTime);
            return this;
        } else return -this.utcOffset();
    }
    function setOffsetToUTC(keepLocalTime) {
        return this.utcOffset(0, keepLocalTime);
    }
    function setOffsetToLocal(keepLocalTime) {
        if (this._isUTC) {
            this.utcOffset(0, keepLocalTime);
            this._isUTC = false;
            if (keepLocalTime) this.subtract(getDateOffset(this), "m");
        }
        return this;
    }
    function setOffsetToParsedOffset() {
        if (this._tzm != null) this.utcOffset(this._tzm, false, true);
        else if (typeof this._i === "string") {
            var tZone = offsetFromString(matchOffset, this._i);
            if (tZone != null) this.utcOffset(tZone);
            else this.utcOffset(0, true);
        }
        return this;
    }
    function hasAlignedHourOffset(input) {
        if (!this.isValid()) return false;
        input = input ? createLocal(input).utcOffset() : 0;
        return (this.utcOffset() - input) % 60 === 0;
    }
    function isDaylightSavingTime() {
        return this.utcOffset() > this.clone().month(0).utcOffset() || this.utcOffset() > this.clone().month(5).utcOffset();
    }
    function isDaylightSavingTimeShifted() {
        if (!isUndefined(this._isDSTShifted)) return this._isDSTShifted;
        var c = {}, other;
        copyConfig(c, this);
        c = prepareConfig(c);
        if (c._a) {
            other = c._isUTC ? createUTC(c._a) : createLocal(c._a);
            this._isDSTShifted = this.isValid() && compareArrays(c._a, other.toArray()) > 0;
        } else this._isDSTShifted = false;
        return this._isDSTShifted;
    }
    function isLocal() {
        return this.isValid() ? !this._isUTC : false;
    }
    function isUtcOffset() {
        return this.isValid() ? this._isUTC : false;
    }
    function isUtc() {
        return this.isValid() ? this._isUTC && this._offset === 0 : false;
    }
    // ASP.NET json date format regex
    var aspNetRegex = /^(-|\+)?(?:(\d*)[. ])?(\d+):(\d+)(?::(\d+)(\.\d*)?)?$/, // from http://docs.closure-library.googlecode.com/git/closure_goog_date_date.js.source.html
    // somewhat more in line with 4.4.3.2 2004 spec, but allows decimal anywhere
    // and further modified to allow for strings containing both week and day
    isoRegex = /^(-|\+)?P(?:([-+]?[0-9,.]*)Y)?(?:([-+]?[0-9,.]*)M)?(?:([-+]?[0-9,.]*)W)?(?:([-+]?[0-9,.]*)D)?(?:T(?:([-+]?[0-9,.]*)H)?(?:([-+]?[0-9,.]*)M)?(?:([-+]?[0-9,.]*)S)?)?$/;
    function createDuration(input, key) {
        var duration = input, // matching against regexp is expensive, do it on demand
        match = null, sign, ret, diffRes;
        if (isDuration(input)) duration = {
            ms: input._milliseconds,
            d: input._days,
            M: input._months
        };
        else if (isNumber(input) || !isNaN(+input)) {
            duration = {};
            if (key) duration[key] = +input;
            else duration.milliseconds = +input;
        } else if (match = aspNetRegex.exec(input)) {
            sign = match[1] === "-" ? -1 : 1;
            duration = {
                y: 0,
                d: toInt(match[DATE]) * sign,
                h: toInt(match[HOUR]) * sign,
                m: toInt(match[MINUTE]) * sign,
                s: toInt(match[SECOND]) * sign,
                ms: toInt(absRound(match[MILLISECOND] * 1000)) * sign
            };
        } else if (match = isoRegex.exec(input)) {
            sign = match[1] === "-" ? -1 : 1;
            duration = {
                y: parseIso(match[2], sign),
                M: parseIso(match[3], sign),
                w: parseIso(match[4], sign),
                d: parseIso(match[5], sign),
                h: parseIso(match[6], sign),
                m: parseIso(match[7], sign),
                s: parseIso(match[8], sign)
            };
        } else if (duration == null) // checks for null or undefined
        duration = {};
        else if (typeof duration === "object" && ("from" in duration || "to" in duration)) {
            diffRes = momentsDifference(createLocal(duration.from), createLocal(duration.to));
            duration = {};
            duration.ms = diffRes.milliseconds;
            duration.M = diffRes.months;
        }
        ret = new Duration(duration);
        if (isDuration(input) && hasOwnProp(input, "_locale")) ret._locale = input._locale;
        if (isDuration(input) && hasOwnProp(input, "_isValid")) ret._isValid = input._isValid;
        return ret;
    }
    createDuration.fn = Duration.prototype;
    createDuration.invalid = createInvalid$1;
    function parseIso(inp, sign) {
        // We'd normally use ~~inp for this, but unfortunately it also
        // converts floats to ints.
        // inp may be undefined, so careful calling replace on it.
        var res = inp && parseFloat(inp.replace(",", "."));
        // apply sign while we're at it
        return (isNaN(res) ? 0 : res) * sign;
    }
    function positiveMomentsDifference(base, other) {
        var res = {};
        res.months = other.month() - base.month() + (other.year() - base.year()) * 12;
        if (base.clone().add(res.months, "M").isAfter(other)) --res.months;
        res.milliseconds = +other - +base.clone().add(res.months, "M");
        return res;
    }
    function momentsDifference(base, other) {
        var res;
        if (!(base.isValid() && other.isValid())) return {
            milliseconds: 0,
            months: 0
        };
        other = cloneWithOffset(other, base);
        if (base.isBefore(other)) res = positiveMomentsDifference(base, other);
        else {
            res = positiveMomentsDifference(other, base);
            res.milliseconds = -res.milliseconds;
            res.months = -res.months;
        }
        return res;
    }
    // TODO: remove 'name' arg after deprecation is removed
    function createAdder(direction, name) {
        return function(val, period) {
            var dur, tmp;
            //invert the arguments, but complain about it
            if (period !== null && !isNaN(+period)) {
                deprecateSimple(name, "moment()." + name + "(period, number) is deprecated. Please use moment()." + name + "(number, period). " + "See http://momentjs.com/guides/#/warnings/add-inverted-param/ for more info.");
                tmp = val;
                val = period;
                period = tmp;
            }
            dur = createDuration(val, period);
            addSubtract(this, dur, direction);
            return this;
        };
    }
    function addSubtract(mom, duration, isAdding, updateOffset) {
        var milliseconds = duration._milliseconds, days = absRound(duration._days), months = absRound(duration._months);
        if (!mom.isValid()) // No op
        return;
        updateOffset = updateOffset == null ? true : updateOffset;
        if (months) setMonth(mom, get(mom, "Month") + months * isAdding);
        if (days) set$1(mom, "Date", get(mom, "Date") + days * isAdding);
        if (milliseconds) mom._d.setTime(mom._d.valueOf() + milliseconds * isAdding);
        if (updateOffset) hooks.updateOffset(mom, days || months);
    }
    var add = createAdder(1, "add"), subtract = createAdder(-1, "subtract");
    function isString(input) {
        return typeof input === "string" || input instanceof String;
    }
    // type MomentInput = Moment | Date | string | number | (number | string)[] | MomentInputObject | void; // null | undefined
    function isMomentInput(input) {
        return isMoment(input) || isDate(input) || isString(input) || isNumber(input) || isNumberOrStringArray(input) || isMomentInputObject(input) || input === null || input === undefined;
    }
    function isMomentInputObject(input) {
        var objectTest = isObject(input) && !isObjectEmpty(input), propertyTest = false, properties = [
            "years",
            "year",
            "y",
            "months",
            "month",
            "M",
            "days",
            "day",
            "d",
            "dates",
            "date",
            "D",
            "hours",
            "hour",
            "h",
            "minutes",
            "minute",
            "m",
            "seconds",
            "second",
            "s",
            "milliseconds",
            "millisecond",
            "ms", 
        ], i, property, propertyLen = properties.length;
        for(i = 0; i < propertyLen; i += 1){
            property = properties[i];
            propertyTest = propertyTest || hasOwnProp(input, property);
        }
        return objectTest && propertyTest;
    }
    function isNumberOrStringArray(input) {
        var arrayTest = isArray(input), dataTypeTest = false;
        if (arrayTest) dataTypeTest = input.filter(function(item) {
            return !isNumber(item) && isString(input);
        }).length === 0;
        return arrayTest && dataTypeTest;
    }
    function isCalendarSpec(input) {
        var objectTest = isObject(input) && !isObjectEmpty(input), propertyTest = false, properties = [
            "sameDay",
            "nextDay",
            "lastDay",
            "nextWeek",
            "lastWeek",
            "sameElse", 
        ], i, property;
        for(i = 0; i < properties.length; i += 1){
            property = properties[i];
            propertyTest = propertyTest || hasOwnProp(input, property);
        }
        return objectTest && propertyTest;
    }
    function getCalendarFormat(myMoment, now) {
        var diff = myMoment.diff(now, "days", true);
        return diff < -6 ? "sameElse" : diff < -1 ? "lastWeek" : diff < 0 ? "lastDay" : diff < 1 ? "sameDay" : diff < 2 ? "nextDay" : diff < 7 ? "nextWeek" : "sameElse";
    }
    function calendar$1(time, formats) {
        // Support for single parameter, formats only overload to the calendar function
        if (arguments.length === 1) {
            if (!arguments[0]) {
                time = undefined;
                formats = undefined;
            } else if (isMomentInput(arguments[0])) {
                time = arguments[0];
                formats = undefined;
            } else if (isCalendarSpec(arguments[0])) {
                formats = arguments[0];
                time = undefined;
            }
        }
        // We want to compare the start of today, vs this.
        // Getting start-of-today depends on whether we're local/utc/offset or not.
        var now = time || createLocal(), sod = cloneWithOffset(now, this).startOf("day"), format = hooks.calendarFormat(this, sod) || "sameElse", output = formats && (isFunction(formats[format]) ? formats[format].call(this, now) : formats[format]);
        return this.format(output || this.localeData().calendar(format, this, createLocal(now)));
    }
    function clone() {
        return new Moment(this);
    }
    function isAfter(input, units) {
        var localInput = isMoment(input) ? input : createLocal(input);
        if (!(this.isValid() && localInput.isValid())) return false;
        units = normalizeUnits(units) || "millisecond";
        if (units === "millisecond") return this.valueOf() > localInput.valueOf();
        else return localInput.valueOf() < this.clone().startOf(units).valueOf();
    }
    function isBefore(input, units) {
        var localInput = isMoment(input) ? input : createLocal(input);
        if (!(this.isValid() && localInput.isValid())) return false;
        units = normalizeUnits(units) || "millisecond";
        if (units === "millisecond") return this.valueOf() < localInput.valueOf();
        else return this.clone().endOf(units).valueOf() < localInput.valueOf();
    }
    function isBetween(from, to, units, inclusivity) {
        var localFrom = isMoment(from) ? from : createLocal(from), localTo = isMoment(to) ? to : createLocal(to);
        if (!(this.isValid() && localFrom.isValid() && localTo.isValid())) return false;
        inclusivity = inclusivity || "()";
        return (inclusivity[0] === "(" ? this.isAfter(localFrom, units) : !this.isBefore(localFrom, units)) && (inclusivity[1] === ")" ? this.isBefore(localTo, units) : !this.isAfter(localTo, units));
    }
    function isSame(input, units) {
        var localInput = isMoment(input) ? input : createLocal(input), inputMs;
        if (!(this.isValid() && localInput.isValid())) return false;
        units = normalizeUnits(units) || "millisecond";
        if (units === "millisecond") return this.valueOf() === localInput.valueOf();
        else {
            inputMs = localInput.valueOf();
            return this.clone().startOf(units).valueOf() <= inputMs && inputMs <= this.clone().endOf(units).valueOf();
        }
    }
    function isSameOrAfter(input, units) {
        return this.isSame(input, units) || this.isAfter(input, units);
    }
    function isSameOrBefore(input, units) {
        return this.isSame(input, units) || this.isBefore(input, units);
    }
    function diff1(input, units, asFloat) {
        var that, zoneDelta, output;
        if (!this.isValid()) return NaN;
        that = cloneWithOffset(input, this);
        if (!that.isValid()) return NaN;
        zoneDelta = (that.utcOffset() - this.utcOffset()) * 6e4;
        units = normalizeUnits(units);
        switch(units){
            case "year":
                output = monthDiff(this, that) / 12;
                break;
            case "month":
                output = monthDiff(this, that);
                break;
            case "quarter":
                output = monthDiff(this, that) / 3;
                break;
            case "second":
                output = (this - that) / 1e3;
                break; // 1000
            case "minute":
                output = (this - that) / 6e4;
                break; // 1000 * 60
            case "hour":
                output = (this - that) / 36e5;
                break; // 1000 * 60 * 60
            case "day":
                output = (this - that - zoneDelta) / 864e5;
                break; // 1000 * 60 * 60 * 24, negate dst
            case "week":
                output = (this - that - zoneDelta) / 6048e5;
                break; // 1000 * 60 * 60 * 24 * 7, negate dst
            default:
                output = this - that;
        }
        return asFloat ? output : absFloor(output);
    }
    function monthDiff(a, b) {
        if (a.date() < b.date()) // end-of-month calculations work correct when the start month has more
        // days than the end month.
        return -monthDiff(b, a);
        // difference in months
        var wholeMonthDiff = (b.year() - a.year()) * 12 + (b.month() - a.month()), // b is in (anchor - 1 month, anchor + 1 month)
        anchor = a.clone().add(wholeMonthDiff, "months"), anchor2, adjust;
        if (b - anchor < 0) {
            anchor2 = a.clone().add(wholeMonthDiff - 1, "months");
            // linear across the month
            adjust = (b - anchor) / (anchor - anchor2);
        } else {
            anchor2 = a.clone().add(wholeMonthDiff + 1, "months");
            // linear across the month
            adjust = (b - anchor) / (anchor2 - anchor);
        }
        //check for negative zero, return zero if negative zero
        return -(wholeMonthDiff + adjust) || 0;
    }
    hooks.defaultFormat = "YYYY-MM-DDTHH:mm:ssZ";
    hooks.defaultFormatUtc = "YYYY-MM-DDTHH:mm:ss[Z]";
    function toString() {
        return this.clone().locale("en").format("ddd MMM DD YYYY HH:mm:ss [GMT]ZZ");
    }
    function toISOString(keepOffset) {
        if (!this.isValid()) return null;
        var utc = keepOffset !== true, m = utc ? this.clone().utc() : this;
        if (m.year() < 0 || m.year() > 9999) return formatMoment(m, utc ? "YYYYYY-MM-DD[T]HH:mm:ss.SSS[Z]" : "YYYYYY-MM-DD[T]HH:mm:ss.SSSZ");
        if (isFunction(Date.prototype.toISOString)) {
            // native implementation is ~50x faster, use it when we can
            if (utc) return this.toDate().toISOString();
            else return new Date(this.valueOf() + this.utcOffset() * 60000).toISOString().replace("Z", formatMoment(m, "Z"));
        }
        return formatMoment(m, utc ? "YYYY-MM-DD[T]HH:mm:ss.SSS[Z]" : "YYYY-MM-DD[T]HH:mm:ss.SSSZ");
    }
    /**
     * Return a human readable representation of a moment that can
     * also be evaluated to get a new moment which is the same
     *
     * @link https://nodejs.org/dist/latest/docs/api/util.html#util_custom_inspect_function_on_objects
     */ function inspect() {
        if (!this.isValid()) return "moment.invalid(/* " + this._i + " */)";
        var func = "moment", zone = "", prefix, year, datetime, suffix;
        if (!this.isLocal()) {
            func = this.utcOffset() === 0 ? "moment.utc" : "moment.parseZone";
            zone = "Z";
        }
        prefix = "[" + func + '("]';
        year = 0 <= this.year() && this.year() <= 9999 ? "YYYY" : "YYYYYY";
        datetime = "-MM-DD[T]HH:mm:ss.SSS";
        suffix = zone + '[")]';
        return this.format(prefix + year + datetime + suffix);
    }
    function format1(inputString) {
        if (!inputString) inputString = this.isUtc() ? hooks.defaultFormatUtc : hooks.defaultFormat;
        var output = formatMoment(this, inputString);
        return this.localeData().postformat(output);
    }
    function from1(time, withoutSuffix) {
        if (this.isValid() && (isMoment(time) && time.isValid() || createLocal(time).isValid())) return createDuration({
            to: this,
            from: time
        }).locale(this.locale()).humanize(!withoutSuffix);
        else return this.localeData().invalidDate();
    }
    function fromNow(withoutSuffix) {
        return this.from(createLocal(), withoutSuffix);
    }
    function to1(time, withoutSuffix) {
        if (this.isValid() && (isMoment(time) && time.isValid() || createLocal(time).isValid())) return createDuration({
            from: this,
            to: time
        }).locale(this.locale()).humanize(!withoutSuffix);
        else return this.localeData().invalidDate();
    }
    function toNow(withoutSuffix) {
        return this.to(createLocal(), withoutSuffix);
    }
    // If passed a locale key, it will set the locale for this
    // instance.  Otherwise, it will return the locale configuration
    // variables for this instance.
    function locale1(key) {
        var newLocaleData;
        if (key === undefined) return this._locale._abbr;
        else {
            newLocaleData = getLocale(key);
            if (newLocaleData != null) this._locale = newLocaleData;
            return this;
        }
    }
    var lang = deprecate("moment().lang() is deprecated. Instead, use moment().localeData() to get the language configuration. Use moment().locale() to change languages.", function(key) {
        if (key === undefined) return this.localeData();
        else return this.locale(key);
    });
    function localeData() {
        return this._locale;
    }
    var MS_PER_SECOND = 1000, MS_PER_MINUTE = 60 * MS_PER_SECOND, MS_PER_HOUR = 60 * MS_PER_MINUTE, MS_PER_400_YEARS = 3506328 * MS_PER_HOUR;
    // actual modulo - handles negative numbers (for dates before 1970):
    function mod$1(dividend, divisor) {
        return (dividend % divisor + divisor) % divisor;
    }
    function localStartOfDate(y, m, d) {
        // the date constructor remaps years 0-99 to 1900-1999
        if (y < 100 && y >= 0) // preserve leap years using a full 400 year cycle, then reset
        return new Date(y + 400, m, d) - MS_PER_400_YEARS;
        else return new Date(y, m, d).valueOf();
    }
    function utcStartOfDate(y, m, d) {
        // Date.UTC remaps years 0-99 to 1900-1999
        if (y < 100 && y >= 0) // preserve leap years using a full 400 year cycle, then reset
        return Date.UTC(y + 400, m, d) - MS_PER_400_YEARS;
        else return Date.UTC(y, m, d);
    }
    function startOf(units) {
        var time, startOfDate;
        units = normalizeUnits(units);
        if (units === undefined || units === "millisecond" || !this.isValid()) return this;
        startOfDate = this._isUTC ? utcStartOfDate : localStartOfDate;
        switch(units){
            case "year":
                time = startOfDate(this.year(), 0, 1);
                break;
            case "quarter":
                time = startOfDate(this.year(), this.month() - this.month() % 3, 1);
                break;
            case "month":
                time = startOfDate(this.year(), this.month(), 1);
                break;
            case "week":
                time = startOfDate(this.year(), this.month(), this.date() - this.weekday());
                break;
            case "isoWeek":
                time = startOfDate(this.year(), this.month(), this.date() - (this.isoWeekday() - 1));
                break;
            case "day":
            case "date":
                time = startOfDate(this.year(), this.month(), this.date());
                break;
            case "hour":
                time = this._d.valueOf();
                time -= mod$1(time + (this._isUTC ? 0 : this.utcOffset() * MS_PER_MINUTE), MS_PER_HOUR);
                break;
            case "minute":
                time = this._d.valueOf();
                time -= mod$1(time, MS_PER_MINUTE);
                break;
            case "second":
                time = this._d.valueOf();
                time -= mod$1(time, MS_PER_SECOND);
                break;
        }
        this._d.setTime(time);
        hooks.updateOffset(this, true);
        return this;
    }
    function endOf(units) {
        var time, startOfDate;
        units = normalizeUnits(units);
        if (units === undefined || units === "millisecond" || !this.isValid()) return this;
        startOfDate = this._isUTC ? utcStartOfDate : localStartOfDate;
        switch(units){
            case "year":
                time = startOfDate(this.year() + 1, 0, 1) - 1;
                break;
            case "quarter":
                time = startOfDate(this.year(), this.month() - this.month() % 3 + 3, 1) - 1;
                break;
            case "month":
                time = startOfDate(this.year(), this.month() + 1, 1) - 1;
                break;
            case "week":
                time = startOfDate(this.year(), this.month(), this.date() - this.weekday() + 7) - 1;
                break;
            case "isoWeek":
                time = startOfDate(this.year(), this.month(), this.date() - (this.isoWeekday() - 1) + 7) - 1;
                break;
            case "day":
            case "date":
                time = startOfDate(this.year(), this.month(), this.date() + 1) - 1;
                break;
            case "hour":
                time = this._d.valueOf();
                time += MS_PER_HOUR - mod$1(time + (this._isUTC ? 0 : this.utcOffset() * MS_PER_MINUTE), MS_PER_HOUR) - 1;
                break;
            case "minute":
                time = this._d.valueOf();
                time += MS_PER_MINUTE - mod$1(time, MS_PER_MINUTE) - 1;
                break;
            case "second":
                time = this._d.valueOf();
                time += MS_PER_SECOND - mod$1(time, MS_PER_SECOND) - 1;
                break;
        }
        this._d.setTime(time);
        hooks.updateOffset(this, true);
        return this;
    }
    function valueOf() {
        return this._d.valueOf() - (this._offset || 0) * 60000;
    }
    function unix() {
        return Math.floor(this.valueOf() / 1000);
    }
    function toDate() {
        return new Date(this.valueOf());
    }
    function toArray() {
        var m = this;
        return [
            m.year(),
            m.month(),
            m.date(),
            m.hour(),
            m.minute(),
            m.second(),
            m.millisecond(), 
        ];
    }
    function toObject() {
        var m = this;
        return {
            years: m.year(),
            months: m.month(),
            date: m.date(),
            hours: m.hours(),
            minutes: m.minutes(),
            seconds: m.seconds(),
            milliseconds: m.milliseconds()
        };
    }
    function toJSON() {
        // new Date(NaN).toJSON() === null
        return this.isValid() ? this.toISOString() : null;
    }
    function isValid$2() {
        return isValid(this);
    }
    function parsingFlags() {
        return extend({}, getParsingFlags(this));
    }
    function invalidAt() {
        return getParsingFlags(this).overflow;
    }
    function creationData() {
        return {
            input: this._i,
            format: this._f,
            locale: this._locale,
            isUTC: this._isUTC,
            strict: this._strict
        };
    }
    addFormatToken("N", 0, 0, "eraAbbr");
    addFormatToken("NN", 0, 0, "eraAbbr");
    addFormatToken("NNN", 0, 0, "eraAbbr");
    addFormatToken("NNNN", 0, 0, "eraName");
    addFormatToken("NNNNN", 0, 0, "eraNarrow");
    addFormatToken("y", [
        "y",
        1
    ], "yo", "eraYear");
    addFormatToken("y", [
        "yy",
        2
    ], 0, "eraYear");
    addFormatToken("y", [
        "yyy",
        3
    ], 0, "eraYear");
    addFormatToken("y", [
        "yyyy",
        4
    ], 0, "eraYear");
    addRegexToken("N", matchEraAbbr);
    addRegexToken("NN", matchEraAbbr);
    addRegexToken("NNN", matchEraAbbr);
    addRegexToken("NNNN", matchEraName);
    addRegexToken("NNNNN", matchEraNarrow);
    addParseToken([
        "N",
        "NN",
        "NNN",
        "NNNN",
        "NNNNN"
    ], function(input, array, config, token) {
        var era = config._locale.erasParse(input, token, config._strict);
        if (era) getParsingFlags(config).era = era;
        else getParsingFlags(config).invalidEra = input;
    });
    addRegexToken("y", matchUnsigned);
    addRegexToken("yy", matchUnsigned);
    addRegexToken("yyy", matchUnsigned);
    addRegexToken("yyyy", matchUnsigned);
    addRegexToken("yo", matchEraYearOrdinal);
    addParseToken([
        "y",
        "yy",
        "yyy",
        "yyyy"
    ], YEAR);
    addParseToken([
        "yo"
    ], function(input, array, config, token) {
        var match;
        if (config._locale._eraYearOrdinalRegex) match = input.match(config._locale._eraYearOrdinalRegex);
        if (config._locale.eraYearOrdinalParse) array[YEAR] = config._locale.eraYearOrdinalParse(input, match);
        else array[YEAR] = parseInt(input, 10);
    });
    function localeEras(m, format) {
        var i, l, date, eras = this._eras || getLocale("en")._eras;
        for(i = 0, l = eras.length; i < l; ++i){
            switch(typeof eras[i].since){
                case "string":
                    // truncate time
                    date = hooks(eras[i].since).startOf("day");
                    eras[i].since = date.valueOf();
                    break;
            }
            switch(typeof eras[i].until){
                case "undefined":
                    eras[i].until = Infinity;
                    break;
                case "string":
                    // truncate time
                    date = hooks(eras[i].until).startOf("day").valueOf();
                    eras[i].until = date.valueOf();
                    break;
            }
        }
        return eras;
    }
    function localeErasParse(eraName, format, strict) {
        var i, l, eras = this.eras(), name, abbr, narrow;
        eraName = eraName.toUpperCase();
        for(i = 0, l = eras.length; i < l; ++i){
            name = eras[i].name.toUpperCase();
            abbr = eras[i].abbr.toUpperCase();
            narrow = eras[i].narrow.toUpperCase();
            if (strict) switch(format){
                case "N":
                case "NN":
                case "NNN":
                    if (abbr === eraName) return eras[i];
                    break;
                case "NNNN":
                    if (name === eraName) return eras[i];
                    break;
                case "NNNNN":
                    if (narrow === eraName) return eras[i];
                    break;
            }
            else if ([
                name,
                abbr,
                narrow
            ].indexOf(eraName) >= 0) return eras[i];
        }
    }
    function localeErasConvertYear(era, year) {
        var dir = era.since <= era.until ? 1 : -1;
        if (year === undefined) return hooks(era.since).year();
        else return hooks(era.since).year() + (year - era.offset) * dir;
    }
    function getEraName() {
        var i, l, val, eras = this.localeData().eras();
        for(i = 0, l = eras.length; i < l; ++i){
            // truncate time
            val = this.clone().startOf("day").valueOf();
            if (eras[i].since <= val && val <= eras[i].until) return eras[i].name;
            if (eras[i].until <= val && val <= eras[i].since) return eras[i].name;
        }
        return "";
    }
    function getEraNarrow() {
        var i, l, val, eras = this.localeData().eras();
        for(i = 0, l = eras.length; i < l; ++i){
            // truncate time
            val = this.clone().startOf("day").valueOf();
            if (eras[i].since <= val && val <= eras[i].until) return eras[i].narrow;
            if (eras[i].until <= val && val <= eras[i].since) return eras[i].narrow;
        }
        return "";
    }
    function getEraAbbr() {
        var i, l, val, eras = this.localeData().eras();
        for(i = 0, l = eras.length; i < l; ++i){
            // truncate time
            val = this.clone().startOf("day").valueOf();
            if (eras[i].since <= val && val <= eras[i].until) return eras[i].abbr;
            if (eras[i].until <= val && val <= eras[i].since) return eras[i].abbr;
        }
        return "";
    }
    function getEraYear() {
        var i, l, dir, val, eras = this.localeData().eras();
        for(i = 0, l = eras.length; i < l; ++i){
            dir = eras[i].since <= eras[i].until ? 1 : -1;
            // truncate time
            val = this.clone().startOf("day").valueOf();
            if (eras[i].since <= val && val <= eras[i].until || eras[i].until <= val && val <= eras[i].since) return (this.year() - hooks(eras[i].since).year()) * dir + eras[i].offset;
        }
        return this.year();
    }
    function erasNameRegex(isStrict) {
        if (!hasOwnProp(this, "_erasNameRegex")) computeErasParse.call(this);
        return isStrict ? this._erasNameRegex : this._erasRegex;
    }
    function erasAbbrRegex(isStrict) {
        if (!hasOwnProp(this, "_erasAbbrRegex")) computeErasParse.call(this);
        return isStrict ? this._erasAbbrRegex : this._erasRegex;
    }
    function erasNarrowRegex(isStrict) {
        if (!hasOwnProp(this, "_erasNarrowRegex")) computeErasParse.call(this);
        return isStrict ? this._erasNarrowRegex : this._erasRegex;
    }
    function matchEraAbbr(isStrict, locale) {
        return locale.erasAbbrRegex(isStrict);
    }
    function matchEraName(isStrict, locale) {
        return locale.erasNameRegex(isStrict);
    }
    function matchEraNarrow(isStrict, locale) {
        return locale.erasNarrowRegex(isStrict);
    }
    function matchEraYearOrdinal(isStrict, locale) {
        return locale._eraYearOrdinalRegex || matchUnsigned;
    }
    function computeErasParse() {
        var abbrPieces = [], namePieces = [], narrowPieces = [], mixedPieces = [], i, l, eras = this.eras();
        for(i = 0, l = eras.length; i < l; ++i){
            namePieces.push(regexEscape(eras[i].name));
            abbrPieces.push(regexEscape(eras[i].abbr));
            narrowPieces.push(regexEscape(eras[i].narrow));
            mixedPieces.push(regexEscape(eras[i].name));
            mixedPieces.push(regexEscape(eras[i].abbr));
            mixedPieces.push(regexEscape(eras[i].narrow));
        }
        this._erasRegex = new RegExp("^(" + mixedPieces.join("|") + ")", "i");
        this._erasNameRegex = new RegExp("^(" + namePieces.join("|") + ")", "i");
        this._erasAbbrRegex = new RegExp("^(" + abbrPieces.join("|") + ")", "i");
        this._erasNarrowRegex = new RegExp("^(" + narrowPieces.join("|") + ")", "i");
    }
    // FORMATTING
    addFormatToken(0, [
        "gg",
        2
    ], 0, function() {
        return this.weekYear() % 100;
    });
    addFormatToken(0, [
        "GG",
        2
    ], 0, function() {
        return this.isoWeekYear() % 100;
    });
    function addWeekYearFormatToken(token, getter) {
        addFormatToken(0, [
            token,
            token.length
        ], 0, getter);
    }
    addWeekYearFormatToken("gggg", "weekYear");
    addWeekYearFormatToken("ggggg", "weekYear");
    addWeekYearFormatToken("GGGG", "isoWeekYear");
    addWeekYearFormatToken("GGGGG", "isoWeekYear");
    // ALIASES
    addUnitAlias("weekYear", "gg");
    addUnitAlias("isoWeekYear", "GG");
    // PRIORITY
    addUnitPriority("weekYear", 1);
    addUnitPriority("isoWeekYear", 1);
    // PARSING
    addRegexToken("G", matchSigned);
    addRegexToken("g", matchSigned);
    addRegexToken("GG", match1to2, match2);
    addRegexToken("gg", match1to2, match2);
    addRegexToken("GGGG", match1to4, match4);
    addRegexToken("gggg", match1to4, match4);
    addRegexToken("GGGGG", match1to6, match6);
    addRegexToken("ggggg", match1to6, match6);
    addWeekParseToken([
        "gggg",
        "ggggg",
        "GGGG",
        "GGGGG"
    ], function(input, week, config, token) {
        week[token.substr(0, 2)] = toInt(input);
    });
    addWeekParseToken([
        "gg",
        "GG"
    ], function(input, week, config, token) {
        week[token] = hooks.parseTwoDigitYear(input);
    });
    // MOMENTS
    function getSetWeekYear(input) {
        return getSetWeekYearHelper.call(this, input, this.week(), this.weekday(), this.localeData()._week.dow, this.localeData()._week.doy);
    }
    function getSetISOWeekYear(input) {
        return getSetWeekYearHelper.call(this, input, this.isoWeek(), this.isoWeekday(), 1, 4);
    }
    function getISOWeeksInYear() {
        return weeksInYear(this.year(), 1, 4);
    }
    function getISOWeeksInISOWeekYear() {
        return weeksInYear(this.isoWeekYear(), 1, 4);
    }
    function getWeeksInYear() {
        var weekInfo = this.localeData()._week;
        return weeksInYear(this.year(), weekInfo.dow, weekInfo.doy);
    }
    function getWeeksInWeekYear() {
        var weekInfo = this.localeData()._week;
        return weeksInYear(this.weekYear(), weekInfo.dow, weekInfo.doy);
    }
    function getSetWeekYearHelper(input, week, weekday, dow, doy) {
        var weeksTarget;
        if (input == null) return weekOfYear(this, dow, doy).year;
        else {
            weeksTarget = weeksInYear(input, dow, doy);
            if (week > weeksTarget) week = weeksTarget;
            return setWeekAll.call(this, input, week, weekday, dow, doy);
        }
    }
    function setWeekAll(weekYear, week, weekday, dow, doy) {
        var dayOfYearData = dayOfYearFromWeeks(weekYear, week, weekday, dow, doy), date = createUTCDate(dayOfYearData.year, 0, dayOfYearData.dayOfYear);
        this.year(date.getUTCFullYear());
        this.month(date.getUTCMonth());
        this.date(date.getUTCDate());
        return this;
    }
    // FORMATTING
    addFormatToken("Q", 0, "Qo", "quarter");
    // ALIASES
    addUnitAlias("quarter", "Q");
    // PRIORITY
    addUnitPriority("quarter", 7);
    // PARSING
    addRegexToken("Q", match1);
    addParseToken("Q", function(input, array) {
        array[MONTH] = (toInt(input) - 1) * 3;
    });
    // MOMENTS
    function getSetQuarter(input) {
        return input == null ? Math.ceil((this.month() + 1) / 3) : this.month((input - 1) * 3 + this.month() % 3);
    }
    // FORMATTING
    addFormatToken("D", [
        "DD",
        2
    ], "Do", "date");
    // ALIASES
    addUnitAlias("date", "D");
    // PRIORITY
    addUnitPriority("date", 9);
    // PARSING
    addRegexToken("D", match1to2);
    addRegexToken("DD", match1to2, match2);
    addRegexToken("Do", function(isStrict, locale) {
        // TODO: Remove "ordinalParse" fallback in next major release.
        return isStrict ? locale._dayOfMonthOrdinalParse || locale._ordinalParse : locale._dayOfMonthOrdinalParseLenient;
    });
    addParseToken([
        "D",
        "DD"
    ], DATE);
    addParseToken("Do", function(input, array) {
        array[DATE] = toInt(input.match(match1to2)[0]);
    });
    // MOMENTS
    var getSetDayOfMonth = makeGetSet("Date", true);
    // FORMATTING
    addFormatToken("DDD", [
        "DDDD",
        3
    ], "DDDo", "dayOfYear");
    // ALIASES
    addUnitAlias("dayOfYear", "DDD");
    // PRIORITY
    addUnitPriority("dayOfYear", 4);
    // PARSING
    addRegexToken("DDD", match1to3);
    addRegexToken("DDDD", match3);
    addParseToken([
        "DDD",
        "DDDD"
    ], function(input, array, config) {
        config._dayOfYear = toInt(input);
    });
    // HELPERS
    // MOMENTS
    function getSetDayOfYear(input) {
        var dayOfYear = Math.round((this.clone().startOf("day") - this.clone().startOf("year")) / 864e5) + 1;
        return input == null ? dayOfYear : this.add(input - dayOfYear, "d");
    }
    // FORMATTING
    addFormatToken("m", [
        "mm",
        2
    ], 0, "minute");
    // ALIASES
    addUnitAlias("minute", "m");
    // PRIORITY
    addUnitPriority("minute", 14);
    // PARSING
    addRegexToken("m", match1to2);
    addRegexToken("mm", match1to2, match2);
    addParseToken([
        "m",
        "mm"
    ], MINUTE);
    // MOMENTS
    var getSetMinute = makeGetSet("Minutes", false);
    // FORMATTING
    addFormatToken("s", [
        "ss",
        2
    ], 0, "second");
    // ALIASES
    addUnitAlias("second", "s");
    // PRIORITY
    addUnitPriority("second", 15);
    // PARSING
    addRegexToken("s", match1to2);
    addRegexToken("ss", match1to2, match2);
    addParseToken([
        "s",
        "ss"
    ], SECOND);
    // MOMENTS
    var getSetSecond = makeGetSet("Seconds", false);
    // FORMATTING
    addFormatToken("S", 0, 0, function() {
        return ~~(this.millisecond() / 100);
    });
    addFormatToken(0, [
        "SS",
        2
    ], 0, function() {
        return ~~(this.millisecond() / 10);
    });
    addFormatToken(0, [
        "SSS",
        3
    ], 0, "millisecond");
    addFormatToken(0, [
        "SSSS",
        4
    ], 0, function() {
        return this.millisecond() * 10;
    });
    addFormatToken(0, [
        "SSSSS",
        5
    ], 0, function() {
        return this.millisecond() * 100;
    });
    addFormatToken(0, [
        "SSSSSS",
        6
    ], 0, function() {
        return this.millisecond() * 1000;
    });
    addFormatToken(0, [
        "SSSSSSS",
        7
    ], 0, function() {
        return this.millisecond() * 10000;
    });
    addFormatToken(0, [
        "SSSSSSSS",
        8
    ], 0, function() {
        return this.millisecond() * 100000;
    });
    addFormatToken(0, [
        "SSSSSSSSS",
        9
    ], 0, function() {
        return this.millisecond() * 1000000;
    });
    // ALIASES
    addUnitAlias("millisecond", "ms");
    // PRIORITY
    addUnitPriority("millisecond", 16);
    // PARSING
    addRegexToken("S", match1to3, match1);
    addRegexToken("SS", match1to3, match2);
    addRegexToken("SSS", match1to3, match3);
    var token1, getSetMillisecond;
    for(token1 = "SSSS"; token1.length <= 9; token1 += "S")addRegexToken(token1, matchUnsigned);
    function parseMs(input, array) {
        array[MILLISECOND] = toInt(("0." + input) * 1000);
    }
    for(token1 = "S"; token1.length <= 9; token1 += "S")addParseToken(token1, parseMs);
    getSetMillisecond = makeGetSet("Milliseconds", false);
    // FORMATTING
    addFormatToken("z", 0, 0, "zoneAbbr");
    addFormatToken("zz", 0, 0, "zoneName");
    // MOMENTS
    function getZoneAbbr() {
        return this._isUTC ? "UTC" : "";
    }
    function getZoneName() {
        return this._isUTC ? "Coordinated Universal Time" : "";
    }
    var proto = Moment.prototype;
    proto.add = add;
    proto.calendar = calendar$1;
    proto.clone = clone;
    proto.diff = diff1;
    proto.endOf = endOf;
    proto.format = format1;
    proto.from = from1;
    proto.fromNow = fromNow;
    proto.to = to1;
    proto.toNow = toNow;
    proto.get = stringGet;
    proto.invalidAt = invalidAt;
    proto.isAfter = isAfter;
    proto.isBefore = isBefore;
    proto.isBetween = isBetween;
    proto.isSame = isSame;
    proto.isSameOrAfter = isSameOrAfter;
    proto.isSameOrBefore = isSameOrBefore;
    proto.isValid = isValid$2;
    proto.lang = lang;
    proto.locale = locale1;
    proto.localeData = localeData;
    proto.max = prototypeMax;
    proto.min = prototypeMin;
    proto.parsingFlags = parsingFlags;
    proto.set = stringSet;
    proto.startOf = startOf;
    proto.subtract = subtract;
    proto.toArray = toArray;
    proto.toObject = toObject;
    proto.toDate = toDate;
    proto.toISOString = toISOString;
    proto.inspect = inspect;
    if (typeof Symbol !== "undefined" && Symbol.for != null) proto[Symbol.for("nodejs.util.inspect.custom")] = function() {
        return "Moment<" + this.format() + ">";
    };
    proto.toJSON = toJSON;
    proto.toString = toString;
    proto.unix = unix;
    proto.valueOf = valueOf;
    proto.creationData = creationData;
    proto.eraName = getEraName;
    proto.eraNarrow = getEraNarrow;
    proto.eraAbbr = getEraAbbr;
    proto.eraYear = getEraYear;
    proto.year = getSetYear;
    proto.isLeapYear = getIsLeapYear;
    proto.weekYear = getSetWeekYear;
    proto.isoWeekYear = getSetISOWeekYear;
    proto.quarter = proto.quarters = getSetQuarter;
    proto.month = getSetMonth;
    proto.daysInMonth = getDaysInMonth;
    proto.week = proto.weeks = getSetWeek;
    proto.isoWeek = proto.isoWeeks = getSetISOWeek;
    proto.weeksInYear = getWeeksInYear;
    proto.weeksInWeekYear = getWeeksInWeekYear;
    proto.isoWeeksInYear = getISOWeeksInYear;
    proto.isoWeeksInISOWeekYear = getISOWeeksInISOWeekYear;
    proto.date = getSetDayOfMonth;
    proto.day = proto.days = getSetDayOfWeek;
    proto.weekday = getSetLocaleDayOfWeek;
    proto.isoWeekday = getSetISODayOfWeek;
    proto.dayOfYear = getSetDayOfYear;
    proto.hour = proto.hours = getSetHour;
    proto.minute = proto.minutes = getSetMinute;
    proto.second = proto.seconds = getSetSecond;
    proto.millisecond = proto.milliseconds = getSetMillisecond;
    proto.utcOffset = getSetOffset;
    proto.utc = setOffsetToUTC;
    proto.local = setOffsetToLocal;
    proto.parseZone = setOffsetToParsedOffset;
    proto.hasAlignedHourOffset = hasAlignedHourOffset;
    proto.isDST = isDaylightSavingTime;
    proto.isLocal = isLocal;
    proto.isUtcOffset = isUtcOffset;
    proto.isUtc = isUtc;
    proto.isUTC = isUtc;
    proto.zoneAbbr = getZoneAbbr;
    proto.zoneName = getZoneName;
    proto.dates = deprecate("dates accessor is deprecated. Use date instead.", getSetDayOfMonth);
    proto.months = deprecate("months accessor is deprecated. Use month instead", getSetMonth);
    proto.years = deprecate("years accessor is deprecated. Use year instead", getSetYear);
    proto.zone = deprecate("moment().zone is deprecated, use moment().utcOffset instead. http://momentjs.com/guides/#/warnings/zone/", getSetZone);
    proto.isDSTShifted = deprecate("isDSTShifted is deprecated. See http://momentjs.com/guides/#/warnings/dst-shifted/ for more information", isDaylightSavingTimeShifted);
    function createUnix(input) {
        return createLocal(input * 1000);
    }
    function createInZone() {
        return createLocal.apply(null, arguments).parseZone();
    }
    function preParsePostFormat(string) {
        return string;
    }
    var proto$1 = Locale.prototype;
    proto$1.calendar = calendar;
    proto$1.longDateFormat = longDateFormat;
    proto$1.invalidDate = invalidDate;
    proto$1.ordinal = ordinal1;
    proto$1.preparse = preParsePostFormat;
    proto$1.postformat = preParsePostFormat;
    proto$1.relativeTime = relativeTime;
    proto$1.pastFuture = pastFuture;
    proto$1.set = set;
    proto$1.eras = localeEras;
    proto$1.erasParse = localeErasParse;
    proto$1.erasConvertYear = localeErasConvertYear;
    proto$1.erasAbbrRegex = erasAbbrRegex;
    proto$1.erasNameRegex = erasNameRegex;
    proto$1.erasNarrowRegex = erasNarrowRegex;
    proto$1.months = localeMonths;
    proto$1.monthsShort = localeMonthsShort;
    proto$1.monthsParse = localeMonthsParse;
    proto$1.monthsRegex = monthsRegex;
    proto$1.monthsShortRegex = monthsShortRegex;
    proto$1.week = localeWeek;
    proto$1.firstDayOfYear = localeFirstDayOfYear;
    proto$1.firstDayOfWeek = localeFirstDayOfWeek;
    proto$1.weekdays = localeWeekdays;
    proto$1.weekdaysMin = localeWeekdaysMin;
    proto$1.weekdaysShort = localeWeekdaysShort;
    proto$1.weekdaysParse = localeWeekdaysParse;
    proto$1.weekdaysRegex = weekdaysRegex;
    proto$1.weekdaysShortRegex = weekdaysShortRegex;
    proto$1.weekdaysMinRegex = weekdaysMinRegex;
    proto$1.isPM = localeIsPM;
    proto$1.meridiem = localeMeridiem;
    function get$1(format, index, field, setter) {
        var locale = getLocale(), utc = createUTC().set(setter, index);
        return locale[field](utc, format);
    }
    function listMonthsImpl(format, index, field) {
        if (isNumber(format)) {
            index = format;
            format = undefined;
        }
        format = format || "";
        if (index != null) return get$1(format, index, field, "month");
        var i, out = [];
        for(i = 0; i < 12; i++)out[i] = get$1(format, i, field, "month");
        return out;
    }
    // ()
    // (5)
    // (fmt, 5)
    // (fmt)
    // (true)
    // (true, 5)
    // (true, fmt, 5)
    // (true, fmt)
    function listWeekdaysImpl(localeSorted, format, index, field) {
        if (typeof localeSorted === "boolean") {
            if (isNumber(format)) {
                index = format;
                format = undefined;
            }
            format = format || "";
        } else {
            format = localeSorted;
            index = format;
            localeSorted = false;
            if (isNumber(format)) {
                index = format;
                format = undefined;
            }
            format = format || "";
        }
        var locale = getLocale(), shift = localeSorted ? locale._week.dow : 0, i, out = [];
        if (index != null) return get$1(format, (index + shift) % 7, field, "day");
        for(i = 0; i < 7; i++)out[i] = get$1(format, (i + shift) % 7, field, "day");
        return out;
    }
    function listMonths(format, index) {
        return listMonthsImpl(format, index, "months");
    }
    function listMonthsShort(format, index) {
        return listMonthsImpl(format, index, "monthsShort");
    }
    function listWeekdays(localeSorted, format, index) {
        return listWeekdaysImpl(localeSorted, format, index, "weekdays");
    }
    function listWeekdaysShort(localeSorted, format, index) {
        return listWeekdaysImpl(localeSorted, format, index, "weekdaysShort");
    }
    function listWeekdaysMin(localeSorted, format, index) {
        return listWeekdaysImpl(localeSorted, format, index, "weekdaysMin");
    }
    getSetGlobalLocale("en", {
        eras: [
            {
                since: "0001-01-01",
                until: Infinity,
                offset: 1,
                name: "Anno Domini",
                narrow: "AD",
                abbr: "AD"
            },
            {
                since: "0000-12-31",
                until: -Infinity,
                offset: 1,
                name: "Before Christ",
                narrow: "BC",
                abbr: "BC"
            }, 
        ],
        dayOfMonthOrdinalParse: /\d{1,2}(th|st|nd|rd)/,
        ordinal: function(number) {
            var b = number % 10, output = toInt(number % 100 / 10) === 1 ? "th" : b === 1 ? "st" : b === 2 ? "nd" : b === 3 ? "rd" : "th";
            return number + output;
        }
    });
    // Side effect imports
    hooks.lang = deprecate("moment.lang is deprecated. Use moment.locale instead.", getSetGlobalLocale);
    hooks.langData = deprecate("moment.langData is deprecated. Use moment.localeData instead.", getLocale);
    var mathAbs = Math.abs;
    function abs() {
        var data = this._data;
        this._milliseconds = mathAbs(this._milliseconds);
        this._days = mathAbs(this._days);
        this._months = mathAbs(this._months);
        data.milliseconds = mathAbs(data.milliseconds);
        data.seconds = mathAbs(data.seconds);
        data.minutes = mathAbs(data.minutes);
        data.hours = mathAbs(data.hours);
        data.months = mathAbs(data.months);
        data.years = mathAbs(data.years);
        return this;
    }
    function addSubtract$1(duration, input, value, direction) {
        var other = createDuration(input, value);
        duration._milliseconds += direction * other._milliseconds;
        duration._days += direction * other._days;
        duration._months += direction * other._months;
        return duration._bubble();
    }
    // supports only 2.0-style add(1, 's') or add(duration)
    function add$1(input, value) {
        return addSubtract$1(this, input, value, 1);
    }
    // supports only 2.0-style subtract(1, 's') or subtract(duration)
    function subtract$1(input, value) {
        return addSubtract$1(this, input, value, -1);
    }
    function absCeil(number) {
        if (number < 0) return Math.floor(number);
        else return Math.ceil(number);
    }
    function bubble() {
        var milliseconds = this._milliseconds, days = this._days, months = this._months, data = this._data, seconds, minutes, hours, years, monthsFromDays;
        // if we have a mix of positive and negative values, bubble down first
        // check: https://github.com/moment/moment/issues/2166
        if (!(milliseconds >= 0 && days >= 0 && months >= 0 || milliseconds <= 0 && days <= 0 && months <= 0)) {
            milliseconds += absCeil(monthsToDays(months) + days) * 864e5;
            days = 0;
            months = 0;
        }
        // The following code bubbles up values, see the tests for
        // examples of what that means.
        data.milliseconds = milliseconds % 1000;
        seconds = absFloor(milliseconds / 1000);
        data.seconds = seconds % 60;
        minutes = absFloor(seconds / 60);
        data.minutes = minutes % 60;
        hours = absFloor(minutes / 60);
        data.hours = hours % 24;
        days += absFloor(hours / 24);
        // convert days to months
        monthsFromDays = absFloor(daysToMonths(days));
        months += monthsFromDays;
        days -= absCeil(monthsToDays(monthsFromDays));
        // 12 months -> 1 year
        years = absFloor(months / 12);
        months %= 12;
        data.days = days;
        data.months = months;
        data.years = years;
        return this;
    }
    function daysToMonths(days) {
        // 400 years have 146097 days (taking into account leap year rules)
        // 400 years have 12 months === 4800
        return days * 4800 / 146097;
    }
    function monthsToDays(months) {
        // the reverse of daysToMonths
        return months * 146097 / 4800;
    }
    function as(units) {
        if (!this.isValid()) return NaN;
        var days, months, milliseconds = this._milliseconds;
        units = normalizeUnits(units);
        if (units === "month" || units === "quarter" || units === "year") {
            days = this._days + milliseconds / 864e5;
            months = this._months + daysToMonths(days);
            switch(units){
                case "month":
                    return months;
                case "quarter":
                    return months / 3;
                case "year":
                    return months / 12;
            }
        } else {
            // handle milliseconds separately because of floating point math errors (issue #1867)
            days = this._days + Math.round(monthsToDays(this._months));
            switch(units){
                case "week":
                    return days / 7 + milliseconds / 6048e5;
                case "day":
                    return days + milliseconds / 864e5;
                case "hour":
                    return days * 24 + milliseconds / 36e5;
                case "minute":
                    return days * 1440 + milliseconds / 6e4;
                case "second":
                    return days * 86400 + milliseconds / 1000;
                // Math.floor prevents floating point math errors here
                case "millisecond":
                    return Math.floor(days * 864e5) + milliseconds;
                default:
                    throw new Error("Unknown unit " + units);
            }
        }
    }
    // TODO: Use this.as('ms')?
    function valueOf$1() {
        if (!this.isValid()) return NaN;
        return this._milliseconds + this._days * 864e5 + this._months % 12 * 2592e6 + toInt(this._months / 12) * 31536e6;
    }
    function makeAs(alias) {
        return function() {
            return this.as(alias);
        };
    }
    var asMilliseconds = makeAs("ms"), asSeconds = makeAs("s"), asMinutes = makeAs("m"), asHours = makeAs("h"), asDays = makeAs("d"), asWeeks = makeAs("w"), asMonths = makeAs("M"), asQuarters = makeAs("Q"), asYears = makeAs("y");
    function clone$1() {
        return createDuration(this);
    }
    function get$2(units) {
        units = normalizeUnits(units);
        return this.isValid() ? this[units + "s"]() : NaN;
    }
    function makeGetter(name) {
        return function() {
            return this.isValid() ? this._data[name] : NaN;
        };
    }
    var milliseconds1 = makeGetter("milliseconds"), seconds1 = makeGetter("seconds"), minutes1 = makeGetter("minutes"), hours1 = makeGetter("hours"), days1 = makeGetter("days"), months1 = makeGetter("months"), years1 = makeGetter("years");
    function weeks1() {
        return absFloor(this.days() / 7);
    }
    var round = Math.round, thresholds1 = {
        ss: 44,
        s: 45,
        m: 45,
        h: 22,
        d: 26,
        w: null,
        M: 11
    };
    // helper function for moment.fn.from, moment.fn.fromNow, and moment.duration.fn.humanize
    function substituteTimeAgo(string, number, withoutSuffix, isFuture, locale) {
        return locale.relativeTime(number || 1, !!withoutSuffix, string, isFuture);
    }
    function relativeTime$1(posNegDuration, withoutSuffix, thresholds, locale) {
        var duration = createDuration(posNegDuration).abs(), seconds = round(duration.as("s")), minutes = round(duration.as("m")), hours = round(duration.as("h")), days = round(duration.as("d")), months = round(duration.as("M")), weeks = round(duration.as("w")), years = round(duration.as("y")), a = seconds <= thresholds.ss && [
            "s",
            seconds
        ] || seconds < thresholds.s && [
            "ss",
            seconds
        ] || minutes <= 1 && [
            "m"
        ] || minutes < thresholds.m && [
            "mm",
            minutes
        ] || hours <= 1 && [
            "h"
        ] || hours < thresholds.h && [
            "hh",
            hours
        ] || days <= 1 && [
            "d"
        ] || days < thresholds.d && [
            "dd",
            days
        ];
        if (thresholds.w != null) a = a || weeks <= 1 && [
            "w"
        ] || weeks < thresholds.w && [
            "ww",
            weeks
        ];
        a = a || months <= 1 && [
            "M"
        ] || months < thresholds.M && [
            "MM",
            months
        ] || years <= 1 && [
            "y"
        ] || [
            "yy",
            years
        ];
        a[2] = withoutSuffix;
        a[3] = +posNegDuration > 0;
        a[4] = locale;
        return substituteTimeAgo.apply(null, a);
    }
    // This function allows you to set the rounding function for relative time strings
    function getSetRelativeTimeRounding(roundingFunction) {
        if (roundingFunction === undefined) return round;
        if (typeof roundingFunction === "function") {
            round = roundingFunction;
            return true;
        }
        return false;
    }
    // This function allows you to set a threshold for relative time strings
    function getSetRelativeTimeThreshold(threshold, limit) {
        if (thresholds1[threshold] === undefined) return false;
        if (limit === undefined) return thresholds1[threshold];
        thresholds1[threshold] = limit;
        if (threshold === "s") thresholds1.ss = limit - 1;
        return true;
    }
    function humanize(argWithSuffix, argThresholds) {
        if (!this.isValid()) return this.localeData().invalidDate();
        var withSuffix = false, th = thresholds1, locale, output;
        if (typeof argWithSuffix === "object") {
            argThresholds = argWithSuffix;
            argWithSuffix = false;
        }
        if (typeof argWithSuffix === "boolean") withSuffix = argWithSuffix;
        if (typeof argThresholds === "object") {
            th = Object.assign({}, thresholds1, argThresholds);
            if (argThresholds.s != null && argThresholds.ss == null) th.ss = argThresholds.s - 1;
        }
        locale = this.localeData();
        output = relativeTime$1(this, !withSuffix, th, locale);
        if (withSuffix) output = locale.pastFuture(+this, output);
        return locale.postformat(output);
    }
    var abs$1 = Math.abs;
    function sign1(x) {
        return (x > 0) - (x < 0) || +x;
    }
    function toISOString$1() {
        // for ISO strings we do not use the normal bubbling rules:
        //  * milliseconds bubble up until they become hours
        //  * days do not bubble at all
        //  * months bubble up until they become years
        // This is because there is no context-free conversion between hours and days
        // (think of clock changes)
        // and also not between days and months (28-31 days per month)
        if (!this.isValid()) return this.localeData().invalidDate();
        var seconds = abs$1(this._milliseconds) / 1000, days = abs$1(this._days), months = abs$1(this._months), minutes, hours, years, s, total = this.asSeconds(), totalSign, ymSign, daysSign, hmsSign;
        if (!total) // this is the same as C#'s (Noda) and python (isodate)...
        // but not other JS (goog.date)
        return "P0D";
        // 3600 seconds -> 60 minutes -> 1 hour
        minutes = absFloor(seconds / 60);
        hours = absFloor(minutes / 60);
        seconds %= 60;
        minutes %= 60;
        // 12 months -> 1 year
        years = absFloor(months / 12);
        months %= 12;
        // inspired by https://github.com/dordille/moment-isoduration/blob/master/moment.isoduration.js
        s = seconds ? seconds.toFixed(3).replace(/\.?0+$/, "") : "";
        totalSign = total < 0 ? "-" : "";
        ymSign = sign1(this._months) !== sign1(total) ? "-" : "";
        daysSign = sign1(this._days) !== sign1(total) ? "-" : "";
        hmsSign = sign1(this._milliseconds) !== sign1(total) ? "-" : "";
        return totalSign + "P" + (years ? ymSign + years + "Y" : "") + (months ? ymSign + months + "M" : "") + (days ? daysSign + days + "D" : "") + (hours || minutes || seconds ? "T" : "") + (hours ? hmsSign + hours + "H" : "") + (minutes ? hmsSign + minutes + "M" : "") + (seconds ? hmsSign + s + "S" : "");
    }
    var proto$2 = Duration.prototype;
    proto$2.isValid = isValid$1;
    proto$2.abs = abs;
    proto$2.add = add$1;
    proto$2.subtract = subtract$1;
    proto$2.as = as;
    proto$2.asMilliseconds = asMilliseconds;
    proto$2.asSeconds = asSeconds;
    proto$2.asMinutes = asMinutes;
    proto$2.asHours = asHours;
    proto$2.asDays = asDays;
    proto$2.asWeeks = asWeeks;
    proto$2.asMonths = asMonths;
    proto$2.asQuarters = asQuarters;
    proto$2.asYears = asYears;
    proto$2.valueOf = valueOf$1;
    proto$2._bubble = bubble;
    proto$2.clone = clone$1;
    proto$2.get = get$2;
    proto$2.milliseconds = milliseconds1;
    proto$2.seconds = seconds1;
    proto$2.minutes = minutes1;
    proto$2.hours = hours1;
    proto$2.days = days1;
    proto$2.weeks = weeks1;
    proto$2.months = months1;
    proto$2.years = years1;
    proto$2.humanize = humanize;
    proto$2.toISOString = toISOString$1;
    proto$2.toString = toISOString$1;
    proto$2.toJSON = toISOString$1;
    proto$2.locale = locale1;
    proto$2.localeData = localeData;
    proto$2.toIsoString = deprecate("toIsoString() is deprecated. Please use toISOString() instead (notice the capitals)", toISOString$1);
    proto$2.lang = lang;
    // FORMATTING
    addFormatToken("X", 0, 0, "unix");
    addFormatToken("x", 0, 0, "valueOf");
    // PARSING
    addRegexToken("x", matchSigned);
    addRegexToken("X", matchTimestamp);
    addParseToken("X", function(input, array, config) {
        config._d = new Date(parseFloat(input) * 1000);
    });
    addParseToken("x", function(input, array, config) {
        config._d = new Date(toInt(input));
    });
    //! moment.js
    hooks.version = "2.29.4";
    setHookCallback(createLocal);
    hooks.fn = proto;
    hooks.min = min;
    hooks.max = max;
    hooks.now = now1;
    hooks.utc = createUTC;
    hooks.unix = createUnix;
    hooks.months = listMonths;
    hooks.isDate = isDate;
    hooks.locale = getSetGlobalLocale;
    hooks.invalid = createInvalid;
    hooks.duration = createDuration;
    hooks.isMoment = isMoment;
    hooks.weekdays = listWeekdays;
    hooks.parseZone = createInZone;
    hooks.localeData = getLocale;
    hooks.isDuration = isDuration;
    hooks.monthsShort = listMonthsShort;
    hooks.weekdaysMin = listWeekdaysMin;
    hooks.defineLocale = defineLocale;
    hooks.updateLocale = updateLocale;
    hooks.locales = listLocales;
    hooks.weekdaysShort = listWeekdaysShort;
    hooks.normalizeUnits = normalizeUnits;
    hooks.relativeTimeRounding = getSetRelativeTimeRounding;
    hooks.relativeTimeThreshold = getSetRelativeTimeThreshold;
    hooks.calendarFormat = getCalendarFormat;
    hooks.prototype = proto;
    // currently HTML5 input type only supports 24-hour formats
    hooks.HTML5_FMT = {
        DATETIME_LOCAL: "YYYY-MM-DDTHH:mm",
        DATETIME_LOCAL_SECONDS: "YYYY-MM-DDTHH:mm:ss",
        DATETIME_LOCAL_MS: "YYYY-MM-DDTHH:mm:ss.SSS",
        DATE: "YYYY-MM-DD",
        TIME: "HH:mm",
        TIME_SECONDS: "HH:mm:ss",
        TIME_MS: "HH:mm:ss.SSS",
        WEEK: "GGGG-[W]WW",
        MONTH: "YYYY-MM"
    };
    return hooks;
});

},{}],"bpzNI":[function(require,module,exports) {
module.exports = JSON.parse('{"version":"2021e","zones":["Africa/Abidjan|LMT GMT|g.8 0|01|-2ldXH.Q|48e5","Africa/Nairobi|LMT +0230 EAT +0245|-2r.g -2u -30 -2J|012132|-2ua2r.g N6nV.g 3Fbu h1cu dzbJ|47e5","Africa/Algiers|PMT WET WEST CET CEST|-9.l 0 -10 -10 -20|0121212121212121343431312123431213|-2nco9.l cNb9.l HA0 19A0 1iM0 11c0 1oo0 Wo0 1rc0 QM0 1EM0 UM0 DA0 Imo0 rd0 De0 9Xz0 1fb0 1ap0 16K0 2yo0 mEp0 hwL0 jxA0 11A0 dDd0 17b0 11B0 1cN0 2Dy0 1cN0 1fB0 1cL0|26e5","Africa/Lagos|LMT GMT +0030 WAT|-d.z 0 -u -10|01023|-2B40d.z 7iod.z dnXK.p dLzH.z|17e6","Africa/Bissau|LMT -01 GMT|12.k 10 0|012|-2ldX0 2xoo0|39e4","Africa/Maputo|LMT CAT|-2a.k -20|01|-2GJea.k|26e5","Africa/Cairo|EET EEST|-20 -30|0101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010|-1bIO0 vb0 1ip0 11z0 1iN0 1nz0 12p0 1pz0 10N0 1pz0 16p0 1jz0 s3d0 Vz0 1oN0 11b0 1oO0 10N0 1pz0 10N0 1pb0 10N0 1pb0 10N0 1pb0 10N0 1pz0 10N0 1pb0 10N0 1pb0 11d0 1oL0 11d0 1pb0 11d0 1oL0 11d0 1oL0 11d0 1oL0 11d0 1pb0 11d0 1oL0 11d0 1oL0 11d0 1oL0 11d0 1pb0 11d0 1oL0 11d0 1oL0 11d0 1oL0 11d0 1pb0 11d0 1oL0 11d0 1WL0 rd0 1Rz0 wp0 1pb0 11d0 1oL0 11d0 1oL0 11d0 1oL0 11d0 1pb0 11d0 1qL0 Xd0 1oL0 11d0 1oL0 11d0 1pb0 11d0 1oL0 11d0 1oL0 11d0 1ny0 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1qN0 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1qN0 11z0 1o10 11z0 1o10 WL0 1qN0 Rb0 1wp0 On0 1zd0 Lz0 1EN0 Fb0 c10 8n0 8Nd0 gL0 e10 mn0|15e6","Africa/Casablanca|LMT +00 +01|u.k 0 -10|01212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212|-2gMnt.E 130Lt.E rb0 Dd0 dVb0 b6p0 TX0 EoB0 LL0 gnd0 rz0 43d0 AL0 1Nd0 XX0 1Cp0 pz0 dEp0 4mn0 SyN0 AL0 1Nd0 wn0 1FB0 Db0 1zd0 Lz0 1Nf0 wM0 co0 go0 1o00 s00 dA0 vc0 11A0 A00 e00 y00 11A0 uM0 e00 Dc0 11A0 s00 e00 IM0 WM0 mo0 gM0 LA0 WM0 jA0 e00 28M0 e00 2600 gM0 2600 e00 2600 gM0 2600 gM0 2600 e00 2600 gM0 2600 e00 28M0 e00 2600 gM0 2600 e00 2600 gM0 2600 gM0 2600 e00 2600 gM0 2600 e00 2600 gM0 2600 gM0 2600 e00 2600 gM0|32e5","Africa/Ceuta|WET WEST CET CEST|0 -10 -10 -20|010101010101010101010232323232323232323232323232323232323232323232323232323232323232323232323232323232323232323232323232323232|-25KN0 11z0 drd0 18p0 3HX0 17d0 1fz0 1a10 1io0 1a00 1y7o0 LL0 gnd0 rz0 43d0 AL0 1Nd0 XX0 1Cp0 pz0 dEp0 4VB0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00|85e3","Africa/El_Aaiun|LMT -01 +00 +01|Q.M 10 0 -10|012323232323232323232323232323232323232323232323232323232323232323232323232323232323|-1rDz7.c 1GVA7.c 6L0 AL0 1Nd0 XX0 1Cp0 pz0 1cBB0 AL0 1Nd0 wn0 1FB0 Db0 1zd0 Lz0 1Nf0 wM0 co0 go0 1o00 s00 dA0 vc0 11A0 A00 e00 y00 11A0 uM0 e00 Dc0 11A0 s00 e00 IM0 WM0 mo0 gM0 LA0 WM0 jA0 e00 28M0 e00 2600 gM0 2600 e00 2600 gM0 2600 gM0 2600 e00 2600 gM0 2600 e00 28M0 e00 2600 gM0 2600 e00 2600 gM0 2600 gM0 2600 e00 2600 gM0 2600 e00 2600 gM0 2600 gM0 2600 e00 2600 gM0|20e4","Africa/Johannesburg|SAST SAST SAST|-1u -20 -30|012121|-2GJdu 1Ajdu 1cL0 1cN0 1cL0|84e5","Africa/Juba|LMT CAT CAST EAT|-26.s -20 -30 -30|012121212121212121212121212121212131|-1yW26.s 1zK06.s 16L0 1iN0 17b0 1jd0 17b0 1ip0 17z0 1i10 17X0 1hB0 18n0 1hd0 19b0 1gp0 19z0 1iN0 17b0 1ip0 17z0 1i10 18n0 1hd0 18L0 1gN0 19b0 1gp0 19z0 1iN0 17z0 1i10 17X0 yGd0 PeX0|","Africa/Khartoum|LMT CAT CAST EAT|-2a.8 -20 -30 -30|012121212121212121212121212121212131|-1yW2a.8 1zK0a.8 16L0 1iN0 17b0 1jd0 17b0 1ip0 17z0 1i10 17X0 1hB0 18n0 1hd0 19b0 1gp0 19z0 1iN0 17b0 1ip0 17z0 1i10 18n0 1hd0 18L0 1gN0 19b0 1gp0 19z0 1iN0 17z0 1i10 17X0 yGd0 HjL0|51e5","Africa/Monrovia|MMT MMT GMT|H.8 I.u 0|012|-23Lzg.Q 28G01.m|11e5","Africa/Ndjamena|LMT WAT WAST|-10.c -10 -20|0121|-2le10.c 2J3c0.c Wn0|13e5","Africa/Sao_Tome|LMT GMT WAT|A.J 0 -10|0121|-2le00 4i6N0 2q00|","Africa/Tripoli|LMT CET CEST EET|-Q.I -10 -20 -20|012121213121212121212121213123123|-21JcQ.I 1hnBQ.I vx0 4iP0 xx0 4eN0 Bb0 7ip0 U0n0 A10 1db0 1cN0 1db0 1dd0 1db0 1eN0 1bb0 1e10 1cL0 1c10 1db0 1dd0 1db0 1cN0 1db0 1q10 fAn0 1ep0 1db0 AKq0 TA0 1o00|11e5","Africa/Tunis|PMT CET CEST|-9.l -10 -20|0121212121212121212121212121212121|-2nco9.l 18pa9.l 1qM0 DA0 3Tc0 11B0 1ze0 WM0 7z0 3d0 14L0 1cN0 1f90 1ar0 16J0 1gXB0 WM0 1rA0 11c0 nwo0 Ko0 1cM0 1cM0 1rA0 10M0 zuM0 10N0 1aN0 1qM0 WM0 1qM0 11A0 1o00|20e5","Africa/Windhoek|+0130 SAST SAST CAT WAT|-1u -20 -30 -20 -10|01213434343434343434343434343434343434343434343434343|-2GJdu 1Ajdu 1cL0 1SqL0 9Io0 16P0 1nX0 11B0 1qL0 WN0 1qL0 11B0 1nX0 11B0 1nX0 11B0 1nX0 11B0 1nX0 11B0 1qL0 WN0 1qL0 11B0 1nX0 11B0 1nX0 11B0 1nX0 11B0 1nX0 11B0 1qL0 11B0 1nX0 11B0 1nX0 11B0 1nX0 11B0 1nX0 11B0 1qL0 WN0 1qL0 11B0 1nX0 11B0 1nX0 11B0 1nX0 11B0|32e4","America/Adak|NST NWT NPT BST BDT AHST HST HDT|b0 a0 a0 b0 a0 a0 a0 90|012034343434343434343434343434343456767676767676767676767676767676767676767676767676767676767676767676767676767676767676767676767676767676767676|-17SX0 8wW0 iB0 Qlb0 52O0 1cL0 1cN0 1cL0 1cN0 1fz0 1cN0 1cL0 1cN0 1cL0 s10 1Vz0 LB0 1BX0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 cm0 10q0 1cL0 1cN0 1cL0 1cN0 1cL0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0|326","America/Anchorage|AST AWT APT AHST AHDT YST AKST AKDT|a0 90 90 a0 90 90 90 80|012034343434343434343434343434343456767676767676767676767676767676767676767676767676767676767676767676767676767676767676767676767676767676767676|-17T00 8wX0 iA0 Qlb0 52O0 1cL0 1cN0 1cL0 1cN0 1fz0 1cN0 1cL0 1cN0 1cL0 s10 1Vz0 LB0 1BX0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 cm0 10q0 1cL0 1cN0 1cL0 1cN0 1cL0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0|30e4","America/Puerto_Rico|AST AWT APT|40 30 30|0120|-17lU0 7XT0 iu0|24e5","America/Araguaina|LMT -03 -02|3c.M 30 20|0121212121212121212121212121212121212121212121212121|-2glwL.c HdKL.c 1cc0 1e10 1bX0 Ezd0 So0 1vA0 Mn0 1BB0 ML0 1BB0 zX0 qe10 xb0 2ep0 nz0 1C10 zX0 1C10 LX0 1C10 Mn0 H210 Rb0 1tB0 IL0 1Fd0 FX0 1EN0 FX0 1HB0 Lz0 dMN0 Lz0 1zd0 Rb0 1wN0 Wn0 1tB0 Rb0 1tB0 WL0 1tB0 Rb0 1zd0 On0 1HB0 FX0 ny10 Lz0|14e4","America/Argentina/Buenos_Aires|CMT -04 -03 -02|4g.M 40 30 20|01212121212121212121212121212121212121212123232323232323232|-20UHH.c pKnH.c Mn0 1iN0 Tb0 1C10 LX0 1C10 LX0 1C10 LX0 1C10 Mn0 1C10 LX0 1C10 LX0 1C10 LX0 1C10 Mn0 MN0 2jz0 MN0 4lX0 u10 5Lb0 1pB0 Fnz0 u10 uL0 1vd0 SL0 1vd0 SL0 1vd0 17z0 1cN0 1fz0 1cN0 1cL0 1cN0 asn0 Db0 zvd0 Bz0 1tB0 TX0 1wp0 Rb0 1wp0 Rb0 1wp0 TX0 A4p0 uL0 1qN0 WL0|","America/Argentina/Catamarca|CMT -04 -03 -02|4g.M 40 30 20|01212121212121212121212121212121212121212123232323132321232|-20UHH.c pKnH.c Mn0 1iN0 Tb0 1C10 LX0 1C10 LX0 1C10 LX0 1C10 Mn0 1C10 LX0 1C10 LX0 1C10 LX0 1C10 Mn0 MN0 2jz0 MN0 4lX0 u10 5Lb0 1pB0 Fnz0 u10 uL0 1vd0 SL0 1vd0 SL0 1vd0 17z0 1cN0 1fz0 1cN0 1cL0 1cN0 asn0 Db0 zvd0 Bz0 1tB0 TX0 1wp0 Rb0 1wq0 Ra0 1wp0 TX0 rlB0 7B0 8zb0 uL0|","America/Argentina/Cordoba|CMT -04 -03 -02|4g.M 40 30 20|01212121212121212121212121212121212121212123232323132323232|-20UHH.c pKnH.c Mn0 1iN0 Tb0 1C10 LX0 1C10 LX0 1C10 LX0 1C10 Mn0 1C10 LX0 1C10 LX0 1C10 LX0 1C10 Mn0 MN0 2jz0 MN0 4lX0 u10 5Lb0 1pB0 Fnz0 u10 uL0 1vd0 SL0 1vd0 SL0 1vd0 17z0 1cN0 1fz0 1cN0 1cL0 1cN0 asn0 Db0 zvd0 Bz0 1tB0 TX0 1wp0 Rb0 1wq0 Ra0 1wp0 TX0 A4p0 uL0 1qN0 WL0|","America/Argentina/Jujuy|CMT -04 -03 -02|4g.M 40 30 20|012121212121212121212121212121212121212121232323121323232|-20UHH.c pKnH.c Mn0 1iN0 Tb0 1C10 LX0 1C10 LX0 1C10 LX0 1C10 Mn0 1C10 LX0 1C10 LX0 1C10 LX0 1C10 Mn0 MN0 2jz0 MN0 4lX0 u10 5Lb0 1pB0 Fnz0 u10 uL0 1vd0 SL0 1vd0 SL0 1vd0 17z0 1cN0 1fz0 1cN0 1cL0 1cN0 asn0 Db0 zvd0 Bz0 1tB0 TX0 1ze0 TX0 1ld0 WK0 1wp0 TX0 A4p0 uL0|","America/Argentina/La_Rioja|CMT -04 -03 -02|4g.M 40 30 20|012121212121212121212121212121212121212121232323231232321232|-20UHH.c pKnH.c Mn0 1iN0 Tb0 1C10 LX0 1C10 LX0 1C10 LX0 1C10 Mn0 1C10 LX0 1C10 LX0 1C10 LX0 1C10 Mn0 MN0 2jz0 MN0 4lX0 u10 5Lb0 1pB0 Fnz0 u10 uL0 1vd0 SL0 1vd0 SL0 1vd0 17z0 1cN0 1fz0 1cN0 1cL0 1cN0 asn0 Db0 zvd0 Bz0 1tB0 TX0 1wp0 Qn0 qO0 16n0 Rb0 1wp0 TX0 rlB0 7B0 8zb0 uL0|","America/Argentina/Mendoza|CMT -04 -03 -02|4g.M 40 30 20|01212121212121212121212121212121212121212123232312121321232|-20UHH.c pKnH.c Mn0 1iN0 Tb0 1C10 LX0 1C10 LX0 1C10 LX0 1C10 Mn0 1C10 LX0 1C10 LX0 1C10 LX0 1C10 Mn0 MN0 2jz0 MN0 4lX0 u10 5Lb0 1pB0 Fnz0 u10 uL0 1vd0 SL0 1vd0 SL0 1vd0 17z0 1cN0 1fz0 1cN0 1cL0 1cN0 asn0 Db0 zvd0 Bz0 1tB0 TX0 1u20 SL0 1vd0 Tb0 1wp0 TW0 ri10 Op0 7TX0 uL0|","America/Argentina/Rio_Gallegos|CMT -04 -03 -02|4g.M 40 30 20|01212121212121212121212121212121212121212123232323232321232|-20UHH.c pKnH.c Mn0 1iN0 Tb0 1C10 LX0 1C10 LX0 1C10 LX0 1C10 Mn0 1C10 LX0 1C10 LX0 1C10 LX0 1C10 Mn0 MN0 2jz0 MN0 4lX0 u10 5Lb0 1pB0 Fnz0 u10 uL0 1vd0 SL0 1vd0 SL0 1vd0 17z0 1cN0 1fz0 1cN0 1cL0 1cN0 asn0 Db0 zvd0 Bz0 1tB0 TX0 1wp0 Rb0 1wp0 Rb0 1wp0 TX0 rlB0 7B0 8zb0 uL0|","America/Argentina/Salta|CMT -04 -03 -02|4g.M 40 30 20|012121212121212121212121212121212121212121232323231323232|-20UHH.c pKnH.c Mn0 1iN0 Tb0 1C10 LX0 1C10 LX0 1C10 LX0 1C10 Mn0 1C10 LX0 1C10 LX0 1C10 LX0 1C10 Mn0 MN0 2jz0 MN0 4lX0 u10 5Lb0 1pB0 Fnz0 u10 uL0 1vd0 SL0 1vd0 SL0 1vd0 17z0 1cN0 1fz0 1cN0 1cL0 1cN0 asn0 Db0 zvd0 Bz0 1tB0 TX0 1wp0 Rb0 1wq0 Ra0 1wp0 TX0 A4p0 uL0|","America/Argentina/San_Juan|CMT -04 -03 -02|4g.M 40 30 20|012121212121212121212121212121212121212121232323231232321232|-20UHH.c pKnH.c Mn0 1iN0 Tb0 1C10 LX0 1C10 LX0 1C10 LX0 1C10 Mn0 1C10 LX0 1C10 LX0 1C10 LX0 1C10 Mn0 MN0 2jz0 MN0 4lX0 u10 5Lb0 1pB0 Fnz0 u10 uL0 1vd0 SL0 1vd0 SL0 1vd0 17z0 1cN0 1fz0 1cN0 1cL0 1cN0 asn0 Db0 zvd0 Bz0 1tB0 TX0 1wp0 Qn0 qO0 16n0 Rb0 1wp0 TX0 rld0 m10 8lb0 uL0|","America/Argentina/San_Luis|CMT -04 -03 -02|4g.M 40 30 20|012121212121212121212121212121212121212121232323121212321212|-20UHH.c pKnH.c Mn0 1iN0 Tb0 1C10 LX0 1C10 LX0 1C10 LX0 1C10 Mn0 1C10 LX0 1C10 LX0 1C10 LX0 1C10 Mn0 MN0 2jz0 MN0 4lX0 u10 5Lb0 1pB0 Fnz0 u10 uL0 1vd0 SL0 1vd0 SL0 1vd0 17z0 1cN0 1fz0 1cN0 1cL0 1cN0 asn0 Db0 zvd0 Bz0 1tB0 XX0 1q20 SL0 AN0 vDb0 m10 8lb0 8L0 jd0 1qN0 WL0 1qN0|","America/Argentina/Tucuman|CMT -04 -03 -02|4g.M 40 30 20|0121212121212121212121212121212121212121212323232313232123232|-20UHH.c pKnH.c Mn0 1iN0 Tb0 1C10 LX0 1C10 LX0 1C10 LX0 1C10 Mn0 1C10 LX0 1C10 LX0 1C10 LX0 1C10 Mn0 MN0 2jz0 MN0 4lX0 u10 5Lb0 1pB0 Fnz0 u10 uL0 1vd0 SL0 1vd0 SL0 1vd0 17z0 1cN0 1fz0 1cN0 1cL0 1cN0 asn0 Db0 zvd0 Bz0 1tB0 TX0 1wp0 Rb0 1wq0 Ra0 1wp0 TX0 rlB0 4N0 8BX0 uL0 1qN0 WL0|","America/Argentina/Ushuaia|CMT -04 -03 -02|4g.M 40 30 20|01212121212121212121212121212121212121212123232323232321232|-20UHH.c pKnH.c Mn0 1iN0 Tb0 1C10 LX0 1C10 LX0 1C10 LX0 1C10 Mn0 1C10 LX0 1C10 LX0 1C10 LX0 1C10 Mn0 MN0 2jz0 MN0 4lX0 u10 5Lb0 1pB0 Fnz0 u10 uL0 1vd0 SL0 1vd0 SL0 1vd0 17z0 1cN0 1fz0 1cN0 1cL0 1cN0 asn0 Db0 zvd0 Bz0 1tB0 TX0 1wp0 Rb0 1wp0 Rb0 1wp0 TX0 rkN0 8p0 8zb0 uL0|","America/Asuncion|AMT -04 -03|3O.E 40 30|012121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212|-1x589.k 1DKM9.k 3CL0 3Dd0 10L0 1pB0 10n0 1pB0 10n0 1pB0 1cL0 1dd0 1db0 1dd0 1cL0 1dd0 1cL0 1dd0 1cL0 1dd0 1db0 1dd0 1cL0 1dd0 1cL0 1dd0 1cL0 1dd0 1db0 1dd0 1cL0 1lB0 14n0 1dd0 1cL0 1fd0 WL0 1rd0 1aL0 1dB0 Xz0 1qp0 Xb0 1qN0 10L0 1rB0 TX0 1tB0 WL0 1qN0 11z0 1o10 11z0 1o10 11z0 1qN0 1cL0 WN0 1qL0 11B0 1nX0 1ip0 WL0 1qN0 WL0 1qN0 WL0 1tB0 TX0 1tB0 TX0 1tB0 19X0 1a10 1fz0 1a10 1fz0 1cN0 17b0 1ip0 17b0 1ip0 17b0 1ip0 19X0 1fB0 19X0 1fB0 19X0 1ip0 17b0 1ip0 17b0 1ip0 19X0 1fB0 19X0 1fB0 19X0 1fB0 19X0 1ip0 17b0 1ip0 17b0 1ip0 19X0 1fB0 19X0 1fB0 19X0 1ip0 17b0 1ip0 17b0 1ip0 19X0 1fB0 19X0 1fB0 19X0 1fB0 19X0 1ip0 17b0 1ip0 17b0 1ip0|28e5","America/Panama|CMT EST|5j.A 50|01|-2uduE.o|15e5","America/Bahia_Banderas|LMT MST CST PST MDT CDT|71 70 60 80 60 50|0121212131414141414141414141414141414152525252525252525252525252525252525252525252525252525252|-1UQF0 deL0 8lc0 17c0 10M0 1dd0 otX0 gmN0 P2N0 13Vd0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 1fB0 WL0 1fB0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nW0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0|84e3","America/Bahia|LMT -03 -02|2y.4 30 20|01212121212121212121212121212121212121212121212121212121212121|-2glxp.U HdLp.U 1cc0 1e10 1bX0 Ezd0 So0 1vA0 Mn0 1BB0 ML0 1BB0 zX0 qe10 xb0 2ep0 nz0 1C10 zX0 1C10 LX0 1C10 Mn0 H210 Rb0 1tB0 IL0 1Fd0 FX0 1EN0 FX0 1HB0 Lz0 1EN0 Lz0 1C10 IL0 1HB0 Db0 1HB0 On0 1zd0 On0 1zd0 Lz0 1zd0 Rb0 1wN0 Wn0 1tB0 Rb0 1tB0 WL0 1tB0 Rb0 1zd0 On0 1HB0 FX0 l5B0 Rb0|27e5","America/Barbados|LMT AST ADT -0330|3W.t 40 30 3u|0121213121212121|-2m4k1.v 1eAN1.v RB0 1Bz0 Op0 1rb0 11d0 1jJc0 IL0 1ip0 17b0 1ip0 17b0 1ld0 13b0|28e4","America/Belem|LMT -03 -02|3d.U 30 20|012121212121212121212121212121|-2glwK.4 HdKK.4 1cc0 1e10 1bX0 Ezd0 So0 1vA0 Mn0 1BB0 ML0 1BB0 zX0 qe10 xb0 2ep0 nz0 1C10 zX0 1C10 LX0 1C10 Mn0 H210 Rb0 1tB0 IL0 1Fd0 FX0|20e5","America/Belize|LMT CST -0530 CWT CPT CDT|5Q.M 60 5u 50 50 50|012121212121212121212121212121212121212121212121213412121212121212121212121212121212121212121215151|-2kBu7.c fPA7.c Onu 1zcu Rbu 1wou Rbu 1wou Rbu 1zcu Onu 1zcu Onu 1zcu Rbu 1wou Rbu 1wou Rbu 1wou Rbu 1zcu Onu 1zcu Onu 1zcu Rbu 1wou Rbu 1wou Rbu 1zcu Onu 1zcu Onu 1zcu Onu 1zcu Rbu 1wou Rbu 1wou Rbu 1zcu Onu 1zcu Onu 1zcu Rbu Rcu 7Bt0 Ni0 4nd0 Rbu 1wou Rbu 1wou Rbu 1zcu Onu 1zcu Onu 1zcu Rbu 1wou Rbu 1wou Rbu 1wou Rbu 1zcu Onu 1zcu Onu 1zcu Rbu 1wou Rbu 1wou Rbu 1zcu Onu 1zcu Onu 1zcu Onu 1zcu Rbu 1wou Rbu 1wou Rbu 1zcu Onu e9Au qn0 lxB0 mn0|57e3","America/Boa_Vista|LMT -04 -03|42.E 40 30|0121212121212121212121212121212121|-2glvV.k HdKV.k 1cc0 1e10 1bX0 Ezd0 So0 1vA0 Mn0 1BB0 ML0 1BB0 zX0 qe10 xb0 2ep0 nz0 1C10 zX0 1C10 LX0 1C10 Mn0 H210 Rb0 1tB0 IL0 1Fd0 FX0 smp0 WL0 1tB0 2L0|62e2","America/Bogota|BMT -05 -04|4U.g 50 40|0121|-2eb73.I 38yo3.I 2en0|90e5","America/Boise|PST PDT MST MWT MPT MDT|80 70 70 60 60 60|0101023425252525252525252525252525252525252525252525252525252525252525252525252525252525252525252525252525252525252525252525252525252525252525252525252|-261q0 1nX0 11B0 1nX0 8C10 JCL0 8x20 ix0 QwN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1cN0 1cL0 1cN0 1cL0 Dd0 1Kn0 LB0 1BX0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0|21e4","America/Cambridge_Bay|-00 MST MWT MPT MDDT MDT CST CDT EST|0 70 60 60 50 60 60 50 50|0123141515151515151515151515151515151515151515678651515151515151515151515151515151515151515151515151515151515151515151515151|-21Jc0 RO90 8x20 ix0 LCL0 1fA0 zgO0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11A0 1nX0 2K0 WQ0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0|15e2","America/Campo_Grande|LMT -04 -03|3C.s 40 30|01212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121|-2glwl.w HdLl.w 1cc0 1e10 1bX0 Ezd0 So0 1vA0 Mn0 1BB0 ML0 1BB0 zX0 qe10 xb0 2ep0 nz0 1C10 zX0 1C10 LX0 1C10 Mn0 H210 Rb0 1tB0 IL0 1Fd0 FX0 1EN0 FX0 1HB0 Lz0 1EN0 Lz0 1C10 IL0 1HB0 Db0 1HB0 On0 1zd0 On0 1zd0 Lz0 1zd0 Rb0 1wN0 Wn0 1tB0 Rb0 1tB0 WL0 1tB0 Rb0 1zd0 On0 1HB0 FX0 1C10 Lz0 1Ip0 HX0 1zd0 On0 1HB0 IL0 1wp0 On0 1C10 Lz0 1C10 On0 1zd0 On0 1zd0 Rb0 1zd0 Lz0 1C10 Lz0 1C10 On0 1zd0 On0 1zd0 On0 1zd0 On0 1HB0 FX0|77e4","America/Cancun|LMT CST EST EDT CDT|5L.4 60 50 40 50|0123232341414141414141414141414141414141412|-1UQG0 2q2o0 yLB0 1lb0 14p0 1lb0 14p0 Lz0 xB0 14p0 1nX0 11B0 1nX0 1fB0 WL0 1fB0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 Dd0|63e4","America/Caracas|CMT -0430 -04|4r.E 4u 40|01212|-2kV7w.k 28KM2.k 1IwOu kqo0|29e5","America/Cayenne|LMT -04 -03|3t.k 40 30|012|-2mrwu.E 2gWou.E|58e3","America/Chicago|CST CDT EST CWT CPT|60 50 50 50 50|01010101010101010101010101010101010102010101010103401010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010|-261s0 1nX0 11B0 1nX0 1wp0 TX0 WN0 1qL0 1cN0 WL0 1qN0 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1qN0 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1qN0 WL0 1qN0 11z0 1o10 11z0 11B0 1Hz0 14p0 11z0 1o10 11z0 1qN0 WL0 1qN0 11z0 1o10 11z0 RB0 8x30 iw0 1o10 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1qN0 WL0 1qN0 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1o10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1cN0 1cL0 1cN0 1cL0 s10 1Vz0 LB0 1BX0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0|92e5","America/Chihuahua|LMT MST CST CDT MDT|74.k 70 60 50 60|0121212323241414141414141414141414141414141414141414141414141414141414141414141414141414141|-1UQF0 deL0 8lc0 17c0 10M0 1dd0 2zQN0 1lb0 14p0 1lb0 14q0 1lb0 14p0 1nX0 11B0 1nX0 1fB0 WL0 1fB0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0|81e4","America/Costa_Rica|SJMT CST CDT|5A.d 60 50|0121212121|-1Xd6n.L 2lu0n.L Db0 1Kp0 Db0 pRB0 15b0 1kp0 mL0|12e5","America/Phoenix|MST MDT MWT|70 60 60|01010202010|-261r0 1nX0 11B0 1nX0 SgN0 4Al1 Ap0 1db0 SWqX 1cL0|42e5","America/Cuiaba|LMT -04 -03|3I.k 40 30|012121212121212121212121212121212121212121212121212121212121212121212121212121212121212121|-2glwf.E HdLf.E 1cc0 1e10 1bX0 Ezd0 So0 1vA0 Mn0 1BB0 ML0 1BB0 zX0 qe10 xb0 2ep0 nz0 1C10 zX0 1C10 LX0 1C10 Mn0 H210 Rb0 1tB0 IL0 1Fd0 FX0 1EN0 FX0 1HB0 Lz0 1EN0 Lz0 1C10 IL0 1HB0 Db0 1HB0 On0 1zd0 On0 1zd0 Lz0 1zd0 Rb0 1wN0 Wn0 1tB0 Rb0 1tB0 WL0 1tB0 Rb0 1zd0 On0 1HB0 FX0 4a10 HX0 1zd0 On0 1HB0 IL0 1wp0 On0 1C10 Lz0 1C10 On0 1zd0 On0 1zd0 Rb0 1zd0 Lz0 1C10 Lz0 1C10 On0 1zd0 On0 1zd0 On0 1zd0 On0 1HB0 FX0|54e4","America/Danmarkshavn|LMT -03 -02 GMT|1e.E 30 20 0|01212121212121212121212121212121213|-2a5WJ.k 2z5fJ.k 19U0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 DC0|8","America/Dawson_Creek|PST PDT PWT PPT MST|80 70 70 70 70|0102301010101010101010101010101010101010101010101010101014|-25TO0 1in0 UGp0 8x10 iy0 3NB0 11z0 1o10 11z0 1o10 11z0 1qN0 WL0 1qN0 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1qN0 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1qN0 WL0 1qN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1cN0 ML0|12e3","America/Dawson|YST YDT YWT YPT YDDT PST PDT MST|90 80 80 80 70 80 70 70|010102304056565656565656565656565656565656565656565656565656565656565656565656565656565656567|-25TN0 1in0 1o10 13V0 Ser0 8x00 iz0 LCL0 1fA0 jrA0 fNd0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1z90|13e2","America/Denver|MST MDT MWT MPT|70 60 60 60|01010101023010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010|-261r0 1nX0 11B0 1nX0 11B0 1qL0 WN0 mn0 Ord0 8x20 ix0 LCN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1cN0 1cL0 1cN0 1cL0 s10 1Vz0 LB0 1BX0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0|26e5","America/Detroit|LMT CST EST EWT EPT EDT|5w.b 60 50 40 40 40|0123425252525252525252525252525252525252525252525252525252525252525252525252525252525252525252525252525252525252525252525252525252525252525252|-2Cgir.N peqr.N 156L0 8x40 iv0 6fd0 11z0 JxX1 SMX 1cN0 1cL0 aW10 1cL0 s10 1Vz0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0|37e5","America/Edmonton|LMT MST MDT MWT MPT|7x.Q 70 60 60 60|0121212121212134121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121|-2yd4q.8 shdq.8 1in0 17d0 hz0 2dB0 1fz0 1a10 11z0 1qN0 WL0 1qN0 11z0 IGN0 8x20 ix0 3NB0 11z0 XQp0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0|10e5","America/Eirunepe|LMT -05 -04|4D.s 50 40|0121212121212121212121212121212121|-2glvk.w HdLk.w 1cc0 1e10 1bX0 Ezd0 So0 1vA0 Mn0 1BB0 ML0 1BB0 zX0 qe10 xb0 2ep0 nz0 1C10 zX0 1C10 LX0 1C10 Mn0 H210 Rb0 1tB0 IL0 1Fd0 FX0 dPB0 On0 yTd0 d5X0|31e3","America/El_Salvador|LMT CST CDT|5U.M 60 50|012121|-1XiG3.c 2Fvc3.c WL0 1qN0 WL0|11e5","America/Tijuana|LMT MST PST PDT PWT PPT|7M.4 70 80 70 70 70|012123245232323232323232323232323232323232323232323232323232323232323232323232323232323232323232323232323232323232323232323232323232323232323232323232|-1UQE0 4PX0 8mM0 8lc0 SN0 1cL0 pHB0 83r0 zI0 5O10 1Rz0 cOO0 11A0 1o00 11A0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1o00 11A0 BUp0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 U10 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0|20e5","America/Fort_Nelson|PST PDT PWT PPT MST|80 70 70 70 70|01023010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010104|-25TO0 1in0 UGp0 8x10 iy0 3NB0 11z0 1o10 11z0 1o10 11z0 1qN0 WL0 1qN0 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1qN0 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1qN0 WL0 1qN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0|39e2","America/Fort_Wayne|CST CDT CWT CPT EST EDT|60 50 50 50 50 40|010101023010101010101010101040454545454545454545454545454545454545454545454545454545454545454545454|-261s0 1nX0 11B0 1nX0 QI10 Db0 RB0 8x30 iw0 1o10 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1qN0 WL0 1qN0 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1o10 5Tz0 1o10 qLb0 1cL0 1cN0 1cL0 1qhd0 1nX0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0|","America/Fortaleza|LMT -03 -02|2y 30 20|0121212121212121212121212121212121212121|-2glxq HdLq 1cc0 1e10 1bX0 Ezd0 So0 1vA0 Mn0 1BB0 ML0 1BB0 zX0 qe10 xb0 2ep0 nz0 1C10 zX0 1C10 LX0 1C10 Mn0 H210 Rb0 1tB0 IL0 1Fd0 FX0 1EN0 FX0 1HB0 Lz0 nsp0 WL0 1tB0 5z0 2mN0 On0|34e5","America/Glace_Bay|LMT AST ADT AWT APT|3X.M 40 30 30 30|012134121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121|-2IsI0.c CwO0.c 1in0 UGp0 8x50 iu0 iq10 11z0 Jg10 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0|19e3","America/Godthab|LMT -03 -02|3q.U 30 20|0121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121|-2a5Ux.4 2z5dx.4 19U0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00|17e3","America/Goose_Bay|NST NDT NST NDT NWT NPT AST ADT ADDT|3u.Q 2u.Q 3u 2u 2u 2u 40 30 20|010232323232323245232323232323232323232323232323232323232326767676767676767676767676767676767676767676768676767676767676767676767676767676767676767676767676767676767676767676767676767676767676767676767676|-25TSt.8 1in0 DXb0 2HbX.8 WL0 1qN0 WL0 1qN0 WL0 1tB0 TX0 1tB0 WL0 1qN0 WL0 1qN0 7UHu itu 1tB0 WL0 1qN0 WL0 1qN0 WL0 1qN0 WL0 1tB0 WL0 1ld0 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1qN0 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1o10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 S10 g0u 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 14n1 1lb0 14p0 1nW0 11C0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zcX Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0|76e2","America/Grand_Turk|KMT EST EDT AST|57.a 50 40 40|0121212121212121212121212121212121212121212121212121212121212121212121212132121212121212121212121212121212121212121|-2l1uQ.O 2HHBQ.O 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 7jA0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0|37e2","America/Guatemala|LMT CST CDT|62.4 60 50|0121212121|-24KhV.U 2efXV.U An0 mtd0 Nz0 ifB0 17b0 zDB0 11z0|13e5","America/Guayaquil|QMT -05 -04|5e 50 40|0121|-1yVSK 2uILK rz0|27e5","America/Guyana|LMT -04 -0345 -03|3Q.D 40 3J 30|01231|-2mf87.l 8Hc7.l 2r7bJ Ey0f|80e4","America/Halifax|LMT AST ADT AWT APT|4e.o 40 30 30 30|0121212121212121212121212121212121212121212121212134121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121|-2IsHJ.A xzzJ.A 1db0 3I30 1in0 3HX0 IL0 1E10 ML0 1yN0 Pb0 1Bd0 Mn0 1Bd0 Rz0 1w10 Xb0 1w10 LX0 1w10 Xb0 1w10 Lz0 1C10 Jz0 1E10 OL0 1yN0 Un0 1qp0 Xb0 1qp0 11X0 1w10 Lz0 1HB0 LX0 1C10 FX0 1w10 Xb0 1qp0 Xb0 1BB0 LX0 1td0 Xb0 1qp0 Xb0 Rf0 8x50 iu0 1o10 11z0 1o10 11z0 1o10 11z0 1o10 11z0 3Qp0 11z0 1o10 11z0 1o10 11z0 1o10 11z0 3Qp0 11z0 1o10 11z0 1o10 11z0 1o10 11z0 6i10 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0|39e4","America/Havana|HMT CST CDT|5t.A 50 40|012121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121|-1Meuu.o 72zu.o ML0 sld0 An0 1Nd0 Db0 1Nd0 An0 6Ep0 An0 1Nd0 An0 JDd0 Mn0 1Ap0 On0 1fd0 11X0 1qN0 WL0 1wp0 1cL0 1cN0 1cL0 1cN0 1fz0 1cN0 14n0 1ld0 14L0 1kN0 15b0 1kp0 1cL0 1cN0 1fz0 1a10 1fz0 1fB0 11z0 14p0 1nX0 11B0 1nX0 1o10 11z0 1o10 11z0 1o10 11z0 1o10 14n0 1ld0 14n0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 1a10 1in0 1a10 1fA0 1a00 1fA0 1a00 1fA0 1a00 1fA0 1a00 1fA0 1cM0 1cM0 1cM0 1fA0 17c0 1o00 11A0 1qM0 11A0 1o00 11A0 1o00 14o0 1lc0 14o0 1lc0 11A0 6i00 Rc0 1wo0 U00 1tA0 Rc0 1wo0 U00 1wo0 U00 1zc0 U00 1qM0 Oo0 1zc0 Oo0 1zc0 Oo0 1zc0 Rc0 1zc0 Oo0 1zc0 Oo0 1zc0 Oo0 1zc0 Oo0 1zc0 Rc0 1zc0 Oo0 1zc0 Oo0 1zc0 Oo0 1zc0 Oo0 1zc0 Oo0 1zc0 Rc0 1zc0 Oo0 1zc0 Oo0 1zc0 Oo0 1zc0 Oo0 1zc0 Rc0 1zc0 Oo0 1zc0 Oo0 1zc0 Oo0 1zc0 Oo0 1zc0 Oo0 1zc0|21e5","America/Hermosillo|LMT MST CST PST MDT|7n.Q 70 60 80 60|0121212131414141|-1UQF0 deL0 8lc0 17c0 10M0 1dd0 otX0 gmN0 P2N0 13Vd0 1lb0 14p0 1lb0 14p0 1lb0|64e4","America/Indiana/Knox|CST CDT CWT CPT EST|60 50 50 50 50|0101023010101010101010101010101010101040101010101010101010101010101010101010101010101010141010101010101010101010101010101010101010101010101010101010101010|-261s0 1nX0 11B0 1nX0 SgN0 8x30 iw0 3NB0 11z0 1o10 11z0 1o10 11z0 1qN0 WL0 1qN0 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1o10 1fz0 1cN0 1cL0 1cN0 11z0 1o10 11z0 1o10 1cL0 1cN0 1fz0 1cN0 1cL0 1cN0 3Cn0 8wp0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1cN0 1cL0 1cN0 1cL0 s10 1Vz0 LB0 1BX0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 z8o0 1o00 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0|","America/Indiana/Marengo|CST CDT CWT CPT EST EDT|60 50 50 50 50 40|0101023010101010101010104545454545414545454545454545454545454545454545454545454545454545454545454545454|-261s0 1nX0 11B0 1nX0 SgN0 8x30 iw0 dyN0 11z0 6fd0 11z0 1o10 11z0 1qN0 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1qN0 jrz0 1cL0 1cN0 1cL0 1cN0 1fz0 1cN0 1cL0 1cN0 1cL0 s10 1VA0 LA0 1BX0 1e6p0 1nX0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0|","America/Indiana/Petersburg|CST CDT CWT CPT EST EDT|60 50 50 50 50 40|01010230101010101010101010104010101010101010101010141014545454545454545454545454545454545454545454545454545454545454|-261s0 1nX0 11B0 1nX0 SgN0 8x30 iw0 njX0 WN0 1qN0 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1qN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 3Fb0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1cN0 1cL0 1cN0 1cL0 s10 1Vz0 LB0 1BX0 1cN0 1fz0 1a10 1fz0 19co0 1o00 Rd0 1zb0 Oo0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0|","America/Indiana/Tell_City|CST CDT CWT CPT EST EDT|60 50 50 50 50 40|01010230101010101010101010401054541010101010101010101010101010101010101010101010101010101010101010|-261s0 1nX0 11B0 1nX0 SgN0 8x30 iw0 njX0 WN0 1qN0 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1qN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 8wn0 1cN0 1cL0 1cN0 1cK0 1cN0 1cL0 1qhd0 1o00 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0|","America/Indiana/Vevay|CST CDT CWT CPT EST EDT|60 50 50 50 50 40|010102304545454545454545454545454545454545454545454545454545454545454545454545454|-261s0 1nX0 11B0 1nX0 SgN0 8x30 iw0 kPB0 Awn0 1cL0 1cN0 1cL0 1cN0 1fz0 1cN0 1cL0 1lnd0 1nX0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0|","America/Indiana/Vincennes|CST CDT CWT CPT EST EDT|60 50 50 50 50 40|01010230101010101010101010101010454541014545454545454545454545454545454545454545454545454545454545454|-261s0 1nX0 11B0 1nX0 SgN0 8x30 iw0 1o10 11z0 g0p0 11z0 1o10 11z0 1qL0 WN0 1qN0 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1o10 1fz0 1cN0 WL0 1qN0 1cL0 1cN0 1cL0 1cN0 caL0 1cL0 1cN0 1cL0 1qhd0 1o00 Rd0 1zb0 Oo0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0|","America/Indiana/Winamac|CST CDT CWT CPT EST EDT|60 50 50 50 50 40|01010230101010101010101010101010101010454541054545454545454545454545454545454545454545454545454545454545454|-261s0 1nX0 11B0 1nX0 SgN0 8x30 iw0 1o10 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1qN0 WL0 1qN0 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1o10 1fz0 1cN0 1cL0 1cN0 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1qN0 jrz0 1cL0 1cN0 1cL0 1qhd0 1o00 Rd0 1za0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0|","America/Inuvik|-00 PST PDDT MST MDT|0 80 60 70 60|0121343434343434343434343434343434343434343434343434343434343434343434343434343434343434343434343434343434343434343434343|-FnA0 tWU0 1fA0 wPe0 2pz0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0|35e2","America/Iqaluit|-00 EWT EPT EST EDDT EDT CST CDT|0 40 40 50 30 40 60 50|01234353535353535353535353535353535353535353567353535353535353535353535353535353535353535353535353535353535353535353535353|-16K00 7nX0 iv0 LCL0 1fA0 zgO0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11C0 1nX0 11A0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0|67e2","America/Jamaica|KMT EST EDT|57.a 50 40|0121212121212121212121|-2l1uQ.O 2uM1Q.O 1Vz0 LB0 1BX0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0|94e4","America/Juneau|PST PWT PPT PDT YDT YST AKST AKDT|80 70 70 70 80 90 90 80|01203030303030303030303030403030356767676767676767676767676767676767676767676767676767676767676767676767676767676767676767676767676767676767676|-17T20 8x10 iy0 Vo10 1cL0 1cN0 1cL0 1cN0 1fz0 1cN0 1cL0 1cN0 1cL0 s10 1Vz0 LB0 1BX0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cM0 1cM0 1cL0 1cN0 1fz0 1a10 1fz0 co0 10q0 1cL0 1cN0 1cL0 1cN0 1cL0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0|33e3","America/Kentucky/Louisville|CST CDT CWT CPT EST EDT|60 50 50 50 50 40|0101010102301010101010101010101010101454545454545414545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454|-261s0 1nX0 11B0 1nX0 3Fd0 Nb0 LPd0 11z0 RB0 8x30 iw0 1nX1 e0X 9vd0 WL0 1qN0 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1qN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1cN0 xz0 gso0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1cN0 1cL0 1cN0 1cL0 s10 1VA0 LA0 1BX0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0|","America/Kentucky/Monticello|CST CDT CWT CPT EST EDT|60 50 50 50 50 40|0101023010101010101010101010101010101010101010101010101010101010101010101454545454545454545454545454545454545454545454545454545454545454545454545454|-261s0 1nX0 11B0 1nX0 SgN0 8x30 iw0 SWp0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1cN0 1cL0 1cN0 1cL0 s10 1Vz0 LB0 1BX0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11A0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0|","America/La_Paz|CMT BST -04|4w.A 3w.A 40|012|-1x37r.o 13b0|19e5","America/Lima|LMT -05 -04|58.A 50 40|0121212121212121|-2tyGP.o 1bDzP.o zX0 1aN0 1cL0 1cN0 1cL0 1PrB0 zX0 1O10 zX0 6Gp0 zX0 98p0 zX0|11e6","America/Los_Angeles|PST PDT PWT PPT|80 70 70 70|010102301010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010|-261q0 1nX0 11B0 1nX0 SgN0 8x10 iy0 5Wp1 1VaX 3dA0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1a00 1fA0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1cN0 1cL0 1cN0 1cL0 s10 1Vz0 LB0 1BX0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0|15e6","America/Maceio|LMT -03 -02|2m.Q 30 20|012121212121212121212121212121212121212121|-2glxB.8 HdLB.8 1cc0 1e10 1bX0 Ezd0 So0 1vA0 Mn0 1BB0 ML0 1BB0 zX0 qe10 xb0 2ep0 nz0 1C10 zX0 1C10 LX0 1C10 Mn0 H210 Rb0 1tB0 IL0 1Fd0 FX0 1EN0 FX0 1HB0 Lz0 dMN0 Lz0 8Q10 WL0 1tB0 5z0 2mN0 On0|93e4","America/Managua|MMT CST EST CDT|5J.c 60 50 50|0121313121213131|-1quie.M 1yAMe.M 4mn0 9Up0 Dz0 1K10 Dz0 s3F0 1KH0 DB0 9In0 k8p0 19X0 1o30 11y0|22e5","America/Manaus|LMT -04 -03|40.4 40 30|01212121212121212121212121212121|-2glvX.U HdKX.U 1cc0 1e10 1bX0 Ezd0 So0 1vA0 Mn0 1BB0 ML0 1BB0 zX0 qe10 xb0 2ep0 nz0 1C10 zX0 1C10 LX0 1C10 Mn0 H210 Rb0 1tB0 IL0 1Fd0 FX0 dPB0 On0|19e5","America/Martinique|FFMT AST ADT|44.k 40 30|0121|-2mPTT.E 2LPbT.E 19X0|39e4","America/Matamoros|LMT CST CDT|6E 60 50|0121212121212121212121212121212121212121212121212121212121212121212121212121212121212121|-1UQG0 2FjC0 1nX0 i6p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 1fB0 WL0 1fB0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 U10 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0|45e4","America/Mazatlan|LMT MST CST PST MDT|75.E 70 60 80 60|0121212131414141414141414141414141414141414141414141414141414141414141414141414141414141414141|-1UQF0 deL0 8lc0 17c0 10M0 1dd0 otX0 gmN0 P2N0 13Vd0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 1fB0 WL0 1fB0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0|44e4","America/Menominee|CST CDT CWT CPT EST|60 50 50 50 50|01010230101041010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010|-261s0 1nX0 11B0 1nX0 SgN0 8x30 iw0 1o10 11z0 LCN0 1fz0 6410 9Jb0 1cM0 s10 1Vz0 LB0 1BX0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0|85e2","America/Merida|LMT CST EST CDT|5W.s 60 50 50|0121313131313131313131313131313131313131313131313131313131313131313131313131313131313131|-1UQG0 2q2o0 2hz0 wu30 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 1fB0 WL0 1fB0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0|11e5","America/Metlakatla|PST PWT PPT PDT AKST AKDT|80 70 70 70 90 80|01203030303030303030303030303030304545450454545454545454545454545454545454545454|-17T20 8x10 iy0 Vo10 1cL0 1cN0 1cL0 1cN0 1fz0 1cN0 1cL0 1cN0 1cL0 s10 1Vz0 LB0 1BX0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1hU10 Rd0 1zb0 Op0 1zb0 Op0 1zb0 uM0 jB0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0|14e2","America/Mexico_City|LMT MST CST CDT CWT|6A.A 70 60 50 50|012121232324232323232323232323232323232323232323232323232323232323232323232323232323232323232323232|-1UQF0 deL0 8lc0 17c0 10M0 1dd0 gEn0 TX0 3xd0 Jb0 6zB0 SL0 e5d0 17b0 1Pff0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 1fB0 WL0 1fB0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0|20e6","America/Miquelon|LMT AST -03 -02|3I.E 40 30 20|012323232323232323232323232323232323232323232323232323232323232323232323232323232323232323232323232323232|-2mKkf.k 2LTAf.k gQ10 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0|61e2","America/Moncton|EST AST ADT AWT APT|50 40 30 30 30|012121212121212121212134121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121|-2IsH0 CwN0 1in0 zAo0 An0 1Nd0 An0 1Nd0 An0 1Nd0 An0 1Nd0 An0 1Nd0 An0 1K10 Lz0 1zB0 NX0 1u10 Wn0 S20 8x50 iu0 1o10 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1qN0 WL0 1qN0 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1qN0 11z0 1o10 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1cN0 1cL0 3Cp0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14n1 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 ReX 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0|64e3","America/Monterrey|LMT CST CDT|6F.g 60 50|0121212121212121212121212121212121212121212121212121212121212121212121212121212121212121|-1UQG0 2FjC0 1nX0 i6p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 1fB0 WL0 1fB0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0|41e5","America/Montevideo|LMT MMT -04 -03 -0330 -0230 -02 -0130|3I.P 3I.P 40 30 3u 2u 20 1u|012343434343434343434343435353636353636375363636363636363636363636363636363636363636363|-2tRUf.9 sVc0 8jcf.9 1db0 1dcu 1cLu 1dcu 1cLu ircu 11zu 1o0u 11zu 1o0u 11zu 1o0u 11zu 1qMu WLu 1qMu WLu 1fAu 1cLu 1o0u 11zu NAu 3jXu zXu Dq0u 19Xu pcu jz0 cm10 19X0 6tB0 1fbu 3o0u jX0 4vB0 xz0 3Cp0 mmu 1a10 IMu Db0 4c10 uL0 1Nd0 An0 1SN0 uL0 mp0 28L0 iPB0 un0 1SN0 xz0 1zd0 Lz0 1zd0 Rb0 1zd0 On0 1wp0 Rb0 s8p0 1fB0 1ip0 11z0 1ld0 14n0 1o10 11z0 1o10 11z0 1o10 14n0 1ld0 14n0 1ld0 14n0 1o10 11z0 1o10 11z0 1o10 11z0|17e5","America/Toronto|EST EDT EWT EPT|50 40 40 40|01010101010101010101010101010101010101010101012301010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010|-25TR0 1in0 11Wu 1nzu 1fD0 WJ0 1wr0 Nb0 1Ap0 On0 1zd0 On0 1wp0 TX0 1tB0 TX0 1tB0 TX0 1tB0 WL0 1qN0 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1qN0 WL0 1qN0 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1qN0 WL0 1qN0 4kM0 8x40 iv0 1o10 11z0 1nX0 11z0 1o10 11z0 1o10 1qL0 11D0 1nX0 11B0 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1qN0 11z0 1o10 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0|65e5","America/New_York|EST EDT EWT EPT|50 40 40 40|01010101010101010101010101010101010101010101010102301010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010|-261t0 1nX0 11B0 1nX0 11B0 1qL0 1a10 11z0 1qN0 WL0 1qN0 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1qN0 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1qN0 WL0 1qN0 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1qN0 WL0 1qN0 11z0 1o10 11z0 RB0 8x40 iv0 1o10 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1qN0 WL0 1qN0 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1o10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1cN0 1cL0 1cN0 1cL0 s10 1Vz0 LB0 1BX0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0|21e6","America/Nipigon|EST EDT EWT EPT|50 40 40 40|010123010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010|-25TR0 1in0 Rnb0 3je0 8x40 iv0 19yN0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0|16e2","America/Nome|NST NWT NPT BST BDT YST AKST AKDT|b0 a0 a0 b0 a0 90 90 80|012034343434343434343434343434343456767676767676767676767676767676767676767676767676767676767676767676767676767676767676767676767676767676767676|-17SX0 8wW0 iB0 Qlb0 52O0 1cL0 1cN0 1cL0 1cN0 1fz0 1cN0 1cL0 1cN0 1cL0 s10 1Vz0 LB0 1BX0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 cl0 10q0 1cL0 1cN0 1cL0 1cN0 1cL0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0|38e2","America/Noronha|LMT -02 -01|29.E 20 10|0121212121212121212121212121212121212121|-2glxO.k HdKO.k 1cc0 1e10 1bX0 Ezd0 So0 1vA0 Mn0 1BB0 ML0 1BB0 zX0 qe10 xb0 2ep0 nz0 1C10 zX0 1C10 LX0 1C10 Mn0 H210 Rb0 1tB0 IL0 1Fd0 FX0 1EN0 FX0 1HB0 Lz0 nsp0 WL0 1tB0 2L0 2pB0 On0|30e2","America/North_Dakota/Beulah|MST MDT MWT MPT CST CDT|70 60 60 60 60 50|010102301010101010101010101010101010101010101010101010101010101010101010101010101010101010101014545454545454545454545454545454545454545454545454545454|-261r0 1nX0 11B0 1nX0 SgN0 8x20 ix0 QwN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1cN0 1cL0 1cN0 1cL0 s10 1Vz0 LB0 1BX0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Oo0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0|","America/North_Dakota/Center|MST MDT MWT MPT CST CDT|70 60 60 60 60 50|010102301010101010101010101010101010101010101010101010101014545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454|-261r0 1nX0 11B0 1nX0 SgN0 8x20 ix0 QwN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1cN0 1cL0 1cN0 1cL0 s10 1Vz0 LB0 1BX0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14o0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0|","America/North_Dakota/New_Salem|MST MDT MWT MPT CST CDT|70 60 60 60 60 50|010102301010101010101010101010101010101010101010101010101010101010101010101010101454545454545454545454545454545454545454545454545454545454545454545454|-261r0 1nX0 11B0 1nX0 SgN0 8x20 ix0 QwN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1cN0 1cL0 1cN0 1cL0 s10 1Vz0 LB0 1BX0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14o0 1nX0 11B0 1nX0 11B0 1nX0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0|","America/Ojinaga|LMT MST CST CDT MDT|6V.E 70 60 50 60|0121212323241414141414141414141414141414141414141414141414141414141414141414141414141414141|-1UQF0 deL0 8lc0 17c0 10M0 1dd0 2zQN0 1lb0 14p0 1lb0 14q0 1lb0 14p0 1nX0 11B0 1nX0 1fB0 WL0 1fB0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 U10 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0|23e3","America/Pangnirtung|-00 AST AWT APT ADDT ADT EDT EST CST CDT|0 40 30 30 20 30 40 50 60 50|012314151515151515151515151515151515167676767689767676767676767676767676767676767676767676767676767676767676767676767676767|-1XiM0 PnG0 8x50 iu0 LCL0 1fA0 zgO0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1o00 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11C0 1nX0 11A0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0|14e2","America/Paramaribo|LMT PMT PMT -0330 -03|3E.E 3E.Q 3E.A 3u 30|01234|-2nDUj.k Wqo0.c qanX.I 1yVXN.o|24e4","America/Port-au-Prince|PPMT EST EDT|4N 50 40|01212121212121212121212121212121212121212121212121212121212121212121212121212121212121|-28RHb 2FnMb 19X0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 14q0 1o00 11A0 1o00 11A0 1o00 14o0 1lc0 14o0 1lc0 14o0 1o00 11A0 1o00 11A0 1o00 14o0 1lc0 14o0 1lc0 i6n0 1nX0 11B0 1nX0 d430 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 3iN0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0|23e5","America/Rio_Branco|LMT -05 -04|4v.c 50 40|01212121212121212121212121212121|-2glvs.M HdLs.M 1cc0 1e10 1bX0 Ezd0 So0 1vA0 Mn0 1BB0 ML0 1BB0 zX0 qe10 xb0 2ep0 nz0 1C10 zX0 1C10 LX0 1C10 Mn0 H210 Rb0 1tB0 IL0 1Fd0 FX0 NBd0 d5X0|31e4","America/Porto_Velho|LMT -04 -03|4f.A 40 30|012121212121212121212121212121|-2glvI.o HdKI.o 1cc0 1e10 1bX0 Ezd0 So0 1vA0 Mn0 1BB0 ML0 1BB0 zX0 qe10 xb0 2ep0 nz0 1C10 zX0 1C10 LX0 1C10 Mn0 H210 Rb0 1tB0 IL0 1Fd0 FX0|37e4","America/Punta_Arenas|SMT -05 -04 -03|4G.K 50 40 30|0102021212121212121232323232323232323232323232323232323232323232323232323232323232323232323232323232323232323232323|-2q2jh.e fJAh.e 5knG.K 1Vzh.e jRAG.K 1pbh.e 11d0 1oL0 11d0 1oL0 11d0 1oL0 11d0 1pb0 11d0 nHX0 op0 blz0 ko0 Qeo0 WL0 1zd0 On0 1ip0 11z0 1o10 11z0 1qN0 WL0 1ld0 14n0 1qN0 WL0 1qN0 11z0 1o10 11z0 1o10 11z0 1qN0 WL0 1qN0 WL0 1qN0 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1qN0 WL0 1qN0 WL0 1qN0 1cL0 1cN0 11z0 1o10 11z0 1qN0 WL0 1fB0 19X0 1qN0 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1qN0 WL0 1qN0 17b0 1ip0 11z0 1ip0 1fz0 1fB0 11z0 1qN0 WL0 1qN0 WL0 1qN0 WL0 1qN0 11z0 1o10 11z0 1o10 11z0 1qN0 WL0 1qN0 17b0 1ip0 11z0 1o10 19X0 1fB0 1nX0 G10 1EL0 Op0 1zb0 Rd0 1wn0 Rd0 46n0 Ap0|","America/Rainy_River|CST CDT CWT CPT|60 50 50 50|010123010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010|-25TQ0 1in0 Rnb0 3je0 8x30 iw0 19yN0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0|842","America/Rankin_Inlet|-00 CST CDDT CDT EST|0 60 40 50 50|012131313131313131313131313131313131313131313431313131313131313131313131313131313131313131313131313131313131313131313131|-vDc0 keu0 1fA0 zgO0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0|26e2","America/Recife|LMT -03 -02|2j.A 30 20|0121212121212121212121212121212121212121|-2glxE.o HdLE.o 1cc0 1e10 1bX0 Ezd0 So0 1vA0 Mn0 1BB0 ML0 1BB0 zX0 qe10 xb0 2ep0 nz0 1C10 zX0 1C10 LX0 1C10 Mn0 H210 Rb0 1tB0 IL0 1Fd0 FX0 1EN0 FX0 1HB0 Lz0 nsp0 WL0 1tB0 2L0 2pB0 On0|33e5","America/Regina|LMT MST MDT MWT MPT CST|6W.A 70 60 60 60 60|012121212121212121212121341212121212121212121212121215|-2AD51.o uHe1.o 1in0 s2L0 11z0 1o10 11z0 1o10 11z0 1qN0 WL0 1qN0 11z0 66N0 1cL0 1cN0 19X0 1fB0 1cL0 1fB0 1cL0 1cN0 1cL0 M30 8x20 ix0 1ip0 1cL0 1ip0 11z0 1o10 11z0 1o10 11z0 1qN0 WL0 1qN0 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1qN0 11z0 1o10 11z0 3NB0 1cL0 1cN0|19e4","America/Resolute|-00 CST CDDT CDT EST|0 60 40 50 50|012131313131313131313131313131313131313131313431313131313431313131313131313131313131313131313131313131313131313131313131|-SnA0 GWS0 1fA0 zgO0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0|229","America/Santarem|LMT -04 -03|3C.M 40 30|0121212121212121212121212121212|-2glwl.c HdLl.c 1cc0 1e10 1bX0 Ezd0 So0 1vA0 Mn0 1BB0 ML0 1BB0 zX0 qe10 xb0 2ep0 nz0 1C10 zX0 1C10 LX0 1C10 Mn0 H210 Rb0 1tB0 IL0 1Fd0 FX0 NBd0|21e4","America/Santiago|SMT -05 -04 -03|4G.K 50 40 30|010202121212121212321232323232323232323232323232323232323232323232323232323232323232323232323232323232323232323232323232323232323232323232323232323232323232323|-2q2jh.e fJAh.e 5knG.K 1Vzh.e jRAG.K 1pbh.e 11d0 1oL0 11d0 1oL0 11d0 1oL0 11d0 1pb0 11d0 nHX0 op0 9Bz0 jb0 1oN0 ko0 Qeo0 WL0 1zd0 On0 1ip0 11z0 1o10 11z0 1qN0 WL0 1ld0 14n0 1qN0 WL0 1qN0 11z0 1o10 11z0 1o10 11z0 1qN0 WL0 1qN0 WL0 1qN0 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1qN0 WL0 1qN0 WL0 1qN0 1cL0 1cN0 11z0 1o10 11z0 1qN0 WL0 1fB0 19X0 1qN0 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1qN0 WL0 1qN0 17b0 1ip0 11z0 1ip0 1fz0 1fB0 11z0 1qN0 WL0 1qN0 WL0 1qN0 WL0 1qN0 11z0 1o10 11z0 1o10 11z0 1qN0 WL0 1qN0 17b0 1ip0 11z0 1o10 19X0 1fB0 1nX0 G10 1EL0 Op0 1zb0 Rd0 1wn0 Rd0 46n0 Ap0 1Nb0 Ap0 1Nb0 Ap0 1zb0 11B0 1nX0 11B0 1nX0 11B0 1nX0 11B0 1nX0 11B0 1qL0 11B0 1nX0 11B0 1nX0 11B0 1nX0 11B0 1nX0 11B0 1qL0 WN0 1qL0 11B0 1nX0 11B0 1nX0 11B0 1nX0 11B0 1nX0 11B0 1qL0 WN0 1qL0 11B0 1nX0 11B0|62e5","America/Santo_Domingo|SDMT EST EDT -0430 AST|4E 50 40 4u 40|01213131313131414|-1ttjk 1lJMk Mn0 6sp0 Lbu 1Cou yLu 1RAu wLu 1QMu xzu 1Q0u xXu 1PAu 13jB0 e00|29e5","America/Sao_Paulo|LMT -03 -02|36.s 30 20|01212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121|-2glwR.w HdKR.w 1cc0 1e10 1bX0 Ezd0 So0 1vA0 Mn0 1BB0 ML0 1BB0 zX0 pTd0 PX0 2ep0 nz0 1C10 zX0 1C10 LX0 1C10 Mn0 H210 Rb0 1tB0 IL0 1Fd0 FX0 1EN0 FX0 1HB0 Lz0 1EN0 Lz0 1C10 IL0 1HB0 Db0 1HB0 On0 1zd0 On0 1zd0 Lz0 1zd0 Rb0 1wN0 Wn0 1tB0 Rb0 1tB0 WL0 1tB0 Rb0 1zd0 On0 1HB0 FX0 1C10 Lz0 1Ip0 HX0 1zd0 On0 1HB0 IL0 1wp0 On0 1C10 Lz0 1C10 On0 1zd0 On0 1zd0 Rb0 1zd0 Lz0 1C10 Lz0 1C10 On0 1zd0 On0 1zd0 On0 1zd0 On0 1HB0 FX0|20e6","America/Scoresbysund|LMT -02 -01 +00|1r.Q 20 10 0|0121323232323232323232323232323232323232323232323232323232323232323232323232323232323232323232323232323232323232323232|-2a5Ww.8 2z5ew.8 1a00 1cK0 1cL0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00|452","America/Sitka|PST PWT PPT PDT YST AKST AKDT|80 70 70 70 90 90 80|01203030303030303030303030303030345656565656565656565656565656565656565656565656565656565656565656565656565656565656565656565656565656565656565|-17T20 8x10 iy0 Vo10 1cL0 1cN0 1cL0 1cN0 1fz0 1cN0 1cL0 1cN0 1cL0 s10 1Vz0 LB0 1BX0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 co0 10q0 1cL0 1cN0 1cL0 1cN0 1cL0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0|90e2","America/St_Johns|NST NDT NST NDT NWT NPT NDDT|3u.Q 2u.Q 3u 2u 2u 2u 1u|01010101010101010101010101010101010102323232323232324523232323232323232323232323232323232323232323232323232323232323232323232323232323232326232323232323232323232323232323232323232323232323232323232323232323232323232323232323232323232323232|-28oit.8 14L0 1nB0 1in0 1gm0 Dz0 1JB0 1cL0 1cN0 1cL0 1fB0 19X0 1fB0 19X0 1fB0 19X0 1fB0 19X0 1fB0 1cL0 1cN0 1cL0 1fB0 19X0 1fB0 19X0 1fB0 19X0 1fB0 19X0 1fB0 1cL0 1fB0 19X0 1fB0 19X0 10O0 eKX.8 19X0 1iq0 WL0 1qN0 WL0 1qN0 WL0 1tB0 TX0 1tB0 WL0 1qN0 WL0 1qN0 7UHu itu 1tB0 WL0 1qN0 WL0 1qN0 WL0 1qN0 WL0 1tB0 WL0 1ld0 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1qN0 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1o10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 14n1 1lb0 14p0 1nW0 11C0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zcX Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0|11e4","America/Swift_Current|LMT MST MDT MWT MPT CST|7b.k 70 60 60 60 60|012134121212121212121215|-2AD4M.E uHdM.E 1in0 UGp0 8x20 ix0 1o10 17b0 1ip0 11z0 1o10 11z0 1o10 11z0 isN0 1cL0 3Cp0 1cL0 1cN0 11z0 1qN0 WL0 pMp0|16e3","America/Tegucigalpa|LMT CST CDT|5M.Q 60 50|01212121|-1WGGb.8 2ETcb.8 WL0 1qN0 WL0 GRd0 AL0|11e5","America/Thule|LMT AST ADT|4z.8 40 30|012121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121|-2a5To.Q 31NBo.Q 1cL0 1cN0 1cL0 1fB0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0|656","America/Thunder_Bay|CST EST EWT EPT EDT|60 50 40 40 40|0123141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141|-2q5S0 1iaN0 8x40 iv0 XNB0 1cL0 1cN0 1fz0 1cN0 1cL0 3Cp0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0|11e4","America/Vancouver|PST PDT PWT PPT|80 70 70 70|0102301010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010|-25TO0 1in0 UGp0 8x10 iy0 1o10 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1qN0 WL0 1qN0 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1qN0 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1qN0 WL0 1qN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0|23e5","America/Whitehorse|YST YDT YWT YPT YDDT PST PDT MST|90 80 80 80 70 80 70 70|010102304056565656565656565656565656565656565656565656565656565656565656565656565656565656567|-25TN0 1in0 1o10 13V0 Ser0 8x00 iz0 LCL0 1fA0 3NA0 vrd0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1z90|23e3","America/Winnipeg|CST CDT CWT CPT|60 50 50 50|010101023010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010|-2aIi0 WL0 3ND0 1in0 Jap0 Rb0 aCN0 8x30 iw0 1tB0 11z0 1ip0 11z0 1o10 11z0 1o10 11z0 1rd0 10L0 1op0 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1qN0 11z0 1o10 11z0 1o10 11z0 1o10 1cL0 1cN0 11z0 6i10 WL0 6i10 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1a00 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1a00 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 14o0 1lc0 14o0 1o00 11A0 1o00 11A0 1o00 14o0 1lc0 14o0 1lc0 14o0 1o00 11A0 1o00 11A0 1o00 14o0 1lc0 14o0 1lc0 14o0 1lc0 14o0 1o00 11A0 1o00 11A0 1o00 14o0 1lc0 14o0 1lc0 14o0 1o00 11A0 1o00 11A0 1nX0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0|66e4","America/Yakutat|YST YWT YPT YDT AKST AKDT|90 80 80 80 90 80|01203030303030303030303030303030304545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454|-17T10 8x00 iz0 Vo10 1cL0 1cN0 1cL0 1cN0 1fz0 1cN0 1cL0 1cN0 1cL0 s10 1Vz0 LB0 1BX0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 cn0 10q0 1cL0 1cN0 1cL0 1cN0 1cL0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0|642","America/Yellowknife|-00 MST MWT MPT MDDT MDT|0 70 60 60 50 60|012314151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151|-1pdA0 hix0 8x20 ix0 LCL0 1fA0 zgO0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0|19e3","Antarctica/Casey|-00 +08 +11|0 -80 -b0|0121212121212|-2q00 1DjS0 T90 40P0 KL0 blz0 3m10 1o30 14k0 1kr0 12l0 1o01|10","Antarctica/Davis|-00 +07 +05|0 -70 -50|01012121|-vyo0 iXt0 alj0 1D7v0 VB0 3Wn0 KN0|70","Pacific/Port_Moresby|+10|-a0|0||25e4","Antarctica/Macquarie|AEST AEDT -00|-a0 -b0 0|010201010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101|-29E80 1a00 4SK0 1ayy0 Lvs0 1cM0 1o00 Rc0 1wo0 Rc0 1wo0 U00 1wo0 LA0 1C00 Oo0 1zc0 Oo0 1zc0 Oo0 1zc0 Rc0 1zc0 Oo0 1zc0 Oo0 1zc0 Oo0 1zc0 Oo0 1zc0 Oo0 1zc0 11A0 1qM0 WM0 1qM0 Oo0 1zc0 Oo0 1zc0 Oo0 1wo0 WM0 1tA0 WM0 1tA0 U00 1tA0 U00 1tA0 11A0 1fA0 1a00 1fA0 1a00 1fA0 1a00 1fA0 1a00 1fA0 1cM0 1fA0 1a00 1fA0 1a00 1fA0 1a00 1fA0 1a00 11A0 1o00 1io0 1a00 1fA0 1a00 1fA0 1a00 1fA0 1a00 1fA0 1cM0 1cM0 1a00 1io0 1cM0 1cM0 1cM0 1cM0 3Co0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0|1","Antarctica/Mawson|-00 +06 +05|0 -60 -50|012|-CEo0 2fyk0|60","Pacific/Auckland|NZMT NZST NZST NZDT|-bu -cu -c0 -d0|01020202020202020202020202023232323232323232323232323232323232323232323232323232323232323232323232323232323232323232323232323232323232323232323232323232323|-1GCVu Lz0 1tB0 11zu 1o0u 11zu 1o0u 11zu 1o0u 14nu 1lcu 14nu 1lcu 1lbu 11Au 1nXu 11Au 1nXu 11Au 1nXu 11Au 1nXu 11Au 1qLu WMu 1qLu 11Au 1n1bu IM0 1C00 Rc0 1zc0 Oo0 1zc0 Oo0 1zc0 Oo0 1zc0 Oo0 1zc0 Oo0 1zc0 Rc0 1zc0 Oo0 1zc0 Oo0 1zc0 Oo0 1zc0 Oo0 1zc0 Oo0 1zc0 Rc0 1zc0 Oo0 1qM0 14o0 1lc0 14o0 1lc0 14o0 1lc0 17c0 1io0 17c0 1io0 17c0 1io0 17c0 1lc0 14o0 1lc0 14o0 1lc0 17c0 1io0 17c0 1io0 17c0 1lc0 14o0 1lc0 14o0 1lc0 17c0 1io0 17c0 1io0 17c0 1io0 17c0 1io0 1fA0 1a00 1fA0 1a00 1fA0 1a00 1fA0 1a00 1fA0 1cM0 1fA0 1a00 1fA0 1a00 1fA0 1a00 1fA0 1a00 1fA0 1a00 1fA0 1cM0 1fA0 1a00 1fA0 1a00 1fA0 1a00 1fA0 1a00 1fA0 1a00 1io0 1a00 1fA0 1a00 1fA0 1a00 1fA0 1a00 1fA0 1a00 1fA0 1cM0 1fA0 1a00 1fA0 1a00 1fA0 1a00 1fA0 1a00 1fA0 1a00 1fA0 1cM0 1fA0 1a00 1fA0 1a00|14e5","Antarctica/Palmer|-00 -03 -04 -02|0 30 40 20|0121212121213121212121212121212121212121212121212121212121212121212121212121212121|-cao0 nD0 1vd0 SL0 1vd0 17z0 1cN0 1fz0 1cN0 1cL0 1cN0 asn0 Db0 jsN0 14N0 11z0 1o10 11z0 1qN0 WL0 1qN0 WL0 1qN0 1cL0 1cN0 11z0 1o10 11z0 1qN0 WL0 1fB0 19X0 1qN0 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1qN0 WL0 1qN0 17b0 1ip0 11z0 1ip0 1fz0 1fB0 11z0 1qN0 WL0 1qN0 WL0 1qN0 WL0 1qN0 11z0 1o10 11z0 1o10 11z0 1qN0 WL0 1qN0 17b0 1ip0 11z0 1o10 19X0 1fB0 1nX0 G10 1EL0 Op0 1zb0 Rd0 1wn0 Rd0 46n0 Ap0|40","Antarctica/Rothera|-00 -03|0 30|01|gOo0|130","Asia/Riyadh|LMT +03|-36.Q -30|01|-TvD6.Q|57e5","Antarctica/Troll|-00 +00 +02|0 0 -20|01212121212121212121212121212121212121212121212121212121212121212121|1puo0 hd0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00|40","Antarctica/Vostok|-00 +06|0 -60|01|-tjA0|25","Europe/Oslo|CET CEST|-10 -20|010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010|-2awM0 Qm0 W6o0 5pf0 WM0 1fA0 1cM0 1cM0 1cM0 1cM0 wJc0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1qM0 WM0 zpc0 1a00 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00|62e4","Asia/Almaty|LMT +05 +06 +07|-57.M -50 -60 -70|012323232323232323232321232323232323232323232323232|-1Pc57.M eUo7.M 23CL0 1db0 1cN0 1db0 1cN0 1db0 1dd0 1cO0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 2pB0 IM0 rX0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0|15e5","Asia/Amman|LMT EET EEST|-2n.I -20 -30|0121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121|-1yW2n.I 1HiMn.I KL0 1oN0 11b0 1oN0 11b0 1pd0 1dz0 1cp0 11b0 1op0 11b0 fO10 1db0 1e10 1cL0 1cN0 1cL0 1cN0 1fz0 1pd0 10n0 1ld0 14n0 1hB0 15b0 1ip0 19X0 1cN0 1cL0 1cN0 17b0 1ld0 14o0 1lc0 17c0 1io0 17c0 1io0 17c0 1So0 y00 1fc0 1dc0 1co0 1dc0 1cM0 1cM0 1cM0 1o00 11A0 1lc0 17c0 1cM0 1cM0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 4bX0 Dd0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 LA0 1C00 LA0 1C00 Oo0 1zc0 Oo0 1C00 LA0 1C00 LA0 1C00 LA0 1C00 LA0 1C00 Oo0 1zc0 Oo0 1C00 LA0 1C00 LA0 1C00 LA0 1C00 LA0 1C00 Oo0 1C00 LA0 1C00|25e5","Asia/Anadyr|LMT +12 +13 +14 +11|-bN.U -c0 -d0 -e0 -b0|01232121212121212121214121212121212121212121212121212121212141|-1PcbN.U eUnN.U 23CL0 1db0 2q10 1cN0 1db0 1dd0 1cO0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 2pB0 IM0 rX0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 2sp0 WM0|13e3","Asia/Aqtau|LMT +04 +05 +06|-3l.4 -40 -50 -60|012323232323232323232123232312121212121212121212|-1Pc3l.4 eUnl.4 24PX0 2pX0 1cN0 1db0 1dd0 1cO0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 2pB0 IM0 rX0 1cM0 1cM0 1cM0 1cM0 1cM0 1cN0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0|15e4","Asia/Aqtobe|LMT +04 +05 +06|-3M.E -40 -50 -60|0123232323232323232321232323232323232323232323232|-1Pc3M.E eUnM.E 23CL0 3Db0 1cN0 1db0 1dd0 1cO0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 2pB0 IM0 rX0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0|27e4","Asia/Ashgabat|LMT +04 +05 +06|-3R.w -40 -50 -60|0123232323232323232323212|-1Pc3R.w eUnR.w 23CL0 1db0 1cN0 1db0 1cN0 1db0 1dd0 1cO0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 2pB0 IM0|41e4","Asia/Atyrau|LMT +03 +05 +06 +04|-3r.I -30 -50 -60 -40|01232323232323232323242323232323232324242424242|-1Pc3r.I eUor.I 24PW0 2pX0 1cN0 1db0 1dd0 1cO0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 2pB0 IM0 rX0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 2sp0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0|","Asia/Baghdad|BMT +03 +04|-2V.A -30 -40|012121212121212121212121212121212121212121212121212121|-26BeV.A 2ACnV.A 11b0 1cp0 1dz0 1dd0 1db0 1cN0 1cp0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1de0 1dc0 1dc0 1dc0 1cM0 1dc0 1cM0 1dc0 1cM0 1dc0 1dc0 1dc0 1cM0 1dc0 1cM0 1dc0 1cM0 1dc0 1dc0 1dc0 1cM0 1dc0 1cM0 1dc0 1cM0 1dc0 1dc0 1dc0 1cM0 1dc0 1cM0 1dc0 1cM0 1dc0|66e5","Asia/Qatar|LMT +04 +03|-3q.8 -40 -30|012|-21Jfq.8 27BXq.8|96e4","Asia/Baku|LMT +03 +04 +05|-3j.o -30 -40 -50|01232323232323232323232123232323232323232323232323232323232323232|-1Pc3j.o 1jUoj.o WCL0 1db0 1cN0 1db0 1cN0 1db0 1dd0 1cO0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 2pB0 1cM0 9Je0 1o00 11z0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00|27e5","Asia/Bangkok|BMT +07|-6G.4 -70|01|-218SG.4|15e6","Asia/Barnaul|LMT +06 +07 +08|-5z -60 -70 -80|0123232323232323232323212323232321212121212121212121212121212121212|-21S5z pCnz 23CL0 1db0 1cN0 1db0 1cN0 1db0 1dd0 1cO0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 2pB0 IM0 rX0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 p90 LE0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 8Hz0 3rd0|","Asia/Beirut|EET EEST|-20 -30|010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010|-21aq0 1on0 1410 1db0 19B0 1in0 1ip0 WL0 1lQp0 11b0 1oN0 11b0 1oN0 11b0 1pd0 11b0 1oN0 11b0 q6N0 En0 1oN0 11b0 1oN0 11b0 1oN0 11b0 1pd0 11b0 1oN0 11b0 1op0 11b0 dA10 17b0 1iN0 17b0 1iN0 17b0 1iN0 17b0 1vB0 SL0 1mp0 13z0 1iN0 17b0 1iN0 17b0 1jd0 12n0 1a10 1cL0 1cN0 1cL0 1cN0 1cL0 1fB0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1qL0 WN0 1qL0 WN0 1qL0 11B0 1nX0 11B0 1nX0 11B0 1qL0 WN0 1qL0 WN0 1qL0 WN0 1qL0 11B0 1nX0 11B0 1nX0 11B0 1qL0 WN0 1qL0 WN0 1qL0 11B0 1nX0 11B0 1nX0 11B0 1nX0 11B0 1qL0 WN0 1qL0 WN0 1qL0 11B0 1nX0 11B0 1nX0 11B0 1qL0 WN0 1qL0 WN0 1qL0 11B0 1nX0 11B0 1nX0 11B0 1nX0 11B0 1qL0 WN0 1qL0 WN0 1qL0 11B0 1nX0 11B0 1nX0 11B0 1qL0 WN0 1qL0 WN0 1qL0 WN0 1qL0 11B0 1nX0 11B0 1nX0|22e5","Asia/Bishkek|LMT +05 +06 +07|-4W.o -50 -60 -70|012323232323232323232321212121212121212121212121212|-1Pc4W.o eUnW.o 23CL0 1db0 1cN0 1db0 1cN0 1db0 1dd0 1cO0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 2e00 1tX0 17b0 1ip0 17b0 1ip0 17b0 1ip0 17b0 1ip0 19X0 1cPu 1nX0 11B0 1nX0 11B0 1qL0 WN0 1qL0 WN0 1qL0 11B0 1nX0 11B0 1nX0 11B0 1qL0 WN0|87e4","Asia/Brunei|LMT +0730 +08|-7D.E -7u -80|012|-1KITD.E gDc9.E|42e4","Asia/Kolkata|MMT IST +0630|-5l.a -5u -6u|012121|-2zOtl.a 1r2LP.a 1un0 HB0 7zX0|15e6","Asia/Chita|LMT +08 +09 +10|-7x.Q -80 -90 -a0|012323232323232323232321232323232323232323232323232323232323232312|-21Q7x.Q pAnx.Q 23CL0 1db0 1cN0 1db0 1cN0 1db0 1dd0 1cO0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 2pB0 IM0 rX0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 8Hz0 3re0|33e4","Asia/Choibalsan|LMT +07 +08 +10 +09|-7C -70 -80 -a0 -90|0123434343434343434343434343434343434343434343424242|-2APHC 2UkoC cKn0 1da0 1dd0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1fB0 1cL0 1cN0 1cL0 1cN0 1cL0 6hD0 11z0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 3Db0 h1f0 1cJ0 1cP0 1cJ0|38e3","Asia/Shanghai|CST CDT|-80 -90|01010101010101010101010101010|-23uw0 18n0 OjB0 Rz0 11d0 1wL0 A10 8HX0 1G10 Tz0 1ip0 1jX0 1cN0 11b0 1oN0 aL0 1tU30 Rb0 1o10 11z0 1qN0 WL0 1qN0 11z0 1o10 11z0 1o10 11z0|23e6","Asia/Colombo|MMT +0530 +06 +0630|-5j.w -5u -60 -6u|01231321|-2zOtj.w 1rFbN.w 1zzu 7Apu 23dz0 11zu n3cu|22e5","Asia/Dhaka|HMT +0630 +0530 +06 +07|-5R.k -6u -5u -60 -70|0121343|-18LFR.k 1unn.k HB0 m6n0 2kxbu 1i00|16e6","Asia/Damascus|LMT EET EEST|-2p.c -20 -30|01212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121|-21Jep.c Hep.c 17b0 1ip0 17b0 1ip0 17b0 1ip0 19X0 1xRB0 11X0 1oN0 10L0 1pB0 11b0 1oN0 10L0 1mp0 13X0 1oN0 11b0 1pd0 11b0 1oN0 11b0 1oN0 11b0 1oN0 11b0 1pd0 11b0 1oN0 11b0 1oN0 11b0 1oN0 11b0 1pd0 11b0 1oN0 Nb0 1AN0 Nb0 bcp0 19X0 1gp0 19X0 3ld0 1xX0 Vd0 1Bz0 Sp0 1vX0 10p0 1dz0 1cN0 1cL0 1db0 1db0 1g10 1an0 1ap0 1db0 1fd0 1db0 1cN0 1db0 1dd0 1db0 1cp0 1dz0 1c10 1dX0 1cN0 1db0 1dd0 1db0 1cN0 1db0 1cN0 1db0 1cN0 1db0 1dd0 1db0 1cN0 1db0 1cN0 19z0 1fB0 1qL0 11B0 1on0 Wp0 1qL0 11B0 1nX0 11B0 1nX0 11B0 1nX0 11B0 1nX0 11B0 1qL0 WN0 1qL0 WN0 1qL0 11B0 1nX0 11B0 1nX0 11B0 1nX0 11B0 1qL0 WN0 1qL0 WN0 1qL0 11B0 1nX0 11B0 1nX0 11B0 1qL0 WN0 1qL0 WN0 1qL0 11B0 1nX0 11B0 1nX0 11B0 1nX0 11B0 1qL0 WN0 1qL0 WN0 1qL0 11B0 1nX0 11B0 1nX0 11B0 1qL0 WN0 1qL0|26e5","Asia/Dili|LMT +08 +09|-8m.k -80 -90|01212|-2le8m.k 1dnXm.k 1nfA0 Xld0|19e4","Asia/Dubai|LMT +04|-3F.c -40|01|-21JfF.c|39e5","Asia/Dushanbe|LMT +05 +06 +07|-4z.c -50 -60 -70|012323232323232323232321|-1Pc4z.c eUnz.c 23CL0 1db0 1cN0 1db0 1cN0 1db0 1dd0 1cO0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 2hB0|76e4","Asia/Famagusta|LMT EET EEST +03|-2f.M -20 -30 -30|0121212121212121212121212121212121212121212121212121212121212121212121212121212121212312121212121212121212121212121212121212121|-1Vc2f.M 2a3cf.M 1cL0 1qp0 Xz0 19B0 19X0 1fB0 1db0 1cp0 1cL0 1fB0 19X0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1fB0 1cL0 1cN0 1cL0 1cN0 1o30 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 15U0 2Ks0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00|","Asia/Gaza|EET EEST IST IDT|-20 -30 -20 -30|010101010101010101010101010101010123232323232323232323232323232320101010101010101010101010101010101010101010101010101010101010101010101010101010101010|-1c2o0 MM0 iM0 4JA0 10o0 1pA0 10M0 1pA0 16o0 1jA0 16o0 1jA0 pBa0 Vz0 1oN0 11b0 1oO0 10N0 1pz0 10N0 1pb0 10N0 1pb0 10N0 1pb0 10N0 1pz0 10N0 1pb0 10N0 1pb0 11d0 1oL0 dW0 hfB0 Db0 1fB0 Rb0 bXB0 gM0 8Q00 IM0 1wo0 TX0 1HB0 IL0 1s10 10n0 1o10 WL0 1zd0 On0 1ld0 11z0 1o10 14n0 1o10 14n0 1nd0 12n0 1nd0 Xz0 1q10 12n0 M10 C00 17c0 1io0 17c0 1io0 17c0 1o00 1cL0 1fB0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 17c0 1io0 18N0 1bz0 19z0 1gp0 1610 1iL0 11z0 1o10 14o0 1lA1 SKX 1xd1 MKX 1AN0 1a00 1fA0 1cL0 1cN0 1nX0 1210 1nA0 1210 1qL0 WN0 1qL0 WN0 1qL0 11c0 1on0 11B0 1o00 11A0 1qo0 Xc0 1qo0 Xc0 1qo0 1200 1nA0 1200 1qo0 Xc0 1qo0 Xc0 1qo0 Xc0 1qo0 Xc0 1qo0 1200 1nA0 1200 1qo0 Xc0 1qo0 Xc0 1qo0 Xc0 1qo0 Xc0 1qo0 1200 1qo0 Xc0 1qo0|18e5","Asia/Hebron|EET EEST IST IDT|-20 -30 -20 -30|01010101010101010101010101010101012323232323232323232323232323232010101010101010101010101010101010101010101010101010101010101010101010101010101010101010|-1c2o0 MM0 iM0 4JA0 10o0 1pA0 10M0 1pA0 16o0 1jA0 16o0 1jA0 pBa0 Vz0 1oN0 11b0 1oO0 10N0 1pz0 10N0 1pb0 10N0 1pb0 10N0 1pb0 10N0 1pz0 10N0 1pb0 10N0 1pb0 11d0 1oL0 dW0 hfB0 Db0 1fB0 Rb0 bXB0 gM0 8Q00 IM0 1wo0 TX0 1HB0 IL0 1s10 10n0 1o10 WL0 1zd0 On0 1ld0 11z0 1o10 14n0 1o10 14n0 1nd0 12n0 1nd0 Xz0 1q10 12n0 M10 C00 17c0 1io0 17c0 1io0 17c0 1o00 1cL0 1fB0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 17c0 1io0 18N0 1bz0 19z0 1gp0 1610 1iL0 12L0 1mN0 14o0 1lc0 Tb0 1xd1 MKX bB0 cn0 1cN0 1a00 1fA0 1cL0 1cN0 1nX0 1210 1nA0 1210 1qL0 WN0 1qL0 WN0 1qL0 11c0 1on0 11B0 1o00 11A0 1qo0 Xc0 1qo0 Xc0 1qo0 1200 1nA0 1200 1qo0 Xc0 1qo0 Xc0 1qo0 Xc0 1qo0 Xc0 1qo0 1200 1nA0 1200 1qo0 Xc0 1qo0 Xc0 1qo0 Xc0 1qo0 Xc0 1qo0 1200 1qo0 Xc0 1qo0|25e4","Asia/Ho_Chi_Minh|LMT PLMT +07 +08 +09|-76.E -76.u -70 -80 -90|0123423232|-2yC76.E bK00.a 1h7b6.u 5lz0 18o0 3Oq0 k5b0 aW00 BAM0|90e5","Asia/Hong_Kong|LMT HKT HKST HKWT JST|-7A.G -80 -90 -8u -90|0123412121212121212121212121212121212121212121212121212121212121212121|-2CFH0 1taO0 Hc0 xUu 9tBu 11z0 1tDu Rc0 1wo0 11A0 1cM0 11A0 1o00 11A0 1o00 11A0 1o00 14o0 1o00 11A0 1nX0 U10 1tz0 U10 1wn0 Rd0 1wn0 U10 1tz0 U10 1tz0 U10 1tz0 U10 1wn0 Rd0 1wn0 Rd0 1wn0 U10 1tz0 U10 1tz0 17d0 1cL0 1cN0 1cL0 1cN0 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1cN0 1cL0 s10 1Vz0 1cN0 1cL0 1cN0 1cL0 6fd0 14n0|73e5","Asia/Hovd|LMT +06 +07 +08|-66.A -60 -70 -80|012323232323232323232323232323232323232323232323232|-2APG6.A 2Uko6.A cKn0 1db0 1dd0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1fB0 1cL0 1cN0 1cL0 1cN0 1cL0 6hD0 11z0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 kEp0 1cJ0 1cP0 1cJ0|81e3","Asia/Irkutsk|IMT +07 +08 +09|-6V.5 -70 -80 -90|01232323232323232323232123232323232323232323232323232323232323232|-21zGV.5 pjXV.5 23CL0 1db0 1cN0 1db0 1cN0 1db0 1dd0 1cO0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 2pB0 IM0 rX0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 8Hz0|60e4","Europe/Istanbul|IMT EET EEST +03 +04|-1U.U -20 -30 -30 -40|0121212121212121212121212121212121212121212121234312121212121212121212121212121212121212121212121212121212121212123|-2ogNU.U dzzU.U 11b0 8tB0 1on0 1410 1db0 19B0 1in0 3Rd0 Un0 1oN0 11b0 zSN0 CL0 mp0 1Vz0 1gN0 8yn0 1yp0 ML0 1kp0 17b0 1ip0 17b0 1fB0 19X0 1ip0 19X0 1ip0 17b0 qdB0 38L0 1jd0 Tz0 l6O0 11A0 WN0 1qL0 TB0 1tX0 U10 1tz0 11B0 1in0 17d0 z90 cne0 pb0 2Cp0 1800 14o0 1dc0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1a00 1fA0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WO0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 Xc0 1qo0 WM0 1qM0 11A0 1o00 1200 1nA0 11A0 1tA0 U00 15w0|13e6","Asia/Jakarta|BMT +0720 +0730 +09 +08 WIB|-77.c -7k -7u -90 -80 -70|01232425|-1Q0Tk luM0 mPzO 8vWu 6kpu 4PXu xhcu|31e6","Asia/Jayapura|LMT +09 +0930 WIT|-9m.M -90 -9u -90|0123|-1uu9m.M sMMm.M L4nu|26e4","Asia/Jerusalem|JMT IST IDT IDDT|-2k.E -20 -30 -40|01212121212121321212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121|-26Bek.E SyOk.E MM0 iM0 4JA0 10o0 1pA0 10M0 1pA0 16o0 1jA0 16o0 1jA0 3LA0 Eo0 oo0 1co0 1dA0 16o0 10M0 1jc0 1tA0 14o0 1cM0 1a00 11A0 1Nc0 Ao0 1Nc0 Ao0 1Ko0 LA0 1o00 WM0 EQK0 Db0 1fB0 Rb0 bXB0 gM0 8Q00 IM0 1wo0 TX0 1HB0 IL0 1s10 10n0 1o10 WL0 1zd0 On0 1ld0 11z0 1o10 14n0 1o10 14n0 1nd0 12n0 1nd0 Xz0 1q10 12n0 1hB0 1dX0 1ep0 1aL0 1eN0 17X0 1nf0 11z0 1tB0 19W0 1e10 17b0 1ep0 1gL0 18N0 1fz0 1eN0 17b0 1gq0 1gn0 19d0 1dz0 1c10 17X0 1hB0 1gn0 19d0 1dz0 1c10 17X0 1kp0 1dz0 1c10 1aL0 1eN0 1oL0 10N0 1oL0 10N0 1oL0 10N0 1rz0 W10 1rz0 W10 1rz0 10N0 1oL0 10N0 1oL0 10N0 1rz0 W10 1rz0 W10 1rz0 10N0 1oL0 10N0 1oL0 10N0 1oL0 10N0 1rz0 W10 1rz0 W10 1rz0 10N0 1oL0 10N0 1oL0 10N0 1rz0 W10 1rz0 W10 1rz0 W10 1rz0 10N0 1oL0 10N0 1oL0|81e4","Asia/Kabul|+04 +0430|-40 -4u|01|-10Qs0|46e5","Asia/Kamchatka|LMT +11 +12 +13|-ay.A -b0 -c0 -d0|012323232323232323232321232323232323232323232323232323232323212|-1SLKy.A ivXy.A 23CL0 1db0 1cN0 1db0 1cN0 1db0 1dd0 1cO0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 2pB0 IM0 rX0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 2sp0 WM0|18e4","Asia/Karachi|LMT +0530 +0630 +05 PKT PKST|-4s.c -5u -6u -50 -50 -60|012134545454|-2xoss.c 1qOKW.c 7zX0 eup0 LqMu 1fy00 1cL0 dK10 11b0 1610 1jX0|24e6","Asia/Urumqi|LMT +06|-5O.k -60|01|-1GgtO.k|32e5","Asia/Kathmandu|LMT +0530 +0545|-5F.g -5u -5J|012|-21JhF.g 2EGMb.g|12e5","Asia/Khandyga|LMT +08 +09 +10 +11|-92.d -80 -90 -a0 -b0|0123232323232323232323212323232323232323232323232343434343434343432|-21Q92.d pAp2.d 23CL0 1db0 1cN0 1db0 1cN0 1db0 1dd0 1cO0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 2pB0 IM0 rX0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 qK0 yN0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 17V0 7zD0|66e2","Asia/Krasnoyarsk|LMT +06 +07 +08|-6b.q -60 -70 -80|01232323232323232323232123232323232323232323232323232323232323232|-21Hib.q prAb.q 23CL0 1db0 1cN0 1db0 1cN0 1db0 1dd0 1cO0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 2pB0 IM0 rX0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 8Hz0|10e5","Asia/Kuala_Lumpur|SMT +07 +0720 +0730 +09 +08|-6T.p -70 -7k -7u -90 -80|0123435|-2Bg6T.p 17anT.p l5XE 17bO 8Fyu 1so1u|71e5","Asia/Kuching|LMT +0730 +08 +0820 +09|-7l.k -7u -80 -8k -90|0123232323232323242|-1KITl.k gDbP.k 6ynu AnE 1O0k AnE 1NAk AnE 1NAk AnE 1NAk AnE 1O0k AnE 1NAk AnE pAk 8Fz0|13e4","Asia/Macau|LMT CST +09 +10 CDT|-7y.a -80 -90 -a0 -90|012323214141414141414141414141414141414141414141414141414141414141414141|-2CFHy.a 1uqKy.a PX0 1kn0 15B0 11b0 4Qq0 1oM0 11c0 1ko0 1u00 11A0 1cM0 11c0 1o00 11A0 1o00 11A0 1oo0 1400 1o00 11A0 1o00 U00 1tA0 U00 1wo0 Rc0 1wru U10 1tz0 U10 1tz0 U10 1tz0 U10 1wn0 Rd0 1wn0 Rd0 1wn0 U10 1tz0 U10 1tz0 17d0 1cK0 1cO0 1cK0 1cO0 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1cN0 1cL0 s10 1Vz0 1cN0 1cL0 1cN0 1cL0 6fd0 14n0|57e4","Asia/Magadan|LMT +10 +11 +12|-a3.c -a0 -b0 -c0|012323232323232323232321232323232323232323232323232323232323232312|-1Pca3.c eUo3.c 23CL0 1db0 1cN0 1db0 1cN0 1db0 1dd0 1cO0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 2pB0 IM0 rX0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 8Hz0 3Cq0|95e3","Asia/Makassar|LMT MMT +08 +09 WITA|-7V.A -7V.A -80 -90 -80|01234|-21JjV.A vfc0 myLV.A 8ML0|15e5","Asia/Manila|PST PDT JST|-80 -90 -90|010201010|-1kJI0 AL0 cK10 65X0 mXB0 vX0 VK10 1db0|24e6","Asia/Nicosia|LMT EET EEST|-2d.s -20 -30|01212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121|-1Vc2d.s 2a3cd.s 1cL0 1qp0 Xz0 19B0 19X0 1fB0 1db0 1cp0 1cL0 1fB0 19X0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1fB0 1cL0 1cN0 1cL0 1cN0 1o30 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00|32e4","Asia/Novokuznetsk|LMT +06 +07 +08|-5M.M -60 -70 -80|012323232323232323232321232323232323232323232323232323232323212|-1PctM.M eULM.M 23CL0 1db0 1cN0 1db0 1cN0 1db0 1dd0 1cO0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 2pB0 IM0 rX0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 2sp0 WM0|55e4","Asia/Novosibirsk|LMT +06 +07 +08|-5v.E -60 -70 -80|0123232323232323232323212323212121212121212121212121212121212121212|-21Qnv.E pAFv.E 23CL0 1db0 1cN0 1db0 1cN0 1db0 1dd0 1cO0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 2pB0 IM0 rX0 1cM0 1cM0 ml0 Os0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 8Hz0 4eN0|15e5","Asia/Omsk|LMT +05 +06 +07|-4R.u -50 -60 -70|01232323232323232323232123232323232323232323232323232323232323232|-224sR.u pMLR.u 23CL0 1db0 1cN0 1db0 1cN0 1db0 1dd0 1cO0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 2pB0 IM0 rX0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 8Hz0|12e5","Asia/Oral|LMT +03 +05 +06 +04|-3p.o -30 -50 -60 -40|01232323232323232424242424242424242424242424242|-1Pc3p.o eUop.o 23CK0 3Db0 1cN0 1db0 1dd0 1cO0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 2pB0 1cM0 1fA0 1cM0 1cM0 IM0 1EM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0|27e4","Asia/Pontianak|LMT PMT +0730 +09 +08 WITA WIB|-7h.k -7h.k -7u -90 -80 -80 -70|012324256|-2ua7h.k XE00 munL.k 8Rau 6kpu 4PXu xhcu Wqnu|23e4","Asia/Pyongyang|LMT KST JST KST|-8n -8u -90 -90|012313|-2um8n 97XR 1lTzu 2Onc0 6BA0|29e5","Asia/Qostanay|LMT +04 +05 +06|-4e.s -40 -50 -60|012323232323232323232123232323232323232323232323|-1Pc4e.s eUoe.s 23CL0 3Db0 1cN0 1db0 1dd0 1cO0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 2pB0 IM0 rX0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0|","Asia/Qyzylorda|LMT +04 +05 +06|-4l.Q -40 -50 -60|01232323232323232323232323232323232323232323232|-1Pc4l.Q eUol.Q 23CL0 3Db0 1cN0 1db0 1dd0 1cO0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 3ao0 1EM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 zQl0|73e4","Asia/Rangoon|RMT +0630 +09|-6o.L -6u -90|0121|-21Jio.L SmnS.L 7j9u|48e5","Asia/Sakhalin|LMT +09 +11 +12 +10|-9u.M -90 -b0 -c0 -a0|01232323232323232323232423232323232424242424242424242424242424242|-2AGVu.M 1BoMu.M 1qFa0 1db0 1cN0 1db0 1cN0 1db0 1dd0 1cO0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 2pB0 IM0 rX0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 2pB0 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 8Hz0 3rd0|58e4","Asia/Samarkand|LMT +04 +05 +06|-4r.R -40 -50 -60|01232323232323232323232|-1Pc4r.R eUor.R 23CL0 3Db0 1cN0 1db0 1dd0 1cO0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0|36e4","Asia/Seoul|LMT KST JST KST KDT KDT|-8r.Q -8u -90 -90 -a0 -9u|012343434343151515151515134343|-2um8r.Q 97XV.Q 1m1zu 6CM0 Fz0 1kN0 14n0 1kN0 14L0 1zd0 On0 69B0 2I0u OL0 1FB0 Rb0 1qN0 TX0 1tB0 TX0 1tB0 TX0 1tB0 TX0 2ap0 12FBu 11A0 1o00 11A0|23e6","Asia/Srednekolymsk|LMT +10 +11 +12|-ae.Q -a0 -b0 -c0|01232323232323232323232123232323232323232323232323232323232323232|-1Pcae.Q eUoe.Q 23CL0 1db0 1cN0 1db0 1cN0 1db0 1dd0 1cO0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 2pB0 IM0 rX0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 8Hz0|35e2","Asia/Taipei|CST JST CDT|-80 -90 -90|01020202020202020202020202020202020202020|-1iw80 joM0 1yo0 Tz0 1ip0 1jX0 1cN0 11b0 1oN0 11b0 1oN0 11b0 1oN0 11b0 10N0 1BX0 10p0 1pz0 10p0 1pz0 10p0 1db0 1dd0 1db0 1cN0 1db0 1cN0 1db0 1cN0 1db0 1BB0 ML0 1Bd0 ML0 uq10 1db0 1cN0 1db0 97B0 AL0|74e5","Asia/Tashkent|LMT +05 +06 +07|-4B.b -50 -60 -70|012323232323232323232321|-1Pc4B.b eUnB.b 23CL0 1db0 1cN0 1db0 1cN0 1db0 1dd0 1cO0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 2pB0|23e5","Asia/Tbilisi|TBMT +03 +04 +05|-2X.b -30 -40 -50|0123232323232323232323212121232323232323232323212|-1Pc2X.b 1jUnX.b WCL0 1db0 1cN0 1db0 1cN0 1db0 1dd0 1cO0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 2pB0 1cK0 1cL0 1cN0 1cL0 1cN0 2pz0 1cL0 1fB0 3Nz0 11B0 1nX0 11B0 1qL0 WN0 1qL0 WN0 1qL0 11B0 1nX0 11B0 1nX0 11B0 An0 Os0 WM0|11e5","Asia/Tehran|LMT TMT +0330 +04 +05 +0430|-3p.I -3p.I -3u -40 -50 -4u|01234325252525252525252525252525252525252525252525252525252525252525252525252525252525252525252525252|-2btDp.I 1d3c0 1huLT.I TXu 1pz0 sN0 vAu 1cL0 1dB0 1en0 pNB0 UL0 1cN0 1dz0 1cp0 1dz0 1cp0 1dz0 1cp0 1dz0 1cp0 1dz0 1cN0 1dz0 1cp0 1dz0 1cp0 1dz0 1cp0 1dz0 1cN0 1dz0 1cp0 1dz0 1cp0 1dz0 1cp0 1dz0 1cN0 1dz0 64p0 1dz0 1cN0 1dz0 1cp0 1dz0 1cp0 1dz0 1cp0 1dz0 1cN0 1dz0 1cp0 1dz0 1cp0 1dz0 1cp0 1dz0 1cN0 1dz0 1cp0 1dz0 1cp0 1dz0 1cp0 1dz0 1cN0 1dz0 1cp0 1dz0 1cp0 1dz0 1cp0 1dz0 1cN0 1dz0 1cp0 1dz0 1cp0 1dz0 1cp0 1dz0 1cp0 1dz0 1cN0 1dz0 1cp0 1dz0 1cp0 1dz0 1cp0 1dz0 1cN0 1dz0 1cp0 1dz0 1cp0 1dz0 1cp0 1dz0|14e6","Asia/Thimphu|LMT +0530 +06|-5W.A -5u -60|012|-Su5W.A 1BGMs.A|79e3","Asia/Tokyo|JST JDT|-90 -a0|010101010|-QJJ0 Rc0 1lc0 14o0 1zc0 Oo0 1zc0 Oo0|38e6","Asia/Tomsk|LMT +06 +07 +08|-5D.P -60 -70 -80|0123232323232323232323212323232323232323232323212121212121212121212|-21NhD.P pxzD.P 23CL0 1db0 1cN0 1db0 1cN0 1db0 1dd0 1cO0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 2pB0 IM0 rX0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 co0 1bB0 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 8Hz0 3Qp0|10e5","Asia/Ulaanbaatar|LMT +07 +08 +09|-77.w -70 -80 -90|012323232323232323232323232323232323232323232323232|-2APH7.w 2Uko7.w cKn0 1db0 1dd0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1fB0 1cL0 1cN0 1cL0 1cN0 1cL0 6hD0 11z0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 kEp0 1cJ0 1cP0 1cJ0|12e5","Asia/Ust-Nera|LMT +08 +09 +12 +11 +10|-9w.S -80 -90 -c0 -b0 -a0|012343434343434343434345434343434343434343434343434343434343434345|-21Q9w.S pApw.S 23CL0 1d90 1cN0 1db0 1cN0 1db0 1dd0 1cO0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 2pB0 IM0 rX0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 17V0 7zD0|65e2","Asia/Vladivostok|LMT +09 +10 +11|-8L.v -90 -a0 -b0|01232323232323232323232123232323232323232323232323232323232323232|-1SJIL.v itXL.v 23CL0 1db0 1cN0 1db0 1cN0 1db0 1dd0 1cO0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 2pB0 IM0 rX0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 8Hz0|60e4","Asia/Yakutsk|LMT +08 +09 +10|-8C.W -80 -90 -a0|01232323232323232323232123232323232323232323232323232323232323232|-21Q8C.W pAoC.W 23CL0 1db0 1cN0 1db0 1cN0 1db0 1dd0 1cO0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 2pB0 IM0 rX0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 8Hz0|28e4","Asia/Yekaterinburg|LMT PMT +04 +05 +06|-42.x -3J.5 -40 -50 -60|012343434343434343434343234343434343434343434343434343434343434343|-2ag42.x 7mQh.s qBvJ.5 23CL0 1db0 1cN0 1db0 1cN0 1db0 1dd0 1cO0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 2pB0 IM0 rX0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 8Hz0|14e5","Asia/Yerevan|LMT +03 +04 +05|-2W -30 -40 -50|0123232323232323232323212121212323232323232323232323232323232|-1Pc2W 1jUnW WCL0 1db0 1cN0 1db0 1cN0 1db0 1dd0 1cO0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 2pB0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 4RX0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0|13e5","Atlantic/Azores|HMT -02 -01 +00 WET|1S.w 20 10 0 0|0121212121212121212121212121212121212121212123212321232123212121212121212121212121212121212121212121232323232323232323232323232323234323232323232323232323232323232323232323232323232323232323232323232323232323232323232323232|-2ldW0 aPX0 Sp0 LX0 1vc0 Tc0 1uM0 SM0 1vc0 Tc0 1vc0 SM0 1vc0 6600 1co0 3E00 17c0 1fA0 1a00 1io0 1a00 1io0 17c0 3I00 17c0 1cM0 1cM0 3Fc0 1cM0 1a00 1fA0 1io0 17c0 1cM0 1cM0 1a00 1fA0 1io0 1qM0 Dc0 1tA0 1cM0 1dc0 1400 gL0 IM0 s10 U00 dX0 Rc0 pd0 Rc0 gL0 Oo0 pd0 Rc0 gL0 Oo0 pd0 14o0 1cM0 1cP0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 qIl0 1cM0 1fA0 1cM0 1cM0 1cN0 1cL0 1cN0 1cM0 1cM0 1cM0 1cM0 1cN0 1cL0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cL0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00|25e4","Atlantic/Bermuda|BMT BST AST ADT|4j.i 3j.i 40 30|010102323232323232323232323232323232323232323232323232323232323232323232323232323232323232323232323232323232323232323232323232323232323232323232323232323232|-28p7E.G 1bb0 1i10 11X0 ru30 thbE.G 1PX0 11B0 1tz0 Rd0 1zb0 Op0 1zb0 3I10 Lz0 1EN0 FX0 1HB0 FX0 1Kp0 Db0 1Kp0 Db0 1Kp0 FX0 93d0 11z0 GAp0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0|65e3","Atlantic/Canary|LMT -01 WET WEST|11.A 10 0 -10|01232323232323232323232323232323232323232323232323232323232323232323232323232323232323232323232323232323232323232323232|-1UtaW.o XPAW.o 1lAK0 1a10 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00|54e4","Atlantic/Cape_Verde|LMT -02 -01|1y.4 20 10|01212|-2ldW0 1eEo0 7zX0 1djf0|50e4","Atlantic/Faroe|LMT WET WEST|r.4 0 -10|01212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121|-2uSnw.U 2Wgow.U 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00|49e3","Atlantic/Madeira|FMT -01 +00 +01 WET WEST|17.A 10 0 -10 0 -10|0121212121212121212121212121212121212121212123212321232123212121212121212121212121212121212121212121454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454|-2ldX0 aPX0 Sp0 LX0 1vc0 Tc0 1uM0 SM0 1vc0 Tc0 1vc0 SM0 1vc0 6600 1co0 3E00 17c0 1fA0 1a00 1io0 1a00 1io0 17c0 3I00 17c0 1cM0 1cM0 3Fc0 1cM0 1a00 1fA0 1io0 17c0 1cM0 1cM0 1a00 1fA0 1io0 1qM0 Dc0 1tA0 1cM0 1dc0 1400 gL0 IM0 s10 U00 dX0 Rc0 pd0 Rc0 gL0 Oo0 pd0 Rc0 gL0 Oo0 pd0 14o0 1cM0 1cP0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 qIl0 1cM0 1fA0 1cM0 1cM0 1cN0 1cL0 1cN0 1cM0 1cM0 1cM0 1cM0 1cN0 1cL0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00|27e4","Atlantic/Reykjavik|LMT -01 +00 GMT|1s 10 0 0|012121212121212121212121212121212121212121212121212121212121212121213|-2uWmw mfaw 1Bd0 ML0 1LB0 Cn0 1LB0 3fX0 C10 HrX0 1cO0 LB0 1EL0 LA0 1C00 Oo0 1wo0 Rc0 1wo0 Rc0 1wo0 Rc0 1zc0 Oo0 1zc0 14o0 1lc0 14o0 1lc0 14o0 1o00 11A0 1lc0 14o0 1o00 14o0 1lc0 14o0 1lc0 14o0 1lc0 14o0 1lc0 14o0 1o00 14o0 1lc0 14o0 1lc0 14o0 1lc0 14o0 1lc0 14o0 1lc0 14o0 1o00 14o0 1lc0 14o0 1lc0 14o0 1lc0 14o0 1lc0 14o0 1o00 14o0|12e4","Atlantic/South_Georgia|-02|20|0||30","Atlantic/Stanley|SMT -04 -03 -02|3P.o 40 30 20|012121212121212323212121212121212121212121212121212121212121212121212|-2kJw8.A 12bA8.A 19X0 1fB0 19X0 1ip0 19X0 1fB0 19X0 1fB0 19X0 1fB0 Cn0 1Cc10 WL0 1qL0 U10 1tz0 2mN0 WN0 1qL0 WN0 1qL0 WN0 1qL0 WN0 1tz0 U10 1tz0 WN0 1qL0 WN0 1qL0 WN0 1qL0 WN0 1qL0 WN0 1tz0 WN0 1qL0 WN0 1qL0 WN0 1qL0 WN0 1qL0 WN0 1qN0 U10 1wn0 Rd0 1wn0 U10 1tz0 U10 1tz0 U10 1tz0 U10 1tz0 U10 1wn0 U10 1tz0 U10 1tz0 U10|21e2","Australia/Sydney|AEST AEDT|-a0 -b0|0101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101|-293k0 xc0 10jc0 yM0 1cM0 1cM0 1fA0 1a00 17c00 LA0 1C00 Oo0 1zc0 Oo0 1zc0 Oo0 1zc0 Rc0 1zc0 Oo0 1zc0 Oo0 1zc0 Oo0 1zc0 Oo0 1zc0 Oo0 1zc0 14o0 1o00 Oo0 1zc0 Oo0 1zc0 Oo0 1zc0 U00 1qM0 WM0 1tA0 WM0 1tA0 U00 1tA0 Oo0 1zc0 Oo0 1zc0 Oo0 1zc0 Rc0 1zc0 Oo0 1zc0 Oo0 1zc0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 11A0 1o00 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 11A0 1o00 WM0 1qM0 14o0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0|40e5","Australia/Adelaide|ACST ACDT|-9u -au|0101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101|-293ju xc0 10jc0 yM0 1cM0 1cM0 1fA0 1a00 17c00 LA0 1C00 Oo0 1zc0 Oo0 1zc0 Oo0 1zc0 Rc0 1zc0 Oo0 1zc0 Oo0 1zc0 Oo0 1zc0 Oo0 1zc0 Oo0 1zc0 Rc0 1zc0 Oo0 1zc0 Oo0 1zc0 Oo0 1zc0 U00 1qM0 WM0 1tA0 WM0 1tA0 U00 1tA0 U00 1tA0 Oo0 1zc0 WM0 1qM0 Rc0 1zc0 U00 1tA0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 11A0 1o00 WM0 1qM0 14o0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0|11e5","Australia/Brisbane|AEST AEDT|-a0 -b0|01010101010101010|-293k0 xc0 10jc0 yM0 1cM0 1cM0 1fA0 1a00 17c00 LA0 H1A0 Oo0 1zc0 Oo0 1zc0 Oo0|20e5","Australia/Broken_Hill|ACST ACDT|-9u -au|0101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101|-293ju xc0 10jc0 yM0 1cM0 1cM0 1fA0 1a00 17c00 LA0 1C00 Oo0 1zc0 Oo0 1zc0 Oo0 1zc0 Rc0 1zc0 Oo0 1zc0 Oo0 1zc0 Oo0 1zc0 Oo0 1zc0 Oo0 1zc0 14o0 1o00 Oo0 1zc0 Oo0 1zc0 Oo0 1zc0 U00 1qM0 WM0 1tA0 WM0 1tA0 U00 1tA0 Oo0 1zc0 Oo0 1zc0 Oo0 1zc0 Rc0 1zc0 Oo0 1zc0 Oo0 1zc0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 11A0 1o00 WM0 1qM0 14o0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0|18e3","Australia/Hobart|AEST AEDT|-a0 -b0|0101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101|-29E80 1a00 1qM0 Oo0 1zc0 Oo0 TAo0 yM0 1cM0 1cM0 1fA0 1a00 VfA0 1cM0 1o00 Rc0 1wo0 Rc0 1wo0 U00 1wo0 LA0 1C00 Oo0 1zc0 Oo0 1zc0 Oo0 1zc0 Rc0 1zc0 Oo0 1zc0 Oo0 1zc0 Oo0 1zc0 Oo0 1zc0 Oo0 1zc0 11A0 1qM0 WM0 1qM0 Oo0 1zc0 Oo0 1zc0 Oo0 1wo0 WM0 1tA0 WM0 1tA0 U00 1tA0 U00 1tA0 11A0 1fA0 1a00 1fA0 1a00 1fA0 1a00 1fA0 1a00 1fA0 1cM0 1fA0 1a00 1fA0 1a00 1fA0 1a00 1fA0 1a00 11A0 1o00 1io0 1a00 1fA0 1a00 1fA0 1a00 1fA0 1a00 1fA0 1cM0 1cM0 1a00 1io0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0|21e4","Australia/Darwin|ACST ACDT|-9u -au|010101010|-293ju xc0 10jc0 yM0 1cM0 1cM0 1fA0 1a00|12e4","Australia/Eucla|+0845 +0945|-8J -9J|0101010101010101010|-293iJ xc0 10jc0 yM0 1cM0 1cM0 1gSo0 Oo0 l5A0 Oo0 iJA0 G00 zU00 IM0 1qM0 11A0 1o00 11A0|368","Australia/Lord_Howe|AEST +1030 +1130 +11|-a0 -au -bu -b0|0121212121313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313|raC0 1zdu Rb0 1zd0 On0 1zd0 On0 1zd0 On0 1zd0 TXu 1qMu WLu 1tAu WLu 1tAu TXu 1tAu Onu 1zcu Onu 1zcu Onu 1zcu Rbu 1zcu Onu 1zcu Onu 1zcu 11zu 1o0u 11zu 1o0u 11zu 1o0u 11zu 1qMu WLu 11Au 1nXu 1qMu 11zu 1o0u 11zu 1o0u 11zu 1qMu WLu 1qMu 11zu 1o0u WLu 1qMu 14nu 1cMu 1cLu 1cMu 1cLu 1cMu 1cLu 1cMu 1cLu 1fAu 1cLu 1cMu 1cLu 1cMu 1cLu 1cMu 1cLu 1cMu 1cLu 1cMu 1cLu 1fAu 1cLu 1cMu 1cLu 1cMu 1cLu 1cMu 1cLu 1cMu 1cLu 1cMu 1fzu 1cMu 1cLu 1cMu 1cLu 1cMu 1cLu 1cMu 1cLu 1cMu 1cLu 1fAu 1cLu 1cMu 1cLu 1cMu 1cLu 1cMu 1cLu 1cMu 1cLu 1cMu 1cLu 1fAu 1cLu 1cMu 1cLu 1cMu|347","Australia/Lindeman|AEST AEDT|-a0 -b0|010101010101010101010|-293k0 xc0 10jc0 yM0 1cM0 1cM0 1fA0 1a00 17c00 LA0 H1A0 Oo0 1zc0 Oo0 1zc0 Oo0 1zc0 Rc0 1zc0 Oo0|10","Australia/Melbourne|AEST AEDT|-a0 -b0|0101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101|-293k0 xc0 10jc0 yM0 1cM0 1cM0 1fA0 1a00 17c00 LA0 1C00 Oo0 1zc0 Oo0 1zc0 Oo0 1zc0 Rc0 1zc0 Oo0 1zc0 Oo0 1zc0 Oo0 1zc0 Oo0 1zc0 Oo0 1zc0 Rc0 1zc0 Oo0 1zc0 Oo0 1zc0 Oo0 1zc0 U00 1qM0 WM0 1qM0 11A0 1tA0 U00 1tA0 U00 1tA0 Oo0 1zc0 Oo0 1zc0 Rc0 1zc0 Oo0 1zc0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 11A0 1o00 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 11A0 1o00 WM0 1qM0 14o0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0|39e5","Australia/Perth|AWST AWDT|-80 -90|0101010101010101010|-293i0 xc0 10jc0 yM0 1cM0 1cM0 1gSo0 Oo0 l5A0 Oo0 iJA0 G00 zU00 IM0 1qM0 11A0 1o00 11A0|18e5","CET|CET CEST|-10 -20|01010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010|-2aFe0 11d0 1iO0 11A0 1o00 11A0 Qrc0 6i00 WM0 1fA0 1cM0 1cM0 1cM0 16M0 1gMM0 1a00 1fA0 1cM0 1cM0 1cM0 1fA0 1a00 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00|","Pacific/Easter|EMT -07 -06 -05|7h.s 70 60 50|012121212121212121212121212123232323232323232323232323232323232323232323232323232323232323232323232323232323232323232323232323232323232323|-1uSgG.w 1s4IG.w WL0 1zd0 On0 1ip0 11z0 1o10 11z0 1qN0 WL0 1ld0 14n0 1qN0 WL0 1qN0 11z0 1o10 11z0 1o10 11z0 1qN0 WL0 1qN0 WL0 1qN0 11z0 1o10 2pA0 11z0 1o10 11z0 1qN0 WL0 1qN0 WL0 1qN0 1cL0 1cN0 11z0 1o10 11z0 1qN0 WL0 1fB0 19X0 1qN0 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1qN0 WL0 1qN0 17b0 1ip0 11z0 1ip0 1fz0 1fB0 11z0 1qN0 WL0 1qN0 WL0 1qN0 WL0 1qN0 11z0 1o10 11z0 1o10 11z0 1qN0 WL0 1qN0 17b0 1ip0 11z0 1o10 19X0 1fB0 1nX0 G10 1EL0 Op0 1zb0 Rd0 1wn0 Rd0 46n0 Ap0 1Nb0 Ap0 1Nb0 Ap0 1zb0 11B0 1nX0 11B0 1nX0 11B0 1nX0 11B0 1nX0 11B0 1qL0 11B0 1nX0 11B0 1nX0 11B0 1nX0 11B0 1nX0 11B0 1qL0 WN0 1qL0 11B0 1nX0 11B0 1nX0 11B0 1nX0 11B0 1nX0 11B0 1qL0 WN0 1qL0 11B0 1nX0 11B0|30e2","CST6CDT|CST CDT CWT CPT|60 50 50 50|010102301010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010|-261s0 1nX0 11B0 1nX0 SgN0 8x30 iw0 QwN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1cN0 1cL0 1cN0 1cL0 s10 1Vz0 LB0 1BX0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0|","EET|EET EEST|-20 -30|010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010|hDB0 1a00 1fA0 1cM0 1cM0 1cM0 1fA0 1a00 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00|","Europe/Dublin|DMT IST GMT BST IST|p.l -y.D 0 -10 -10|01232323232324242424242424242424242424242424242424242424242424242424242424242424242424242424242424242424242424242424242424242424242424242424242424242424242424242424242424242424242424242424242424242424242424242424242424242424242|-2ax9y.D Rc0 1fzy.D 14M0 1fc0 1g00 1co0 1dc0 1co0 1oo0 1400 1dc0 19A0 1io0 1io0 WM0 1o00 14o0 1o00 17c0 1io0 17c0 1fA0 1a00 1lc0 17c0 1io0 17c0 1fA0 1a00 1io0 17c0 1io0 17c0 1fA0 1cM0 1io0 17c0 1fA0 1a00 1io0 17c0 1io0 17c0 1fA0 1a00 1io0 1qM0 Dc0 g600 14o0 1wo0 17c0 1io0 11A0 1o00 17c0 1fA0 1a00 1fA0 1cM0 1fA0 1a00 17c0 1fA0 1a00 1io0 17c0 1lc0 17c0 1fA0 1a00 1io0 17c0 1io0 17c0 1fA0 1a00 1a00 1qM0 WM0 1qM0 11A0 1o00 WM0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1tA0 IM0 90o0 U00 1tA0 U00 1tA0 U00 1tA0 U00 1tA0 WM0 1qM0 WM0 1qM0 WM0 1tA0 U00 1tA0 U00 1tA0 11z0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1o00 14o0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00|12e5","EST|EST|50|0||","EST5EDT|EST EDT EWT EPT|50 40 40 40|010102301010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010|-261t0 1nX0 11B0 1nX0 SgN0 8x40 iv0 QwN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1cN0 1cL0 1cN0 1cL0 s10 1Vz0 LB0 1BX0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0|","Etc/GMT-0|GMT|0|0||","Etc/GMT-1|+01|-10|0||","Etc/GMT-11|+11|-b0|0||","Pacific/Tarawa|+12|-c0|0||29e3","Etc/GMT-13|+13|-d0|0||","Etc/GMT-14|+14|-e0|0||","Etc/GMT-2|+02|-20|0||","Etc/GMT-3|+03|-30|0||","Etc/GMT-4|+04|-40|0||","Etc/GMT-5|+05|-50|0||","Etc/GMT-6|+06|-60|0||","Indian/Christmas|+07|-70|0||21e2","Etc/GMT-8|+08|-80|0||","Pacific/Palau|+09|-90|0||21e3","Etc/GMT+1|-01|10|0||","Etc/GMT+10|-10|a0|0||","Etc/GMT+11|-11|b0|0||","Etc/GMT+12|-12|c0|0||","Etc/GMT+3|-03|30|0||","Etc/GMT+4|-04|40|0||","Etc/GMT+5|-05|50|0||","Etc/GMT+6|-06|60|0||","Etc/GMT+7|-07|70|0||","Etc/GMT+8|-08|80|0||","Etc/GMT+9|-09|90|0||","Etc/UTC|UTC|0|0||","Europe/Amsterdam|AMT NST +0120 +0020 CEST CET|-j.w -1j.w -1k -k -20 -10|010101010101010101010101010101010101010101012323234545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545|-2aFcj.w 11b0 1iP0 11A0 1io0 1cM0 1fA0 1a00 1fA0 1a00 1fA0 1a00 1co0 1io0 1yo0 Pc0 1a00 1fA0 1Bc0 Mo0 1tc0 Uo0 1tA0 U00 1uo0 W00 1s00 VA0 1so0 Vc0 1sM0 UM0 1wo0 Rc0 1u00 Wo0 1rA0 W00 1s00 VA0 1sM0 UM0 1w00 fV0 BCX.w 1tA0 U00 1u00 Wo0 1sm0 601k WM0 1fA0 1cM0 1cM0 1cM0 16M0 1gMM0 1a00 1fA0 1cM0 1cM0 1cM0 1fA0 1a00 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00|16e5","Europe/Andorra|WET CET CEST|0 -10 -20|012121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121|-UBA0 1xIN0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00|79e3","Europe/Astrakhan|LMT +03 +04 +05|-3c.c -30 -40 -50|012323232323232323212121212121212121212121212121212121212121212|-1Pcrc.c eUMc.c 23CL0 1db0 1cN0 1db0 1cN0 1db0 1dd0 1cO0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 2pB0 1cM0 1fA0 1cM0 3Co0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 8Hz0 3rd0|10e5","Europe/Athens|AMT EET EEST CEST CET|-1y.Q -20 -30 -20 -10|012123434121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121|-2a61x.Q CNbx.Q mn0 kU10 9b0 3Es0 Xa0 1fb0 1dd0 k3X0 Nz0 SCp0 1vc0 SO0 1cM0 1a00 1ao0 1fc0 1a10 1fG0 1cg0 1dX0 1bX0 1cQ0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00|35e5","Europe/London|GMT BST BDST|0 -10 -20|0101010101010101010101010101010101010101010101010121212121210101210101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010|-2axa0 Rc0 1fA0 14M0 1fc0 1g00 1co0 1dc0 1co0 1oo0 1400 1dc0 19A0 1io0 1io0 WM0 1o00 14o0 1o00 17c0 1io0 17c0 1fA0 1a00 1lc0 17c0 1io0 17c0 1fA0 1a00 1io0 17c0 1io0 17c0 1fA0 1cM0 1io0 17c0 1fA0 1a00 1io0 17c0 1io0 17c0 1fA0 1a00 1io0 1qM0 Dc0 2Rz0 Dc0 1zc0 Oo0 1zc0 Rc0 1wo0 17c0 1iM0 FA0 xB0 1fA0 1a00 14o0 bb0 LA0 xB0 Rc0 1wo0 11A0 1o00 17c0 1fA0 1a00 1fA0 1cM0 1fA0 1a00 17c0 1fA0 1a00 1io0 17c0 1lc0 17c0 1fA0 1a00 1io0 17c0 1io0 17c0 1fA0 1a00 1a00 1qM0 WM0 1qM0 11A0 1o00 WM0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1tA0 IM0 90o0 U00 1tA0 U00 1tA0 U00 1tA0 U00 1tA0 WM0 1qM0 WM0 1qM0 WM0 1tA0 U00 1tA0 U00 1tA0 11z0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1o00 14o0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00|10e6","Europe/Belgrade|CET CEST|-10 -20|01010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010|-19RC0 3IP0 WM0 1fA0 1cM0 1cM0 1rc0 Qo0 1vmo0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00|12e5","Europe/Berlin|CET CEST CEMT|-10 -20 -30|01010101010101210101210101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010|-2aFe0 11d0 1iO0 11A0 1o00 11A0 Qrc0 6i00 WM0 1fA0 1cM0 1cM0 1cM0 kL0 Nc0 m10 WM0 1ao0 1cp0 dX0 jz0 Dd0 1io0 17c0 1fA0 1a00 1ehA0 1a00 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00|41e5","Europe/Prague|CET CEST GMT|-10 -20 0|01010101010101010201010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010|-2aFe0 11d0 1iO0 11A0 1o00 11A0 Qrc0 6i00 WM0 1fA0 1cM0 1cM0 1cM0 1cM0 1qM0 11c0 mp0 xA0 mn0 17c0 1io0 17c0 1fc0 1ao0 1bNc0 1cM0 1fA0 1a00 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00|13e5","Europe/Brussels|WET CET CEST WEST|0 -10 -20 -10|0121212103030303030303030303030303030303030303030303212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121|-2ehc0 3zX0 11c0 1iO0 11A0 1o00 11A0 my0 Ic0 1qM0 Rc0 1EM0 UM0 1u00 10o0 1io0 1io0 17c0 1a00 1fA0 1cM0 1cM0 1io0 17c0 1fA0 1a00 1io0 1a30 1io0 17c0 1fA0 1a00 1io0 17c0 1cM0 1cM0 1a00 1io0 1cM0 1cM0 1a00 1fA0 1io0 17c0 1cM0 1cM0 1a00 1fA0 1io0 1qM0 Dc0 y00 5Wn0 WM0 1fA0 1cM0 16M0 1iM0 16M0 1C00 Uo0 1eeo0 1a00 1fA0 1cM0 1cM0 1cM0 1fA0 1a00 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00|21e5","Europe/Bucharest|BMT EET EEST|-1I.o -20 -30|0121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121|-1xApI.o 20LI.o RA0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1Axc0 On0 1fA0 1a10 1cO0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cK0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cL0 1cN0 1cL0 1fB0 1nX0 11E0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00|19e5","Europe/Budapest|CET CEST|-10 -20|0101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010|-2aFe0 11d0 1iO0 11A0 1o00 11A0 1oo0 11c0 1lc0 17c0 O1V0 3Nf0 WM0 1fA0 1cM0 1cM0 1oJ0 1dd0 1020 1fX0 1cp0 1cM0 1cM0 1cM0 1fA0 1a00 bhy0 Rb0 1wr0 Rc0 1C00 LA0 1C00 LA0 SNW0 1a00 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cO0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00|17e5","Europe/Zurich|CET CEST|-10 -20|01010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010|-19Lc0 11A0 1o00 11A0 1xG10 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00|38e4","Europe/Chisinau|CMT BMT EET EEST CEST CET MSK MSD|-1T -1I.o -20 -30 -20 -10 -30 -40|012323232323232323234545467676767676767676767323232323232323232323232323232323232323232323232323232323232323232323232323232323232323232323232|-26jdT wGMa.A 20LI.o RA0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 27A0 2en0 39g0 WM0 1fA0 1cM0 V90 1t7z0 1db0 1cN0 1db0 1cN0 1db0 1dd0 1cO0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 gL0 WO0 1cM0 1cM0 1cK0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1fB0 1nX0 11D0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00|67e4","Europe/Copenhagen|CET CEST|-10 -20|0101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010|-2azC0 Tz0 VuO0 60q0 WM0 1fA0 1cM0 1cM0 1cM0 S00 1HA0 Nc0 1C00 Dc0 1Nc0 Ao0 1h5A0 1a00 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00|12e5","Europe/Gibraltar|GMT BST BDST CET CEST|0 -10 -20 -10 -20|010101010101010101010101010101010101010101010101012121212121010121010101010101010101034343434343434343434343434343434343434343434343434343434343434343434343434343434343434343434343434343434343434343|-2axa0 Rc0 1fA0 14M0 1fc0 1g00 1co0 1dc0 1co0 1oo0 1400 1dc0 19A0 1io0 1io0 WM0 1o00 14o0 1o00 17c0 1io0 17c0 1fA0 1a00 1lc0 17c0 1io0 17c0 1fA0 1a00 1io0 17c0 1io0 17c0 1fA0 1cM0 1io0 17c0 1fA0 1a00 1io0 17c0 1io0 17c0 1fA0 1a00 1io0 1qM0 Dc0 2Rz0 Dc0 1zc0 Oo0 1zc0 Rc0 1wo0 17c0 1iM0 FA0 xB0 1fA0 1a00 14o0 bb0 LA0 xB0 Rc0 1wo0 11A0 1o00 17c0 1fA0 1a00 1fA0 1cM0 1fA0 1a00 17c0 1fA0 1a00 1io0 17c0 1lc0 17c0 1fA0 10Jz0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00|30e3","Europe/Helsinki|HMT EET EEST|-1D.N -20 -30|0121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121|-1WuND.N OULD.N 1dA0 1xGq0 1cM0 1cM0 1cM0 1cN0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00|12e5","Europe/Kaliningrad|CET CEST EET EEST MSK MSD +03|-10 -20 -20 -30 -30 -40 -30|01010101010101232454545454545454543232323232323232323232323232323232323232323262|-2aFe0 11d0 1iO0 11A0 1o00 11A0 Qrc0 6i00 WM0 1fA0 1cM0 1cM0 1cM0 390 7A0 1en0 12N0 1pbb0 1db0 1cN0 1db0 1cN0 1db0 1dd0 1cO0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cN0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 8Hz0|44e4","Europe/Kiev|KMT EET MSK CEST CET MSD EEST|-22.4 -20 -30 -20 -10 -40 -30|0123434252525252525252525256161616161616161616161616161616161616161616161616161616161616161616161616161616161616161616161|-1Pc22.4 eUo2.4 rnz0 2Hg0 WM0 1fA0 da0 1v4m0 1db0 1cN0 1db0 1cN0 1db0 1dd0 1cO0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 Db0 3220 1cK0 1cL0 1cN0 1cL0 1cN0 1cL0 1cQ0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00|34e5","Europe/Kirov|LMT +03 +04 +05|-3i.M -30 -40 -50|01232323232323232321212121212121212121212121212121212121212121|-22WM0 qH90 23CL0 1db0 1cN0 1db0 1cN0 1db0 1dd0 1cO0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 2pB0 1cM0 1fA0 1cM0 3Co0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 8Hz0|48e4","Europe/Lisbon|LMT WET WEST WEMT CET CEST|A.J 0 -10 -20 -10 -20|01212121212121212121212121212121212121212121232123212321232121212121212121212121212121212121212121214121212121212121212121212121212124545454212121212121212121212121212121212121212121212121212121212121212121212121212121212121|-2le00 aPX0 Sp0 LX0 1vc0 Tc0 1uM0 SM0 1vc0 Tc0 1vc0 SM0 1vc0 6600 1co0 3E00 17c0 1fA0 1a00 1io0 1a00 1io0 17c0 3I00 17c0 1cM0 1cM0 3Fc0 1cM0 1a00 1fA0 1io0 17c0 1cM0 1cM0 1a00 1fA0 1io0 1qM0 Dc0 1tA0 1cM0 1dc0 1400 gL0 IM0 s10 U00 dX0 Rc0 pd0 Rc0 gL0 Oo0 pd0 Rc0 gL0 Oo0 pd0 14o0 1cM0 1cP0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 pvy0 1cM0 1cM0 1fA0 1cM0 1cM0 1cN0 1cL0 1cN0 1cM0 1cM0 1cM0 1cM0 1cN0 1cL0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00|27e5","Europe/Luxembourg|LMT CET CEST WET WEST WEST WET|-o.A -10 -20 0 -10 -20 -10|0121212134343434343434343434343434343434343434343434565651212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121|-2DG0o.A t6mo.A TB0 1nX0 Up0 1o20 11A0 rW0 CM0 1qP0 R90 1EO0 UK0 1u20 10m0 1ip0 1in0 17e0 19W0 1fB0 1db0 1cp0 1in0 17d0 1fz0 1a10 1in0 1a10 1in0 17f0 1fA0 1a00 1io0 17c0 1cM0 1cM0 1a00 1io0 1cM0 1cM0 1a00 1fA0 1io0 17c0 1cM0 1cM0 1a00 1fA0 1io0 1qM0 Dc0 vA0 60L0 WM0 1fA0 1cM0 17c0 1io0 16M0 1C00 Uo0 1eeo0 1a00 1fA0 1cM0 1cM0 1cM0 1fA0 1a00 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00|54e4","Europe/Madrid|WET WEST WEMT CET CEST|0 -10 -20 -10 -20|010101010101010101210343434343434343434343434343434343434343434343434343434343434343434343434343434343434343434343434343434343434343434343434343434343434343434343|-25Td0 19B0 1cL0 1dd0 b1z0 18p0 3HX0 17d0 1fz0 1a10 1io0 1a00 1in0 17d0 iIn0 Hd0 1cL0 bb0 1200 2s20 14n0 5aL0 Mp0 1vz0 17d0 1in0 17d0 1in0 17d0 1in0 17d0 6hX0 11B0 XHX0 1a10 1fz0 1a10 19X0 1cN0 1fz0 1a10 1fC0 1cM0 1cM0 1cM0 1fA0 1a00 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00|62e5","Europe/Malta|CET CEST|-10 -20|0101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010|-2arB0 Lz0 1cN0 1db0 1410 1on0 Wp0 1qL0 17d0 1cL0 M3B0 5M20 WM0 1fA0 1co0 17c0 1iM0 16m0 1de0 1lc0 14m0 1lc0 WO0 1qM0 GTW0 On0 1C10 LA0 1C00 LA0 1EM0 LA0 1C00 LA0 1zc0 Oo0 1C00 Oo0 1co0 1cM0 1lA0 Xc0 1qq0 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1iN0 19z0 1fB0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00|42e4","Europe/Minsk|MMT EET MSK CEST CET MSD EEST +03|-1O -20 -30 -20 -10 -40 -30 -30|01234343252525252525252525261616161616161616161616161616161616161617|-1Pc1O eUnO qNX0 3gQ0 WM0 1fA0 1cM0 Al0 1tsn0 1db0 1cN0 1db0 1cN0 1db0 1dd0 1cO0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 3Fc0 1cN0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0|19e5","Europe/Monaco|PMT WET WEST WEMT CET CEST|-9.l 0 -10 -20 -10 -20|01212121212121212121212121212121212121212121212121232323232345454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454|-2n5c9.l cFX9.l HA0 19A0 1iM0 11c0 1oo0 Wo0 1rc0 QM0 1EM0 UM0 1u00 10o0 1io0 1wo0 Rc0 1a00 1fA0 1cM0 1cM0 1io0 17c0 1fA0 1a00 1io0 1a00 1io0 17c0 1fA0 1a00 1io0 17c0 1cM0 1cM0 1a00 1io0 1cM0 1cM0 1a00 1fA0 1io0 17c0 1cM0 1cM0 1a00 1fA0 1io0 1qM0 Df0 2RV0 11z0 11B0 1ze0 WM0 1fA0 1cM0 1fa0 1aq0 16M0 1ekn0 1cL0 1fC0 1a00 1fA0 1cM0 1cM0 1cM0 1fA0 1a00 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00|38e3","Europe/Moscow|MMT MMT MST MDST MSD MSK +05 EET EEST MSK|-2u.h -2v.j -3v.j -4v.j -40 -30 -50 -20 -30 -40|012132345464575454545454545454545458754545454545454545454545454545454545454595|-2ag2u.h 2pyW.W 1bA0 11X0 GN0 1Hb0 c4v.j ik0 3DA0 dz0 15A0 c10 2q10 iM10 23CL0 1db0 1cN0 1db0 1cN0 1db0 1dd0 1cO0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cN0 IM0 rX0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 8Hz0|16e6","Europe/Paris|PMT WET WEST CEST CET WEMT|-9.l 0 -10 -20 -10 -20|0121212121212121212121212121212121212121212121212123434352543434343434343434343434343434343434343434343434343434343434343434343434343434343434343434343434343434343434343434343434343434|-2nco9.l cNb9.l HA0 19A0 1iM0 11c0 1oo0 Wo0 1rc0 QM0 1EM0 UM0 1u00 10o0 1io0 1wo0 Rc0 1a00 1fA0 1cM0 1cM0 1io0 17c0 1fA0 1a00 1io0 1a00 1io0 17c0 1fA0 1a00 1io0 17c0 1cM0 1cM0 1a00 1io0 1cM0 1cM0 1a00 1fA0 1io0 17c0 1cM0 1cM0 1a00 1fA0 1io0 1qM0 Df0 Ik0 5M30 WM0 1fA0 1cM0 Vx0 hB0 1aq0 16M0 1ekn0 1cL0 1fC0 1a00 1fA0 1cM0 1cM0 1cM0 1fA0 1a00 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00|11e6","Europe/Riga|RMT LST EET MSK CEST CET MSD EEST|-1A.y -2A.y -20 -30 -20 -10 -40 -30|010102345454536363636363636363727272727272727272727272727272727272727272727272727272727272727272727272727272727272727272727272|-25TzA.y 11A0 1iM0 ko0 gWm0 yDXA.y 2bX0 3fE0 WM0 1fA0 1cM0 1cM0 4m0 1sLy0 1db0 1cN0 1db0 1cN0 1db0 1dd0 1cO0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cN0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cN0 1o00 11A0 1o00 11A0 1qM0 3oo0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00|64e4","Europe/Rome|CET CEST|-10 -20|0101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010|-2arB0 Lz0 1cN0 1db0 1410 1on0 Wp0 1qL0 17d0 1cL0 M3B0 5M20 WM0 1fA0 1cM0 16M0 1iM0 16m0 1de0 1lc0 14m0 1lc0 WO0 1qM0 GTW0 On0 1C10 LA0 1C00 LA0 1EM0 LA0 1C00 LA0 1zc0 Oo0 1C00 Oo0 1C00 LA0 1zc0 Oo0 1C00 LA0 1C00 LA0 1zc0 Oo0 1C00 Oo0 1zc0 Oo0 1fC0 1a00 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00|39e5","Europe/Samara|LMT +03 +04 +05|-3k.k -30 -40 -50|0123232323232323232121232323232323232323232323232323232323212|-22WM0 qH90 23CL0 1db0 1cN0 1db0 1cN0 1db0 1dd0 1cO0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 2pB0 1cM0 1fA0 2y10 14m0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 2sp0 WM0|12e5","Europe/Saratov|LMT +03 +04 +05|-34.i -30 -40 -50|012323232323232321212121212121212121212121212121212121212121212|-22WM0 qH90 23CL0 1db0 1cN0 1db0 1cN0 1db0 1dd0 1cO0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 2pB0 1cM0 1cM0 1cM0 1fA0 1cM0 3Co0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 8Hz0 5810|","Europe/Simferopol|SMT EET MSK CEST CET MSD EEST MSK|-2g -20 -30 -20 -10 -40 -30 -40|012343432525252525252525252161616525252616161616161616161616161616161616172|-1Pc2g eUog rEn0 2qs0 WM0 1fA0 1cM0 3V0 1u0L0 1db0 1cN0 1db0 1cN0 1db0 1dd0 1cO0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1Q00 4eL0 1cL0 1cN0 1cL0 1cN0 dX0 WL0 1cN0 1cL0 1fB0 1o30 11B0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11z0 1nW0|33e4","Europe/Sofia|EET CET CEST EEST|-20 -10 -20 -30|01212103030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030|-168L0 WM0 1fA0 1cM0 1cM0 1cN0 1mKH0 1dd0 1fb0 1ap0 1fb0 1a20 1fy0 1a30 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cK0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1fB0 1nX0 11E0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00|12e5","Europe/Stockholm|CET CEST|-10 -20|01010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010|-2azC0 TB0 2yDe0 1a00 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00|15e5","Europe/Tallinn|TMT CET CEST EET MSK MSD EEST|-1D -10 -20 -20 -30 -40 -30|012103421212454545454545454546363636363636363636363636363636363636363636363636363636363636363636363636363636363636363636363|-26oND teD 11A0 1Ta0 4rXl KSLD 2FX0 2Jg0 WM0 1fA0 1cM0 18J0 1sTX0 1db0 1cN0 1db0 1cN0 1db0 1dd0 1cO0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cN0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o10 11A0 1qM0 5QM0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00|41e4","Europe/Tirane|LMT CET CEST|-1j.k -10 -20|01212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121|-2glBj.k 14pcj.k 5LC0 WM0 4M0 1fCK0 10n0 1op0 11z0 1pd0 11z0 1qN0 WL0 1qp0 Xb0 1qp0 Xb0 1qp0 11z0 1lB0 11z0 1qN0 11z0 1iN0 16n0 1dd0 1cO0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00|42e4","Europe/Ulyanovsk|LMT +03 +04 +05 +02|-3d.A -30 -40 -50 -20|01232323232323232321214121212121212121212121212121212121212121212|-22WM0 qH90 23CL0 1db0 1cN0 1db0 1cN0 1db0 1dd0 1cO0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 2pB0 1cM0 1fA0 2pB0 IM0 rX0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 8Hz0 3rd0|13e5","Europe/Uzhgorod|CET CEST MSK MSD EET EEST|-10 -20 -30 -40 -20 -30|010101023232323232323232320454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454|-1cqL0 6i00 WM0 1fA0 1cM0 1ml0 1Cp0 1r3W0 1db0 1cN0 1db0 1cN0 1db0 1dd0 1cO0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1Q00 1Nf0 2pw0 1cL0 1cN0 1cL0 1cN0 1cL0 1cQ0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00|11e4","Europe/Vienna|CET CEST|-10 -20|0101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010|-2aFe0 11d0 1iO0 11A0 1o00 11A0 3KM0 14o0 LA00 6i00 WM0 1fA0 1cM0 1cM0 1cM0 400 2qM0 1ao0 1co0 1cM0 1io0 17c0 1gHa0 19X0 1cP0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00|18e5","Europe/Vilnius|WMT KMT CET EET MSK CEST MSD EEST|-1o -1z.A -10 -20 -30 -20 -40 -30|012324525254646464646464646473737373737373737352537373737373737373737373737373737373737373737373737373737373737373737373|-293do 6ILM.o 1Ooz.A zz0 Mfd0 29W0 3is0 WM0 1fA0 1cM0 LV0 1tgL0 1db0 1cN0 1db0 1cN0 1db0 1dd0 1cO0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cN0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11B0 1o00 11A0 1qM0 8io0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00|54e4","Europe/Volgograd|LMT +03 +04 +05|-2V.E -30 -40 -50|0123232323232323212121212121212121212121212121212121212121212121|-21IqV.E psLV.E 23CL0 1db0 1cN0 1db0 1cN0 1db0 1dd0 1cO0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 2pB0 1cM0 1cM0 1cM0 1fA0 1cM0 3Co0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 8Hz0 9Jd0 5gn0|10e5","Europe/Warsaw|WMT CET CEST EET EEST|-1o -10 -20 -20 -30|012121234312121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121|-2ctdo 1LXo 11d0 1iO0 11A0 1o00 11A0 1on0 11A0 6zy0 HWP0 5IM0 WM0 1fA0 1cM0 1dz0 1mL0 1en0 15B0 1aq0 1nA0 11A0 1io0 17c0 1fA0 1a00 iDX0 LA0 1cM0 1cM0 1C00 Oo0 1cM0 1cM0 1zc0 Oo0 1zc0 Oo0 1zc0 Oo0 1C00 LA0 uso0 1a00 1fA0 1cM0 1cM0 1cM0 1fA0 1a00 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cN0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00|17e5","Europe/Zaporozhye|+0220 EET MSK CEST CET MSD EEST|-2k -20 -30 -20 -10 -40 -30|01234342525252525252525252526161616161616161616161616161616161616161616161616161616161616161616161616161616161616161616161|-1Pc2k eUok rdb0 2RE0 WM0 1fA0 8m0 1v9a0 1db0 1cN0 1db0 1cN0 1db0 1dd0 1cO0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cK0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cQ0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00|77e4","HST|HST|a0|0||","Indian/Chagos|LMT +05 +06|-4N.E -50 -60|012|-2xosN.E 3AGLN.E|30e2","Indian/Cocos|+0630|-6u|0||596","Indian/Kerguelen|-00 +05|0 -50|01|-MG00|130","Indian/Mahe|LMT +04|-3F.M -40|01|-2xorF.M|79e3","Indian/Maldives|MMT +05|-4S -50|01|-olgS|35e4","Indian/Mauritius|LMT +04 +05|-3O -40 -50|012121|-2xorO 34unO 14L0 12kr0 11z0|15e4","Indian/Reunion|LMT +04|-3F.Q -40|01|-2mDDF.Q|84e4","Pacific/Kwajalein|+11 +10 +09 -12 +12|-b0 -a0 -90 c0 -c0|012034|-1kln0 akp0 6Up0 12ry0 Wan0|14e3","MET|MET MEST|-10 -20|01010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010|-2aFe0 11d0 1iO0 11A0 1o00 11A0 Qrc0 6i00 WM0 1fA0 1cM0 1cM0 1cM0 16M0 1gMM0 1a00 1fA0 1cM0 1cM0 1cM0 1fA0 1a00 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00|","MST|MST|70|0||","MST7MDT|MST MDT MWT MPT|70 60 60 60|010102301010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010|-261r0 1nX0 11B0 1nX0 SgN0 8x20 ix0 QwN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1cN0 1cL0 1cN0 1cL0 s10 1Vz0 LB0 1BX0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0|","Pacific/Chatham|+1215 +1245 +1345|-cf -cJ -dJ|012121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212|-WqAf 1adef IM0 1C00 Rc0 1zc0 Oo0 1zc0 Oo0 1zc0 Oo0 1zc0 Oo0 1zc0 Oo0 1zc0 Rc0 1zc0 Oo0 1zc0 Oo0 1zc0 Oo0 1zc0 Oo0 1zc0 Oo0 1zc0 Rc0 1zc0 Oo0 1qM0 14o0 1lc0 14o0 1lc0 14o0 1lc0 17c0 1io0 17c0 1io0 17c0 1io0 17c0 1lc0 14o0 1lc0 14o0 1lc0 17c0 1io0 17c0 1io0 17c0 1lc0 14o0 1lc0 14o0 1lc0 17c0 1io0 17c0 1io0 17c0 1io0 17c0 1io0 1fA0 1a00 1fA0 1a00 1fA0 1a00 1fA0 1a00 1fA0 1cM0 1fA0 1a00 1fA0 1a00 1fA0 1a00 1fA0 1a00 1fA0 1a00 1fA0 1cM0 1fA0 1a00 1fA0 1a00 1fA0 1a00 1fA0 1a00 1fA0 1a00 1io0 1a00 1fA0 1a00 1fA0 1a00 1fA0 1a00 1fA0 1a00 1fA0 1cM0 1fA0 1a00 1fA0 1a00 1fA0 1a00 1fA0 1a00 1fA0 1a00 1fA0 1cM0 1fA0 1a00 1fA0 1a00|600","Pacific/Apia|LMT -1130 -11 -10 +14 +13|bq.U bu b0 a0 -e0 -d0|01232345454545454545454545|-2nDMx.4 1yW03.4 2rRbu 1ff0 1a00 CI0 AQ0 1cM0 1fA0 1a00 1fA0 1a00 1fA0 1a00 1fA0 1a00 1fA0 1a00 1fA0 1cM0 1fA0 1a00 1fA0 1a00 1fA0|37e3","Pacific/Bougainville|+10 +09 +11|-a0 -90 -b0|0102|-16Wy0 7CN0 2MQp0|18e4","Pacific/Chuuk|+10 +09|-a0 -90|01010|-2ewy0 axB0 RVX0 axd0|49e3","Pacific/Efate|LMT +11 +12|-bd.g -b0 -c0|012121212121212121212121|-2l9nd.g 2uNXd.g Dc0 n610 1cL0 1cN0 1cL0 1fB0 19X0 1fB0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1fB0 Lz0 1Nd0 An0|66e3","Pacific/Enderbury|-00 -12 -11 +13|0 c0 b0 -d0|0123|-1iIo0 1GsA0 B7X0|1","Pacific/Fakaofo|-11 +13|b0 -d0|01|1Gfn0|483","Pacific/Fiji|LMT +12 +13|-bT.I -c0 -d0|01212121212121212121212121212121212121212121212121212121212121|-2bUzT.I 3m8NT.I LA0 1EM0 IM0 nJc0 LA0 1o00 Rc0 1wo0 Ao0 1Nc0 Ao0 1Q00 xz0 1SN0 uM0 1SM0 uM0 1VA0 s00 1VA0 s00 1VA0 s00 20o0 pc0 2hc0 bc0 4q00 pc0 20o0 pc0 20o0 pc0 20o0 s00 1VA0 s00 20o0 pc0 20o0 pc0 20o0 pc0 20o0 pc0 20o0 s00 20o0 pc0 20o0 pc0 20o0 pc0 20o0 pc0 20o0 s00 1VA0 s00|88e4","Pacific/Galapagos|LMT -05 -06|5W.o 50 60|01212|-1yVS1.A 2dTz1.A gNd0 rz0|25e3","Pacific/Gambier|LMT -09|8X.M 90|01|-2jof0.c|125","Pacific/Guadalcanal|LMT +11|-aD.M -b0|01|-2joyD.M|11e4","Pacific/Guam|GST +09 GDT ChST|-a0 -90 -b0 -a0|01020202020202020203|-18jK0 6pB0 AhB0 3QL0 g2p0 3p91 WOX rX0 1zd0 Rb0 1wp0 Rb0 5xd0 rX0 5sN0 zb1 1C0X On0 ULb0|17e4","Pacific/Honolulu|HST HDT HWT HPT HST|au 9u 9u 9u a0|0102304|-1thLu 8x0 lef0 8wWu iAu 46p0|37e4","Pacific/Kiritimati|-1040 -10 +14|aE a0 -e0|012|nIaE B7Xk|51e2","Pacific/Kosrae|+11 +09 +10 +12|-b0 -90 -a0 -c0|01021030|-2ewz0 axC0 HBy0 akp0 axd0 WOK0 1bdz0|66e2","Pacific/Majuro|+11 +09 +10 +12|-b0 -90 -a0 -c0|0102103|-2ewz0 axC0 HBy0 akp0 6RB0 12um0|28e3","Pacific/Marquesas|LMT -0930|9i 9u|01|-2joeG|86e2","Pacific/Pago_Pago|LMT SST|bm.M b0|01|-2nDMB.c|37e2","Pacific/Nauru|LMT +1130 +09 +12|-b7.E -bu -90 -c0|01213|-1Xdn7.E QCnB.E 7mqu 1lnbu|10e3","Pacific/Niue|LMT -1120 -11|bj.E bk b0|012|-FScE.k suo0.k|12e2","Pacific/Norfolk|+1112 +1130 +1230 +11 +12|-bc -bu -cu -b0 -c0|012134343434343434343434343434343434343434|-Kgbc W01G Oo0 1COo0 9Jcu 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0|25e4","Pacific/Noumea|LMT +11 +12|-b5.M -b0 -c0|01212121|-2l9n5.M 2EqM5.M xX0 1PB0 yn0 HeP0 Ao0|98e3","Pacific/Pitcairn|-0830 -08|8u 80|01|18Vku|56","Pacific/Pohnpei|+11 +09 +10|-b0 -90 -a0|010210|-2ewz0 axC0 HBy0 akp0 axd0|34e3","Pacific/Rarotonga|LMT -1030 -0930 -10|aD.4 au 9u a0|0123232323232323232323232323|-FSdk.U 13tbO.U IL0 1zcu Onu 1zcu Onu 1zcu Rbu 1zcu Onu 1zcu Onu 1zcu Onu 1zcu Onu 1zcu Onu 1zcu Rbu 1zcu Onu 1zcu Onu 1zcu Onu|13e3","Pacific/Tahiti|LMT -10|9W.g a0|01|-2joe1.I|18e4","Pacific/Tongatapu|LMT +1220 +13 +14|-cj.c -ck -d0 -e0|01232323232|-XbMj.c BgLX.c 1yndk 15A0 1wo0 xz0 1Q10 xz0 zWN0 s00|75e3","PST8PDT|PST PDT PWT PPT|80 70 70 70|010102301010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010|-261q0 1nX0 11B0 1nX0 SgN0 8x10 iy0 QwN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1cN0 1cL0 1cN0 1cL0 s10 1Vz0 LB0 1BX0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0|","WET|WET WEST|0 -10|010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010|hDB0 1a00 1fA0 1cM0 1cM0 1cM0 1fA0 1a00 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00|"],"links":["Africa/Abidjan|Africa/Accra","Africa/Abidjan|Africa/Bamako","Africa/Abidjan|Africa/Banjul","Africa/Abidjan|Africa/Conakry","Africa/Abidjan|Africa/Dakar","Africa/Abidjan|Africa/Freetown","Africa/Abidjan|Africa/Lome","Africa/Abidjan|Africa/Nouakchott","Africa/Abidjan|Africa/Ouagadougou","Africa/Abidjan|Africa/Timbuktu","Africa/Abidjan|Atlantic/St_Helena","Africa/Cairo|Egypt","Africa/Johannesburg|Africa/Maseru","Africa/Johannesburg|Africa/Mbabane","Africa/Lagos|Africa/Bangui","Africa/Lagos|Africa/Brazzaville","Africa/Lagos|Africa/Douala","Africa/Lagos|Africa/Kinshasa","Africa/Lagos|Africa/Libreville","Africa/Lagos|Africa/Luanda","Africa/Lagos|Africa/Malabo","Africa/Lagos|Africa/Niamey","Africa/Lagos|Africa/Porto-Novo","Africa/Maputo|Africa/Blantyre","Africa/Maputo|Africa/Bujumbura","Africa/Maputo|Africa/Gaborone","Africa/Maputo|Africa/Harare","Africa/Maputo|Africa/Kigali","Africa/Maputo|Africa/Lubumbashi","Africa/Maputo|Africa/Lusaka","Africa/Nairobi|Africa/Addis_Ababa","Africa/Nairobi|Africa/Asmara","Africa/Nairobi|Africa/Asmera","Africa/Nairobi|Africa/Dar_es_Salaam","Africa/Nairobi|Africa/Djibouti","Africa/Nairobi|Africa/Kampala","Africa/Nairobi|Africa/Mogadishu","Africa/Nairobi|Indian/Antananarivo","Africa/Nairobi|Indian/Comoro","Africa/Nairobi|Indian/Mayotte","Africa/Tripoli|Libya","America/Adak|America/Atka","America/Adak|US/Aleutian","America/Anchorage|US/Alaska","America/Argentina/Buenos_Aires|America/Buenos_Aires","America/Argentina/Catamarca|America/Argentina/ComodRivadavia","America/Argentina/Catamarca|America/Catamarca","America/Argentina/Cordoba|America/Cordoba","America/Argentina/Cordoba|America/Rosario","America/Argentina/Jujuy|America/Jujuy","America/Argentina/Mendoza|America/Mendoza","America/Chicago|US/Central","America/Denver|America/Shiprock","America/Denver|Navajo","America/Denver|US/Mountain","America/Detroit|US/Michigan","America/Edmonton|Canada/Mountain","America/Fort_Wayne|America/Indiana/Indianapolis","America/Fort_Wayne|America/Indianapolis","America/Fort_Wayne|US/East-Indiana","America/Godthab|America/Nuuk","America/Halifax|Canada/Atlantic","America/Havana|Cuba","America/Indiana/Knox|America/Knox_IN","America/Indiana/Knox|US/Indiana-Starke","America/Jamaica|Jamaica","America/Kentucky/Louisville|America/Louisville","America/Los_Angeles|US/Pacific","America/Manaus|Brazil/West","America/Mazatlan|Mexico/BajaSur","America/Mexico_City|Mexico/General","America/New_York|US/Eastern","America/Noronha|Brazil/DeNoronha","America/Panama|America/Atikokan","America/Panama|America/Cayman","America/Panama|America/Coral_Harbour","America/Phoenix|America/Creston","America/Phoenix|US/Arizona","America/Puerto_Rico|America/Anguilla","America/Puerto_Rico|America/Antigua","America/Puerto_Rico|America/Aruba","America/Puerto_Rico|America/Blanc-Sablon","America/Puerto_Rico|America/Curacao","America/Puerto_Rico|America/Dominica","America/Puerto_Rico|America/Grenada","America/Puerto_Rico|America/Guadeloupe","America/Puerto_Rico|America/Kralendijk","America/Puerto_Rico|America/Lower_Princes","America/Puerto_Rico|America/Marigot","America/Puerto_Rico|America/Montserrat","America/Puerto_Rico|America/Port_of_Spain","America/Puerto_Rico|America/St_Barthelemy","America/Puerto_Rico|America/St_Kitts","America/Puerto_Rico|America/St_Lucia","America/Puerto_Rico|America/St_Thomas","America/Puerto_Rico|America/St_Vincent","America/Puerto_Rico|America/Tortola","America/Puerto_Rico|America/Virgin","America/Regina|Canada/Saskatchewan","America/Rio_Branco|America/Porto_Acre","America/Rio_Branco|Brazil/Acre","America/Santiago|Chile/Continental","America/Sao_Paulo|Brazil/East","America/St_Johns|Canada/Newfoundland","America/Tijuana|America/Ensenada","America/Tijuana|America/Santa_Isabel","America/Tijuana|Mexico/BajaNorte","America/Toronto|America/Montreal","America/Toronto|America/Nassau","America/Toronto|Canada/Eastern","America/Vancouver|Canada/Pacific","America/Whitehorse|Canada/Yukon","America/Winnipeg|Canada/Central","Asia/Ashgabat|Asia/Ashkhabad","Asia/Bangkok|Asia/Phnom_Penh","Asia/Bangkok|Asia/Vientiane","Asia/Dhaka|Asia/Dacca","Asia/Dubai|Asia/Muscat","Asia/Ho_Chi_Minh|Asia/Saigon","Asia/Hong_Kong|Hongkong","Asia/Jerusalem|Asia/Tel_Aviv","Asia/Jerusalem|Israel","Asia/Kathmandu|Asia/Katmandu","Asia/Kolkata|Asia/Calcutta","Asia/Kuala_Lumpur|Asia/Singapore","Asia/Kuala_Lumpur|Singapore","Asia/Macau|Asia/Macao","Asia/Makassar|Asia/Ujung_Pandang","Asia/Nicosia|Europe/Nicosia","Asia/Qatar|Asia/Bahrain","Asia/Rangoon|Asia/Yangon","Asia/Riyadh|Antarctica/Syowa","Asia/Riyadh|Asia/Aden","Asia/Riyadh|Asia/Kuwait","Asia/Seoul|ROK","Asia/Shanghai|Asia/Chongqing","Asia/Shanghai|Asia/Chungking","Asia/Shanghai|Asia/Harbin","Asia/Shanghai|PRC","Asia/Taipei|ROC","Asia/Tehran|Iran","Asia/Thimphu|Asia/Thimbu","Asia/Tokyo|Japan","Asia/Ulaanbaatar|Asia/Ulan_Bator","Asia/Urumqi|Asia/Kashgar","Atlantic/Faroe|Atlantic/Faeroe","Atlantic/Reykjavik|Iceland","Atlantic/South_Georgia|Etc/GMT+2","Australia/Adelaide|Australia/South","Australia/Brisbane|Australia/Queensland","Australia/Broken_Hill|Australia/Yancowinna","Australia/Darwin|Australia/North","Australia/Hobart|Australia/Currie","Australia/Hobart|Australia/Tasmania","Australia/Lord_Howe|Australia/LHI","Australia/Melbourne|Australia/Victoria","Australia/Perth|Australia/West","Australia/Sydney|Australia/ACT","Australia/Sydney|Australia/Canberra","Australia/Sydney|Australia/NSW","Etc/GMT-0|Etc/GMT","Etc/GMT-0|Etc/GMT+0","Etc/GMT-0|Etc/GMT0","Etc/GMT-0|Etc/Greenwich","Etc/GMT-0|GMT","Etc/GMT-0|GMT+0","Etc/GMT-0|GMT-0","Etc/GMT-0|GMT0","Etc/GMT-0|Greenwich","Etc/UTC|Etc/UCT","Etc/UTC|Etc/Universal","Etc/UTC|Etc/Zulu","Etc/UTC|UCT","Etc/UTC|UTC","Etc/UTC|Universal","Etc/UTC|Zulu","Europe/Belgrade|Europe/Ljubljana","Europe/Belgrade|Europe/Podgorica","Europe/Belgrade|Europe/Sarajevo","Europe/Belgrade|Europe/Skopje","Europe/Belgrade|Europe/Zagreb","Europe/Chisinau|Europe/Tiraspol","Europe/Dublin|Eire","Europe/Helsinki|Europe/Mariehamn","Europe/Istanbul|Asia/Istanbul","Europe/Istanbul|Turkey","Europe/Lisbon|Portugal","Europe/London|Europe/Belfast","Europe/London|Europe/Guernsey","Europe/London|Europe/Isle_of_Man","Europe/London|Europe/Jersey","Europe/London|GB","Europe/London|GB-Eire","Europe/Moscow|W-SU","Europe/Oslo|Arctic/Longyearbyen","Europe/Oslo|Atlantic/Jan_Mayen","Europe/Prague|Europe/Bratislava","Europe/Rome|Europe/San_Marino","Europe/Rome|Europe/Vatican","Europe/Warsaw|Poland","Europe/Zurich|Europe/Busingen","Europe/Zurich|Europe/Vaduz","Indian/Christmas|Etc/GMT-7","Pacific/Auckland|Antarctica/McMurdo","Pacific/Auckland|Antarctica/South_Pole","Pacific/Auckland|NZ","Pacific/Chatham|NZ-CHAT","Pacific/Chuuk|Pacific/Truk","Pacific/Chuuk|Pacific/Yap","Pacific/Easter|Chile/EasterIsland","Pacific/Enderbury|Pacific/Kanton","Pacific/Guam|Pacific/Saipan","Pacific/Honolulu|Pacific/Johnston","Pacific/Honolulu|US/Hawaii","Pacific/Kwajalein|Kwajalein","Pacific/Pago_Pago|Pacific/Midway","Pacific/Pago_Pago|Pacific/Samoa","Pacific/Pago_Pago|US/Samoa","Pacific/Palau|Etc/GMT-9","Pacific/Pohnpei|Pacific/Ponape","Pacific/Port_Moresby|Antarctica/DumontDUrville","Pacific/Port_Moresby|Etc/GMT-10","Pacific/Tarawa|Etc/GMT-12","Pacific/Tarawa|Pacific/Funafuti","Pacific/Tarawa|Pacific/Wake","Pacific/Tarawa|Pacific/Wallis"],"countries":["AD|Europe/Andorra","AE|Asia/Dubai","AF|Asia/Kabul","AG|America/Port_of_Spain America/Antigua","AI|America/Port_of_Spain America/Anguilla","AL|Europe/Tirane","AM|Asia/Yerevan","AO|Africa/Lagos Africa/Luanda","AQ|Antarctica/Casey Antarctica/Davis Antarctica/DumontDUrville Antarctica/Mawson Antarctica/Palmer Antarctica/Rothera Antarctica/Syowa Antarctica/Troll Antarctica/Vostok Pacific/Auckland Antarctica/McMurdo","AR|America/Argentina/Buenos_Aires America/Argentina/Cordoba America/Argentina/Salta America/Argentina/Jujuy America/Argentina/Tucuman America/Argentina/Catamarca America/Argentina/La_Rioja America/Argentina/San_Juan America/Argentina/Mendoza America/Argentina/San_Luis America/Argentina/Rio_Gallegos America/Argentina/Ushuaia","AS|Pacific/Pago_Pago","AT|Europe/Vienna","AU|Australia/Lord_Howe Antarctica/Macquarie Australia/Hobart Australia/Melbourne Australia/Sydney Australia/Broken_Hill Australia/Brisbane Australia/Lindeman Australia/Adelaide Australia/Darwin Australia/Perth Australia/Eucla","AW|America/Curacao America/Aruba","AX|Europe/Helsinki Europe/Mariehamn","AZ|Asia/Baku","BA|Europe/Belgrade Europe/Sarajevo","BB|America/Barbados","BD|Asia/Dhaka","BE|Europe/Brussels","BF|Africa/Abidjan Africa/Ouagadougou","BG|Europe/Sofia","BH|Asia/Qatar Asia/Bahrain","BI|Africa/Maputo Africa/Bujumbura","BJ|Africa/Lagos Africa/Porto-Novo","BL|America/Port_of_Spain America/St_Barthelemy","BM|Atlantic/Bermuda","BN|Asia/Brunei","BO|America/La_Paz","BQ|America/Curacao America/Kralendijk","BR|America/Noronha America/Belem America/Fortaleza America/Recife America/Araguaina America/Maceio America/Bahia America/Sao_Paulo America/Campo_Grande America/Cuiaba America/Santarem America/Porto_Velho America/Boa_Vista America/Manaus America/Eirunepe America/Rio_Branco","BS|America/Nassau","BT|Asia/Thimphu","BW|Africa/Maputo Africa/Gaborone","BY|Europe/Minsk","BZ|America/Belize","CA|America/St_Johns America/Halifax America/Glace_Bay America/Moncton America/Goose_Bay America/Blanc-Sablon America/Toronto America/Nipigon America/Thunder_Bay America/Iqaluit America/Pangnirtung America/Atikokan America/Winnipeg America/Rainy_River America/Resolute America/Rankin_Inlet America/Regina America/Swift_Current America/Edmonton America/Cambridge_Bay America/Yellowknife America/Inuvik America/Creston America/Dawson_Creek America/Fort_Nelson America/Whitehorse America/Dawson America/Vancouver","CC|Indian/Cocos","CD|Africa/Maputo Africa/Lagos Africa/Kinshasa Africa/Lubumbashi","CF|Africa/Lagos Africa/Bangui","CG|Africa/Lagos Africa/Brazzaville","CH|Europe/Zurich","CI|Africa/Abidjan","CK|Pacific/Rarotonga","CL|America/Santiago America/Punta_Arenas Pacific/Easter","CM|Africa/Lagos Africa/Douala","CN|Asia/Shanghai Asia/Urumqi","CO|America/Bogota","CR|America/Costa_Rica","CU|America/Havana","CV|Atlantic/Cape_Verde","CW|America/Curacao","CX|Indian/Christmas","CY|Asia/Nicosia Asia/Famagusta","CZ|Europe/Prague","DE|Europe/Zurich Europe/Berlin Europe/Busingen","DJ|Africa/Nairobi Africa/Djibouti","DK|Europe/Copenhagen","DM|America/Port_of_Spain America/Dominica","DO|America/Santo_Domingo","DZ|Africa/Algiers","EC|America/Guayaquil Pacific/Galapagos","EE|Europe/Tallinn","EG|Africa/Cairo","EH|Africa/El_Aaiun","ER|Africa/Nairobi Africa/Asmara","ES|Europe/Madrid Africa/Ceuta Atlantic/Canary","ET|Africa/Nairobi Africa/Addis_Ababa","FI|Europe/Helsinki","FJ|Pacific/Fiji","FK|Atlantic/Stanley","FM|Pacific/Chuuk Pacific/Pohnpei Pacific/Kosrae","FO|Atlantic/Faroe","FR|Europe/Paris","GA|Africa/Lagos Africa/Libreville","GB|Europe/London","GD|America/Port_of_Spain America/Grenada","GE|Asia/Tbilisi","GF|America/Cayenne","GG|Europe/London Europe/Guernsey","GH|Africa/Accra","GI|Europe/Gibraltar","GL|America/Nuuk America/Danmarkshavn America/Scoresbysund America/Thule","GM|Africa/Abidjan Africa/Banjul","GN|Africa/Abidjan Africa/Conakry","GP|America/Port_of_Spain America/Guadeloupe","GQ|Africa/Lagos Africa/Malabo","GR|Europe/Athens","GS|Atlantic/South_Georgia","GT|America/Guatemala","GU|Pacific/Guam","GW|Africa/Bissau","GY|America/Guyana","HK|Asia/Hong_Kong","HN|America/Tegucigalpa","HR|Europe/Belgrade Europe/Zagreb","HT|America/Port-au-Prince","HU|Europe/Budapest","ID|Asia/Jakarta Asia/Pontianak Asia/Makassar Asia/Jayapura","IE|Europe/Dublin","IL|Asia/Jerusalem","IM|Europe/London Europe/Isle_of_Man","IN|Asia/Kolkata","IO|Indian/Chagos","IQ|Asia/Baghdad","IR|Asia/Tehran","IS|Atlantic/Reykjavik","IT|Europe/Rome","JE|Europe/London Europe/Jersey","JM|America/Jamaica","JO|Asia/Amman","JP|Asia/Tokyo","KE|Africa/Nairobi","KG|Asia/Bishkek","KH|Asia/Bangkok Asia/Phnom_Penh","KI|Pacific/Tarawa Pacific/Enderbury Pacific/Kiritimati","KM|Africa/Nairobi Indian/Comoro","KN|America/Port_of_Spain America/St_Kitts","KP|Asia/Pyongyang","KR|Asia/Seoul","KW|Asia/Riyadh Asia/Kuwait","KY|America/Panama America/Cayman","KZ|Asia/Almaty Asia/Qyzylorda Asia/Qostanay Asia/Aqtobe Asia/Aqtau Asia/Atyrau Asia/Oral","LA|Asia/Bangkok Asia/Vientiane","LB|Asia/Beirut","LC|America/Port_of_Spain America/St_Lucia","LI|Europe/Zurich Europe/Vaduz","LK|Asia/Colombo","LR|Africa/Monrovia","LS|Africa/Johannesburg Africa/Maseru","LT|Europe/Vilnius","LU|Europe/Luxembourg","LV|Europe/Riga","LY|Africa/Tripoli","MA|Africa/Casablanca","MC|Europe/Monaco","MD|Europe/Chisinau","ME|Europe/Belgrade Europe/Podgorica","MF|America/Port_of_Spain America/Marigot","MG|Africa/Nairobi Indian/Antananarivo","MH|Pacific/Majuro Pacific/Kwajalein","MK|Europe/Belgrade Europe/Skopje","ML|Africa/Abidjan Africa/Bamako","MM|Asia/Yangon","MN|Asia/Ulaanbaatar Asia/Hovd Asia/Choibalsan","MO|Asia/Macau","MP|Pacific/Guam Pacific/Saipan","MQ|America/Martinique","MR|Africa/Abidjan Africa/Nouakchott","MS|America/Port_of_Spain America/Montserrat","MT|Europe/Malta","MU|Indian/Mauritius","MV|Indian/Maldives","MW|Africa/Maputo Africa/Blantyre","MX|America/Mexico_City America/Cancun America/Merida America/Monterrey America/Matamoros America/Mazatlan America/Chihuahua America/Ojinaga America/Hermosillo America/Tijuana America/Bahia_Banderas","MY|Asia/Kuala_Lumpur Asia/Kuching","MZ|Africa/Maputo","NA|Africa/Windhoek","NC|Pacific/Noumea","NE|Africa/Lagos Africa/Niamey","NF|Pacific/Norfolk","NG|Africa/Lagos","NI|America/Managua","NL|Europe/Amsterdam","NO|Europe/Oslo","NP|Asia/Kathmandu","NR|Pacific/Nauru","NU|Pacific/Niue","NZ|Pacific/Auckland Pacific/Chatham","OM|Asia/Dubai Asia/Muscat","PA|America/Panama","PE|America/Lima","PF|Pacific/Tahiti Pacific/Marquesas Pacific/Gambier","PG|Pacific/Port_Moresby Pacific/Bougainville","PH|Asia/Manila","PK|Asia/Karachi","PL|Europe/Warsaw","PM|America/Miquelon","PN|Pacific/Pitcairn","PR|America/Puerto_Rico","PS|Asia/Gaza Asia/Hebron","PT|Europe/Lisbon Atlantic/Madeira Atlantic/Azores","PW|Pacific/Palau","PY|America/Asuncion","QA|Asia/Qatar","RE|Indian/Reunion","RO|Europe/Bucharest","RS|Europe/Belgrade","RU|Europe/Kaliningrad Europe/Moscow Europe/Simferopol Europe/Kirov Europe/Volgograd Europe/Astrakhan Europe/Saratov Europe/Ulyanovsk Europe/Samara Asia/Yekaterinburg Asia/Omsk Asia/Novosibirsk Asia/Barnaul Asia/Tomsk Asia/Novokuznetsk Asia/Krasnoyarsk Asia/Irkutsk Asia/Chita Asia/Yakutsk Asia/Khandyga Asia/Vladivostok Asia/Ust-Nera Asia/Magadan Asia/Sakhalin Asia/Srednekolymsk Asia/Kamchatka Asia/Anadyr","RW|Africa/Maputo Africa/Kigali","SA|Asia/Riyadh","SB|Pacific/Guadalcanal","SC|Indian/Mahe","SD|Africa/Khartoum","SE|Europe/Stockholm","SG|Asia/Singapore","SH|Africa/Abidjan Atlantic/St_Helena","SI|Europe/Belgrade Europe/Ljubljana","SJ|Europe/Oslo Arctic/Longyearbyen","SK|Europe/Prague Europe/Bratislava","SL|Africa/Abidjan Africa/Freetown","SM|Europe/Rome Europe/San_Marino","SN|Africa/Abidjan Africa/Dakar","SO|Africa/Nairobi Africa/Mogadishu","SR|America/Paramaribo","SS|Africa/Juba","ST|Africa/Sao_Tome","SV|America/El_Salvador","SX|America/Curacao America/Lower_Princes","SY|Asia/Damascus","SZ|Africa/Johannesburg Africa/Mbabane","TC|America/Grand_Turk","TD|Africa/Ndjamena","TF|Indian/Reunion Indian/Kerguelen","TG|Africa/Abidjan Africa/Lome","TH|Asia/Bangkok","TJ|Asia/Dushanbe","TK|Pacific/Fakaofo","TL|Asia/Dili","TM|Asia/Ashgabat","TN|Africa/Tunis","TO|Pacific/Tongatapu","TR|Europe/Istanbul","TT|America/Port_of_Spain","TV|Pacific/Funafuti","TW|Asia/Taipei","TZ|Africa/Nairobi Africa/Dar_es_Salaam","UA|Europe/Simferopol Europe/Kiev Europe/Uzhgorod Europe/Zaporozhye","UG|Africa/Nairobi Africa/Kampala","UM|Pacific/Pago_Pago Pacific/Wake Pacific/Honolulu Pacific/Midway","US|America/New_York America/Detroit America/Kentucky/Louisville America/Kentucky/Monticello America/Indiana/Indianapolis America/Indiana/Vincennes America/Indiana/Winamac America/Indiana/Marengo America/Indiana/Petersburg America/Indiana/Vevay America/Chicago America/Indiana/Tell_City America/Indiana/Knox America/Menominee America/North_Dakota/Center America/North_Dakota/New_Salem America/North_Dakota/Beulah America/Denver America/Boise America/Phoenix America/Los_Angeles America/Anchorage America/Juneau America/Sitka America/Metlakatla America/Yakutat America/Nome America/Adak Pacific/Honolulu","UY|America/Montevideo","UZ|Asia/Samarkand Asia/Tashkent","VA|Europe/Rome Europe/Vatican","VC|America/Port_of_Spain America/St_Vincent","VE|America/Caracas","VG|America/Port_of_Spain America/Tortola","VI|America/Port_of_Spain America/St_Thomas","VN|Asia/Bangkok Asia/Ho_Chi_Minh","VU|Pacific/Efate","WF|Pacific/Wallis","WS|Pacific/Apia","YE|Asia/Riyadh Asia/Aden","YT|Africa/Nairobi Indian/Mayotte","ZA|Africa/Johannesburg","ZM|Africa/Maputo Africa/Lusaka","ZW|Africa/Maputo Africa/Harare"]}');

},{}]},["2PqY3","20BJq"], "20BJq", "parcelRequire8806")

